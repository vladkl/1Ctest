
///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ ФОРМЫ

&НаСервере
Перем мАгентСервера;           // COM подключение к центральному серверу


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПодготовитьМастер();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Настроено = Ложь;
		УстановитьЗначенияПоУмолчанию();
	Иначе
		ЗагрузитьЗначения();
	КонецЕсли;
	
	УстановитьДоступностьЭлементовУправления();
	ВерсияКонфигурации = Метаданные.Версия;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИнструкция(Команда)
	
	ИмяМакета = Элементы.ГруппаШагиНастройки.ТекущаяСтраница.Имя;
	ИмяМакета = СтрЗаменить(ИмяМакета, "Страница", "");
	ПараметрыФормы = Новый Структура("ИмяМакета,Заголовок", 
		ИмяМакета, Элементы.ГруппаШагиНастройки.ТекущаяСтраница.Заголовок);
	ФормаHTML = ПолучитьФорму("ОбщаяФорма.ПросмотрHTML", ПараметрыФормы);
	ФормаHTML.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ПерейтиДалее();
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ПерейтиДалее()
	
	Перем Результат;
	
	ИмяШага = ПолучитьИмяШага(Элементы.ГруппаШагиНастройки.ТекущаяСтраница);
	
	Если ИмяШага = "Готово" Тогда
		Отбор = Новый Структура("ИмяШага", ИмяШага);
		СтрокиТекущийШаг = Объект.СтатусыШагов.НайтиСтроки(Отбор);
		Если СтрокиТекущийШаг.Количество() > 0 Тогда
			СтрокиТекущийШаг[0].Статус = ПредопределенноеЗначение("Перечисление.СтатусыШаговМастераНастройки.ВыполненУспешно");
		КонецЕсли;
	КонецЕсли;
	
	Выполнить "Результат = СледующийШаг(""Шаг" + ИмяШага + """)";
	
	Если Результат <> Неопределено Тогда
		ПерейтиДалееЗавершение(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПерейтиДалее()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПерейтиДалееЗавершение(Успешно)
	
	Если АвтоПроверка И Не Успешно Тогда
		ВызватьИсключение "";
	КонецЕсли;
	
	Если Элементы.ГруппаШагиНастройки.ТекущаяСтраница.Имя = "СтраницаТехнологическийЖурнал" И Элементы.ГруппаШагиНастройки.ТекущаяСтраница.Картинка = 0 Тогда
		УстановитьСерверыКластера();
	КонецЕсли;
	
	ТекущийШагПроверен = Ложь;
	ПроверкаТекущего = Ложь;
	ОбновитьСтраницы();
	УстановитьДоступностьЭлементовУправления();
	
	// Установить признак завершенности настройки
	ТекущийШаг = Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаШагиНастройки.ТекущаяСтраница);
	ВсегоШагов = Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы.Количество();
	Объект.Настроено = (ТекущийШаг = ВсегоШагов - 1);
	
КонецПроцедуры // КомандаДалееЗавершение()

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ТекущийШагПроверен = Ложь;
	ПроверкаТекущего = Ложь;
	ПредыдущийШаг();
	ОбновитьСтраницы();
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьТекущий(Команда)
	
	ПроверкаТекущего = Истина;
	
	ИмяШага = ПолучитьИмяШага(Элементы.ГруппаШагиНастройки.ТекущаяСтраница);
	
	Элементы.ГруппаШагиНастройки.ТекущаяСтраница.Картинка = БиблиотекаКартинок.ОперацииМастераНеВыполнялся;
	Попытка
		Выполнить "Шаг" + ИмяШага + "()";
		Элементы.ГруппаШагиНастройки.ТекущаяСтраница.Картинка = БиблиотекаКартинок.ОперацииМастераВыполненУспешно;
	Исключение
		Элементы.ГруппаШагиНастройки.ТекущаяСтраница.Картинка = БиблиотекаКартинок.ОперацииМастераВыполненСОшибкой;
		ОписаниеОшибки = СформироватьОписаниеОшибки(ИнформацияОбОшибке());
		ИнтерфейсыКлиент.Предупредить(ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция СформироватьОписаниеОшибки(ИнформацияОбОшибке)
	
	ОписаниеОшибки = ИнформацияОбОшибке.Описание;
	ЭлементыОписанияОшибки = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(ОписаниеОшибки, "-");
	Если ЭлементыОписанияОшибки.Количество() > 0 Тогда
		КлючДиагностики = СокрЛП(ЭлементыОписанияОшибки[ЭлементыОписанияОшибки.ВГраница()]);
		Попытка
			ТекстПредупреждения = СловарьКлиентСервер.Получить(КлючДиагностики, Объект.СерверСУБД);
		Исключение
			Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
				ТекстПредупреждения = ИнформацияОбОшибке.Причина.Описание;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ОписаниеОшибки = ТекстПредупреждения + "
		                 |
		                 |" + ОписаниеОшибки;
	Иначе
		ОписаниеОшибки = ОписаниеОшибки + "
		                 |
		                 |Для получения подробной информации по настройке, нажмите кнопку ""Инструкция"".";
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции // СформироватьОписаниеОшибки()

&НаКлиенте
Процедура КомандаПроверитьВсе(Команда)
	
	ПроверитьВсе();
	
КонецПроцедуры

&НаКлиенте
Процедура КластерПриИзменении(Элемент)
	
	ИнформационнаяБазаПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
// Обработчик смены флажков у типов показателей
//
Процедура ТипыПоказателейВыбранПриИзменении(Элемент)
	
	Перем Доступно;
	
	ТекущиеДанные = Элементы.ТипыПоказателей.ТекущиеДанные;
	ТекущиеДанные.Выбран = ?(ТекущиеДанные.Выбран = 1, 1, 0);
	
	Если ТипЗнч(ТекущиеДанные.ТипПоказателя) = Тип("Строка") Тогда
		Для Каждого ТипПоказателя Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			Если Не ТипПоказателя.Заблокирован Тогда
				ТипПоказателя.Выбран = ТекущиеДанные.Выбран;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТекущиеДанные.Заблокирован Тогда
			Доступно = Истина;
			//Выполнить "Доступно = Проверить" + ОбщегоНазначения.ИмяМетаданных(глИменаМетаданных, ТекущиеДанные.ТипПоказателя) + "()";
			
			Если Не Доступно Тогда
				ИнтерфейсыКлиент.Предупредить(ТекущиеДанные.Причина);
				ТекущиеДанные.Выбран = 0;
			Иначе
				ТекущиеДанные.Заблокирован = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТипыПоказателейВыбранПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ТипыПоказателейВыбранПриИзмененииНаСервере()
	
	ОбновитьСостояниеГруппТиповПоказателей();
	
КонецПроцедуры // ТипыПоказателейВыбранПриИзмененииНаСервере()

&НаКлиенте
// Обработчик сворачивания уровня иерархии
//
Процедура ТипыПоказателейПередСворачиванием(Элемент, Строка, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик активизации строки типа показателя производительности
//
Процедура ТипыПоказателейПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ТипыПоказателей.ТекущаяСтрока <> Неопределено Тогда
		ДанныеСтроки = ТипыПоказателей.НайтиПоИдентификатору(Элементы.ТипыПоказателей.ТекущаяСтрока);
		ТипПоказателяОписание = ДанныеСтроки.Описание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаШагиНастройкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) <> ТекущийШаг Тогда
		Элемент.ТекущаяСтраница = Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы[ТекущийШаг];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяБазаПриИзменении(Элемент)
	
	ПредыдущееИмяИБ = Объект.ИмяИБ;
	Объект.ИмяИБ = ИмяИБ;
	ОписаниеСУБД = ПолучитьОписаниеСУБД();
	Объект.ТипСУБД = ОписаниеСУБД.Тип;
	Объект.СерверСУБД = ОписаниеСУБД.ИмяСервера;
	УстановитьОписаниеСУБД();
	ТипыПоказателейПоУмолчанию();
	ТекущийШагПроверен = Ложь;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяИБПриИзменении(Элемент)
	ТекущийШагПроверен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПарольПользователяИБПриИзменении(Элемент)
	ТекущийШагПроверен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УдалятьТрассировкиПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

&НаСервере
// Установить доступность элементов упраления формы
//
Процедура УстановитьДоступностьЭлементовУправления()
	
	ТекущийШаг = Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаШагиНастройки.ТекущаяСтраница);
	Элементы.ФормаКомандаНазад.Доступность = ТекущийШаг > 0;
	Элементы.ФормаКомандаПроверитьВсе.Доступность = ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.КаталогТрассировкиСетевой.Доступность = Объект.УдалятьТрассировки;
	ПоляВводаДоступны = (Объект.СпособАутентификации = ПредопределенноеЗначение("Перечисление.СпособыАутентификации.ПоЛогинуИПаролю"));
	//Элементы.АутентификацияСУБД.Доступность = Не Элементы.АутентификацияСУБД.Доступность;
	Элементы.ИмяПользователяСУБД.Доступность = ПоляВводаДоступны;
	Элементы.ПарольПользователяСУБД.Доступность = ПоляВводаДоступны;
	
КонецПроцедуры // УстановитьДоступностьЭлементовУправления()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Помещение данных в безопасное хранилище
	ДанныеАутентификации = Новый Структура;
	ДанныеАутентификации.Вставить("ИмяПользователяСУБД", ИмяПользователяСУБД);
	ДанныеАутентификации.Вставить("ПарольПользователяСУБД", ПарольПользователяСУБД);
	
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСведений.БезопасноеХранилище.ЗаписатьДанные(Объект.Ссылка, ДанныеАутентификации);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СерверыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Серверы.ТекущиеДанные <> Неопределено Тогда
		СерверыПриАктивизацииСтрокиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СерверыПриАктивизацииСтрокиНаСервере()
	
	СтрокаСервера = Объект.Серверы.НайтиПоИдентификатору(Элементы.Серверы.ТекущаяСтрока);
	Если СтрокаСервера <> Неопределено Тогда
		ТаблицаСчетчиков = ДанныеФормыВЗначение(СтрокаСервера.ТаблицаСчетчиков, Тип("ТаблицаЗначений"));
		СчетчикиОС.Загрузить(ТаблицаСчетчиков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СчетчикиОСПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиОСПослеУдаления(Элемент)
	
	ОбновитьСчетчики();
	
КонецПроцедуры

&НаСервере
Процедура СчетчикиОСПриОкончанииРедактированияНаСервере()
	
	ОбновитьСчетчики();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСчетчики()
	
	СтрокаСервера = Объект.Серверы.НайтиПоИдентификатору(Элементы.Серверы.ТекущаяСтрока);
	Если СтрокаСервера <> Неопределено Тогда
		ТаблицаСчетчиков = ДанныеФормыВЗначение(СчетчикиОС, Тип("ТаблицаЗначений"));
		
		ТаблицаОчищена = Ложь;
		КоличествоСтрок = ТаблицаСчетчиков.Количество();
		Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
			Индекс = КоличествоСтрок - ОбратныйИндекс;
			ТекСтр = ТаблицаСчетчиков[Индекс];
			Если Не ЗначениеЗаполнено(ТекСтр.Счетчик) Тогда
				ТаблицаСчетчиков.Удалить(Индекс);
				ТаблицаОчищена = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ТаблицаОчищена Тогда
			ЗначениеВДанныеФормы(ТаблицаСчетчиков, СчетчикиОС);
		КонецЕсли;
		
		СтрокаСервера.ТаблицаСчетчиков.Загрузить(ТаблицаСчетчиков);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерверыСпособСбораСчетчиковПриИзменении(Элемент)
	
	Если Элементы.Серверы.ТекущиеДанные.СпособСбораСчетчиков = ПредопределенноеЗначение("Перечисление.СпособыСбораСчетчиков.PDH") Тогда
		Элементы.Серверы.ТекущиеДанные.АгентЦКК = Неопределено;
	ИначеЕсли Элементы.Серверы.ТекущиеДанные.СпособСбораСчетчиков = ПредопределенноеЗначение("Перечисление.СпособыСбораСчетчиков.АгентЦКК") Тогда
		Элементы.Серверы.ТекущиеДанные.ЯзыкОС = Неопределено;
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ДАННЫЕ

&НаСервере
// Установить значения по-умолчанию для подключения
//
Процедура УстановитьЗначенияПоУмолчанию()
	
	// Порт центрального сервера
	ПортЦентральногоСервера = 1540;
	
	// Кластер исследуемой ИБ и все его зависимости
	КластерПоУмолчанию();
	
	// Способ аутентификации на сервере СУБД
	Объект.СпособАутентификации = Перечисления.СпособыАутентификации.Windows;
	
КонецПроцедуры // УстановитьЗначенияПоУмолчанию()

&НаСервере
// Установить типы показателей по-умолчанию
//
Процедура ТипыПоказателейПоУмолчанию()
	
	Объект.ИспользоватьПП1С = Истина;
	Объект.ИспользоватьППОСВзаимоблокировки = Истина;
	Объект.ИспользоватьППОСТаймауты = Истина;
	Объект.ИспользоватьППАнализЗапросов = Истина;
	Объект.ИспользоватьППАнализОжиданий = Истина;
	Объект.ИспользоватьППАнализВзаимоблокировок = Истина;
	Объект.ИспользоватьППАнализГранулярностиБлокировок = Ложь;
	Объект.ИспользоватьППАнализСерверныхВызовов = Истина;
	Объект.ИспользоватьПППроизвольныеСчетчикиОС = Истина;
	ЗагрузитьТипыПоказателейВРедактор();
	
КонецПроцедуры // ТипыПоказателейПоУмолчанию()

&НаСервере
// Установить настройки кластера в значения по-умолчанию
//
Процедура КластерПоУмолчанию()
	
	СписокВыбора = Элементы.Кластер.СписокВыбора;
	СписокВыбора.Очистить();
	Кластер = "";
	АдминистраторКластера = "";
	ПарольАдминистратораКластера = "";
	
	ИнформационнаяБазаПоУмолчанию();
	НастройкиТЖПоУмолчанию();
	
КонецПроцедуры // КластерПоУмолчанию()

&НаСервере
// Установить настройки исследуемой ИБ в значения по-умолчанию
//
Процедура ИнформационнаяБазаПоУмолчанию()
	
	СписокВыбора = Элементы.ИнформационнаяБаза.СписокВыбора;
	СписокВыбора.Очистить();
	ВыбраннаяИБ = "";
	ИмяИБ = ВыбраннаяИБ;
	ИмяПользователяИБ = "";
	ПарольПользователяИБ = "";
	
	ТипыПоказателейПоУмолчанию();
	
КонецПроцедуры // ИнформационнаяБазаПоУмолчанию()

&НаСервере
// Установить настройки ТЖ по-умолчанию
//
Процедура НастройкиТЖПоУмолчанию()
	
	Объект.ИменаКаталоговТЖ.Очистить();
	
КонецПроцедуры // НастройкиТЖПоУмолчанию()

&НаСервере
// Загрузить значения подключения из справочника
//
Процедура ЗагрузитьЗначения()
	
	// Центральный сервер исследуемой ИБ
	ПараметрыСервера = ИнформационнаяБаза.ПолучитьПараметрыСервера(Объект.СерверИБ);
	ЦентральныйСервер = ПараметрыСервера.ИмяСервера;
	ПортЦентральногоСервера = ПараметрыСервера.ПортАгента;
	
	// Кластер исследуемой ИБ
	СписокВыбораКластера = Элементы.Кластер.СписокВыбора;
	СписокВыбораКластера.Очистить();
	ПредставлениеКластера = ПредставлениеКластера(ПараметрыСервера.ПортКластера);
	СписокВыбораКластера.Добавить(ПараметрыСервера.ПортКластера, ПредставлениеКластера);
	Кластер = ПараметрыСервера.ПортКластера;
	АдминистраторКластера = Объект.АдминистраторКластера;
	ПарольАдминистратораКластера = Объект.ПарольАдминистратораКластера;
	
	// Исследуемая информационная база
	СписокВыбораИБ = Элементы.ИнформационнаяБаза.СписокВыбора;
	СписокВыбораИБ.Очистить();
	ПредставлениеИБ = ПредставлениеИБ(Объект.ИмяИБ);
	СписокВыбораИБ.Добавить(Объект.ИмяИБ, ПредставлениеИБ);
	ИмяИБ = Объект.ИмяИБ;
	ИмяПользователяИБ = Объект.ИмяПользователяИБ;
	ПарольПользователяИБ = Объект.ПарольПользователяИБ;
	Если Не ЗначениеЗаполнено(Объект.СпособАутентификации) Тогда
		Объект.СпособАутентификации = Перечисления.СпособыАутентификации.Windows;
	КонецЕсли;
	
	// Типы показателей
	ЗагрузитьТипыПоказателейВРедактор();
	
	// Счетчики производительности ОС
	ЗагрузитьСчетчикиПроизводительностиВРедактор();
	
	// При необходимости, полное имя файла logcfg.xml заменить на его каталог
	Для Каждого СтрокаНастроек Из Объект.ИменаКаталоговТЖ Цикл
		Если ВРег(Прав(СтрокаНастроек.Конфигурация, 10)) = "LOGCFG.XML" Тогда
			СтрокаНастроек.Конфигурация = ОбщегоНазначенияКлиентСервер.ИмяКаталога(СтрокаНастроек.Конфигурация);
		КонецЕсли;
	КонецЦикла;
	
	// Данные из безопасного хранилища
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(Объект.Ссылка);
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации <> Неопределено Тогда
		ИмяПользователяСУБД = ДанныеАутентификации.ИмяПользователяСУБД;
		ПарольПользователяСУБД = ДанныеАутентификации.ПарольПользователяСУБД;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗначения()

&НаСервере
// Загрузить типы показателей в редактор выбора типов показателей
//
Процедура ЗагрузитьТипыПоказателейВРедактор()
	
	ДеревоТипыПоказателей = РеквизитФормыВЗначение("ТипыПоказателей");
	
	ГруппаОперативные = ДеревоТипыПоказателей.Строки[0];
	ТипПредприятие1С = ГруппаОперативные.Строки.Найти
		(Перечисления.ТипыПоказателей.Предприятие1С,
		"ТипПоказателя");
	ТипОСВзаимоблокировки = ГруппаОперативные.Строки.Найти(
		Перечисления.ТипыПоказателей.ОСВзаимоблокировки,
		"ТипПоказателя");
	ТипОСТаймауты = ГруппаОперативные.Строки.Найти(
		Перечисления.ТипыПоказателей.ОСТаймауты,
		"ТипПоказателя");
	ТипПроизвольныеСчетчикиОС = ГруппаОперативные.Строки.Найти(
		Перечисления.ТипыПоказателей.ПроизвольныеСчетчикиОС,
		"ТипПоказателя");
	ГруппаАналитические = ДеревоТипыПоказателей.Строки[1];
	ТипАнализЗапросов = ГруппаАналитические.Строки.Найти(
		Перечисления.ТипыПоказателей.АнализЗапросов,
		"ТипПоказателя");
	ГруппаАнализОжиданий = ГруппаАналитические.Строки.Найти(
		Перечисления.ТипыПоказателей.АнализОжиданий,
		"ТипПоказателя");
	ТипАнализГранулярностиБлокировок = ГруппаАнализОжиданий.Строки.Найти(
		Перечисления.ТипыПоказателей.АнализГранулярностиБлокировок,
		"ТипПоказателя");
	ТипАнализВзаимоблокировок = ГруппаАналитические.Строки.Найти(
		Перечисления.ТипыПоказателей.АнализВзаимоблокировок,
		"ТипПоказателя");
	ТипАнализСерверныхВызовов = ГруппаАналитические.Строки.Найти(
		Перечисления.ТипыПоказателей.АнализСерверныхВызовов,
		"ТипПоказателя");
	
	ТипПредприятие1С.Выбран = Объект.ИспользоватьПП1С;
	ТипОСВзаимоблокировки.Выбран = Объект.ИспользоватьППОСВзаимоблокировки;
	ТипОСТаймауты.Выбран = Объект.ИспользоватьППОСТаймауты;
	ТипАнализЗапросов.Выбран = Объект.ИспользоватьППАнализЗапросов;
	ТипПроизвольныеСчетчикиОС.Выбран = Объект.ИспользоватьПППроизвольныеСчетчикиОС;
	ГруппаАнализОжиданий.Выбран = Объект.ИспользоватьППАнализОжиданий;
	ТипАнализВзаимоблокировок.Выбран = Объект.ИспользоватьППАнализВзаимоблокировок;
	ТипАнализГранулярностиБлокировок.Выбран = Объект.ИспользоватьППАнализГранулярностиБлокировок;
	ТипАнализСерверныхВызовов.Выбран = Объект.ИспользоватьППАнализСерверныхВызовов;
	
	ЗначениеВРеквизитФормы(ДеревоТипыПоказателей, "ТипыПоказателей");
	
	ОбновитьСостояниеГруппТиповПоказателей();
	
КонецПроцедуры // ЗагрузитьТипыПоказателейВРедактор()

&НаСервере
// Загрузить счетчики производительности в редактор
//
Процедура ЗагрузитьСчетчикиПроизводительностиВРедактор()
	
	КоличествоСерверов = Объект.Серверы.Количество();
	Для НомерСтроки = 1 По КоличествоСерверов Цикл
		СтрокаСервера = Объект.Серверы.Получить(НомерСтроки-1);
		СтрокаСервера.ТаблицаСчетчиков.Очистить();
		Для Каждого СтрокаСчетчика Из Объект.СчетчикиОС Цикл
			Если СтрокаСчетчика.НомерСтрокиСервера = НомерСтроки Тогда
				НоваяСтрока = СтрокаСервера.ТаблицаСчетчиков.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСчетчика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСчетчикиПроизводительностиВРедактор()

// Загрузить показатели в табличную часть СчетчикиОС
//
Процедура ЗагрузитьСчетчикиПроизводительностиВОбъект()
	
	Объект.СчетчикиОС.Очистить();
	КоличествоСерверов = Объект.Серверы.Количество();
	Для НомерСтроки = 1 По КоличествоСерверов Цикл
		СтрокаСервера = Объект.Серверы.Получить(НомерСтроки-1);
		Для Каждого СтрокаСчетчика Из СтрокаСервера.ТаблицаСчетчиков Цикл
			НоваяСтрока = Объект.СчетчикиОС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСчетчика);
			НоваяСтрока.НомерСтрокиСервера = НомерСтроки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСчетчикиПроизводительностиВОбъект()

&НаСервере
Процедура УстановитьСерверыКластера()
	Попытка
		Сервера = мАгентСервера.GetWorkingServers(Кластер);
		Для Каждого ТекСервер Из Сервера Цикл
			НовСтрока = Объект.ИменаКаталоговТЖ.Добавить();
			НовСтрока.СерверКластера = СтрЗаменить(СтрЗаменить(ТекСервер.HostName, "[", ""), "]", "");
		КонецЦикла;
	Исключение
	КонецПопытки;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// МАСТЕР

&НаСервере
// Подготовить мастер перед работой
//
// Параметры:
//  Шаги - ТаблицаЗначений, содержащая заполняемые шаги
//  ФормаСтраниц - Панель, закладок страниц настройки
//
Процедура ПодготовитьМастер()
	
	АвтоПроверка = Ложь;
	ЗаполнитьТипыПоказателей();
	ОбновитьСписокШагов();
	
КонецПроцедуры // ПодготовитьМастер()

&НаСервере
// Обновить список шагов в объекте справочника, которые предстоит выполнить мастеру
//
// Параметры:
//
Процедура ОбновитьСписокШагов()
	
	//СтатусыШагов = Объект.СтатусыШагов.Выгрузить();
	Отбор = Новый Структура("ИмяШага");
	Для Каждого Страница Из Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы Цикл
		ИмяШага = СтрЗаменить(Страница.Имя, "Страница", "");
		Отбор.ИмяШага = ИмяШага;
		СтрокиСтатуса = Объект.СтатусыШагов.НайтиСтроки(Отбор);
		Если СтрокиСтатуса.Количество() = 0 Тогда
			НовыйШаг = Объект.СтатусыШагов.Добавить();
			НовыйШаг.ИмяШага = ИмяШага;
			НовыйШаг.Статус = Перечисления.СтатусыШаговМастераНастройки.НеВыполнялся;
			Страница.Картинка = БиблиотекаКартинок.ОперацииМастераНеВыполнялся;
		Иначе
			СтатусШага = СтрокиСтатуса[0].Статус;
			Если ЗначениеЗаполнено(СтатусШага) Тогда
				ИндексСтатуса = Перечисления.СтатусыШаговМастераНастройки.Индекс(СтатусШага);
				ИмяСтатуса = СтатусШага.Метаданные().ЗначенияПеречисления[ИндексСтатуса].Имя;
				Страница.Картинка = БиблиотекаКартинок["ОперацииМастера" + ИмяСтатуса];
			Иначе
				СтрокиСтатуса[0].Статус = Перечисления.СтатусыШаговМастераНастройки.НеВыполнялся;
				Страница.Картинка = БиблиотекаКартинок.ОперацииМастераНеВыполнялся;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокШагов()

&НаКлиенте
// Проверить все шаги сразу
//
Процедура ПроверитьВсе()
	
	АвтоПроверка = Истина;
	
	КоличествоШагов = Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы.Количество();
	Попытка
		ИндексТекущейСтраницы = Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаШагиНастройки.ТекущаяСтраница);
		Пока ИндексТекущейСтраницы+1 < КоличествоШагов Цикл
			Результат = ПерейтиДалее();
			Если Результат = Истина Тогда
				ИндексТекущейСтраницы = Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаШагиНастройки.ТекущаяСтраница);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	АвтоПроверка = Ложь;
	
КонецПроцедуры // ПроверитьВсе()

&НаКлиенте
// Перейти на следующий шаг мастера
//
// Параметры:
//  ФормаШагов - ТабличноеПоле, шаги мастера
//  Обработчик - Строка, имя обработчика перехода на следующий шаг
//
Функция СледующийШаг(Обработчик)
	
	Перем Результат;
	
	ШагиНастройки = Элементы.ГруппаШагиНастройки;
	
	НомерТекущегоШага = ТекущийШаг;
	ВсегоШагов = ШагиНастройки.ПодчиненныеЭлементы.Количество();
	
	Если НомерТекущегоШага < ВсегоШагов Тогда
		Если Не ТекущийШагПроверен Тогда
			Попытка
				Выполнить "Результат = " + Обработчик + "()";
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ПроверкаШагаОшибка(ИнформацияОбОшибке);
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Результат = Истина;
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			ПроверкаШагаУспешно();
			ПерейтиНаСледующийШаг(НомерТекущегоШага);
			ПерейтиДалееЗавершение(Результат);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СледующийШаг()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПроверкаШагаОшибка(ИнформацияОбОшибке)
	
	АвтоПроверка = Ложь;
	
	ШагиНастройки = Элементы.ГруппаШагиНастройки;
	ШагиНастройки.ТекущаяСтраница.Картинка = БиблиотекаКартинок.ОперацииМастераВыполненСОшибкой;
	Отбор = Новый Структура("ИмяШага", ПолучитьИмяШага(Элементы.ГруппаШагиНастройки.ТекущаяСтраница));
	СтрокиСтатусШага = Объект.СтатусыШагов.НайтиСтроки(Отбор);
	Если СтрокиСтатусШага.Количество() > 0 Тогда
		СтрокиСтатусШага[0].Статус = ПредопределенноеЗначение("Перечисление.СтатусыШаговМастераНастройки.ВыполненСОшибкой");
	КонецЕсли;
	ОписаниеОшибки = СформироватьОписаниеОшибки(ИнформацияОбОшибке);
	ИнтерфейсыКлиент.Предупредить(ОписаниеОшибки);
	
КонецПроцедуры // СледующийШагОшибка()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПроверкаШагаУспешно()
	
	ШагиНастройки = Элементы.ГруппаШагиНастройки;
	ШагиНастройки.ТекущаяСтраница.Картинка = БиблиотекаКартинок.ОперацииМастераВыполненУспешно;
	Отбор = Новый Структура("ИмяШага", ПолучитьИмяШага(Элементы.ГруппаШагиНастройки.ТекущаяСтраница));
	СтрокиСтатусШага = Объект.СтатусыШагов.НайтиСтроки(Отбор);
	Если СтрокиСтатусШага.Количество() > 0 Тогда
		СтрокиСтатусШага[0].Статус = ПредопределенноеЗначение("Перечисление.СтатусыШаговМастераНастройки.ВыполненУспешно");
	КонецЕсли;
	
КонецПроцедуры // СледующийШагУспешно()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПерейтиНаСледующийШаг(НомерТекущегоШага)
	
	Перем ШагНеобходим;
	
	ШагиНастройки = Элементы.ГруппаШагиНастройки;
	ВсегоШагов = ШагиНастройки.ПодчиненныеЭлементы.Количество();
	НомерТекущегоШага = НомерТекущегоШага + 1;
	Для НовыйШаг = НомерТекущегоШага По ВсегоШагов - 1 Цикл
		Попытка
			Выполнить "ШагНеобходим = ШагНеобходим" + ПолучитьИмяШага(ШагиНастройки.ПодчиненныеЭлементы[НовыйШаг]) + "()";
		Исключение
			ШагиНастройки.ПодчиненныеЭлементы[НомерТекущегоШага].Картинка = БиблиотекаКартинок.ОперацииМастераВыполненСОшибкой;
			Отбор = Новый Структура("ИмяШага", ПолучитьИмяШага(Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы[НомерТекущегоШага]));
			СтрокиСтатусШага = Объект.СтатусыШагов.НайтиСтроки(Отбор);
			Если СтрокиСтатусШага.Количество() > 0 Тогда
				СтрокиСтатусШага[0].Статус = ПредопределенноеЗначение("Перечисление.СтатусыШаговМастераНастройки.ВыполненСОшибкой");
			КонецЕсли;
	
			ОписаниеОшибки = ИнформацияОбОшибке().Описание + "
			                 |
			                 |Для получения подробной информации по настройке, нажмите кнопку ""Инструкция"".";
			ИнтерфейсыКлиент.Предупредить(ОписаниеОшибки);
			Прервать;
		КонецПопытки;
		
		Если ШагНеобходим Тогда
			Прервать;
		Иначе
			ШагиНастройки.ПодчиненныеЭлементы[НомерТекущегоШага].Картинка = БиблиотекаКартинок.ОперацииМастераНеТребуется;
			Отбор = Новый Структура("ИмяШага", ПолучитьИмяШага(Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы[НомерТекущегоШага]));
			СтрокиСтатусШага = Объект.СтатусыШагов.НайтиСтроки(Отбор);
			Если СтрокиСтатусШага.Количество() > 0 Тогда
				СтрокиСтатусШага[0].Статус = ПредопределенноеЗначение("Перечисление.СтатусыШаговМастераНастройки.НеТребуется");
			КонецЕсли;
			
			НомерТекущегоШага = НомерТекущегоШага + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если НовыйШаг < ВсегоШагов Тогда
		ШагиНастройки.ТекущаяСтраница = ШагиНастройки.ПодчиненныеЭлементы[НомерТекущегоШага];
	КонецЕсли;
	
КонецПроцедуры // ПерейтиНаСледующийШаг()

&НаКлиенте
// Перейти на предыдущий шаг мастера
//
// Параметры:
//  ФормаШагов - ТабличноеПоле, шаги мастера
//
Процедура ПредыдущийШаг()
	
	Перем ШагНеобходим;
	
	ШагиНастройки = Элементы.ГруппаШагиНастройки;
	НовыйШаг = ТекущийШаг;
	Продолжать = Истина;
	
	Пока НовыйШаг >= 0 И Продолжать Цикл
		НовыйШаг = НовыйШаг - 1;
		
		Попытка
			Выполнить "ШагНеобходим = ШагНеобходим" + ПолучитьИмяШага(ШагиНастройки.ПодчиненныеЭлементы[НовыйШаг]) + "(Ложь)";
		Исключение
			ШагНеобходим = Истина;
		КонецПопытки;
		
		Если ШагНеобходим Тогда
			Продолжать = Ложь;
		КонецЕсли;
		
		ШагиНастройки.ТекущаяСтраница = ШагиНастройки.ПодчиненныеЭлементы[НовыйШаг];
	КонецЦикла;
	
КонецПроцедуры // ПредыдущийШаг()

&НаСервере
// Заполнить типы показателей, которые будут использоваться при работе ЦУП с
// исследуемой информационной базой
//
Процедура ЗаполнитьТипыПоказателей()
	
	ДеревоТипыПоказателей = РеквизитФормыВЗначение("ТипыПоказателей");
	
	// Группа "Количественные показатели"
	ГруппаОперативные = ДеревоТипыПоказателей.Строки.Добавить();
	ГруппаОперативные.ТипПоказателя = "Оперативные показатели";
	ГруппаОперативные.Описание = "Показатели, значения которых можно получить в режиме реального времени.";
	
	// "Взаимоблокировки"
	ТипОСВзаимоблокировки = ГруппаОперативные.Строки.Добавить();
	ТипОСВзаимоблокировки.ТипПоказателя = Перечисления.ТипыПоказателей.ОСВзаимоблокировки;
	ТипОСВзаимоблокировки.Описание = "При помощи такого показателея можно оценить:
	                                  |  - количество взаимоблокировок.";
	
	// "Таймауты"
	ТипОСТаймауты = ГруппаОперативные.Строки.Добавить();
	ТипОСТаймауты.ТипПоказателя = Перечисления.ТипыПоказателей.ОСТаймауты;
	ТипОСТаймауты.Описание = "При помощи такого показателя можно оценить:
	                                  |  - количество таймаутов.";
	
	// "Счетчики ОС"
	ТипОСТаймауты = ГруппаОперативные.Строки.Добавить();
	ТипОСТаймауты.ТипПоказателя = Перечисления.ТипыПоказателей.ПроизвольныеСчетчикиОС;
	ТипОСТаймауты.Описание = "Произвольные счетчики производительности, собираемые на уровне операционной системы контролируемого сервера.
	                         |При помощи таких показателей можно оценить:
	                         |  - загруженность оборудования
	                         |  - наличие узких мест на уровне СУБД.";
	
	// "1С:Предприятие"
	ТипПредприятие1С = ГруппаОперативные.Строки.Добавить();
	ТипПредприятие1С.ТипПоказателя = Перечисления.ТипыПоказателей.Предприятие1С;
	ТипПредприятие1С.Описание = "Показатели, значения которых получаются от сервера исследуемой информационной базы. При помощи таких показателей можно оценить:
	                            |  - длительность выполнений запросов;
	                            |  - длительность ожиданий на блокировках;
	                            |  - проблемы с параллельностью работы.";
	
	// Группа "Аналитические показатели"
	ГруппаАналитические = ДеревоТипыПоказателей.Строки.Добавить();
	ГруппаАналитические.ТипПоказателя = "Аналитические показатели";
	ГруппаАналитические.Описание = "Показатели, предназначенные для сбора и анализа информации об оптимальности работы исследуемой информационной базы. Значения аналитических показателей в режиме реального времени не доступны. Значения таких показателей доступны в режиме просмотра, после выполнения анализа полученных ими данных.";
	
	// "Анализ запросов"
	ТипАнализЗапросов = ГруппаАналитические.Строки.Добавить();
	ТипАнализЗапросов.ТипПоказателя = Перечисления.ТипыПоказателей.АнализЗапросов;
	ТипАнализЗапросов.Описание = "Позволяет определить наиболее длительные и частые запросы, выполняющиеся в исследуемой информационной базе.";
	
	// "Анализ ожиданий на блокировках"
	ТипАнализОжиданий = ГруппаАналитические.Строки.Добавить();
	ТипАнализОжиданий.ТипПоказателя = Перечисления.ТипыПоказателей.АнализОжиданий;
	ТипАнализОжиданий.Описание = "Позволяет определить причины ожиданий на блокировках в исследуемой информационной базе.";
	
	ИнформацияОГранулярности = ТипАнализОжиданий.Строки.Добавить();
	ИнформацияОГранулярности.ТипПоказателя = Перечисления.ТипыПоказателей.АнализГранулярностиБлокировок;
	ИнформацияОГранулярности.Описание = "Позволяет получить детальную информацию об установленных блокировках СУБД, однако значительно увеличивает время анализа";
	
	// "Анализ взаимоблокировок"
	ТипАнализВзаимоблокировок = ГруппаАналитические.Строки.Добавить();
	ТипАнализВзаимоблокировок.ТипПоказателя = Перечисления.ТипыПоказателей.АнализВзаимоблокировок;
	ТипАнализВзаимоблокировок.Описание = "Позволяет определить причины взаимоблокировок в исследуемой информационной базе.";
	
	// "Анализ серверных вызовов"
	ТипАнализСерверныхВызовов = ГруппаАналитические.Строки.Добавить();
	ТипАнализСерверныхВызовов.ТипПоказателя = Перечисления.ТипыПоказателей.АнализСерверныхВызовов;
	ТипАнализСерверныхВызовов.Описание = "Позволяет определить длительные и частые серверные вызовы, выполняющиеся в исследуемой информационной базе.";
	
	ЗначениеВРеквизитФормы(ДеревоТипыПоказателей, "ТипыПоказателей");
	
КонецПроцедуры // ЗаполнитьТипыПоказателей()

&НаСервере
// Обновить состояние групп типов показателей
//
// Параметры:
//  Типы - ДеревоЗначений, типы показателей производительности
//
Процедура ОбновитьСостояниеГруппТиповПоказателей()
	
	Для Каждого ГруппаТипов Из ТипыПоказателей.ПолучитьЭлементы() Цикл
		Выбран = Ложь;
		НеВыбран = Ложь;
		
		Для Каждого ТипПоказателя Из ГруппаТипов.ПолучитьЭлементы() Цикл
			Если ТипПоказателя.Выбран = 0 Тогда
				НеВыбран = Истина;
			Иначе
				Выбран = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ГруппаТипов.Выбран = ?(Выбран И НеВыбран, 2, Выбран И Не НеВыбран);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСостояниеГруппТиповПоказателей()

&НаКлиенте
// Обновить страницы на основе списка шагов
//
// Параметры:
//  ФормаШагов - ТабличноеПоле, шаги мастера
//  ФормаСтраниц - Панель, закладок страниц настройки
//
Процедура ОбновитьСтраницы()
	
	ТекущийШаг = Элементы.ГруппаШагиНастройки.ПодчиненныеЭлементы.Индекс(Элементы.ГруппаШагиНастройки.ТекущаяСтраница);
	
КонецПроцедуры // ОбновитьСтраницы()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - НАЧАЛО

&НаКлиенте
// Определить необходимость шага "Начало"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимНачало(Вперед = Истина)
	
	Возврат Истина;
	
КонецФункции // ШагНеобходимНачало()

&НаКлиенте
// Шаг "Начало"
//
Функция ШагНачало()
	
	Возврат Истина;
	
КонецФункции // ШагНачало()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - НАИМЕНОВАНИЕ

&НаКлиенте
// Определить необходимость шага "Наименование"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимНаименованиеПодключения(Вперед = Истина)
	
	Возврат Истина;
	
КонецФункции // ШагНеобходимНаименование()

&НаКлиенте
// Шаг "Наименование"
// Выполнить шаг установки наименования подключения
//
Функция ШагНаименованиеПодключения()
	
	ПроверитьНаименованиеПодключения(Наименование, Объект.Наименование);
	
	Возврат Истина;
	
КонецФункции // ШагНаименование()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - ЦЕНТРАЛЬНЫЙ СЕРВЕР

&НаКлиенте
// Определить необходимость шага "Центральный сервер"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимЦентральныйСервер(Вперед = Истина)
	
	Возврат Истина;
	
КонецФункции // ШагНеобходимЦентральныйСервер()

&НаКлиенте
// Шаг "Центральный сервер"
// Выполнить шаг настройки подключения к центральному серверу исследуемой ИБ
//
Функция ШагЦентральныйСервер()
	
	// Проверить и подключиться к центральному серверу исследуемой ИБ
	ПроверитьЦентральныйСервер(ЦентральныйСервер, ПортЦентральногоСервера);
	
	// Сохранить список часто используемых серверов
	СписокВыбора = Элементы.ЦентральныйСервер.СписокВыбора;
	Если СписокВыбора.НайтиПоЗначению(ЦентральныйСервер) = Неопределено Тогда
		СписокВыбора.Добавить(ЦентральныйСервер);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ШагЦентральныйСервер()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - COM-СОЕДИНИТЕЛЬ

// Определить необходимость шага "COMСоединитель"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимCOMСоединитель(Вперед = Истина)
	
	Попытка
		НеобходимаПроверка = ПроверитьДоступностьCOMСоединителяНаСервере();
	Исключение
		Возврат Истина;
	КонецПопытки;
	
	Возврат НеобходимаПроверка;
	
КонецФункции // ШагНеобходимCOMСоединитель()

// Шаг "COMСоединитель"
// Выполнить шаг установки наименования подключения
//
Функция ШагCOMСоединитель()
	
	ПроверитьДоступностьCOMСоединителяНаСервере();
	
	Если Не Объект.COMКоннекторЗарегистрирован Тогда
		ВызватьИсключение "Выполните настройку COM-коннектора соответствии с инструкцией и затем подтвердите выполнение отметкой флажка ""COM-коннектор зарегистрирован"".";
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ШагCOMСоединитель()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - КЛАСТЕР

&НаКлиенте
// Определить необходимость шага "Кластер"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимКластер(Вперед = Истина)
	
	Возврат Истина;
	
КонецФункции // ШагНеобходимКластер()

&НаКлиенте
// Шаг "Кластер"
// Выполнить шаг выбора кластера исследуемой ИБ
//
Функция ШагКластер()
	
	Если ПустаяСтрока(Кластер) Тогда
		ВызватьИсключение "Не указан кластер исследуемой информационной базы";
	КонецЕсли;
	
	Если Объект.АдминистраторКластера <> АдминистраторКластера Тогда
		Объект.АдминистраторКластера = АдминистраторКластера;
		Модифицированность = Истина;
	КонецЕсли;
	Если Объект.ПарольАдминистратораКластера <> ПарольАдминистратораКластера Тогда
		Объект.ПарольАдминистратораКластера = ПарольАдминистратораКластера;
		Модифицированность = Истина;
	КонецЕсли;
	ПроверитьКластерНаСервере(Кластер,
	                          АдминистраторКластера,
	                          ПарольАдминистратораКластера);
	
	Возврат Истина;
	
КонецФункции // ШагКласте()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - ИНФОРМАЦИОННАЯ БАЗА

&НаКлиенте
// Определить необходимость шага "Информационная база"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимИнформационнаяБаза(Вперед = Истина)
	
	Возврат Истина;
	
КонецФункции // ШагНеобходимИнформационнаяБаза()

&НаКлиенте
// Шаг "Информационноая база"
// Выполнить шаг выбора исследуемой информационной базы
//
Функция ШагИнформационнаяБаза()
	
	Если ПустаяСтрока(ИмяИБ) Тогда
		ВызватьИсключение "Не выбрана исследуемая информационная база.";
	КонецЕсли;
	Если Объект.ИмяПользователяИБ <> ИмяПользователяИБ Тогда
		Объект.ИмяПользователяИБ = ИмяПользователяИБ;
		Модифицированность = Истина;
	КонецЕсли;
	Если Объект.ПарольПользователяИБ <> ПарольПользователяИБ Тогда
		Объект.ПарольПользователяИБ = ПарольПользователяИБ;
		Модифицированность = Истина;
	КонецЕсли;
	
	ОперацияПроверки = ПроверитьИнформационнуюБазуНаСервере();
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Интервал = 2;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииПроверкиВДлительнойОперации", ЭтотОбъект, "ШагИнформационнаяБаза");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПроверки, ОписаниеОповещения, ПараметрыОжидания);
	
	Возврат Неопределено;
	
КонецФункции // ШагИнформационнаяБаза()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ШагИнформационнаяБазаПриЗавершении(ПараметрыИБ)
	
	ПредыдущееИмяИБ    = ПараметрыИБ.ИмяИБ;
	Объект.ТипСУБД     = ПараметрыИБ.ТипСУБД;
	Объект.СерверСУБД  = ПараметрыИБ.СерверСУБД;
	Объект.ИмяБД       = ПараметрыИБ.ИмяБД;
	СтрокаСоединенияИБ = ПараметрыИБ.СтрокаСоединенияИБ;
	
	ДоступноПодключениеКСУБД = (Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer"));
	Элементы.АутентификацияСУБД.Доступность = ДоступноПодключениеКСУБД;
	
КонецПроцедуры // ШагИнформационнаяБазаПриЗавершении()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - СУБД

&НаКлиенте
// Определить необходимость шага "СУБД"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимСУБД(Вперед = Истина)
	
	Возврат Истина;
	
КонецФункции // ШагНеобходимИнформационнаяБаза()

&НаКлиенте
// Шаг "СУБД"
// Выполнить шаг настройки подключения к серверу СУБД
//
Функция ШагСУБД()
	
	Если ПустаяСтрока(ИмяИБ) Тогда
		ВызватьИсключение "Не выбрана исследуемая информационная база.";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипСУБД) 
		И Не (Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer")
			Или Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.PostgreSQL")) Тогда
		ВызватьИсключение "Неподдерживаемый тип СУБД.";
	КонецЕсли;
	
	ОперацияПроверки = ПроверитьСУБДНаСервере(ПолучитьОписаниеИБ());
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Интервал = 2;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииПроверкиВДлительнойОперации", ЭтотОбъект, "ШагСУБД");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПроверки, ОписаниеОповещения, ПараметрыОжидания);
	
	Возврат Неопределено;
	
КонецФункции // ШагИнформационнаяБаза()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ШагСУБДПриЗавершении(ПараметрыСУБД)
	
	Объект.РежимУправленияБлокировкойДанных = ПараметрыСУБД.РежимУправленияБлокировкойДанных;
	Объект.КодВерсииСУБД = ПараметрыСУБД.КодВерсииСУБД;
	Объект.ТипОССервераСУБД = ПараметрыСУБД.ТипОССервераСУБД;
	
	// Серверы для сбора счетчиков производительности
	ПараметрыСервера = ИнформационнаяБаза.ПолучитьПараметрыСервера(Объект.СерверИБ);
	ИмяСервера1С = ПараметрыСервера.ИмяСервера;
	ИмяСервераСУБД = ПолучитьИмяСервераСУБДНаСервере(Объект.СерверСУБД, ИмяСервера1С);
	
	// Списки выбора серверов на страницах "Показатели ОС" и "Технологический журнал"
	Элементы.СерверыСервер.СписокВыбора.Очистить();
	Элементы.СерверыСервер.СписокВыбора.Добавить(ИмяСервера1С);
	Элементы.ИменаКаталоговТЖСерверКластера.СписокВыбора.Добавить(ИмяСервера1С);
	Если ИмяСервера1С <> ИмяСервераСУБД Тогда
		Элементы.СерверыСервер.СписокВыбора.Добавить(ИмяСервераСУБД);
		Элементы.ИменаКаталоговТЖСерверКластера.СписокВыбора.Добавить(ИмяСервераСУБД);
	КонецЕсли;
	
	// Доступные показатели
	Если Объект.ТипСУБД <> ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer") Тогда
		Объект.ИспользоватьППАнализГранулярностиБлокировок = Ложь;
		Аналитические = ТипыПоказателей.ПолучитьЭлементы()[1].ПолучитьЭлементы();
		ГруппаАнализОжиданий = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(Аналитические,
			"ТипПоказателя", ПредопределенноеЗначение("Перечисление.ТипыПоказателей.АнализОжиданий"));
		СтрокаДерева = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(ГруппаАнализОжиданий.ПолучитьЭлементы(),
			"ТипПоказателя", ПредопределенноеЗначение("Перечисление.ТипыПоказателей.АнализГранулярностиБлокировок"));
		Если СтрокаДерева <> Неопределено Тогда
			ГруппаАнализОжиданий.ПолучитьЭлементы().Удалить(СтрокаДерева);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ШагСУБДПриЗавершении()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - ТИПЫ ПОКАЗАТЕЛЕЙ

&НаКлиенте
// Определить необходимость шага "Типы показателей"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимТипыПоказателей(Вперед = Истина)
	
	Если Вперед Тогда
		УстановитьДоступностьТиповПоказателей();
		ОбновитьСостояниеГруппТиповПоказателей();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ШагНеобходимТипыПоказателей()

&НаКлиенте
// Шаг "Типы показателей"
// Выполнить шаг выбора типов используемых показателей производительности
//
Функция ШагТипыПоказателей()
	
	Выбран = Ложь;
	
	Для Каждого ГруппаТипов Из ТипыПоказателей.ПолучитьЭлементы() Цикл
		Если ГруппаТипов.Выбран > 0 Тогда
			Выбран = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Выбран Тогда
		ВызватьИсключение "Не выбран ни один из типов показателей производительности";
	КонецЕсли;
	
	// Получить выбор используемых показателей
	Оперативные = ТипыПоказателей.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	Аналитические = ТипыПоказателей.ПолучитьЭлементы()[1].ПолучитьЭлементы();
	
	ПП1С = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(Оперативные, 
		"ТипПоказателя", ПредопределенноеЗначение("Перечисление.ТипыПоказателей.Предприятие1С")).Выбран;
	ППОСВзаимоблокировки = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(Оперативные,
		"ТипПоказателя", ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ОСВзаимоблокировки")).Выбран;
	ППОСТаймауты = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(Оперативные, "ТипПоказателя", 
		ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ОСТаймауты")).Выбран;
	ПППроизвольныеСчетчикиОС = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(Оперативные, "ТипПоказателя", 
		ПредопределенноеЗначение("Перечисление.ТипыПоказателей.ПроизвольныеСчетчикиОС")).Выбран;
	ППАнализЗапросов = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(Аналитические,
		"ТипПоказателя", ПредопределенноеЗначение("Перечисление.ТипыПоказателей.АнализЗапросов")).Выбран;
	ГруппаАнализОжиданий = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(Аналитические,
		"ТипПоказателя", ПредопределенноеЗначение("Перечисление.ТипыПоказателей.АнализОжиданий"));
	ППАнализОжиданий = ГруппаАнализОжиданий.Выбран;
	ППАнализВзаимоблокировок = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(Аналитические,
		"ТипПоказателя", ПредопределенноеЗначение("Перечисление.ТипыПоказателей.АнализВзаимоблокировок")).Выбран;
	СтрокаАнализГранулярности = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(ГруппаАнализОжиданий.ПолучитьЭлементы(),
		"ТипПоказателя", ПредопределенноеЗначение("Перечисление.ТипыПоказателей.АнализГранулярностиБлокировок"));
	Если СтрокаАнализГранулярности <> Неопределено Тогда
		ППАнализГранулярностиБлокировок = СтрокаАнализГранулярности.Выбран;
	Иначе
		ППАнализГранулярностиБлокировок = Ложь;
	КонецЕсли;
	ППАнализСерверныхВызовов = ОбщегоНазначенияКлиент.НайтиСтрокуДереваПоЗначению(Аналитические,
		"ТипПоказателя", ПредопределенноеЗначение("Перечисление.ТипыПоказателей.АнализСерверныхВызовов")).Выбран;
	
	Если Объект.ИспользоватьПП1С <> ПП1С Тогда
		Объект.ИспользоватьПП1С = ПП1С;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользоватьППОСВзаимоблокировки <> ППОСВзаимоблокировки Тогда
		Объект.ИспользоватьППОСВзаимоблокировки = ППОСВзаимоблокировки;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользоватьППОСТаймауты <> ППОСТаймауты Тогда
		Объект.ИспользоватьППОСТаймауты = ППОСТаймауты;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользоватьПППроизвольныеСчетчикиОС <> ПППроизвольныеСчетчикиОС Тогда
		Объект.ИспользоватьПППроизвольныеСчетчикиОС = ПППроизвольныеСчетчикиОС;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользоватьППАнализЗапросов <> ППАнализЗапросов Тогда
		Объект.ИспользоватьППАнализЗапросов = ППАнализЗапросов;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользоватьППАнализОжиданий <> ППАнализОжиданий Тогда
		Объект.ИспользоватьППАнализОжиданий = ППАнализОжиданий;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользоватьППАнализВзаимоблокировок <> ППАнализВзаимоблокировок Тогда
		Объект.ИспользоватьППАнализВзаимоблокировок = ППАнализВзаимоблокировок;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользоватьППАнализГранулярностиБлокировок <> ППАнализГранулярностиБлокировок Тогда
		Объект.ИспользоватьППАнализГранулярностиБлокировок = ППАнализГранулярностиБлокировок;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если Объект.ИспользоватьППАнализСерверныхВызовов <> ППАнализСерверныхВызовов Тогда
		Объект.ИспользоватьППАнализСерверныхВызовов = ППАнализСерверныхВызовов;
		Модифицированность = Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ШагТипыПоказателей()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - ПОКАЗАТЕЛИ 1С:ПРЕДПРИЯТИЯ

&НаКлиенте
// Определить необходимость шага "Показатели 1С:Предприятия"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимПоказатели1С(Вперед = Истина)
	
	Возврат Не АвтоПроверка И Объект.ИспользоватьПП1С И Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer");
	
КонецФункции // ШагНеобходимПоказатели1С()

&НаКлиенте
// Шаг "Показатели 1С:Предприятия"
// Выполнить шаг проверки работоспособности показателей 1С:Предприятия
//
Функция ШагПоказатели1С()
	
	Если Не Объект.НазначенаРольProcessAdmin Тогда
		ВызватьИсключение "Выполните настройку серверной роли ""processadmin"" в соответствии с инструкцией и затем подтвердите выполнение отметкой флажка ""Роль ""processadmin"" настроена"".";
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ШагПоказатели1С()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - ПОКАЗАТЕЛИ ОПЕРАЦИОННОЙ СИСТЕМЫ

&НаКлиенте
// Определить необходимость шага "Показатели Операционной Системы"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимПоказателиОС(Вперед = Истина)
	
	Если Вперед Тогда
		Если Объект.ИспользоватьПППроизвольныеСчетчикиОС Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ШагНеобходимПоказателиОС()

&НаКлиенте
// Шаг "Показатели Операционной Системы"
// Выполнить шаг проверки работоспособности показателей 1С:Предприятия
//
Функция ШагПоказателиОС()
	
	// Загрузить показатели в табличную часть объекта
	ЗагрузитьСчетчикиПроизводительностиВОбъект();
	
	// Проверить сбор показателей
	ПроверитьПоказателиОС();
	
	Возврат Истина;
	
КонецФункции // ШагПоказателиОС()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - ТЕХНОЛОГИЧЕСКИЙ ЖУРНАЛ

&НаКлиенте
// Определить необходимость шага "Технологический журнал"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимТехнологическийЖурнал(Вперед = Истина)
	
	Возврат Объект.ИспользоватьППАнализЗапросов Или Объект.ИспользоватьППАнализОжиданий Или Объект.ИспользоватьППАнализВзаимоблокировок Или Объект.ИспользоватьППАнализСерверныхВызовов;
	
КонецФункции // ШагНеобходимТЖ()

&НаКлиенте
// Шаг "Технологический журнал"
// Выполнить шаг проверки настроек технологического журнала
//
Функция ШагТехнологическийЖурнал()
	
	Если Объект.ИменаКаталоговТЖ.Количество() = 0 Тогда
		ВызватьИсключение "Укажите настройки технологического журнала.";
	КонецЕсли;
	
	Для Каждого СтрокаНастроек Из Объект.ИменаКаталоговТЖ Цикл
		Для Каждого КолонкаТЖ Из Элементы.ИменаКаталоговТЖ.ПодчиненныеЭлементы Цикл
			ИмяКолонки = СтрЗаменить(КолонкаТЖ.Имя, "ИменаКаталоговТЖ", "");
			Если ПустаяСтрока(СтрокаНастроек[ИмяКолонки]) Тогда
				НомерСтроки = Объект.ИменаКаталоговТЖ.Индекс(СтрокаНастроек) + 1;
				ВызватьИсключение "Не указан """ + КолонкаТЖ.ТекстШапки + """ в строке """ + НомерСтроки + """";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НеУдалятьСлужебныеДанные = НеУдалятьСлужебныеДанные();
	
	ОперацияПроверки = ПроверитьТехнологическийЖурналНаСервере(НеУдалятьСлужебныеДанные);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.Интервал = 2;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииПроверкиВДлительнойОперации", ЭтотОбъект, "ШагТехнологическийЖурнал");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПроверки, ОписаниеОповещения, ПараметрыОжидания);
	
	Возврат Неопределено;
	
КонецФункции // ШагТехнологическийЖурнал()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - ТРАССИРОВКИ

&НаКлиенте
// Определить необходимость шага "Трассировки"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимТрассировки(Вперед = Истина)
	
	Если Вперед
	   И (Объект.ИспользоватьППАнализВзаимоблокировок Или
	   (Объект.ИспользоватьППАнализОжиданий И Объект.ИспользоватьППАнализГранулярностиБлокировок))
	   И Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ШагНеобходимТрассировки()

&НаКлиенте
// Шаг "Трассировки"
// Выполнить шаг проверки настроек технологического журнала
//
Функция ШагТрассировки()
	
	ОписаниеИБ = ПолучитьОписаниеИБ();
	ПроверитьТрассировкиSqlServerНаСервере(
		ОписаниеИБ,
		Объект.ТипОССервераСУБД,
		Объект.КаталогТрассировкиЛокальный,
		Объект.КаталогТрассировкиСетевой,
		Объект.ИспользоватьППАнализГранулярностиБлокировок
	);
	
	Возврат Истина;
	
КонецФункции // ШагТрассировки()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - СЕРВЕР ЦУП

&НаКлиенте
// Определить необходимость шага "Сервер ЦУП"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимСерверЦУП(Вперед = Истина)
	
	Если Вперед Тогда
		Попытка
			ПроверитьСерверЦУП(ПортСервераЦУП,
			                   АдминистраторКластераЦУП,
			                   ПарольАдминистратораКластераЦУП);
		Исключение
			Возврат Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ШагНеобходимСерверЦУП()

&НаКлиенте
// Шаг "Сервер ЦУП"
// Выполнить шаг настройки подключения к центральному серверу ЦУП
//
Функция ШагСерверЦУП()
	
	ПроверитьСерверЦУП(ПортСервераЦУП,
	                   АдминистраторКластераЦУП,
	                   ПарольАдминистратораКластераЦУП);
	
	Возврат Истина;
	
КонецФункции // ШагСерверЦУП()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - СЕРВЕР ЦУП (КЛАСТЕР ИБ)

&НаКлиенте
// Определить необходимость шага "Сервер ЦУП (Кластер ИБ)"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимСерверЦУПКластерИБ(Вперед = Истина)
	
	Если Вперед
	   И (Объект.ИспользоватьППАнализЗапросов
	 Или Объект.ИспользоватьППАнализОжиданий
	 Или Объект.ИспользоватьППАнализВзаимоблокировок) Тогда
		Попытка
			ПроверитьКластерНаСервере(Кластер,
			                          АдминистраторКластера,
			                          ПарольАдминистратораКластера);
		Исключение
			Возврат Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ШагНеобходимСерверЦУПКластерИБ()

&НаКлиенте
// Шаг "Сервер ЦУП (Кластер ИБ)"
// Выполнить шаг настройки подключения к центральному серверу ЦУП
//
Функция ШагСерверСтраницаЦУПКластерИБ()
	
	ПроверитьКластерНаСервере(Кластер,
	                          АдминистраторКластера,
	                          ПарольАдминистратораКластера);
	
	Возврат Истина;
	
КонецФункции // ШагСерверЦУПКластерИБ()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - СЕРВЕР ЦУП (ИБ)

&НаКлиенте
// Определить необходимость шага "Сервер ЦУП (ИБ)"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимСерверЦУПИБ(Вперед = Истина)
	
	Если Вперед
	   И (Объект.ИспользоватьППАнализЗапросов
	 Или Объект.ИспользоватьППАнализОжиданий
	 Или Объект.ИспользоватьППАнализВзаимоблокировок) Тогда
		Попытка
			ПроверитьИнформационнаяБазаНаСервере(СтрокаСоединенияИБ);
		Исключение
			Возврат Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ШагНеобходимСерверЦУПИБ()

&НаКлиенте
// Шаг "Сервер ЦУП (ИБ)"
// Выполнить шаг настройки подключения к центральному серверу ЦУП
//
Функция ШагСерверЦУПИБ()
	
	ПроверитьИнформационнаяБазаНаСервере(СтрокаСоединенияИБ);
	
	Возврат Истина;
	
КонецФункции // ШагСерверЦУПИБ()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - СЕРВЕР ЦУП (ТЖ)

&НаКлиенте
// Определить необходимость шага "Сервер ЦУП (ТЖ)"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимСерверЦУПТЖ(Вперед = Истина)
	
	Если Вперед
	   И (Объект.ИспользоватьППАнализЗапросов
	 Или Объект.ИспользоватьППАнализОжиданий
	 Или Объект.ИспользоватьППАнализВзаимоблокировок) Тогда
		Попытка
			ПроверитьРаботуТЖНаСервере();
		Исключение
			Возврат Истина;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ШагНеобходимСерверЦУПТЖ()

&НаКлиенте
// Шаг "Сервер ЦУП (ТЖ)"
// Выполнить шаг настройки подключения к центральному серверу ЦУП
//
Функция ШагСерверЦУПТЖ()
	
	ПроверитьРаботуТЖНаСервере();
	
	Возврат Истина;
	
КонецФункции // ШагСерверЦУПТЖ()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - СЕРВЕР ЦУП (ТРАССИРОВКИ)

&НаКлиенте
// Определить необходимость шага "Сервер ЦУП (ТЖ)"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимСерверЦУПТрассировки(Вперед = Истина)
	
	Если Не Вперед Тогда
		Элементы.ФормаКомандаДалее.Заголовок = "Далее";
	КонецЕсли;
	
	Если Вперед
	   И (Объект.ИспользоватьППАнализВзаимоблокировок
	   Или (Объект.ИспользоватьППАнализОжиданий И Объект.ИспользоватьППАнализГранулярностиБлокировок))
	   И Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ШагНеобходимСерверЦУПТрассировки()

&НаКлиенте
// Шаг "Сервер ЦУП (Трассировки)"
// Выполнить шаг настройки подключения к центральному серверу ЦУП
//
Функция ШагСерверЦУПТрассировки()
	
	ОписаниеИБ = ПолучитьОписаниеИБ();
	ПроверитьТрассировкиSqlServerНаСервере(
		ОписаниеИБ,
		Объект.ТипОССервераСУБД,
		Объект.КаталогТрассировкиЛокальный,
		Объект.КаталогТрассировкиСетевой,
		Объект.ИспользоватьППАнализГранулярностиБлокировок
	);
	
	Возврат Истина;
	
КонецФункции // ШагСерверЦУПТрассировки()


///////////////////////////////////////////////////////////////////////////////
// ШАГ - ГОТОВО

&НаКлиенте
// Определить необходимость шага "Готово"
//
// Возвращаемое значение:
//  Булево - Истина, если шаг необходим, Ложь, если шаг можно пропустить
//
Функция ШагНеобходимГотово(Вперед = Истина)
	
	Если Вперед Тогда
		Элементы.ФормаКомандаДалее.Заголовок = "Готово";
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ШагНеобходимТрассирокиСУБД()

&НаКлиенте
// Шаг "Готово"
// Выполнить шаг завершения настроек
//
Функция ШагГотово()
	
	Объект.Настроено = Истина;
	Объект.ВерсияНастроек = ВерсияКонфигурации;
	Записать();
	Контекст.ИнициализироватьОписаниеПоказателей();
	Закрыть(Объект.Ссылка);
	
	Возврат Истина;
	
КонецФункции // ШагГотово()


///////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА РАБОТОСПОСОБНОСТИ

&НаКлиенте
// Проверить наименование подключения к исследуемой информационной базе
//
// Параметры:
//  СтароеИмя - Строка, существующее наименование подключения
//  НовоеИмя - Строка, проверяемое наименование подключения
//
Процедура ПроверитьНаименованиеПодключения(СтароеИмя, НовоеИмя)
	
	Если ПустаяСтрока(НовоеИмя) Тогда
		ВызватьИсключение "Не указано наименование подключения.";
	КонецЕсли;
	
	Если ВРег(СтароеИмя) = ВРег(НовоеИмя) Тогда
		Возврат;
	КонецЕсли;
	
	ПодключениеСуществует = ПроверитьСуществованиеПодключенияНаСервере(Объект.Ссылка, НовоеИмя);
	
	Если ПодключениеСуществует Тогда
		ВызватьИсключение "Подключение с таким именем уже зарегистрировано";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаименованиеПодключения()

&НаСервере
// Проверить работоспособность COM-соединителя
//
Функция ПроверитьДоступностьCOMСоединителяНаСервере()
	
	НеобходимаПроверка = Ложь;
	Попытка
		МенеджерСоединений = ОбщегоНазначения.ПолучитьComСоединитель();
		
		ПутьСервер = ОбщегоНазначения.ПолучитьВерсиюCOM();
		СисИнфо = Новый СистемнаяИнформация;
		ВерсияПриложения = СисИнфо.ВерсияПриложения;
		Если СтрНайти(ПутьСервер, ВерсияПриложения) = 0 Тогда
			НеобходимаПроверка = Истина;
			
			ПутьСервер = ?(СтрНайти(ПутьСервер, ВерсияПриложения) > 0 Или СтрНайти(ПутьСервер, "\8.") = 0,
				ПутьСервер, ПутьСервер + "    <= возможно, ошибка (требуется " + ВерсияПриложения + ")");
			ПутьСерверОписание = "Текущий путь к COM-коннектору на сервере: " + Символы.ПС 
				+ ?(ПустаяСтрока(ПутьСервер), "Не зарегистрирован", ПутьСервер);
			
			Элементы.COMСоединительОписание_Часть2.Заголовок = 
				Новый ФорматированнаяСтрока(ПутьСерверОписание, Новый Шрифт(,,Истина, Истина));
			Элементы.КомандаЗарегистрироватьCOMСоединитель.Заголовок = 
				"Зарегистрировать COM-коннектор версии " + ВерсияПриложения + " на сервере";
			Элементы.ГруппаРегистрацияCOMСоединителя.Видимость = Истина;
			
		Иначе
			НеобходимаПроверка = Ложь;
			Элементы.COMСоединительОписание_Часть2.Заголовок = "";
			Элементы.ГруппаРегистрацияCOMСоединителя.Видимость = Ложь;
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки = "Создать COM-соединение на компьютере клиента ЦУП не удалось по причине:
		                 |
		                 |"
		                 + ИнформацияОбОшибке().Описание;
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
	Возврат НеобходимаПроверка;
	
КонецФункции // ПроверитьCOMСоединительНаКлиенте()

&НаСервереБезКонтекста
// Проверить работоспособность COM-соединителя
//
Процедура ПроверитьCOMСоединительНаСервере(АгентСервераЦУП, КластерЦУП, ЦентральныйСервер, ПортЦентральногоСервера)
	
	Попытка
		// Проверка подключения к кластеру ЦУПа
		МастерНастройки.ПроверитьCOMСоединитель(ЦентральныйСервер, ПортЦентральногоСервера);
	Исключение
		ОписаниеОшибки = "Создать COM-соединение на сервере ЦУП не удалось по причине:
		                 |
		                 |"
		                 + ИнформацияОбОшибке().Описание;
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры // ПроверитьCOMСоединительНаСервере()

&НаКлиенте
// Проверить возможность подключения к центральному серверу
//
// Параметры:
//  ИмяСервера - Строка, имя компьютера, на котором работает центральный сервер
//  Порт - Число, имя порта компьютера, на котором работает центральный сервер
//
// Возвращаемое значение:
//  ComОбъект - подключение к центральному серверу
//
Функция ПроверитьЦентральныйСервер(ИмяСервера, Порт)
	
	Если ПустаяСтрока(ИмяСервера) Тогда
		ВызватьИсключение "Не указано имя компьютера центрального сервера исследуемой информационной базы.";
	КонецЕсли;
	
	СписокКластеров = ПроверитьЦентральныйСерверНаСервере(ИмяСервера, Порт);
	Элементы.Кластер.СписокВыбора.Очистить();
	Для Каждого ТекКластер Из СписокКластеров Цикл
		Элементы.Кластер.СписокВыбора.Добавить(ТекКластер.Значение, ТекКластер.Представление);
	КонецЦикла;
	
КонецФункции // ПроверитьЦентральныйСервер()

&НаСервереБезКонтекста
// Проверить возможность подключения к исследуемой ИБ клиентом ЦУП
//
// Параметры:
//  СтрокаСоединенияИБ - Строка соединения с исследуемой ИБ
//
Процедура ПроверитьИнформационнаяБазаНаСервере(СтрокаСоединенияИБ) Экспорт
	
	Справочники.ИнформационныеБазы.ПодключитьсяКИБ(СтрокаСоединенияИБ);
	
КонецПроцедуры // ПроверитьИнформационнаяБазаНаКлиенте()

&НаСервере
// Установить доступность выбираемых типов показателей производительности
//
// Параметры:
//  Типы - ДеревоЗначений, типы показателей производительности
//
Процедура УстановитьДоступностьТиповПоказателей()
	
	АдресСервера = МастерНастройки.СформироватьАдресСервера(ЦентральныйСервер, ПортЦентральногоСервера);
	АгентСервера = МастерНастройки.ПодключитьсяКЦентральномуСерверу(АдресСервера);
	ОписаниеКластера = ИнформационнаяБаза.НайтиКластерПоПорту(АгентСервера, Кластер);
	АгентСервера.Authenticate(ОписаниеКластера, АдминистраторКластера, ПарольАдминистратораКластера);
	
	ИБКластера = ИнформационнаяБаза.НайтиИБПоИмени(АгентСервера,
	                                               ОписаниеКластера,
	                                               ИмяИБ,
	                                               ИмяПользователяИБ,
	                                               ПарольПользователяИБ);
	МенятьТипыПоказателей = МенятьТипыПоказателей(ИБКластера);
	ДеревоТипыПоказателей = РеквизитФормыВЗначение("ТипыПоказателей");
	
	ПроверитьПредприятие1С(ДеревоТипыПоказателей, МенятьТипыПоказателей);
	ПроверитьОСВзаимоблокировки(АгентСервера, ОписаниеКластера, ДеревоТипыПоказателей, МенятьТипыПоказателей);
	ПроверитьОСТаймауты(АгентСервера, ОписаниеКластера, ДеревоТипыПоказателей, МенятьТипыПоказателей);
	ПроверитьАнализЗапросов(ДеревоТипыПоказателей, МенятьТипыПоказателей);
	ПроверитьАнализОжиданий(ДеревоТипыПоказателей, МенятьТипыПоказателей);
	ПроверитьАнализВзаимоблокировок(АгентСервера, ОписаниеКластера, ДеревоТипыПоказателей, МенятьТипыПоказателей);
	ЗначениеВРеквизитФормы(ДеревоТипыПоказателей, "ТипыПоказателей");
	
КонецПроцедуры // УстановитьДоступностьТиповПоказателей()

&НаСервереБезКонтекста
// Проверить возможность выбора типа показателей "1С:Предприятие"
//
// Возвращаемое значение:
//  Истина - установка разрешена
//
Функция ПроверитьПредприятие1С(ДеревоТипыПоказателей, МенятьТипыПоказателей)
	
	ТипПредприятие1С = ГруппаОперативныхПоказателей(ДеревоТипыПоказателей).Строки.Найти(
		Перечисления.ТипыПоказателей.Предприятие1С,
		"ТипПоказателя");
		
	Если МенятьТипыПоказателей Тогда
		ТипПредприятие1С.Выбран = 1;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьПредприятие1С()

&НаСервере
// Проверить возможность выбора типа показателей "Взаимоблокировки"
//
// Возвращаемое значение:
//  Истина - установка разрешена
//
Функция ПроверитьОСВзаимоблокировки(АгентСервера, ОписаниеКластера, ДеревоТипыПоказателей, МенятьТипыПоказателей)
	
	ТипОСВзаимоблокировки = ГруппаОперативныхПоказателей(ДеревоТипыПоказателей).Строки.Найти(
		Перечисления.ТипыПоказателей.ОСВзаимоблокировки,
		"ТипПоказателя");
	
	ИБ = ИнформационнаяБаза.НайтиИБПоИмени(АгентСервера,
	                                       ОписаниеКластера,
	                                       ИмяИБ,
	                                       ИмяПользователяИБ,
	                                       ПарольПользователяИБ);
	
	Если Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer") Тогда
		Если МенятьТипыПоказателей Тогда
			ТипОСВзаимоблокировки.Выбран = 1;
		КонецЕсли;
	Иначе
		Причина = "Этот показатель производительности работает только с Microsoft SQL Server, а исследуемая база работает на """ + ИБ.DBMS + """";
		
		ТипОСВзаимоблокировки.Выбран = 0;
		ТипОСВзаимоблокировки.Заблокирован = Истина;
		ТипОСВзаимоблокировки.Причина = Причина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьОСВзаимоблокировки()

&НаСервере
// Проверить возможность выбора типа показателей "Таймауты"
//
// Возвращаемое значение:
//  Истина - установка разрешена
//
Функция ПроверитьОСТаймауты(АгентСервера, ОписаниеКластера, ДеревоТипыПоказателей, МенятьТипыПоказателей)
	
	ТипОСТаймауты = ГруппаОперативныхПоказателей(ДеревоТипыПоказателей).Строки.Найти(
		Перечисления.ТипыПоказателей.ОСТаймауты,
		"ТипПоказателя");
	
	//ИБКластера = ИнформационнаяБаза.НайтиИБПоИмени(АгентСервера,
	//                                       ОписаниеКластера,
	//                                       ИмяИБ,
	//                                       ИмяПользователяИБ,
	//                                       ПарольПользователяИБ);
	
	Если Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer") Тогда
		Если МенятьТипыПоказателей Тогда
			ВКСерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
			
			Попытка
				MSSQL.ПодключитьMSSQLПоИмениСервера(ВКСерверСУБД, Объект.СерверСУБД, Объект.СерверИБ, Объект.СпособАутентификации, ИмяПользователяСУБД, ПарольПользователяСУБД);
			Исключение
				ТипОСТаймауты.Выбран = 0;
				ТипОСТаймауты.Заблокирован = Истина;
				ТипОСТаймауты.Причина = "Нет доступа к Microsoft SQL Server (" + Объект.СерверСУБД + "), необходимого для определения возможности использования этого показателя. Убедитесь, что пользователь от имени которого запущен ЦУП имеет доступ к Microsoft SQL Server (" + Объект.СерверСУБД + ").";
				Возврат Ложь;
			КонецПопытки;
			
			ВерсияСУБД = СУБД.ПолучитьВерсиюСУБД(Объект.ТипСУБД, ВКСерверСУБД);
			
			Если ВерсияСУБД < 90 Тогда
				ТипОСТаймауты.Выбран = 0;
				ТипОСТаймауты.Заблокирован = Истина;
				ТипОСТаймауты.Причина = "Этот показатель производительности работает только с Microsoft SQL Server 2005 (9.0) и выше";
				Возврат Ложь;
			Иначе
				ТипОСТаймауты.Выбран = 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Причина = "Этот показатель производительности работает только с Microsoft SQL Server, а исследуемая база работает на """ + Объект.ТипСУБД + """";
		
		ТипОСТаймауты.Выбран = 0;
		ТипОСТаймауты.Заблокирован = Истина;
		ТипОСТаймауты.Причина = Причина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьОСТаймауты()

&НаСервереБезКонтекста
// Проверить возможность выбора типа показателей "Анализ запросов"
//
// Возвращаемое значение:
//  Истина - установка разрешена
//
Функция ПроверитьАнализЗапросов(ДеревоТипыПоказателей, МенятьТипыПоказателей)
	
	ТипАнализЗапросов = ГруппаАналитическихПоказателей(ДеревоТипыПоказателей).Строки.Найти(
		Перечисления.ТипыПоказателей.АнализЗапросов,
		"ТипПоказателя");
	
	Если МенятьТипыПоказателей Тогда
		ТипАнализЗапросов.Выбран = 1;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьАнализЗапросов()

&НаСервереБезКонтекста
// Проверить возможность выбора типа показателей "Анализ ожиданий на блокировках"
//
// Возвращаемое значение:
//  Истина - установка разрешена
//
Функция ПроверитьАнализОжиданий(ДеревоТипыПоказателей, МенятьТипыПоказателей)
	
	ТипАнализОжиданий = ГруппаАналитическихПоказателей(ДеревоТипыПоказателей).Строки.Найти(
		Перечисления.ТипыПоказателей.АнализОжиданий,
		"ТипПоказателя");
	
	Если МенятьТипыПоказателей Тогда
		ТипАнализОжиданий.Выбран = 1;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьАнализОжиданий()

&НаСервере
// Проверить возможность выбора типа показателей "Анализ взаимоблокировок"
//
// Возвращаемое значение:
//  Истина - установка разрешена
//
Функция ПроверитьАнализВзаимоблокировок(АгентСервера, ОписаниеКластера, ДеревоТипыПоказателей, МенятьТипыПоказателей)
	
	ТипАнализВзаимоблокировок = ГруппаАналитическихПоказателей(ДеревоТипыПоказателей).Строки.Найти(
		Перечисления.ТипыПоказателей.АнализВзаимоблокировок,
		"ТипПоказателя");
	
	Если Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer") Тогда
		Попытка
			ВКСерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
			MSSQL.ПодключитьMSSQLПоИмениСервера(ВКСерверСУБД, Объект.СерверСУБД, Объект.СерверИБ, Объект.СпособАутентификации, ИмяПользователяСУБД, ПарольПользователяСУБД);
		Исключение
			ТипАнализВзаимоблокировок.Выбран = 0;
			ТипАнализВзаимоблокировок.Заблокирован = Истина;
			ОписаниеОшибки = "Недостаточно информации для определения возможности использования выбранного показателя, т.к. "
			                 "не удалось подключиться к серверу СУБД исследуемой информационной базы (" + Объект.СерверСУБД + ").
			                 |
			                 |Возможные причины неудачного подключения:
			                 |  - у пользователя, запустившего ЦУП, нет логина с аутентификацией операционной системой, на сервере СУБД исследуемой информационной базы.
			                 |
			                 |Полное описание ошибки:
			                 |" + ОписаниеОшибки();
			ТипАнализВзаимоблокировок.Причина = ОписаниеОшибки;
			Возврат Ложь;
		КонецПопытки;
		
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			// Нужен Microsoft SQL Server 2005 (9.0) или выше
			ВерсияСУБД = СУБД.ПолучитьВерсиюСУБД(Объект.ТипСУБД, ВКСерверСУБД);
			Если ВерсияСУБД < 90 Тогда
				ТипАнализВзаимоблокировок.Выбран = 0;
				ТипАнализВзаимоблокировок.Заблокирован = Истина;
				ТипАнализВзаимоблокировок.Причина = "Для анализа взаимоблокировок необходим Microsoft SQL Server 2005 (9.0) или выше.";
				Возврат Ложь;
			Иначе
				Если МенятьТипыПоказателей Тогда
					ТипАнализВзаимоблокировок.Выбран = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Объект.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.PostgreSQL") Тогда
		// Доступен только анализ управляемых взаимоблокировок
		Если МенятьТипыПоказателей Тогда
			ТипАнализВзаимоблокировок.Выбран = 1;
		КонецЕсли;
	Иначе
		ТипАнализВзаимоблокировок.Выбран = 0;
		ТипАнализВзаимоблокировок.Заблокирован = Истина;
		ТипАнализВзаимоблокировок.Причина = "Анализ взаимоблокировок возможен только если исследуемая информационная база работает на СУБД Microsoft SQL Server. Выбранная информационная база работает на""" + Объект.ТипСУБД + """";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьАнализВзаимоблокировок()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПроверитьИнформационнуюБазуНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеФоновогоЗадания = "Проверка информационной базы";
	ИмяМетода = "Справочники.ИнформационныеБазы.ПроверитьИнформационнуюБазу";
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ЦентральныйСервер", ЦентральныйСервер);
	ПараметрыЗадания.Вставить("ПортЦентральногоСервера", ПортЦентральногоСервера);
	ПараметрыЗадания.Вставить("Кластер", Кластер);
	ПараметрыЗадания.Вставить("АдминистраторКластера", АдминистраторКластера);
	ПараметрыЗадания.Вставить("ПарольАдминистратораКластера", ПарольАдминистратораКластера);
	ПараметрыЗадания.Вставить("ИмяИБ", ИмяИБ);
	ПараметрыЗадания.Вставить("ИмяПользователяИБ", ИмяПользователяИБ);
	ПараметрыЗадания.Вставить("ПарольПользователяИБ", ПарольПользователяИБ);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции // ПроверитьИнформационнуюБазуНаСервере()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервере
Функция ПроверитьСУБДНаСервере(ОписаниеИБ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеФоновогоЗадания = "Проверка СУБД";
	ИмяМетода = "Справочники.ИнформационныеБазы.ПроверитьСУБД";
	
	ОписаниеИБ.Вставить("ИмяИБ", Объект.ИмяИБ);
	ОписаниеИБ.Вставить("АдминистраторКластера", Объект.АдминистраторКластера);
	ОписаниеИБ.Вставить("ПарольАдминистратораКластера", Объект.ПарольАдминистратораКластера);
	ОписаниеИБ.Вставить("ИмяПользователяИБ", Объект.ИмяПользователяИБ);
	ОписаниеИБ.Вставить("ПарольПользователяИБ", Объект.ПарольПользователяИБ);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ОписаниеИБ", ОписаниеИБ);
	ПараметрыЗадания.Вставить("СерверСУБД", Объект.СерверСУБД);
	ПараметрыЗадания.Вставить("СерверИБ", Объект.СерверИБ);
	ПараметрыЗадания.Вставить("СпособАутентификации", Объект.СпособАутентификации);
	ПараметрыЗадания.Вставить("ИмяПользователяСУБД", ИмяПользователяСУБД);
	ПараметрыЗадания.Вставить("ПарольПользователяСУБД", ПарольПользователяСУБД);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции // ПроверитьСУБДНаСервере()

&НаСервере
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьТехнологическийЖурналНаСервере(НеУдалятьСлужебныеДанные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаименованиеФоновогоЗадания = "Проверка технологического журнала";
	ИмяМетода = "Справочники.ИнформационныеБазы.ПроверитьТехнологическийЖурнал";
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ЦентральныйСервер", ЦентральныйСервер);
	ПараметрыЗадания.Вставить("ПортЦентральногоСервера", ПортЦентральногоСервера);
	ПараметрыЗадания.Вставить("Кластер", Кластер);
	ПараметрыЗадания.Вставить("АдминистраторКластера", АдминистраторКластера);
	ПараметрыЗадания.Вставить("ПарольАдминистратораКластера", ПарольАдминистратораКластера);
	ПараметрыЗадания.Вставить("ИменаКаталоговТЖ", Объект.ИменаКаталоговТЖ.Выгрузить());
	ПараметрыЗадания.Вставить("НеУдалятьСлужебныеДанные", НеУдалятьСлужебныеДанные);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыЗадания, ПараметрыВыполнения);
	
КонецФункции // ПроверитьТехнологическийЖурналНаСервере()

&НаСервере
// Проверить работоспособность показателей операционной системы
//
Процедура ПроверитьПоказателиОС()
	
	Если Объект.ИспользоватьПППроизвольныеСчетчикиОС И Объект.СчетчикиОС.Количество() > 0 Тогда
		ИБ = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ИнформационныеБазы"));
		МастерНастройки.ПроверитьПроизвольныеПоказателиОС(ИБ);
		ЗначениеВДанныеФормы(ИБ, Объект);
		
		// Загрузить показатели обратно в редактор (для обновления описания ошибок)
		ЗагрузитьСчетчикиПроизводительностиВРедактор();
		
		Отбор = Новый Структура("Проверен", Ложь);
		Если Объект.СчетчикиОС.НайтиСтроки(Отбор).Количество() > 0 Тогда
			
			ВызватьИсключение 
				"При проверке сбора счетчиков возникла ошибка
				|Возможные причины ошибки:
				|  - неверно указан язык ОС
				|  - выбранный счетчик отсутствует на контролируемом сервере
				|  - пользователь, от имени которого запущен сервер кластера 1С с ИБ ЦУП, не входит в следующие группы на контролируемом сервере:
				|    - Performance Monitor Users.";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПоказателиОС()

&НаСервереБезКонтекста
// Проверить трассировки Sql Server клиентом ЦУП
//
// Параметры:
//  ПолноеИмяСервераСУБД - Строка, имя сервера СУБД
//  АгентСервера - IServerAgentConnection, соединение с центральным сервером
//  ОписаниеКластера - IClusterInfo, который следует проверить
//
Процедура ПроверитьТрассировкиSqlServerНаСервере(ОписаниеИБ, ТипОССервераСУБД, КаталогТрассировкиЛокальный, КаталогТрассировкиСетевой, СобиратьИнформациюОГранулярности)
	
	Попытка
		МастерНастройки.ПроверитьТрассировки(
			ОписаниеИБ,
			ТипОССервераСУБД,
			КаталогТрассировкиЛокальный,
			КаталогТрассировкиСетевой,
			СобиратьИнформациюОГранулярности
		);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке().Описание;
		ВызватьИсключение ИнформацияОбОшибке;
	КонецПопытки;
	
КонецПроцедуры // ПроверитьТрассировкиSqlServerНаКлиенте()

&НаСервереБезКонтекста
// Проверить возможность подключения к центральному серверу
//
// Параметры:
//  ИмяСервера - Строка, имя компьютера, на котором работает центральный сервер
//  Порт - Число, имя порта компьютера, на котором работает центральный сервер
//
// Возвращаемое значение:
//  ComОбъект - подключение к центральному серверу
//
Функция ПроверитьЦентральныйСерверНаСервере(ИмяСервера, Порт)
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	Путь = КипВнешнийКомпонент.ПутьCOMСоединителя(Инструменты);
	
	Попытка
		ОбщегоНазначения.ПроверитьЦентральныйСервер(ИмяСервера, Порт);
		
		АдресСервера = МастерНастройки.СформироватьАдресСервера(ИмяСервера, Порт);
		АгентСервера = МастерНастройки.ПодключитьсяКЦентральномуСерверу(АдресСервера);
		СписокКластеров = ПолучитьСписокКластеров(АгентСервера);
		Возврат СписокКластеров;
		
	Исключение
		Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
		ПутьСервер = ОбщегоНазначения.ПолучитьВерсиюCOM();
		
		СисИнфо = Новый СистемнаяИнформация;
		ВерсияПриложения = СисИнфо.ВерсияПриложения;
		ПутьСервер = ?(СтрНайти(ПутьСервер, ВерсияПриложения) > 0 Или СтрНайти(ПутьСервер, "\8.") = 0,
						ПутьСервер, ПутьСервер + "    <= возможно, ошибка (требуется " + ВерсияПриложения + ")");
		
		Инфо = ИнформацияОбОшибке();
		ОписаниеОшибки = "Возможные причины проблемы:
		                 |- неправильно указано имя или порт центрального сервера;
		                 |- центральный сервер на указанном компьютере и порте не запущен;
		                 |- версия 1С:Предприятия ЦУП отличается от версии 1С:Предприятия исследуемой информационной базы.
		                 |- не зарегистрирована на сервере и клиенте comcntr.dll необходимой версии и разрядности.
		                 |   └ текущий путь к COM-коннектору на сервере: " + ?(ПустаяСтрока(ПутьСервер), "Не зарегистрирован", ПутьСервер) + "
		                 |- не выполнен перезапуск службы 1С:Предприятия или клиентского приложения после регистрации COM-коннектора.
		                 |
		                 |Полное описание ошибки:
		                 |"
		               + Инфо.Причина.Описание;
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ПроверитьЦентральныйСерверНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьСписокКластеров(АгентСервера)
	
	СписокКластеров = Новый СписокЗначений;
	
	Кластеры = АгентСервера.GetClusters();
	Для Каждого ТекущийКластер Из Кластеры Цикл
		Порт = Формат(ТекущийКластер.MainPort, "ЧГ=0");
		Описание = " (" + ТекущийКластер.HostName + ":" + Порт + ")";
		СписокКластеров.Добавить(ТекущийКластер.MainPort, ТекущийКластер.ClusterName + Описание);
	КонецЦикла;
	
	Возврат СписокКластеров;
	
КонецФункции

&НаСервереБезКонтекста
// Проверить возможность подключения к серверу ЦУП
//
// Параметры:
//  Порт - Число, номер порта агента центрального сервера ЦУП
//  Администратор - Строка, имя администратора кластера ЦУП
//  Пароль - Строка, пароль администратора кластера ЦУП
//
Процедура ПроверитьСерверЦУП(Порт, Администратор, Пароль)
	
	// Определить параметры подключения к информационной базе ЦУП
	ПараметрыПодключения = ИнформационнаяБаза.ПолучитьПараметрыПодключения(
		СтрокаСоединенияИнформационнойБазы());
		
	Попытка
		ИмяСервера = ОбщегоНазначенияКлиентСервер.УдалитьКавычки(ПараметрыПодключения.ИмяСервера);
		ПортСервера = Формат(Порт, "ЧГ=0");
		АдресАгентаЦУП = ИмяСервера + ":" + ПортСервера;
		мАгентСервераЦУП = МастерНастройки.ПодключитьсяКЦентральномуСерверу(АдресАгентаЦУП);
		мКластерЦУП = ИнформационнаяБаза.НайтиКластерПоПорту(мАгентСервераЦУП, ПараметрыПодключения.ПортКластера);
		мАгентСервераЦУП.Authenticate(мКластерЦУП, Администратор, Пароль);
		
	Исключение
		ОписаниеОшибки = "Не удалось подключиться к серверу ЦУП, возможны следующие причины ошибки:
		                 |- Неправильно указан номер порта центрального сервера ЦУП;
		                 |- Неправильно укано имя или пароль администратора кластера информационной базы ЦУП;
		                 |- Установлена блокировка регламентных и фоновых заданий в информационной базе ЦУП.
		                 |
		                 |Полное описание ошибки:
		                 |"
		               + ИнформацияОбОшибке().Описание;
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры // ПроверитьСерверЦУП()

&НаСервере
// Проверить возможность подключения клиента ЦУП к кластеру исследуемой ИБ
//
// Параметры:
//  АгентСервера - IServerAgentConnection, соединение с центральным сервером
//  Порт - Число, порт кластреа, который следует проверить
//  Администратор - Строка, имя администратора кластера
//  Пароль - Строка, пароль администратора кластера
//
// Возвращаемое значение:
//  IClusterInfo - Кластер, к которому установлено подключение
//
Процедура ПроверитьКластерНаСервере(ПортКластера, Администратор, Пароль)
	
	Попытка
		АдресСервера = МастерНастройки.СформироватьАдресСервера(ЦентральныйСервер, ПортЦентральногоСервера);
		АгентСервера = МастерНастройки.ПодключитьсяКЦентральномуСерверу(АдресСервера);
		
		ОписаниеКластера = ИнформационнаяБаза.НайтиКластерПоПорту(АгентСервера, ПортКластера);
		АгентСервера.Authenticate(ОписаниеКластера, Администратор, Пароль);
		АдресЦС = МастерНастройки.СформироватьАдресСервера(ЦентральныйСервер, ПортЦентральногоСервера);
		АдресСервера = МастерНастройки.СформироватьАдресСервера(АдресЦС, ОписаниеКластера.MainPort);
		
		Если Объект.СерверИБ <> АдресСервера Тогда
			Объект.СерверИБ = АдресСервера;
			Модифицированность = Истина;
		КонецЕсли;
		
		СписокИБ = ПолучитьСписокИБКластера(АгентСервера, ОписаниеКластера);
		СписокВыбора = Элементы.ИнформационнаяБаза.СписокВыбора;
		СписокВыбора.Очистить();
		Для Каждого ТекущаяИБ Из СписокИБ Цикл
			СписокВыбора.Добавить(ТекущаяИБ.Значение, ТекущаяИБ.Представление);
		КонецЦикла;
		
	Исключение
		ОписаниеОшибки = "Ошибка аутентификации ЦУП в кластере исследуемой информационной базы.
		                 |
		                 |Возможные причины ошибки подключения:
		                 |- неправильно указано имя или пароль администратора кластера исследуемой информационной базы;
		                 |- вы или пользователи, запустившие рабочие процессы ЦУП, не являетесь администраторами кластера исследуемой информационной базы.
		                 |
		                 |Полное описание ошибки:
		                 |"
		                 + ИнформацияОбОшибке().Описание;
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;

КонецПроцедуры // ПроверитьКластерНаСервере()

&НаСервере
// Убедиться, что сервер исследуемой базы может успешно
// создавать файлы технологического журнала
//
// Параметры:
//  НастройкиТЖ - ТаблицаЗначений, настройки ТЖ
//  АгентСервера - IServerAgentConnection, соединение с центральным сервером ЦУП
//  КластерЦУП - IClusterInfo, кластер ЦУП
//
Процедура ПроверитьРаботуТЖНаСервере()
	
	// Проверка аутентификации в кластере исследуемой ИБ рабочих процессов ЦУП
	Попытка
		МастерНастройки.ПроверитьДоступностьТЖ(Объект.ИменаКаталоговТЖ.Выгрузить(), Истина);
	Исключение
		ОписаниеОшибки = "Технологический журнал не доступен для рабочих процессов сервера ЦУП.
		                 |
		                 |"
		               + ИнформацияОбОшибке().Описание;
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры // ПроверитьРаботуТЖНаСервере()


&НаСервереБезКонтекста
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСписокИБКластера(АгентСервера, ОписаниеКластера)
	
	ИнФормационныеБазы = Новый СписокЗначений;
	СписокИБ = АгентСервера.GetInfoBases(ОписаниеКластера);
	Для Каждого ТекущаяИБ Из СписокИБ Цикл
		ОписаниеИБ = ?(ПустаяСтрока(ТекущаяИБ.Descr), "", " (" + ТекущаяИБ.Descr + ")");
		ИнФормационныеБазы.Добавить(ТекущаяИБ.Name, ТекущаяИБ.Name + ОписаниеИБ);
	КонецЦикла;
	
	Возврат ИнформационныеБазы;
	
КонецФункции // ПолучитьСписокИБКластера()

&НаСервереБезКонтекста
// Проверить наименование подключения к исследуемой информационной базе
//
// Параметры:
//  СтароеИмя - Строка, существующее наименование подключения
//  НовоеИмя - Строка, проверяемое наименование подключения
//
Функция ПроверитьСуществованиеПодключенияНаСервере(Ссылка, ИмяПодключения)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Подключение = Справочники.ИнформационныеБазы.НайтиПоНаименованию(ИмяПодключения, Истина);
		ПодключениеСуществует = (ЗначениеЗаполнено(Подключение));
	Иначе
		Если Ссылка.Наименование <> ИмяПодключения Тогда
			Подключение = Справочники.ИнформационныеБазы.НайтиПоНаименованию(ИмяПодключения, Истина);
			ПодключениеСуществует = (ЗначениеЗаполнено(Подключение));
		Иначе
			ПодключениеСуществует = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПодключениеСуществует;
	
КонецФункции // ПроверитьСуществованиеПодключенияНаСервере()

&НаСервере
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ПолучитьОписаниеСУБД()
	
	ОписаниеСУБД = Новый Структура("Тип,ИмяСервера");
	
	АдресСервера = МастерНастройки.СформироватьАдресСервера(ЦентральныйСервер, ПортЦентральногоСервера);
	АгентСервера = МастерНастройки.ПодключитьсяКЦентральномуСерверу(АдресСервера);
	ОписаниеКластера = ИнформационнаяБаза.НайтиКластерПоПорту(АгентСервера, Кластер);
	АгентСервера.Authenticate(ОписаниеКластера, АдминистраторКластера, ПарольАдминистратораКластера);
	
	ИБКластера = ИнформационнаяБаза.НайтиИБПоИмени(АгентСервера, ОписаниеКластера, ИмяИБ, ИмяПользователяИБ, ПарольПользователяИБ);
	ОписаниеСУБД.Тип = СУБД.ПолучитьТипСУБД(ИБКластера.DBMS);
	ОписаниеСУБД.ИмяСервера = ИБКластера.DBServerName;
	
	Возврат ОписаниеСУБД;
	
КонецФункции // ИнформационнаяБазаПриИзмененииНаСервере()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ПриЗавершенииПроверкиВДлительнойОперации(Результат, ИмяШага) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если Результат.Статус = "Ошибка" Тогда
		Попытка
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки + Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'");
		Исключение
			ПроверкаШагаОшибка(ИнформацияОбОшибке());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если РезультатПроверки <> Неопределено Тогда
		Если РезультатПроверки.Успешно Тогда
			
			Если ИмяШага = "ШагИнформационнаяБаза" Тогда
				ШагИнформационнаяБазаПриЗавершении(РезультатПроверки.ПараметрыИБ);
			ИначеЕсли ИмяШага = "ШагСУБД" Тогда
				ШагСУБДПриЗавершении(РезультатПроверки.ПараметрыСУБД);
			КонецЕсли;
			
			ТекущийШагПроверен = Истина;
			ПроверкаШагаУспешно();
			Если Не ПроверкаТекущего Тогда
				НомерТекущегоШага = ТекущийШаг;
				ПерейтиНаСледующийШаг(НомерТекущегоШага);
				ПерейтиДалееЗавершение(Истина);
			Иначе
				ПроверкаТекущего = Ложь;
			КонецЕсли;
		Иначе
			ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
			Попытка
				ВызватьИсключение ОписаниеОшибки;
			Исключение
				ПроверкаШагаОшибка(ИнформацияОбОшибке());
			КонецПопытки;
			Возврат;
		КонецЕсли;
	Иначе
		Попытка
			ВызватьИсключение "Ошибка при получении результата фонового задания";
		Исключение
			ПроверкаШагаОшибка(ИнформацияОбОшибке());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если АвтоПроверка Тогда
		ПерейтиДалееЗавершение(Истина);
		ПроверитьВсе();
	КонецЕсли;
	
КонецПроцедуры // ПриЗавершенииПроверкиТЖ()


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ

&НаСервереБезКонтекста
// Получить представление кластера
//
// Параметры:
//  ПортКластера - Число, номер порта кластера
//  Описание - Строка, дополнительное описание кластера
//
// Возвращаемое значение:
//  Строка - представление кластера
//
Функция ПредставлениеКластера(ПортКластера, Описание = Неопределено)
	
	Дополнительно = ?(Описание = Неопределено, "", " (" + Описание + ")");
	Возврат Строка(ПортКластера) + Дополнительно;
	
КонецФункции // ПредставлениеКластера()

&НаСервереБезКонтекста
// Получить представление информационной базы
//
// Параметры:
//  ПортКластера - Число, номер порта кластера
//  Описание - Строка, дополнительное описание кластера
//
// Возвращаемое значение:
//  Строка - представление кластера
//
Функция ПредставлениеИБ(ИмяИб, Описание = Неопределено)
	
	Дополнительно = ?(Описание = Неопределено, "", " (" + Описание + ")");
	Возврат Строка(ИмяИб) + Дополнительно;
	
КонецФункции // ПредставлениеИБ()

&НаСервере
// Определить, можно ли выбирать типы показателей производительности
//
// Возвращаемое значение:
//  Булево - Истина, можно менять
//
Функция МенятьТипыПоказателей(ИБКластера)
	
	Возврат Не ЗначениеЗаполнено(Объект.Ссылка) Или ПредыдущееИмяИБ <> ИБКластера.Name;
	
КонецФункции // МенятьТипыПоказателей()

&НаСервереБезКонтекста
// Получить группу оперативных показателей
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - строка группы показателей "Оперативные показатели"
//
Функция ГруппаОперативныхПоказателей(ДеревоТипыПоказателей)
	
	Возврат ДеревоТипыПоказателей.Строки[0];
	
КонецФункции // ГруппаОперативныхПоказателей()

&НаСервереБезКонтекста
// Получить группу аналитических показателей
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - строка группы показателей "Аналитические показатели"
//
Функция ГруппаАналитическихПоказателей(ДеревоТипыПоказателей)
	
	Возврат ДеревоТипыПоказателей.Строки[1];
	
КонецФункции // ГруппаАналитическихПоказателей()

&НаКлиенте
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УстановитьОписаниеСУБД()
	
	Если ЗначениеЗаполнено(Объект.ТипСУБД) 
		И Объект.ТипСУБД <> ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer")
		И Объект.ТипСУБД <> ПредопределенноеЗначение("Перечисление.ТипыСУБД.PostgreSQL") Тогда
		Элементы.ТипСУБД.ЦветТекста = Новый Цвет(250, 0, 0);
	Иначе
		Элементы.ТипСУБД.ЦветТекста = Новый Цвет(0, 0, 0);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СерверСУБД)
		И (ВРЕГ(Объект.СерверСУБД) = "LOCALHOST" ИЛИ ВРЕГ(Объект.СерверСУБД) = "127.0.0.1") Тогда
		Элементы.СерверСУБД.ЦветТекста = Новый Цвет(250, 0, 0);
	Иначе
		Элементы.СерверСУБД.ЦветТекста = Новый Цвет(0, 0, 0);
	КонецЕсли;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция ПолучитьИмяСервераСУБДНаСервере(ИмяСервераСУБД, ИмяСервера1С)
	
	ИмяСервера = MSSQL.ПолучитьИмяСервераСУБД(ИмяСервераСУБД, ИмяСервера1С);
	Возврат ИмяСервера;
	
КонецФункции // ПолучитьИмяСервераСУБДНаСервере()


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ПолучитьИмяШага(Страница)
	
	ИмяШага = СтрЗаменить(Страница.Имя, "Страница", "");
	
	Возврат ИмяШага;
	
КонецФункции // ПолучитьИмяШага()

&НаКлиенте
Процедура КомандаЗарегистрироватьCOMСоединитель(Команда)
	
	ОписаниеОшибки = "";
	Успешно = КомандаЗарегистрироватьCOMСоединительНаСервере(ОписаниеОшибки);
	Если Успешно Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗарегистрироватьCOMСоединительЗавершение", ЭтотОбъект);
		ТекстПредупреждения = "COM-коннектор успешно зарегистрирован. Выполните перезапуск клиентского приложения и службы сервера 1С:Предприятия для продолжения настройки." + Символы.ПС + 
			"Завершить работу клиентского приложения?";
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТекстПредупреждения = "При регистрации COM-коннектора возникла ошибка: " + ОписаниеОшибки;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура КомандаЗарегистрироватьCOMСоединительЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗарегистрироватьCOMСоединительЗавершение()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция КомандаЗарегистрироватьCOMСоединительНаСервере(ОписаниеОшибки)
	
	КаталогИсполняемыхФайлов = КаталогПрограммы();
	ТекстКоманды = "regsvr32 comcntr.dll /s";
	Попытка
		КодВозврата = Неопределено;
		ЗапуститьПриложение(ТекстКоманды, КаталогИсполняемыхФайлов, Истина, КодВозврата);
		Если КодВозврата <> 0 Тогда
			ОписаниеОшибки = "Код возврата: " + КодВозврата;
			Результат = Ложь;
		Иначе
			Результат = Истина;
		КонецЕсли;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // КомандаЗарегистрироватьCOMСоединительНаСервере()

// Служебная процедура, необходимая для корректного прохождения
// проверки "Поиск неиспользуемых процедур и функций"
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура ВызовыНеявноИспользуемыхПроцедурИФункций()
	
	Если Ложь Тогда
		ПроверитьCOMСоединительНаСервере(Неопределено, Неопределено, Неопределено, Неопределено);
		СледующийШаг(Неопределено);
		ШагCOMСоединитель();
		ШагГотово();
		ШагИнформационнаяБаза();
		ШагСУБД();
		ШагКластер();
		ШагНаименованиеПодключения();
		ШагНачало();
		ШагНеобходимCOMСоединитель(Неопределено);
		ШагНеобходимГотово(Неопределено);
		ШагНеобходимИнформационнаяБаза(Неопределено);
		ШагНеобходимСУБД(Неопределено);
		ШагНеобходимКластер(Неопределено);
		ШагНеобходимНаименованиеПодключения(Неопределено);
		ШагНеобходимНачало(Неопределено);
		ШагНеобходимПоказатели1С(Неопределено);
		ШагНеобходимПоказателиОС(Неопределено);
		ШагНеобходимСерверЦУП(Неопределено);
		ШагНеобходимСерверЦУПИБ(Неопределено);
		ШагНеобходимСерверЦУПКластерИБ(Неопределено);
		ШагНеобходимСерверЦУПТЖ(Неопределено);
		ШагНеобходимСерверЦУПТрассировки(Неопределено);
		ШагНеобходимТехнологическийЖурнал(Неопределено);
		ШагНеобходимТипыПоказателей(Неопределено);
		ШагНеобходимТрассировки(Неопределено);
		ШагНеобходимЦентральныйСервер(Неопределено);
		ШагПоказатели1С();
		ШагПоказателиОС();
		ШагСерверСтраницаЦУПКластерИБ();
		ШагСерверЦУП();
		ШагСерверЦУПИБ();
		ШагСерверЦУПТЖ();
		ШагСерверЦУПТрассировки();
		ШагТехнологическийЖурнал();
		ШагТипыПоказателей();
		ШагТрассировки();
		ШагЦентральныйСервер();
		ВызовыНеявноИспользуемыхПроцедурИФункций();
	КонецЕсли;
	
КонецПроцедуры // ВызовыНеявноИспользуемыхПроцедурИФункций()

&НаКлиенте
Процедура ИменаКаталоговТЖСерверКластераРедактированиеПриИзменении(Элемент)
	
	ЗаполнитьИменаКаталоговПоУмолчанию();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ЗаполнитьИменаКаталоговПоУмолчанию()
	
	ТекущиеДанные = Элементы.ИменаКаталоговТЖ.ТекущиеДанные;
	Если Не ПустаяСтрока(ТекущиеДанные.СерверКластера)
		И ПустаяСтрока(ТекущиеДанные.Конфигурация)
		И ПустаяСтрока(ТекущиеДанные.Сетевой)
		И ПустаяСтрока(ТекущиеДанные.Локальный) Тогда
		
		ТекущиеДанные.Конфигурация = "\\" + ТекущиеДанные.СерверКластера + "\conf";
		ТекущиеДанные.Сетевой = "\\" + ТекущиеДанные.СерверКластера + "\Logs";
		ТекущиеДанные.Локальный = "C:\Logs";
		
	КонецЕсли;
	ТекущийШагПроверен = Ложь;

КонецПроцедуры // ЗаполнитьИменаКаталоговПоУмолчанию()

&НаКлиенте
Процедура СпособАутентификацииПриИзменении(Элемент)
	
	ПоляВводаДоступны = (Объект.СпособАутентификации = ПредопределенноеЗначение("Перечисление.СпособыАутентификации.ПоЛогинуИПаролю"));
	Элементы.ИмяПользователяСУБД.Доступность = ПоляВводаДоступны;
	Элементы.ПарольПользователяСУБД.Доступность = ПоляВводаДоступны;
	ТекущийШагПроверен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПользователяСУБДПриИзменении(Элемент)
	ТекущийШагПроверен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПарольПользователяСУБДПриИзменении(Элемент)
	ТекущийШагПроверен = Ложь;
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ПолучитьОписаниеИБ()
	
	ОписаниеИБ = Новый Структура("ТипСУБД,СерверСУБД,СерверИБ,СпособАутентификации,ИмяПользователяСУБД,ПарольПользователяСУБД,ИмяБД",
		Объект.ТипСУБД,
		Объект.СерверСУБД,
		Объект.СерверИБ,
		Объект.СпособАутентификации,
		ИмяПользователяСУБД,
		ПарольПользователяСУБД,
		Объект.ИмяБД
	);
	
	Возврат ОписаниеИБ;
	
КонецФункции // ПолучитьОписаниеИБ()

&НаКлиенте
Процедура ИменаКаталоговТЖПриИзменении(Элемент)
	
	ТекущийШагПроверен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИменаКаталоговТЖКонфигурацияРедактированиеПриИзменении(Элемент)
	
	ТекущийШагПроверен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИменаКаталоговТЖСерверКластераПриИзменении(Элемент)
	
	ЗаполнитьИменаКаталоговПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИменаКаталоговТЖСетевойРедактированиеПриИзменении(Элемент)
	ТекущийШагПроверен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ИменаКаталоговТЖЛокальныйРедактированиеПриИзменении(Элемент)
	ТекущийШагПроверен = Ложь;
КонецПроцедуры


