
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УдалитьИБ(ИБ) Экспорт
	
	НачатьТранзакцию();
		
	Попытка
		ИнформационнаяБаза.УдалитьЗакладки(ИБ);
		ИБОбъект = ИБ.ПолучитьОбъект();
		ИБОбъект.Удалить();
		ОписаниеИБ = "";
		ТекущаяИБ = Справочники.ИнформационныеБазы.ПустаяСсылка();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // УдалитьИБ()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПереименоватьИБ(ИБСсылка, НовоеНаименование) Экспорт
	
	НачатьТранзакцию();
	
	Если НовоеНаименование <> ИБСсылка.Наименование Тогда
		ИБОбъект = ИБСсылка.ПолучитьОбъект();
		ИБОбъект.Наименование = НовоеНаименование;
		ИБОбъект.Записать();
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры // ПереименоватьИБ()

#Если Сервер Тогда

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ПроверитьИнформационнуюБазу(ПараметрыЗадания, АдресВоВременномХранилище) Экспорт
	
	Попытка
		ДлительныеОперации.СообщитьПрогресс(0, "подключение к центральному серверу кластера");
		АдресСервера = МастерНастройки.СформироватьАдресСервера(ПараметрыЗадания.ЦентральныйСервер, ПараметрыЗадания.ПортЦентральногоСервера);
		АгентСервера = МастерНастройки.ПодключитьсяКЦентральномуСерверу(АдресСервера);
		
		ДлительныеОперации.СообщитьПрогресс(10, "подключение к кластеру");
		ОписаниеКластера = ИнформационнаяБаза.НайтиКластерПоПорту(АгентСервера, ПараметрыЗадания.Кластер);
		АгентСервера.Authenticate(ОписаниеКластера, ПараметрыЗадания.АдминистраторКластера, ПараметрыЗадания.ПарольАдминистратораКластера);
		
		ДлительныеОперации.СообщитьПрогресс(25, "подключение к информационной базе");
		СтрокаСоединенияИБ = ИнформационнаяБаза.СформироватьСтрокуСоединения(
			ОписаниеКластера.HostName,
			ОписаниеКластера.MainPort,
			ПараметрыЗадания.ИмяИБ,
			ПараметрыЗадания.ИмяПользователяИБ,
			ПараметрыЗадания.ПарольПользователяИБ);
		
		ПодключитьсяКИБ(СтрокаСоединенияИБ);
		
		ДлительныеОперации.СообщитьПрогресс(75, "получение информации о информационной базе");
		ИБКластера = ИнформационнаяБаза.НайтиИБПоИмени(АгентСервера,
		                                                        ОписаниеКластера,
		                                                        ПараметрыЗадания.ИмяИБ,
		                                                        ПараметрыЗадания.ИмяПользователяИБ,
		                                                        ПараметрыЗадания.ПарольПользователяИБ);
		
		ИмяИБ = ИБКластера.Name;
		ТипСУБД = СУБД.ПолучитьТипСУБД(ИБКластера.DBMS);
		СерверСУБД = ИБКластера.DBServerName;
		ИмяБД = ИБКластера.DBName;
		
		ДлительныеОперации.СообщитьПрогресс(100, "проверка завершена");
		РезультатПроверки = Истина;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		РезультатПроверки = Ложь;
	КонецПопытки;
	
	Если АдресВоВременномХранилище <> Неопределено Тогда
		ПараметрыИБ = Новый Структура("ИмяИБ,ТипСУБД,СерверСУБД,ИмяБД,СтрокаСоединенияИБ",
			ИмяИБ,
			ТипСУБД,
			СерверСУБД,
			ИмяБД,
			СтрокаСоединенияИБ
		);
		Результат = Новый Структура("Успешно,ПараметрыИБ,ОписаниеОшибки", РезультатПроверки, ПараметрыИБ, ОписаниеОшибки);
		ПоместитьВоВременноеХранилище(Результат, АдресВоВременномХранилище);
	КонецЕсли;
	
КонецПроцедуры // ШагИнформационнаяБазаНаСервере()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьСУБД(ПараметрыЗадания, АдресВоВременномХранилище) Экспорт
	
	Попытка
		ДлительныеОперации.СообщитьПрогресс(0, "подключение к информационной базе");
		ПодключениеИБ = КонтекстВызовСервера.ПодключениеИБ(ПараметрыЗадания.ОписаниеИБ);
		ДлительныеОперации.СообщитьПрогресс(20, "получение информации о настройках базы данных");
		РежимБлокировок = КонтекстВызовСервера.РежимУправленияБлокировкойДанных(ПодключениеИБ);
		ДлительныеОперации.СообщитьПрогресс(40, "получение версии СУБД");
		КодВерсииСУБД = КонтекстВызовСервера.ВерсияСУБД(ПодключениеИБ, ПараметрыЗадания.СерверСУБД, ПараметрыЗадания.СерверИБ, ПараметрыЗадания.СпособАутентификации, ПараметрыЗадания.ИмяПользователяСУБД, ПараметрыЗадания.ПарольПользователяСУБД);
		ДлительныеОперации.СообщитьПрогресс(60, "получение типа ОС СУБД");
		ТипОССервераСУБД = КонтекстВызовСервера.ТипОССервераСУБД(ПараметрыЗадания.ОписаниеИБ);
		Если ПараметрыЗадания.ОписаниеИБ.ТипСУБД = Перечисления.ТипыСУБД.MSSQLServer Тогда
			ДлительныеОперации.СообщитьПрогресс(80, "проверка сбора показателей DMV");
			MSSQL.ПолучитьЗначениеСчетчикаСУБД(ПараметрыЗадания.ОписаниеИБ, "Таймауты");
			MSSQL.ПолучитьЗначениеСчетчикаСУБД(ПараметрыЗадания.ОписаниеИБ, "Взаимоблокировки");
		КонецЕсли;
		ДлительныеОперации.СообщитьПрогресс(100, "проверка завершена");
		РезультатПроверки = Истина;
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		РезультатПроверки = Ложь;
	КонецПопытки;
	
	Если АдресВоВременномХранилище <> Неопределено Тогда
		ПараметрыСУБД = Новый Структура("РежимУправленияБлокировкойДанных,КодВерсииСУБД,ТипОССервераСУБД",
			РежимБлокировок,
			КодВерсииСУБД,
			ТипОССервераСУБД
		);
		
		Результат = Новый Структура("Успешно,ПараметрыСУБД,ОписаниеОшибки", РезультатПроверки, ПараметрыСУБД, ОписаниеОшибки);
		ПоместитьВоВременноеХранилище(Результат, АдресВоВременномХранилище);
	КонецЕсли;
	
КонецФункции // ШагИнформационнаяБазаНаСервере()

// Проверить возможность подключения к исследуемой ИБ клиентом ЦУП
//
// Параметры:
//  СтрокаСоединенияИБ - Строка соединения с исследуемой ИБ
//
Процедура ПодключитьсяКИБ(СтрокаСоединенияИБ) Экспорт
	
	Попытка
		МастерНастройки.ПодключитьсяКИБ(СтрокаСоединенияИБ);
	Исключение
		ОписаниеОшибки = "
		                 |Ошибка аутентификации ЦУП в исследуемой информационной базе.
		                 |
		                 |";
		ВызватьИсключение ОписаниеОшибки + ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
КонецПроцедуры // ПроверитьИнформационнаяБазаНаКлиенте()

Процедура ПроверитьТехнологическийЖурнал(ПараметрыЗадания, АдресВоВременномХранилище) Экспорт
	
	Попытка
		АдресСервера = МастерНастройки.СформироватьАдресСервера(ПараметрыЗадания.ЦентральныйСервер, ПараметрыЗадания.ПортЦентральногоСервера);
		АгентСервера = МастерНастройки.ПодключитьсяКЦентральномуСерверу(АдресСервера);
		
		ОписаниеКластера = ИнформационнаяБаза.НайтиКластерПоПорту(АгентСервера, ПараметрыЗадания.Кластер);
		АгентСервера.Authenticate(ОписаниеКластера, ПараметрыЗадания.АдминистраторКластера, ПараметрыЗадания.ПарольАдминистратораКластера);
		ПроверитьНастройкиТЖ(АгентСервера, ОписаниеКластера, ПараметрыЗадания.ИменаКаталоговТЖ);
		ПроверитьРаботуТЖ(ПараметрыЗадания.ИменаКаталоговТЖ, ПараметрыЗадания.НеУдалятьСлужебныеДанные);
		РезультатПроверки = Истина;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		РезультатПроверки = Ложь;
	КонецПопытки;
	
	Если АдресВоВременномХранилище <> Неопределено Тогда
		Результат = Новый Структура("Успешно,ОписаниеОшибки", РезультатПроверки, ОписаниеОшибки);
		ПоместитьВоВременноеХранилище(Результат, АдресВоВременномХранилище);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьТехнологическийЖурнал()

// Проверить настройки технологического журнала
//
// Параметры:
//  АгентСервера - IServerAgentConnection, соединение с центральным сервером
//  ОписаниеКластера - IClusterInfo, который следует проверить
//  ПараметрыТЖ - ТаблицаЗначений, настройки ТЖ
//
Процедура ПроверитьНастройкиТЖ(АгентСервера, ОписаниеКластера, ПараметрыТЖ)
	
	// Проверка доступности ТЖ для ЦУП
	Попытка
		МастерНастройки.ПроверитьДоступностьТЖ(ПараметрыТЖ);
	Исключение
		ОписаниеОшибки = "
		                 |
		                 |Технологический журнал не доступен для ЦУП.
		                 |
		                 |"
		               + ИнформацияОбОшибке().Описание;
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры // ПроверитьНастройкиТЖ()

// Убедиться, что сервер исследуемой базы может успешно
// создавать файлы технологического журнала
//
// Параметры:
//  НастройкиТЖ - ТаблицаЗначений, настройки ТЖ
//
Процедура ПроверитьРаботуТЖ(НастройкиТЖ, НеУдалятьСлужебныеДанные)
	
	ДлительныеОперации.СообщитьПрогресс(0, "настройка logcfg.xml");
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	// Подготовить тестовую настройку технологического журнала
	Конфигурация = ТехнологическийЖурнал.СоздатьКонфигурациюТехнологическогоЖурнала();
	Журнал = ТехнологическийЖурнал.ДобавитьРазделЖурнала(Конфигурация, "", Формат(1, "ЧГ=0"));
	Событие = ТехнологическийЖурнал.ДобавитьСобытие(Журнал);
	ТехнологическийЖурнал.ДобавитьУсловиеРавно(Событие, "Name", "EXCP");
	
	// Включить технологический журнал
	СтрокаНастройки = ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	ОписательТЖ = ТехнологическийЖурнал.ВключитьТехнологическийЖурнал(СтрокаНастройки, НастройкиТЖ);
	ОписательТЖ.Вставить("КаталогиТЖРезультат", Новый Соответствие);
	
	ДлительныеОперации.СообщитьПрогресс(0, "ожидание включения сбора технологического журнала");
	
	#Если Клиент Тогда
		Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	#КонецЕсли
	
	ДатаЗавершитьВключение = ТекущаяДата() + 60;
	ДатаЗавершитьВыключение = ДатаЗавершитьВключение + 60;
	
	Пока ДатаЗавершитьВключение >= ТекущаяДата() Цикл
		Для Каждого КаталогТЖ Из ОписательТЖ.КаталогиТЖ Цикл
			Если ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ] = Неопределено Тогда
				ОписательТЖ.КаталогиТЖРезультат.Вставить(КаталогТЖ, Новый Соответствие);
				
				ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ].Вставить("Результат", Ложь);
				ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ].Вставить("ОписаниеОшибки", "");
				
				ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ].Вставить("РезультатВыключения", Ложь);
				ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ].Вставить("ОписаниеОшибкиВыключения", "");
			КонецЕсли;
			
			Если НЕ ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["Результат"] Тогда
				ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["Результат"] = ОбщегоНазначения.ПроверитьВключениеТЖ(КаталогТЖ);
			КонецЕсли;
		КонецЦикла;
		
		ВсегоВключено = 0;
		Для Каждого КаталогТЖ Из ОписательТЖ.КаталогиТЖ Цикл
			Если ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["Результат"] Тогда
				ВсегоВключено = ВсегоВключено + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсегоВключено = ОписательТЖ.КаталогиТЖ.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		КипВнешнийКомпонент.Пауза(Инструменты, 1000);
		ПрогрессВыполнения = Окр(100*(120 - (ДатаЗавершитьВыключение - ТекущаяДата()))/120);
		ДлительныеОперации.СообщитьПрогресс(ПрогрессВыполнения, "ожидание включения сбора технологического журнала");
	КонецЦикла;
	
	НомерНастройки = 0;
	Для Каждого КаталогТЖ Из ОписательТЖ.КаталогиТЖ Цикл
		ОписаниеТЖ = НастройкиТЖ[НомерНастройки];
		
		Если НЕ ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["Результат"] Тогда
			ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["ОписаниеОшибки"] = 
			"Серверу исследуемой информационной базы не удалось включить технологический журнал """ + ОписаниеТЖ.Конфигурация + """ (строка настроек №" + (ОписаниеТЖ.НомерСтроки) + ").
			|Возможные причины проблемы:
			|	- неправильно указан каталог файла (logcfg.xml) на сервере исследуемой информационной базы """ + ОписаниеТЖ.Конфигурация + """
			|	- рабочие процессы исследуемой информационной базы не имеют права записи в каталог""" + ОписаниеТЖ.Локальный + """
			|	- сетевой каталог """ + ОписаниеТЖ.Сетевой + """ не указывает на локальный каталог """ + ОписаниеТЖ.Локальный + """
			|	- файл (logcfg.xml) поврежден. Удалите его или исправьте ошибки в нем.";
		КонецЕсли;
		
		НомерНастройки = НомерНастройки + 1;
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(ПрогрессВыполнения, "настройка logcfg.xml");
	
	ТехнологическийЖурнал.ОтключитьТехнологическийЖурнал(ОписательТЖ, НастройкиТЖ);
	
	ДатаЗавершитьВыключение = ТекущаяДата() + 63;
	ПрогрессВыполнения = Окр(100*(120 - (ДатаЗавершитьВыключение - ТекущаяДата()))/120);
	ДлительныеОперации.СообщитьПрогресс(ПрогрессВыполнения, "ожидание отключения сбора технологического журнала");
	
	Пока ДатаЗавершитьВыключение >= ТекущаяДата() Цикл
		Для Каждого КаталогТЖ Из ОписательТЖ.КаталогиТЖ Цикл
			Если НеУдалятьСлужебныеДанные Тогда
				ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["РезультатВыключения"] = Истина;
			КонецЕсли;
			
			Если НЕ ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["РезультатВыключения"] Тогда
				Попытка
					УдалитьФайлы(КаталогТЖ);
					ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["РезультатВыключения"] = Истина;
				Исключение
					ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["ОписаниеОшибкиВыключения"] = ИнформацияОбОшибке().Описание;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
		
		ВсегоВыключено = 0;
		Для Каждого КаталогТЖ Из ОписательТЖ.КаталогиТЖ Цикл
			Если ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["РезультатВыключения"] Тогда
				ВсегоВыключено = ВсегоВыключено + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсегоВыключено = ОписательТЖ.КаталогиТЖ.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		КипВнешнийКомпонент.Пауза(Инструменты, 1000);
		ПрогрессВыполнения = Окр(100*(120 - (ДатаЗавершитьВыключение - ТекущаяДата()))/120);
		ДлительныеОперации.СообщитьПрогресс(ПрогрессВыполнения, "ожидание отключения сбора технологического журнала");
	КонецЦикла;
	
	Для Каждого КаталогТЖ Из ОписательТЖ.КаталогиТЖ Цикл
		Если ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["РезультатВыключения"] Тогда
			ОтладкаКлиентСервер.Действие("ОчиститьТехнологическийЖурнал", КаталогТЖ);
			ОтладкаКлиентСервер.Результат("ОчиститьТехнологическийЖурнал", КаталогТЖ);
		КонецЕсли;
	КонецЦикла;
	КипВнешнийКомпонент.Пауза(Инструменты, 1000);
	
	ОписаниеОшибки = "";
	Для Каждого КаталогТЖ Из ОписательТЖ.КаталогиТЖ Цикл
		Если НЕ ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["Результат"] Тогда
			ОписаниеОшибки = ОписаниеОшибки + ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["ОписаниеОшибки"] + Символы.ПС + Символы.ПС; 
		КонецЕсли;
		
		Если НЕ ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["РезультатВыключения"] Тогда
			ОписаниеОшибки = ОписаниеОшибки + ОписательТЖ.КаталогиТЖРезультат[КаталогТЖ]["ОписаниеОшибкиВыключения"] + Символы.ПС + Символы.ПС; 
		КонецЕсли;
	КонецЦикла;
	
	ДлительныеОперации.СообщитьПрогресс(100, "проверка завершена");
	
	Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
		ВызватьИсключение Символы.ПС + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРаботуТЖ()

// Возвращает список счетчиков, сбор которых настроен для переданного агента
//
// Параметры:
//  АгентЦКК  - СправочникСсылка.АгентыЦКК - Ссылка на агент ЦКК,
//                 данные по которому нужно получить
//
// Возвращаемое значение:
//   Соответствие   - Коллекция, содержащая массив со списком счетчиков
//
Функция ПолучитьСчетчикиАгента(АгентЦКК) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеБазыСерверы.Ссылка КАК Ссылка,
	               |	ИнформационныеБазыСерверы.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ Серверы
	               |ИЗ
	               |	Справочник.ИнформационныеБазы.Серверы КАК ИнформационныеБазыСерверы
	               |ГДЕ
	               |	ИнформационныеБазыСерверы.АгентЦКК = &АгентЦКК
	               |	И ИнформационныеБазыСерверы.СпособСбораСчетчиков = ЗНАЧЕНИЕ(Перечисление.СпособыСбораСчетчиков.АгентЦКК)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИнформационныеБазыСчетчикиОС.Счетчик.Наименование КАК Счетчик
	               |ИЗ
	               |	Серверы КАК Серверы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеБазы.СчетчикиОС КАК ИнформационныеБазыСчетчикиОС
	               |		ПО Серверы.Ссылка = ИнформационныеБазыСчетчикиОС.Ссылка
	               |			И Серверы.НомерСтроки = ИнформационныеБазыСчетчикиОС.НомерСтрокиСервера";
	
	Запрос.УстановитьПараметр("АгентЦКК", АгентЦКК);
	СобираемыеСчетчики = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счетчик");
	
	Возврат СобираемыеСчетчики;
	
КонецФункции // ПолучитьСчетчикиАгента()

// Возвращает список агентов, которые используются переданной информационной базой
// для сбора счетчиков производительности
//
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационныеБазы - Информационная база
//
// Возвращаемое значение:
//   Массив   - Массив ссылок на элементы справочника "Агенты ЦКК"
//
Функция ПолучитьСписокАгентов(ИнформационнаяБаза) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеБазыСерверы.АгентЦКК КАК АгентЦКК
	               |ИЗ
	               |	Справочник.ИнформационныеБазы.Серверы КАК ИнформационныеБазыСерверы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИнформационныеБазы.СчетчикиОС КАК ИнформационныеБазыСчетчикиОС
	               |		ПО ИнформационныеБазыСерверы.Ссылка = ИнформационныеБазыСчетчикиОС.Ссылка
	               |			И ИнформационныеБазыСерверы.НомерСтроки = ИнформационныеБазыСчетчикиОС.НомерСтрокиСервера
	               |ГДЕ
	               |	ИнформационныеБазыСерверы.СпособСбораСчетчиков = ЗНАЧЕНИЕ(Перечисление.СпособыСбораСчетчиков.АгентЦКК)
	               |	И ИнформационныеБазыСерверы.Ссылка = &ИнформационнаяБаза";
	
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	АгентыЦКК = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АгентЦКК");
	
	Возврат АгентыЦКК;
	
КонецФункции // ПолучитьСписокАгентов()


#КонецЕсли
