
///////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ОБРАБОТЧИКИ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СоздатьЦвета();
	СоздатьСтили();
	
	СправочникОбъект = Объект.Ссылка.ПолучитьОбъект();
	ЛинияОбъект = СправочникОбъект.Линия.Получить();
	
	Элементы.ПримерЦвета.ЦветФона = СправочникОбъект.Цвет.Получить();
	СписокСтилей = ПолучитьИндексПоСтилю(ЛинияОбъект.ТипЛинии);
	ТолщинаЛинии = ЛинияОбъект.Толщина;
	ЗаполнитьПроизвольныйМасштаб(СправочникОбъект.Масштаб);
	
	СинхронизироватьСписокЦветов();
	СинхронизироватьПримерСтиля();
	СинхронизироватьПримерТолщины();
	СинхронизироватьСписокМасштабов();
	
	ЕстьПараметры = ЕстьДополнительныеПараметры();
	Элементы.Страницы.ПодчиненныеЭлементы.СтраницаДополнительные.Видимость = ЕстьПараметры;
	ЗагрузитьПараметры();
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаOK(Команда)
	
	СохранитьИзмененияНаСервере();
	Закрыть(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора цвета из списка
//
Процедура СписокЦветовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолучитьЦветПоИндексу(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора цвета нажатием на пример цвета
//
Процедура ПримерЦветаНажатие(Элемент)
	
	ВыбратьЦвет(Элементы.ПримерЦвета.ЦветФона);
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора стиля
//
Процедура СписокСтилейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокСтилей = ВыбранноеЗначение;
	СинхронизироватьПримерСтиля();
	
КонецПроцедуры

&НаКлиенте
// Обработчик изменения толщины
//
Процедура ТолщинаЛинииПриИзменении(Элемент)
	
	СинхронизироватьПримерТолщины();
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора масштаба из списка
//
Процедура СписокМасштабовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокМасштабов = ВыбранноеЗначение;
	СинхронизироватьМасштаб();
	
КонецПроцедуры

&НаКлиенте
Процедура МасштабЧислительПриИзменении(Элемент)
	
	СинхронизироватьСписокМасштабов();
	
КонецПроцедуры

&НаКлиенте
Процедура МасштабЗнаменательПриИзменении(Элемент)
	
	СинхронизироватьСписокМасштабов();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзмененияНаСервере()
	
	СтандартнаяОбработка = Ложь;
	
	ПоказательОбъект = Объект.Ссылка.ПолучитьОбъект();
	
	// Стиль линии
	ИсходнаяЛиния = ПоказательОбъект.Линия.Получить();
	ТекущийСтиль = ПолучитьСтильПоИндексу(СписокСтилей);
	Если ИсходнаяЛиния.ТипЛинии <> ТекущийСтиль Или ИсходнаяЛиния.Толщина <> ТолщинаЛинии Тогда
		ПоказательОбъект.Линия = Новый ХранилищеЗначения(Новый Линия(ТекущийСтиль, ТолщинаЛинии));
	КонецЕсли;
	
	// Масштаб
	ПроизвольныйМасштаб = МасштабЧислитель / МасштабЗнаменатель;
	Если ПоказательОбъект.Масштаб <> ПроизвольныйМасштаб Тогда
		ПоказательОбъект.Масштаб = ПроизвольныйМасштаб;
	КонецЕсли;
	
	// Цвет
	Если ПоказательОбъект.Цвет.Получить() <> Элементы.ПримерЦвета.ЦветФона Тогда
		ПоказательОбъект.Цвет = Новый ХранилищеЗначения(Элементы.ПримерЦвета.ЦветФона);
	КонецЕсли;
	
	СохранитьПараметры(ПоказательОбъект);
	
	ПоказательОбъект.Записать();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура УправлениеДоступностью()
	
	Если СписокМасштабов <> 0 Тогда
		Элементы.ГруппаПроизвольныйМасштаб.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПроизвольныйМасштаб.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.Родитель = Справочники.Показатели.ПроизводительностьОборудования Тогда
		Элементы.ПараметрыПоказателя.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностью()


///////////////////////////////////////////////////////////////////////////////
// МАСШТАБ

&НаСервере
// Синхронизировать масштаб со списком
//
Функция СинхронизироватьМасштаб()
	
	Если СписокМасштабов <> 0 Тогда
		ЗаполнитьПроизвольныйМасштаб(СписокМасштабов);
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецФункции // СинхронизироватьМасштаб()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьПроизвольныйМасштаб(ЗначениеМасштаба)
	
	Если ЗначениеМасштаба >= 1 Тогда
		МасштабЧислитель = ЗначениеМасштаба;
		МасштабЗнаменатель = 1;
	Иначе
		МасштабЧислитель = 1;
		МасштабЗнаменатель = 1/ЗначениеМасштаба;
	КонецЕсли;

	
КонецПроцедуры // ЗаполнитьПроизвольныйМасштаб()

&НаСервере
// Синхронизировать список масштабов с масштабом
//
Процедура СинхронизироватьСписокМасштабов()
	
	ПроизвольныйМасштаб = МасштабЧислитель / МасштабЗнаменатель;
	СтрокаМасштаба = Элементы.СписокМасштабов.СписокВыбора.НайтиПоЗначению(ПроизвольныйМасштаб);
	
	Если СтрокаМасштаба = Неопределено Тогда
		СписокМасштабов = 0;
		Возврат;
	КонецЕсли;
	
	СписокМасштабов = СтрокаМасштаба.Значение;
	
КонецПроцедуры // СинхронизироватьСписокМасштабов()


///////////////////////////////////////////////////////////////////////////////
// ТОЛЩИНА

&НаСервере
// Установить пример толщины линии
//
Процедура СинхронизироватьПримерТолщины()
	
	Если ТолщинаЛинии < 20 Тогда
		Элементы.ПримерТолщины.Картинка = БиблиотекаКартинок["ЛинияТолщина" + ТолщинаЛинии];
	Иначе
		Элементы.ПримерТолщины.Картинка = БиблиотекаКартинок["ЛинияТолщина19"];
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьПримерТолщины()


///////////////////////////////////////////////////////////////////////////////
// СТИЛЬ

&НаСервере
// Установить пример стиля в соответствии со стилем списка
//
Процедура СинхронизироватьПримерСтиля()
	
	Элементы.ПримерСтиля.Картинка = КоллекцияСтилей[СписокСтилей].Картинка;
	
КонецПроцедуры // СинхронизироватьПримерСтиля()

&НаСервере
// Получить индекс в списке стилей по стилю
//
// Параметры:
//  ВыбранныйСтиль - ТипЛинииДиаграммы, для которого нужно получить индекс
//
// Возвращаемое значение:
//  Число - выбранный индекс
//
Функция ПолучитьИндексПоСтилю(ВыбранныйСтиль)
	
	Индекс = Неопределено;
	Отбор = Новый Структура("Стиль", ВыбранныйСтиль);
	СтрокиСтиля = КоллекцияСтилей.НайтиСтроки(Отбор);
	Если СтрокиСтиля.Количество() > 0 Тогда
		Индекс = СтрокиСтиля[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции // ПолучитьИндексПоСтилю()

&НаСервере
// Получить стиль по индексу в списке
//
// Параметры:
//  Индекс - Число, индекс для которого нужно определить стиль
//
// Возвращаемое значение:
//  ТипЛинииДиаграммы - выбранный стиль
//
Функция ПолучитьСтильПоИндексу(Индекс)
	
	Возврат КоллекцияСтилей.НайтиПоИдентификатору(Индекс).Стиль;
	
КонецФункции // ПолучитьСтильПоИндексу()

&НаСервере
// Создать таблицу соответствий стилей и индексов
//
Процедура СоздатьСтили()
	
	СтрокаСтиля = КоллекцияСтилей.Добавить();
	СтрокаСтиля.Стиль = ТипЛинииДиаграммы.Сплошная;
	СтрокаСтиля.Картинка = БиблиотекаКартинок.ЛинияСплошная;
	
	СтрокаСтиля = КоллекцияСтилей.Добавить();
	СтрокаСтиля.Стиль = ТипЛинииДиаграммы.Пунктир;
	СтрокаСтиля.Картинка = БиблиотекаКартинок.ЛинияПунктирная;
	
	СтрокаСтиля = КоллекцияСтилей.Добавить();
	СтрокаСтиля.Стиль = ТипЛинииДиаграммы.Точечная;
	СтрокаСтиля.Картинка = БиблиотекаКартинок.ЛинияТочечная;
	
	СтрокаСтиля = КоллекцияСтилей.Добавить();
	СтрокаСтиля.Стиль = ТипЛинииДиаграммы.ПунктирТочка;
	СтрокаСтиля.Картинка = БиблиотекаКартинок.ЛинияПунктирнаяСТочкой;
	
	СтрокаСтиля = КоллекцияСтилей.Добавить();
	СтрокаСтиля.Стиль = ТипЛинииДиаграммы.ПунктирТочкаТочка;
	СтрокаСтиля.Картинка = БиблиотекаКартинок.ЛинияПунктирнаяСДвумяТочками;
	
КонецПроцедуры // СоздатьСтили()


///////////////////////////////////////////////////////////////////////////////
// ЦВЕТ

&НаСервере
// Выбрать элемент списка цветов в соответствии с примером цвета
//
Процедура СинхронизироватьСписокЦветов()
	
	СписокЦветов = ПолучитьИндексПоЦвету(Элементы.ПримерЦвета.ЦветФона);
	
КонецПроцедуры // СинхронизироватьСписокЦветов()

&НаСервере
// Получить индекс в списке цветов по цвету
//
// Параметры:
//  ВыбранныйЦвет - Цвет, для которого нужно получить индекс
//
// Возвращаемое значение:
//  Число - выбранный индекс
//
Функция ПолучитьИндексПоЦвету(ВыбранныйЦвет)
	
	Отбор = Новый Структура("Цвет", ВыбранныйЦвет);
	СтрокиЦвета = КоллекцияЦветов.НайтиСтроки(Отбор);
	Если СтрокиЦвета.Количество() = 0 Тогда
		ВыбранныйИндекс = 0;
	Иначе
		ВыбранныйИндекс = СтрокиЦвета[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ВыбранныйИндекс;
	
КонецФункции // ПолучитьИндексПоЦвету(

&НаКлиенте
// Получить цвет по индексу в списке цветов
//
// Параметры:
//  Индекс - Число, индекс для которого нужно определить цвет
//
// Возвращаемое значение:
//  Цвет - выбранный цвет
//
Процедура ПолучитьЦветПоИндексу(Индекс)
	
	ВыбранныйЦвет = КоллекцияЦветов[Индекс];
	
	Если ВыбранныйЦвет = Неопределено Тогда
		ВыбратьЦвет(Элементы.ПримерЦвета.ЦветФона);
	Иначе
		ВыбратьЦветЗавершение(Неопределено, ВыбранныйЦвет.Цвет);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЦветПоИндексу()

&НаКлиенте
// Выбрать цвет при помощи диалога
//
// Параметры:
//  ИсходныйЦвет - Цвет, текущий цвет
//
// Возвращаемое значение:
//  Цвет - выбранный цвет
//
Процедура ВыбратьЦвет(ИсходныйЦвет)
	
	// Создать диалог выбора цвета
	ДиалогВыбораЦвета = Новый ДиалогВыбораЦвета;
	ДиалогВыбораЦвета.Цвет = ИсходныйЦвет;
	
	// Выбрать цвет
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьЦветЗавершение", ЭтотОбъект, ИсходныйЦвет);
	ДиалогВыбораЦвета.Показать(ОписаниеОповещения);
	
КонецПроцедуры // ВыбратьЦвет()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ВыбратьЦветЗавершение(ВыбранныйЦвет, ИсходныйЦвет) Экспорт
	
	Если ВыбранныйЦвет = Неопределено Тогда
		Элементы.ПримерЦвета.ЦветФона = ИсходныйЦвет;
	Иначе
		Элементы.ПримерЦвета.ЦветФона = ВыбранныйЦвет;
	КонецЕсли;
	СинхронизироватьСписокЦветов();
	
КонецПроцедуры // ВыбратьЦветЗавершение()

&НаСервере
// Создать коллекцию соответствий цветов и индексов
//
Процедура СоздатьЦвета()
	
	НовыйЦвет = КоллекцияЦветов.Добавить();
	НовыйЦвет.Цвет = Неопределено;
	
	НовыйЦвет = КоллекцияЦветов.Добавить();
	НовыйЦвет.Цвет = WebЦвета.ОранжевоКрасный;
	
	НовыйЦвет = КоллекцияЦветов.Добавить();
	НовыйЦвет.Цвет = WebЦвета.ЦветМорскойВолны;
	
	НовыйЦвет = КоллекцияЦветов.Добавить();
	НовыйЦвет.Цвет = WebЦвета.КоролевскиГолубой;
	
КонецПроцедуры // СоздатьЦвета()


///////////////////////////////////////////////////////////////////////////////
// ДОПОЛНИТЕЛЬНЫЕ ПАРАМЕТРЫ

&НаСервере
// Определить наличие дополнительных параметров
//
// Возвращаемое значение:
//  Булево - Истина, значит дополнительные параметры присутствуют
//
Функция ЕстьДополнительныеПараметры()
	
	Возврат Объект.Параметр.Количество() > 0;
	
КонецФункции // ЕстьДополнительныеПараметры()

&НаСервере
// Загрузить параметры показателя производительности
//
Процедура ЗагрузитьПараметры()
	
	СправочникОбъект = Объект.Ссылка.ПолучитьОбъект();
	
	ПараметрыПоказателя.Очистить();
	
	Для каждого СтрокаПараметра Из СправочникОбъект.Параметр Цикл
		НоваяСтрока = ПараметрыПоказателя.Добавить();
		НоваяСтрока.ИмяПараметра = СтрокаПараметра.Имя;
		НоваяСтрока.Значение = СправочникОбъект.ПолучитьЗначениеПараметра(СтрокаПараметра.Имя);
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПараметры()

&НаСервере
// Сохранить параметры показателя производительности
//
Процедура СохранитьПараметры(ПоказательОбъект)
	
	Для Каждого СтрокаПараметра Из ПараметрыПоказателя Цикл
		ПоказательОбъект.УстановитьЗначениеПараметра(СтрокаПараметра.ИмяПараметра, СтрокаПараметра.Значение);
	КонецЦикла;
	
КонецПроцедуры // СохранитьПараметры()

