&НаКлиенте
Перем мСчетчикСостояний;
&НаКлиенте
Перем мСтарыеЗначения;
&НаКлиенте
Перем мТипРедактора;

///////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НоваяСтрока = Ложь;
	
	ОбновитьСтруктуруСценария();
	УстановитьНачальнуюДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СозданКопированием Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбновитьСписокСостояний(Элементы.НачальноеСостояние.СписокВыбора);
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Предопределенный Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Отказ = Не ПеренестиДеревоВСценарий();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Модифицированность Тогда
		СтруктураСценария = ХранилищеСтруктурыСценария.Получить();
		ПеренестиДеревоВСценарийНаСервере(СтруктураСценария, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураСценарияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

&НаКлиенте
// Добавить новый элемент структуры сценария
//
Процедура СтруктураСценарияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущийУровень = ТекущийУровеньСтруктурыСценария();
	ТекущиеДанные = Элементы.ДеревоСтруктурыСценария.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Копирование Тогда
		Если ТекущийУровень < 3 Тогда
			Возврат
		КонецЕсли;
		ТекущаяГруппа = ТекущиеДанные.ПолучитьРодителя();
		СтрокиГруппы = ТекущаяГруппа.ПолучитьЭлементы();
		НовыйЭлемент = ДобавитьКоманду(СтрокиГруппы, ПредопределенноеЗначение("Справочник.Команды.ПустаяСсылка"), Неопределено);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ТекущиеДанные);
		Элементы.ДеревоСтруктурыСценария.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
		НоваяСтрока = Истина;
		
	Иначе
		Строки = ТекущиеДанные.ПолучитьЭлементы();
		
		Если ТекущийУровень = 0 Тогда
			НовыйЭлемент = ДобавитьСостояние(Строки, НовоеИмяСостояния());
			НовыйЭлемент.Команда = Неопределено;
			НовыйЭлемент.Событие = Неопределено;
		ИначеЕсли ТекущийУровень = 1 Тогда
			НовыйЭлемент = ДобавитьСобытие(Строки, ПредопределенноеЗначение("Справочник.События.ПустаяСсылка"), Неопределено);
		ИначеЕсли ТекущийУровень = 2 Тогда
			НовыйЭлемент = ДобавитьКоманду(Строки, ПредопределенноеЗначение("Справочник.Команды.ПустаяСсылка"), Неопределено);
		ИначеЕсли ТекущийУровень = 3 Тогда
			// Добавление еще одной записи (на том же уровне дерева)
			ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
			Строки = ТекущиеДанные.ПолучитьЭлементы();
			НовыйЭлемент = ДобавитьКоманду(Строки, ПредопределенноеЗначение("Справочник.Команды.ПустаяСсылка"), Неопределено);
		КонецЕсли;
		НовыйЭлемент.Уровень = ТекущиеДанные.Уровень + 1;
		НовыйЭлемент.ИндексКартинки = НовыйЭлемент.Уровень;
		
		Элементы.ДеревоСтруктурыСценария.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
		НоваяСтрока = Истина;
		КомандыСтруктурыИзменить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтруктурыСценарияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		// Отмена выбора, строка удалена
		Возврат
	КонецЕсли;
	
	Если ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			Родитель = ТекущиеДанные.ПолучитьРодителя();
			Родитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		Иначе
			ВставитьЗначенияСтроки(мСтарыеЗначения, ТекущиеДанные);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
	
	Если ИмяКолонки = "СтруктураСценарияСтруктураСценария" Тогда
		Если ТекущиеДанные.ТекущееСостояние <> Неопределено Тогда
			Если ДублирующеесяСостояние(ТекущиеДанные.СтруктураСценария) Тогда
				ИнтерфейсыКлиент.Предупредить("Дублирующееся состояние");
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли ТекущиеДанные.Событие <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ТекущиеДанные.СтруктураСценария) Тогда
				ИнтерфейсыКлиент.Предупредить("Не выбрано событие");
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли ТекущиеДанные.Команда <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ТекущиеДанные.СтруктураСценария) Тогда
				ИнтерфейсыКлиент.Предупредить("Не выбрана команда");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик окончания редактирования структуры сценария
//
Процедура ДеревоСтруктурыСценарияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ИмяКолонки = Элемент.ТекущийЭлемент.Имя;
		ТекущийУровень = ТекущийУровеньСтруктурыСценария();
		
		Если ТекущийУровень = 1 Тогда
			УстановитьСостояние(ТекущиеДанные, ТекущиеДанные.СтруктураСценария);
		ИначеЕсли ТекущийУровень = 2 Тогда
			УстановитьСобытие(ТекущиеДанные, ТекущиеДанные.СтруктураСценария, ПолучитьПараметры(ТекущиеДанные));
		ИначеЕсли ТекущийУровень = 3 Тогда
			УстановитьКоманду(ТекущиеДанные, ТекущиеДанные.СтруктураСценария, ПолучитьПараметры(ТекущиеДанные), ТекущиеДанные.СледующееСостояние);
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбновитьСписокСостояний(Элементы.НачальноеСостояние.СписокВыбора);
	КонецЕсли;
	
	НоваяСтрока = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Изменить текущий элемент структуры сценария
//
Процедура КомандыСтруктурыИзменить(Кнопка = Неопределено)
	
	Элементы.ДеревоСтруктурыСценария.ИзменитьСтроку();
	
КонецПроцедуры // КомандыСтруктурыИзменить()

&НаКлиенте
Процедура СтруктураСценарияПередНачаломИзменения(Элемент, Отказ)
	
	ТекущаяКолонка = Элемент.ТекущийЭлемент;
	ИмяКолонки = ТекущаяКолонка.Имя;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	мСтарыеЗначения = СкопироватьЗначенияСтроки(ТекущиеДанные);
	
	Если ИмяКолонки = "СтруктураСценарияСтруктураСценария" Тогда
		Если ТекущиеДанные.Команда <> Неопределено Тогда
			Изменено = ИзменитьКоманду(ТекущиеДанные);
		ИначеЕсли ТекущиеДанные.Событие <> Неопределено Тогда
			Изменено = ИзменитьСобытие(ТекущиеДанные);
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "СтруктураСценарияПараметры" Тогда
		Отказ = ТекущиеДанные.ПредставлениеПараметров = Неопределено;
		
		Если Не Отказ Тогда
			Отказ = Не ИзменитьПараметры(ТекущиеДанные);
		КонецЕсли;
		ТекущаяКолонка.ВыбиратьТип = Ложь;
		
	ИначеЕсли ИмяКолонки = "СтруктураСценарияСледующееСостояние" Тогда
		Отказ = ТекущиеДанные.Команда = Неопределено;
		
		Если Не Отказ Тогда
			ОбновитьСписокСостояний(ТекущаяКолонка.СписокВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ СТРУКТУРЫ СЦЕНАРИЯ

&НаКлиенте
// Установить доступность элементов управления в соответствии с текущим
// состоянием
//
Процедура УстановитьДоступностьЭлементовУправления()
	
	ТекущийУровень = ТекущийУровеньСтруктурыСценария();
	
	Элементы.СтруктураСценарияДобавить.Доступность = ТекущийУровень >= 0;
	Элементы.СтруктураСценарияСкопировать.Доступность = ТекущийУровень > 0;
	Элементы.СтруктураСценарияИзменить.Доступность = ТекущийУровень > 0;
	Элементы.СтруктураСценарияУдалить.Доступность = ТекущийУровень > 0;
	Элементы.СтруктураСценарияПереместитьВВерх.Доступность = ТекущийУровень > 0;
	Элементы.СтруктураСценарияПереместитьВниз.Доступность = ТекущийУровень > 0;
	
КонецПроцедуры // УстановитьДоступностьЭлементовУправления()

&НаСервере
// Установить доступность элементов управления при открытии формы
//
Процедура УстановитьНачальнуюДоступность()
	
	Изменять = Не Объект.Предопределенный;
	
	Элементы.Наименование.ТолькоПросмотр = Не Изменять;
	Элементы.Описание.ТолькоПросмотр = Не Изменять;
	Элементы.НачальноеСостояние.ТолькоПросмотр = Не Изменять;
	Элементы.ДеревоСтруктурыСценария.ТолькоПросмотр = Не Изменять;
	Элементы.Интерактивный.ТолькоПросмотр = Не Изменять;
	Элементы.ФормаКоманднаяПанель.Доступность = Изменять;
	//Элементы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК.Доступность = Изменять;
	//Элементы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыСохранить.Доступность = Изменять;
	//Элементы.ДействияФормы.Кнопки.Действия.Кнопки.Записать.Доступность = Изменять;
	//Элементы.ДействияФормы.Кнопки.Действия.Кнопки.ЗаписатьИЗакрыть.Доступность = Изменять;
	
КонецПроцедуры // УстановитьНачальнуюДоступность()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ДЕРЕВА ЗНАЧЕНИЙ СТРУКТУРЫ СЦЕНАРИЯ

&НаСервере
// Обновить структуру сценария в дереве значений
//
Процедура ОбновитьСтруктуруСценария()
	
	СтруктураСценария = СценарийКлиентСервер.СоздатьСтруктуруСценария();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		СтруктураСценарияОбъект = СценарийВызовСервера.ПолучитьСтруктуруСценария(Параметры.ЗначениеКопирования);
		СценарийКлиентСервер.ЗагрузитьСценарий(Параметры.ЗначениеКопирования.Структура, СтруктураСценария);
		СозданКопированием = Истина;
	Иначе
		СтруктураСценарияОбъект = РеквизитФормыВЗначение("Объект").Структура;
		СценарийКлиентСервер.ЗагрузитьСценарий(СтруктураСценарияОбъект, СтруктураСценария);
	КонецЕсли;
	Состояния = СценарийКлиентСервер.КореньСценария(СтруктураСценария).Строки;
	
	Для Каждого СтрокаСостояния Из Состояния Цикл
		Для Каждого СтрокаСобытия Из СтрокаСостояния.Строки Цикл
			СтрокаСобытия.Вставить("ПредставлениеПараметров");
			УстановитьПредставлениеПараметровСобытия(СтрокаСобытия);
			
			Для Каждого СтрокаКоманды Из СтрокаСобытия.Строки Цикл
				СтрокаКоманды.Вставить("ПредставлениеПараметров");
				УстановитьПредставлениеПараметровКоманды(СтрокаКоманды);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПеренестиСценарийВДеревоНаСервере(СтруктураСценария);
	
	ХранилищеСтруктурыСценария = Новый ХранилищеЗначения(СтруктураСценария);
	
КонецПроцедуры // ПолучитьСтруктуруСценария()

&НаКлиенте
// Добавить новое состояние
//
// Параметры:
//  Строки - КоллекцияСтрокДереваЗначений, куда добавлять
//  Состояние - Строка, наименование состояния
//
Функция ДобавитьСостояние(Строки, Состояние)
	
	НовоеСостояние = Строки.Добавить();
	УстановитьСостояние(НовоеСостояние, Состояние);
	Возврат НовоеСостояние;
	
КонецФункции // ДобавитьСостояние()

&НаКлиенте
// Добавить новое состояние
//
// Параметры:
//  Строки - КоллекцияСтрокДереваЗначений, куда добавлять
//  Событие - СправочникСсылка, добавляемое состояние
//  Параметры - ХранилищеЗначения, параметры события
//
Функция ДобавитьСобытие(Строки, Событие, ПараметрыСобытия)
	
	НовоеСобытие = Строки.Добавить();
	УстановитьСобытие(НовоеСобытие, Событие, ПараметрыСобытия);
	Возврат НовоеСобытие;
	
КонецФункции // ДобавитьСобытие()

&НаКлиенте
// Добавить новое состояние
//
// Параметры:
//  Строки - КоллекцияСтрокДереваЗначений, куда добавлять
//  Команда - СправочникСсылка, добавляемое состояние
//  Параметры - ХранилищеЗначения, параметры события
//  СледующееСостояние - Строка, следующее состояние
//
Функция ДобавитьКоманду(Строки, Команда, ПараметрыКоманды, СледующееСостояние = Неопределено)
	
	НоваяКоманда = Строки.Добавить();
	НовоеСостояние = ?(СледующееСостояние = Неопределено, НоваяКоманда.ПолучитьРодителя().ПолучитьРодителя().ТекущееСостояние, СледующееСостояние);
	УстановитьКоманду(НоваяКоманда, Команда, ПараметрыКоманды, НовоеСостояние);
	Возврат НоваяКоманда;
	
КонецФункции // ДобавитьКоманду()

&НаКлиенте
// Установить значение состояния
//
// Параметры:
//  СтрокаСостояния - СтрокаДереваЗначений
//  Наименование - Строка, наименование состояния
//
Процедура УстановитьСостояние(СтрокаСостояния, Наименование)
	
	ОбновитьСостояние(СтрокаСостояния.ТекущееСостояние, Наименование);
	СтрокаСостояния.ТекущееСостояние = Наименование;
	СтрокаСостояния.СтруктураСценария = Наименование;
	
КонецПроцедуры // УстановитьСостояние()

&НаСервере
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПеренестиСценарийВДеревоНаСервере(СтруктураСценария)
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоСтруктурыСценария");
	ДеревоЗначений.Строки.Очистить();
	ОбновитьСтрокиДерева(ДеревоЗначений.Строки, СтруктураСценария, 0);
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоСтруктурыСценария");
	
КонецПроцедуры // ОбновитьСтруктуруСценарияНаСервере()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаКлиенте
Функция ПеренестиДеревоВСценарий()
	
	Если Не Модифицированность Тогда
		Возврат Истина;
	КонецЕсли;
	
	//СтруктураОбъект = ЭтотОбъект.Структура;
	//СтруктураОбъект.Очистить();
	СтруктураСценария = СценарийКлиентСервер.СоздатьСтруктуруСценария();
	Корень = КореньСценария();
	
	Для Каждого СтрокаСостояния Из Корень.ПолучитьЭлементы() Цикл
		
		СтрокиСобытий = СтрокаСостояния.ПолучитьЭлементы();
		Если СтрокиСобытий.Количество() = 0 Тогда
			ИнтерфейсыКлиент.Предупредить("Не найдено событий у состояния """ + СтрокаСостояния.ТекущееСостояние + """");
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого СтрокаСобытия Из СтрокиСобытий Цикл
			
			СтрокиКоманд = СтрокаСобытия.ПолучитьЭлементы();
			Если СтрокиКоманд.Количество() = 0 Тогда
				ИнтерфейсыКлиент.Предупредить("Не найдено команд у события """ + СтрокаСобытия.Событие + """");
				Возврат Ложь;
			КонецЕсли;
			
			Для Каждого СтрокаКоманды Из СтрокиКоманд Цикл
				СтрокаСценария = СценарийКлиентСервер.ПолучитьШаблонСтрокиСценария();
				СтрокаСценария.ТекущееСостояние = СтрокаСостояния.ТекущееСостояние;
				СтрокаСценария.Событие = СтрокаСобытия.Событие;
				СтрокаСценария.ПараметрыСобытия = ПолучитьПараметры(СтрокаСобытия);
				СтрокаСценария.Команда = СтрокаКоманды.Команда;
				СтрокаСценария.ПараметрыКоманды = ПолучитьПараметры(СтрокаКоманды);
				СтрокаСценария.СледующееСостояние = СтрокаКоманды.СледующееСостояние;
				СтруктураСценария.Добавить(СтрокаСценария);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПоместитьСценарийВХранилище(СтруктураСценария);
	
	Возврат Истина;
	
КонецФункции // ПеренестиДеревоВСценарий()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПоместитьСценарийВХранилище(СтруктураСценария)
	
	ХранилищеСтруктурыСценария = Новый ХранилищеЗначения(СтруктураСценария);
	
КонецПроцедуры // ПоместитьСценарийВХранилище()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПеренестиДеревоВСценарийНаСервере(СтруктураСценария, СправочникОбъект)
	
	СправочникОбъект.Структура.Очистить();
	Для Каждого СтрокаСценария Из СтруктураСценария Цикл
		
		НоваяСтрокаТЧ = СправочникОбъект.Структура.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаСценария);
		
	КонецЦикла;
	
КонецПроцедуры // ПеренестиДеревоВСценарийНаСервере()

&НаСервере
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ОбновитьСтрокиДерева(СтрокиДерева, МассивЗначений, Уровень)
	
	Для Каждого СтрокаЗначений Из МассивЗначений Цикл
		СтрокаДерева = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаЗначений);
		СтрокаДерева.Уровень = Уровень;
		СтрокаДерева.ИндексКартинки = Уровень;
		Если СтрокаЗначений.Строки.Количество() > 0 Тогда
			ОбновитьСтрокиДерева(СтрокаДерева.Строки, СтрокаЗначений.Строки, Уровень+1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Установить значение команды
//
// Параметры:
//  СтрокаКоманды - СтрокаДереваЗначений
//  Команда - Перечисления.Команда
//  Параметры - ХранилищеЗначения
//
Процедура УстановитьКоманду(СтрокаКоманды, Команда, ИсходныеПараметрыКоманды, СледующееСостояние)
	
	СтрокаКоманды.Команда = Команда;
	СтрокаКоманды.СледующееСостояние = СледующееСостояние;
	СтрокаКоманды.СтруктураСценария = Команда;
	
	Если ЗначениеЗаполнено(Команда)
		И мСтарыеЗначения <> Неопределено
		И Команда <> мСтарыеЗначения["Команда"]
		И Не ЗначениеЗаполнено(ИсходныеПараметрыКоманды) Тогда
		
		ПараметрыКоманды = ЗапаковатьПараметры(КомандыКлиент.СоздатьПараметрыКоманды(Команда));
	Иначе
		ПараметрыКоманды = ИсходныеПараметрыКоманды;
	КонецЕсли;
	
	УстановитьПараметры(СтрокаКоманды, Команда, ПараметрыКоманды);
	
КонецПроцедуры // УстановитьКоманду()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
&НаСервереБезКонтекста
Функция ЗапаковатьПараметры(Параметры)
	
	Возврат Новый ХранилищеЗначения(Параметры);
	
КонецФункции // ЗапаковатьПараметры()

&НаКлиенте
// Изменить событие указанной строки
//
// Параметры:
//  СтрокаПараметров - СтрокаДереваЗначений, строка содержащая параметры
//
// Возвращаемое значение:
//  Булево - Истина, параметры изменены, Ложь - не изменены
//
Функция ИзменитьСобытие(СтрокаСобытия)
	
	ПараметрыФормы = Новый Структура("Ключ", СтрокаСобытия.Событие);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьСобытиеЗавершение", ЭтотОбъект, СтрокаСобытия);
	ОткрытьФорму("Справочник.События.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	Возврат Неопределено;
	
КонецФункции // ИзменитьСобытие()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИзменитьСобытиеЗавершение(Результат, СтрокаСобытия) Экспорт
	
	Если Результат <> Неопределено Тогда
		СтрокаСобытия.Событие = Результат;
		УстановитьСобытие(СтрокаСобытия, Результат, ПолучитьПараметры(СтрокаСобытия));
	ИначеЕсли НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ДеревоСтруктурыСценария.ТекущиеДанные;
		ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные);
		НоваяСтрока = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьСобытиеЗавершение()

&НаКлиенте
// Изменить команду указанной строки
//
// Параметры:
//  СтрокаПараметров - СтрокаДереваЗначений, строка содержащая параметры
//
// Возвращаемое значение:
//  Булево - Истина, параметры изменены, Ложь - не изменены
//
Функция ИзменитьКоманду(ТекущиеДанные)
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ТекущиеДанные.Команда);
	ДопПараметры = Новый Структура("СтрокаКоманды", ТекущиеДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьКомандуЗавершение", ЭтотОбъект, ДопПараметры);
	ФормаВыбораКоманды = ОткрытьФорму("Справочник.Команды.ФормаВыбора", ПараметрыФормы, 
		ЭтотОбъект,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
	Возврат Неопределено;
	
КонецФункции // ИзменитьКоманду()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИзменитьКомандуЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		УстановитьКоманду(ДопПараметры.СтрокаКоманды, РезультатВыбора, 
			ПолучитьПараметры(ДопПараметры.СтрокаКоманды), ДопПараметры.СтрокаКоманды.СледующееСостояние
		);
	ИначеЕсли НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ДеревоСтруктурыСценария.ТекущиеДанные;
		ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные);
		НоваяСтрока = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьКомандуЗавершение()

&НаКлиенте
// Изменить параметры указанной строки
//
// Параметры:
//  СтрокаПараметров - СтрокаДереваЗначений, строка содержащая параметры
//
// Возвращаемое значение:
//  Булево - Истина, параметры изменены, Ложь - не изменены
//
Функция ИзменитьПараметры(СтрокаПараметров)
	
	Перем ФормаРедактораПараметров;
	
	Событие = СтрокаПараметров.Событие;
	Команда = СтрокаПараметров.Команда;
	
	Если ЗначениеЗаполнено(Событие) Тогда
		ФормаРедактораПараметров = ПолучитьИмяФормыРедактора(Событие);
	ИначеЕсли ЗначениеЗаполнено(Команда) Тогда
		ФормаРедактораПараметров = ПолучитьИмяФормыРедактора(Команда);
	КонецЕсли;
	
	РедактированиеВФорме = ФормаРедактораПараметров <> Неопределено;
	
	Если РедактированиеВФорме Тогда
		ДопПараметры = Новый Структура("СтрокаПараметров,Событие,Команда,СледующееСостояние", СтрокаПараметров, Событие, Команда, СтрокаПараметров.СледующееСостояние);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПараметрыЗавершение", ЭтотОбъект, ДопПараметры);
		
		ПараметрыФормы = Новый Структура("ПараметрыСобытия", ПолучитьПараметры(СтрокаПараметров));
		ОткрытьФорму(ФормаРедактораПараметров, ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
	Возврат Не РедактированиеВФорме;
	
КонецФункции // ИзменитьПараметры()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИзменитьПараметрыЗавершение(Результат, ДопПараметры) Экспорт
	
	СтрокаПараметров = ДопПараметры.СтрокаПараметров;
	Событие = ДопПараметры.Событие;
	Команда = ДопПараметры.Команда;
	СледующееСостояние = ДопПараметры.СледующееСостояние;
	
	Если Результат <> Неопределено Тогда
		Если ЗначениеЗаполнено(Событие) Тогда
			УстановитьСобытие(СтрокаПараметров, Событие, Результат);
		ИначеЕсли ЗначениеЗаполнено(Команда) Тогда
			УстановитьКоманду(СтрокаПараметров, Команда, Результат, СледующееСостояние);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПараметрыЗавершение()

&НаКлиенте
// Установить параметры события или команды
//
// Параметры:
//  СтрокаПараметров - СтрокаДереваЗначений
//  ВладелецПараметров - СправочникСсылкаюСобытие или ПеречислениеСсылка.Команда
//  Параметры - ХранилищеЗначения
//
Процедура УстановитьПараметры(СтрокаПараметров, ВладелецПараметров, Параметры)
	
	ЗначениеПараметров = ?(Параметры = Неопределено, Неопределено, РаспаковатьПараметры(Параметры));
	
	Если ВнешнийРедактор(ВладелецПараметров) Тогда
		СтрокаПараметров.ПараметрыСобытия = Параметры;
		
		Если ТипЗнч(ВладелецПараметров) = Тип("СправочникСсылка.События") Тогда
			СтрокаПараметров.ПредставлениеПараметров = СобытияКлиентСервер.ПредставлениеПараметровСобытия(ВладелецПараметров, ЗначениеПараметров);
		ИначеЕсли ТипЗнч(ВладелецПараметров) = Тип("СправочникСсылка.Команды") Тогда
			СтрокаПараметров.ПредставлениеПараметров = КомандыКлиентСервер.ПредставлениеПараметровКоманды(ВладелецПараметров, ЗначениеПараметров);
		КонецЕсли;
	Иначе
		СтрокаПараметров.ПараметрыСобытия = ЗначениеПараметров;
		СтрокаПараметров.ПредставлениеПараметров = ЗначениеПараметров;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры // УстановитьПараметры()

&НаКлиенте
// Получить параметры события или команды
//
// Параметры:
//  СтрокаПараметров - СтрокаДереваЗначений
//
Функция ПолучитьПараметры(СтрокаПараметров)
	
	Владелец = ?(СтрокаПараметров.Событие <> Неопределено, СтрокаПараметров.Событие, СтрокаПараметров.Команда);
	
	Если Владелец = ПредопределенноеЗначение("Справочник.События.ЗаписьПоказателяВыключена")
		Или Владелец = ПредопределенноеЗначение("Справочник.События.ПереходПоказателяВЗону") Тогда
		
		Возврат СтрокаПараметров.ПараметрыСобытия;
	Иначе
		Если СтрокаПараметров.ПредставлениеПараметров <> Неопределено Тогда
			Возврат ЗапаковатьПараметры(СтрокаПараметров.ПредставлениеПараметров);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьПараметры()

&НаКлиенте
// Установить значение события
//
// Параметры:
//  СтрокаСобытия - СтрокаДереваЗначений
//  Событие - СправочникСсылка.Событие
//  Параметры - ХранилищеЗначения
//
Процедура УстановитьСобытие(СтрокаСобытия, Событие, Параметры)
	
	СтрокаСобытия.Событие = Событие;
	СтрокаСобытия.СтруктураСценария = Событие;
	
	Если ЗначениеЗаполнено(Событие) И мСтарыеЗначения <> Неопределено И Событие <> мСтарыеЗначения["Событие"] Тогда
		ПараметрыСобытия = ЗапаковатьПараметры(СобытияКлиент.СоздатьПараметрыСобытия(Событие));
	Иначе
		ПараметрыСобытия = Параметры;
	КонецЕсли;
	
	УстановитьПараметры(СтрокаСобытия, Событие, ПараметрыСобытия);
	
КонецПроцедуры // УстановитьСобытие()

&НаКлиенте
// Получить текущий уровень выбранной строки структуры сценария
//
// Возвращаемое значение:
//  Число - номер уровня начиная с 0, если ничего не выбрано, то -1
//
Функция ТекущийУровеньСтруктурыСценария()
	
	ТекущиеДанные = Элементы.ДеревоСтруктурыСценария.ТекущиеДанные;
	Возврат ?(ТекущиеДанные = Неопределено, -1, ТекущиеДанные.Уровень);
	
КонецФункции // ТекущийУровеньСтруктурыСценария()

&НаКлиенте
// Обновить список доступных состояний
//
// Параметры:
//  Список - СписокЗначений, доступные в редактируемом сценарии состояния
//
Процедура ОбновитьСписокСостояний(Список)
	
	Корень = КореньСценария();
	ТекущаяКолонка = Элементы.ДеревоСтруктурыСценария.ТекущийЭлемент;
	Список.Очистить();
	
	Для Каждого СтрокаСостояния Из Корень.ПолучитьЭлементы() Цикл
		Список.Добавить(СтрокаСостояния.ТекущееСостояние);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокСостояний()

&НаКлиенте
// Обновить состояние в местах, где на него есть ссылки
//
// Параметры:
//  СтароеСостояние - Строка, старое состояние
//  НовоеСостояние - Строка, новое состояние
//
Процедура ОбновитьСостояние(СтароеСостояние, НовоеСостояние)
	
	СтрокиКорня = ДеревоСтруктурыСценария.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	
	Для Каждого СтрокаСостояния Из СтрокиКорня Цикл
		Для Каждого СтрокаСобытия Из СтрокаСостояния.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаКоманды Из СтрокаСобытия.ПолучитьЭлементы() Цикл
				Если СтрокаКоманды.СледующееСостояние = СтароеСостояние Тогда
					СтрокаКоманды.СледующееСостояние = НовоеСостояние;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если Объект.НачальноеСостояние = СтароеСостояние Тогда
		Объект.НачальноеСостояние = НовоеСостояние;
	КонецЕсли;
	
	СтрокиВыбора = Элементы.НачальноеСостояние.СписокВыбора;
	
	Для Каждого СтрокаВыбора Из СтрокиВыбора Цикл
		Если СтрокаВыбора.Значение = СтароеСостояние Тогда
			СтрокаВыбора.Значение = НовоеСостояние;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСостояние()

&НаСервере
// Установить представление параметров события
//
// Параметры:
//  Событие - СтрокаДереваЗначений
//
Процедура УстановитьПредставлениеПараметровСобытия(Событие)
	
	Если Событие.Событие = ПредопределенноеЗначение("Справочник.События.ЗаписьПоказателяВыключена")
		Или Событие.Событие = ПредопределенноеЗначение("Справочник.События.ПереходПоказателяВЗону") Тогда
		Событие.ПредставлениеПараметров = СобытияКлиентСервер.ПредставлениеПараметровСобытия(
			Событие.Событие,
			РаспаковатьПараметры(Событие.ПараметрыСобытия));
	Иначе
		Событие.ПредставлениеПараметров = РаспаковатьПараметры(Событие.ПараметрыСобытия);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПредставлениеПараметровСобытия()

&НаСервере
// Установить представление параметров команды
//
// Параметры:
//  Событие - СтрокаДереваЗначений
//
Процедура УстановитьПредставлениеПараметровКоманды(Команда)
	
	Если Команда.Команда = ПредопределенноеЗначение("Справочник.События.ЗаписьПоказателяВыключена")
			Или Команда.Команда = ПредопределенноеЗначение("Справочник.События.ПереходПоказателяВЗону") Тогда
		Команда.ПредставлениеПараметров = КомандыКлиентСервер.ПредставлениеПараметровКоманды(
			Команда.Команда,
			РаспаковатьПараметры(Команда.ПараметрыКоманды));
	Иначе
		Команда.ПредставлениеПараметров = РаспаковатьПараметры(Команда.ПараметрыКоманды);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПредставлениеПараметровКоманды()

&НаСервереБезКонтекста
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция РаспаковатьПараметры(Параметры)
	
	Возврат Параметры.Получить();
	
КонецФункции // ПолучитьПараметры()


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
// Получить корневой элемент структуры сценария
//
// Возвращаемое значение:
//  СтрокаДереваЗначений – корневой элемент структуры сценария
//
Функция КореньСценария()
	
	Возврат ДеревоСтруктурыСценария.ПолучитьЭлементы()[0];
	
КонецФункции // КореньСценария()

&НаКлиенте
// Получить новое имя для состояния
//
// Возвращаемое значение:
//  Строка - новое имя состояния со счетчиком
//
Функция НовоеИмяСостояния()
	
	Если мСчетчикСостояний = Неопределено Тогда
		мСчетчикСостояний = 0;
	КонецЕсли;
	
	мСчетчикСостояний = мСчетчикСостояний + 1;
	
	Возврат "Новое состояние " + Формат(мСчетчикСостояний, "ЧГ=0");
	
КонецФункции // НовоеИмяСостояния()

&НаКлиенте
// Поиск дублирующихся состояний, если найдено 2 и более дубля, значит дублируется
//
// Возвращаемое значение:
//  Булево - Истина, дубли найдены
//
Функция ДублирующеесяСостояние(Знач ПроверяемоеСостояние)
	
	СтрокиКорня = КореньСценария().ПолучитьЭлементы();
	ПроверяемоеСостояние = ВРег(ПроверяемоеСостояние);
	СчетчикДублей = 0;
	
	Для Каждого СтрокаСостояния Из СтрокиКорня Цикл
		Если ВРег(СтрокаСостояния.СтруктураСценария) = ПроверяемоеСостояние Тогда
			СчетчикДублей = СчетчикДублей + 1;
		КонецЕсли;
		
		Если СчетчикДублей > 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СчетчикДублей > 1;
	
КонецФункции // ДублирующеесяСостояние()

&НаКлиенте
// Скопировать значения строки и поместить их в соответствие, где
// в ключе - имя колонки в значении соответствия, значение ячейки строки
//
// Параметры:
//  Строка - СтрокаТабличногоПоля
//
// Возвращаемое значение:
//  Соответствие - значения ячеек строки табличного поля
Функция СкопироватьЗначенияСтроки(ДанныеСтроки)
	
	Результат = Новый Соответствие;
	Результат.Вставить("ИндексКартинки",     ДанныеСтроки.ИндексКартинки);
	Результат.Вставить("СтруктураСценария",  ДанныеСтроки.СтруктураСценария);
	Результат.Вставить("Уровень",            ДанныеСтроки.Уровень);
	Результат.Вставить("Событие",            ДанныеСтроки.Событие);
	Результат.Вставить("ПараметрыСобытия",   ДанныеСтроки.ПараметрыСобытия);
	Результат.Вставить("ПредставлениеПараметров",   ДанныеСтроки.ПредставлениеПараметров);
	Результат.Вставить("Команда",            ДанныеСтроки.Команда);
	Результат.Вставить("ТекущееСостояние",   ДанныеСтроки.ТекущееСостояние);
	Результат.Вставить("СледующееСостояние", ДанныеСтроки.СледующееСостояние);
	
	//Колонки = СтруктураСценария.Колонки;
	//Результат = Новый Соответствие;
	//
	//Для Каждого Колонка Из Колонки Цикл
	//	ИмяКолонки = Колонка.Имя;
	//	Результат[ИмяКолонки] = Строка[ИмяКолонки];
	//КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // СкопироватьЗначенияСтроки()

&НаКлиенте
// Вставить ранее скопированные значения строки табличного поля
// в указанную строку табличного поля
//
// Параметры:
//  Значения - Соответствие, значения ячеек строки табличного поля
//  Строка - СтрокаТабличногоПоля, в которую производится копирование
//
Процедура ВставитьЗначенияСтроки(Значения, Строка)
	
	Для Каждого ЭлементСоответствия Из Значения Цикл
		Строка[ЭлементСоответствия.Ключ] = ЭлементСоответствия.Значение;
	КонецЦикла;
	
КонецПроцедуры // ВставитьЗначенияСтроки()

&НаКлиенте
// Получить форму редактора параметра
//
// Параметры:
//  ВладелецПараметра - СправочникСсылка.События Или Справочник.Команды
//
// Возвращаемое значение:
//  Форма - если есть форма редактора параметра, иначе Неопределено
//
Функция ПолучитьИмяФормыРедактора(ВладелецПараметра)
	
	ИмяФормыРедактора = Неопределено;
	Если ВладелецПараметра = ПредопределенноеЗначение("Справочник.События.ЗаписьПоказателяВыключена") Тогда
		ИмяФормыРедактора = "Справочник.События.Форма.РедакторЗаписьПоказателяВыключена";
		
	ИначеЕсли ВладелецПараметра = ПредопределенноеЗначение("Справочник.События.ПереходПоказателяВЗону") Тогда
		ИмяФормыРедактора = "Справочник.События.Форма.РедакторПереходПоказателяВЗону";
		
	КонецЕсли;
	
	Возврат ИмяФормыРедактора;
	
КонецФункции // ПолучитьРедактор()

&НаКлиенте
// Определить тип редактора для параметров указанного значения
//
// Параметры:
//  ВладелецПараметра - СправочникСсылка.События Или Справочник.Команды
//
// Возвращаемое значение:
//  Булево - Истина, параметр редактируется в отдельной форме,
//           Ложь - параметр редактируется на месте
//
Функция ВнешнийРедактор(ВладелецПараметра)
	
	Если мТипРедактора = Неопределено Тогда
		мТипРедактора = Новый Соответствие;
	КонецЕсли;
	
	Внешний = мТипРедактора[ВладелецПараметра];
	
	Если Внешний = Неопределено Тогда
		ФормаРедактора = ПолучитьИмяФормыРедактора(ВладелецПараметра);
		мТипРедактора[ВладелецПараметра] = ФормаРедактора <> Неопределено;
	КонецЕсли;
	
	Возврат мТипРедактора[ВладелецПараметра];
	
КонецФункции // ВнешнийРедактор()

