
///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

&НаСервере
Перем мВременныеТаблицы;


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформационнаяБаза = Параметры.ИнформационнаяБаза;
	НачалоИнтервала = Параметры.НачалоИнтервала;
	КонецИнтервала = Параметры.КонецИнтервала;
	ПроблемнаяСтрокаКонтекста = Параметры.ПроблемнаяСтрокаКонтекста;
	ПроблемныйПользователь = Параметры.ПроблемныйПользователь;
	Если ЗначениеЗаполнено(ПроблемныйПользователь) Тогда
		ОтключитьОтборПоКонтексту = Истина;
	КонецЕсли;
	ПроблемныйРесурс = Параметры.ПроблемныйРесурс;
	ТипРесурса = ПроблемныйРесурс.Тип;
	
	Если НЕ ЗначениеЗаполнено(НачалоИнтервала) Тогда
		Сообщить("Не указано начало интервала!");
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(КонецИнтервала) Тогда
		Сообщить("Не указан конец интервала!");
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
		Сообщить("Не указана информационная база!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ИнициализироватьПеременныеФормы();
	
	// Создать временные таблицы для вычисления веса проблем.
	мВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	ЗаполнитьВТКоличествоБлокировок();
	
	// Заполнить ДеревоЗначений Взаимоблокировоки
	ЗаполнитьДеревоВзаимоблокировок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияКлиент.РазвернутьСтрокиДерева(Элементы.Взаимоблокировки, Взаимоблокировки.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимоблокировкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Взаимоблокировки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Поле.Имя = "ВзаимоблокировкиРесурс" И ЗначениеЗаполнено(ДанныеСтроки.Ресурс) Тогда
		ПоказатьЗначение(, ДанныеСтроки.Ресурс);
		
	ИначеЕсли Поле.Имя = "ВзаимоблокировкиВзаимоблокировки" И ЗначениеЗаполнено(ДанныеСтроки.Ссылка) Тогда
		ПоказатьЗначение(, ДанныеСтроки.Ссылка);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ВыполнениеЗапроса) Тогда
		ИнтерфейсыКлиент.ОткрытьВыполнениеЗапроса(ДанныеСтроки.ВыполнениеЗапроса);
		
	КонецЕсли;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫБОРА ДАННЫХ

&НаСервере
Процедура ИнициализироватьПеременныеФормы()
	
	// Получить коэффицент ожидания на блокировках
	КоэффицентВзаимоблокировки = ПоказателиПроизводительности.ПолучитьВесовойКоэффициент(Справочники.Показатели.АнализВзаимоблокировок);
	КоэффицентВзаимоблокировки = ?(КоэффицентВзаимоблокировки = 0, 1, КоэффицентВзаимоблокировки);
	
	// Закешировать значения
	ТипРесурсаОбъектМетаданных     = Перечисления.ТипыРесурсов.ОбъектМетаданных;
	ТипРесурсаТаблица              = Перечисления.ТипыРесурсов.Таблица;
	ТипРесурсаИндекс               = Перечисления.ТипыРесурсов.Индекс;
	СостояниеБлокировкиУстановлена = Перечисления.СостоянияБлокировок.Установлена;
	ЖирныйШрифт                    = Новый Шрифт(,,Истина);
	
КонецПроцедуры

&НаСервере
// Функция возвращает текст запроса выбора взаимоблокировок по заданному Контексту.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВзаимоблокировкиПоКонтексту()
	
	ТекстЗапроса = "ВЫБРАТЬ *
	               |ИЗ (
	               |	ВЫБРАТЬ
	               |	Б.Ссылка.Хеш КАК Хеш,
	               |	ВЫБОР
	               |		КОГДА Б.Блокировка.ВыполнениеЗапроса.КонтекстСсылка.ПоследняяСтрока = &СтрокаКонтекста ТОГДА
	               |			(1 / КоличествоБлокировок.Количество) * &КоэффицентВзаимоблокировки 
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Вес,
	               |	КоличествоБлокировок.Количество КАК КоличествоБлокировок,
	               |	1/КоличествоБлокировок.Количество КАК КоличествоВзаимоблокировок,
	               |	Б.Ссылка КАК Ссылка,
	               |	Б.Процесс КАК Процесс,
	               |	Б.Блокировка.ВыполнениеЗапроса.ПользовательИБ КАК Пользователь,
	               |	Б.Блокировка.ВыполнениеЗапроса КАК ВыполнениеЗапроса,
	               |	Б.Ссылка.Дата КАК Дата,
	               |	Б.Ссылка.МоментВремени КАК МоментВремени,
	               |	Б.Ссылка.ТипБлокировки КАК ТипБлокировки,
	               |	Б.Блокировка.ВыполнениеЗапроса.МоментВремениОкончания КАК МоментВремениОкончания,
	               |	Б.Блокировка.ВыполнениеЗапроса.Дата КАК Время,
	               |	Б.Блокировка.ВыполнениеЗапроса.КонтекстСсылка КАК Контекст,
	               |	Б.Блокировка.Режим КАК Режим,
	               |	Б.Блокировка.Состояние КАК Состояние,
	               |	Б.Блокировка.Ресурс КАК Ресурс,
	               |	
	               |	ВЫБОР
	               |		КОГДА Б.Блокировка.Ресурс.Тип = &ОбъектМетаданных
	               |			ТОГДА Б.Блокировка.Ресурс
	               |		КОГДА Б.Блокировка.Ресурс.Тип = &Таблица
	               |			ТОГДА Б.Блокировка.Ресурс.Родитель
	               |		ИНАЧЕ Б.Блокировка.Ресурс.Родитель.Родитель
	               |	КОНЕЦ КАК РесурсОбъектМетаданных,
	               |	ВЫБОР
	               |		КОГДА Б.Блокировка.Ресурс.Тип = &Таблица
	               |			ТОГДА Б.Блокировка.Ресурс
	               |		ИНАЧЕ Б.Блокировка.Ресурс.Родитель
	               |	КОНЕЦ КАК РесурсТаблица,
	               |	ВЫБОР
	               |		КОГДА Б.Блокировка.Ресурс.Тип = &Индекс
	               |			ТОГДА Б.Блокировка.Ресурс
	               |	КОНЕЦ КАК РесурсИндекс
	               |	
	               |ИЗ
	               |	Документ.Взаимоблокировка.Блокировки КАК Б
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
	               |		ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
	               |ГДЕ
	               |	Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |	И Б.Ссылка.ИнформационнаяБаза = &ИБ
	               |	И (Б.Блокировка.ВыполнениеЗапроса.ПользовательИБ = &Пользователь ИЛИ &БезОтбораПоПользователю)
	               |	И (КоличествоБлокировок.Взаимоблокировка.Блокировки.Блокировка.ВыполнениеЗапроса.КонтекстСсылка.ПоследняяСтрока = &СтрокаКонтекста ИЛИ &БезОтбораПоКонтексту)
	               |	И (1 / КоличествоБлокировок.Количество) * &КоэффицентВзаимоблокировки > 0
	               |	
	               |	) КАК Дэдлоки
	               |	УПОРЯДОЧИТЬ ПО Дэдлоки.Процесс, Дэдлоки.Пользователь, Дэдлоки.Время ВОЗР
	               |	ИТОГИ СУММА(Дэдлоки.Вес), СУММА(КоличествоВзаимоблокировок), МАКСИМУМ(ТипБлокировки) ПО Дэдлоки.Хеш, Дэдлоки.Ссылка, Дэдлоки.Процесс
	               |	";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВзаимоблокировкиПоКонтексту()

&НаСервере
// Функция возвращает текст запроса выбора проблемных контекстов в случае анализа ожиданий по ресурсам.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВзаимоблокировкиПоРесурсу()
	
	ТекстЗапроса = "ВЫБРАТЬ *
	               |ИЗ (
	               |	ВЫБРАТЬ
	               |	Б.Ссылка.Хеш КАК Хеш,
	               |	ВЫБОР 
	               |		КОГДА Б.Блокировка.Ресурс = &Ресурс ТОГДА
	               |			1 / КоличествоБлокировок.Количество * &КоэффицентВзаимоблокировки
	               |	ИНАЧЕ 0 КОНЕЦ КАК Вес,
	               |	КоличествоБлокировок.Количество КАК КоличествоБлокировок,
	               |	1/КоличествоБлокировок.Количество КАК КоличествоВзаимоблокировок,
	               |	Б.Ссылка КАК Ссылка,
	               |	Б.Процесс КАК Процесс,
	               |	Б.Блокировка.ВыполнениеЗапроса.ПользовательИБ КАК Пользователь,
	               |	Б.Блокировка.ВыполнениеЗапроса КАК ВыполнениеЗапроса,
	               |	Б.Ссылка.Дата КАК Дата,
	               |	Б.Ссылка.МоментВремени КАК МоментВремени,
	               |	Б.Ссылка.ТипБлокировки КАК ТипБлокировки,
	               |	Б.Блокировка.ВыполнениеЗапроса.МоментВремениОкончания КАК МоментВремениОкончания,
	               |	Б.Блокировка.ВыполнениеЗапроса.Дата КАК Время,
	               |	Б.Блокировка.ВыполнениеЗапроса.КонтекстСсылка КАК Контекст,
	               |	Б.Блокировка.Режим КАК Режим,
	               |	Б.Блокировка.Состояние КАК Состояние,
	               |	Б.Блокировка.Ресурс КАК Ресурс,
	               |	
	               |	ВЫБОР
	               |		КОГДА Б.Блокировка.Ресурс.Тип = &ОбъектМетаданных
	               |			ТОГДА Б.Блокировка.Ресурс
	               |		КОГДА Б.Блокировка.Ресурс.Тип = &Таблица
	               |			ТОГДА Б.Блокировка.Ресурс.Родитель
	               |		ИНАЧЕ Б.Блокировка.Ресурс.Родитель.Родитель
	               |	КОНЕЦ КАК РесурсОбъектМетаданных,
	               |	ВЫБОР
	               |		КОГДА Б.Блокировка.Ресурс.Тип = &Таблица
	               |			ТОГДА Б.Блокировка.Ресурс
	               |		ИНАЧЕ Б.Блокировка.Ресурс.Родитель
	               |	КОНЕЦ КАК РесурсТаблица,
	               |	ВЫБОР
	               |		КОГДА Б.Блокировка.Ресурс.Тип = &Индекс
	               |			ТОГДА Б.Блокировка.Ресурс
	               |	КОНЕЦ КАК РесурсИндекс
	               |ИЗ
	               |	Документ.Взаимоблокировка.Блокировки КАК Б
	               |	ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
	               |	ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
	               |ГДЕ
	               |	Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |	И Б.Ссылка.ИнформационнаяБаза = &ИБ
	               |	И Б.Ссылка В (ВЫБРАТЬ Ссылка ИЗ Документ.Взаимоблокировка.Блокировки ГДЕ Блокировка.Ресурс = &Ресурс)
	               |	И (1 / КоличествоБлокировок.Количество * &КоэффицентВзаимоблокировки) > 0
	               |	
	               |	) КАК Дэдлоки
	               |	УПОРЯДОЧИТЬ ПО Дэдлоки.Процесс, Дэдлоки.Пользователь, Дэдлоки.Время ВОЗР
	               |	ИТОГИ СУММА(Дэдлоки.Вес), СУММА(КоличествоВзаимоблокировок), МАКСИМУМ(ТипБлокировки) ПО Дэдлоки.Хеш, Дэдлоки.Ссылка, Дэдлоки.Процесс
	               |	";
	
	Возврат ТекстЗапроса;

	
КонецФункции // ТекстЗапросаКонтекстыПоРесурсу()

&НаСервере
// Процедура заполняет временную таблицу КоличествоБлокировок.
// Используется в остальных запросах для вычисления веса.
//
Процедура ЗаполнитьВТКоличествоБлокировок()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мВременныеТаблицы;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Блокировки.Ссылка КАК Взаимоблокировка,
	               |	КОЛИЧЕСТВО(*) КАК Количество
	               |ПОМЕСТИТЬ КоличествоБлокировок
	               |ИЗ
	               |	Документ.Взаимоблокировка.Блокировки КАК Блокировки
	               |ГДЕ
	               |	Блокировки.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |	И Блокировки.Ссылка.ИнформационнаяБаза = &ИБ
	               |	И (Блокировки.Блокировка.ВыполнениеЗапроса.ПользовательИБ = &Пользователь
	               |			ИЛИ &БезОтбораПоПользователю)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Блокировки.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Взаимоблокировка";
	
	Запрос.УстановитьПараметр("НачалоИнтервала",         НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала",          КонецИнтервала);
	Запрос.УстановитьПараметр("ИБ",                      ИнформационнаяБаза);
	Запрос.УстановитьПараметр("Пользователь",            ПроблемныйПользователь);
	Запрос.УстановитьПараметр("БезОтбораПоПользователю", НЕ ЗначениеЗаполнено(ПроблемныйПользователь));
	
	Запрос.Выполнить();
	
КонецПроцедуры // ЗаполнитьВТКоличествоБлокировок()

&НаСервере
// Процедура заполняет таблицу Конексты.
// Выполняет запрос выбора проблемных контекстов.
//
Процедура ЗаполнитьДеревоВзаимоблокировок()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мВременныеТаблицы;
	
	// Сформировать текст запроса
	Если ЗначениеЗаполнено(ПроблемнаяСтрокаКонтекста) ИЛИ ЗначениеЗаполнено(ПроблемныйПользователь) Тогда
		
		// Получить текст запроса выбора проблемных контекстов по заданному контексту
		Запрос.Текст = ТекстЗапросаВзаимоблокировкиПоКонтексту();
		
		Запрос.УстановитьПараметр("СтрокаКонтекста", ПроблемнаяСтрокаКонтекста);
		Запрос.УстановитьПараметр("БезОтбораПоКонтексту", ОтключитьОтборПоКонтексту);
		
		Запрос.УстановитьПараметр("Пользователь", ПроблемныйПользователь);
		Запрос.УстановитьПараметр("БезОтбораПоПользователю", НЕ ЗначениеЗаполнено(ПроблемныйПользователь));
		
	Иначе
		
		// Получить текст запроса выбора проблемных контекстов по заданному ресурсу
		Запрос.Текст = ТекстЗапросаВзаимоблокировкиПоРесурсу();
		
		Запрос.УстановитьПараметр("ТипРесурса", ТипРесурса);
		Запрос.УстановитьПараметр("Ресурс",     ПроблемныйРесурс);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КоэффицентВзаимоблокировки", КоэффицентВзаимоблокировки);
	Запрос.УстановитьПараметр("ИБ",                         ИнформационнаяБаза);
	Запрос.УстановитьПараметр("НачалоИнтервала",            НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала",             КонецИнтервала);
	Запрос.УстановитьПараметр("ОбъектМетаданных",           ТипРесурсаОбъектМетаданных);
	Запрос.УстановитьПараметр("Таблица",                    ТипРесурсаТаблица);
	Запрос.УстановитьПараметр("Индекс",                     ТипРесурсаИндекс);
	
	// Заполнить таблицу
	ДеревоВзаимоблокировки = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого Стр Из ДеревоВзаимоблокировки.Строки Цикл
		Стр.КоличествоВзаимоблокировок = Окр(Стр.КоличествоВзаимоблокировок,0);
	КонецЦикла;
	
	// Отсортировать группы взаимоблокировок
	СтрокиГруппВзаимоблокировок = ДеревоВзаимоблокировки.Строки;
	СтрокиГруппВзаимоблокировок.Сортировать("Вес Убыв", Ложь);
	
	// Отсортировать взаимоблокировки внутри групп
	Для Каждого СтрокиВзаимоблокировок Из СтрокиГруппВзаимоблокировок Цикл
		СтрокиВзаимоблокировок.Строки.Сортировать("Вес Убыв", Ложь);
		
		// Отсортировать строки процесов
		Для Каждого СтрокиПроцессов Из СтрокиВзаимоблокировок.Строки Цикл
			СтрокиПроцессов.Строки.Сортировать("Процесс Возр, МоментВремениОкончания Возр ", Истина);
		КонецЦикла;
	КонецЦикла;
	
	ДеревоВзаимоблокировки.Колонки.Удалить(ДеревоВзаимоблокировки.Колонки.Найти("Хеш"));
	ДеревоВзаимоблокировки.Колонки.Добавить("Взаимоблокировки", Новый ОписаниеТипов("Строка"));
	ДеревоВзаимоблокировки.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ДеревоВзаимоблокировки.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	ВыполнитьОбработкуСтрокДерева(ДеревоВзаимоблокировки, 0);
	
	ЗначениеВРеквизитФормы(ДеревоВзаимоблокировки, "Взаимоблокировки");
	
	// Заполнить копию таблицы (используется при установке отбора)
	ВсеВзаимоблокировки = Новый ХранилищеЗначения(ДеревоВзаимоблокировки.Скопировать());
	
КонецПроцедуры // ЗаполнитьТаблицуКонтекстов()

&НаСервереБезКонтекста
Процедура ВыполнитьОбработкуСтрокДерева(ДеревоВзаимоблокировки, Уровень)
	
	// Выполнить обработку строк дерева
	Для Каждого Строка Из ДеревоВзаимоблокировки.Строки Цикл
		Строка.Уровень = Уровень;
		Если Уровень = 0 Тогда
			Строка.Взаимоблокировки = 
				"Количество взаимоблокировок: " + Строка(Строка.КоличествоВзаимоблокировок)
				+ "; Общий вес: " + Формат(Строка.Вес, "ЧДЦ=2; ЧН=");
			Строка.ИндексКартинки = 3;
		ИначеЕсли Уровень = 1 Тогда
			Строка.Взаимоблокировки = 
				?(Строка.ТипБлокировки = Перечисления.ТипыБлокировок.Блокировка1СПредприятия, "Взаимоблокировка 1С", "Взаимоблокировка СУБД")
				+ ", вес: " + Формат(Строка.Вес, "ЧДЦ=2; ЧН=")
				+ "; " + Строка.Строки[0].Строки[0].Дата;
			Строка.ИндексКартинки = -1;
		ИначеЕсли Уровень = 2 Тогда
			Строка.Взаимоблокировки = 
				?(Строка.ТипБлокировки = Перечисления.ТипыБлокировок.Блокировка1СПредприятия, "Соединение ", "Процесс ")
				+ Строка.Процесс;
			Строка.ИндексКартинки = 0;
		ИначеЕсли Уровень = 3 Тогда
			Строка.Взаимоблокировки = 
				Строка(Строка.Пользователь) + " " + Строка(Формат(Строка.Время, "ДЛФ=В"));
			Если Строка.Состояние = Перечисления.СостоянияБлокировок.Установлена Тогда
				Строка.ИндексКартинки = 1;
			Иначе
				Строка.ИндексКартинки = 2;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Строки.Количество() > 0 Тогда
			ВыполнитьОбработкуСтрокДерева(Строка, Уровень + 1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

