#Область ПеременныеФормы

&НаСервере
Перем мЗапросВесВсехПроблем;             // Запрос, вычисление веса всех проблем
&НаСервере
Перем мЗапросКонтексты;                  // Запрос, выборка контекстов с весом
&НаСервере
Перем мЗапросОбъектыМетаданных;          // Запрос, объекты метаданных с весом
&НаСервере
Перем мЗапросПользователи;               // Запрос, пользователи с весом
&НаСервере
Перем мЗапросТаблицыОбъектаМетаданных;   // Запрос, таблица объектов с весом и детальных вес объектов
&НаСервере
Перем мЗапросИндексыТаблиц;              // Запрос, индексы таблиц с весом и детальный вес таблиц
&НаСервере
Перем мЗапросВесОжиданияРесурса;         // Запрос, вес ожидания на индексе
&НаСервере
Перем мЗапросВесВзаимоблокировокИндекса; // Запрос, вес взаимоблокировок на индексе
&НаСервере
Перем мЗапросВесВыполненияРесурса;       // Запрос, вес выполнения запросов на индексе
&НаСервере
Перем мМенеджерВременныхТаблиц;          // Менеджер временных таблиц запросов анализа проблем

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Параметры.КонецИнтервала) Тогда
		Сообщить("Не указан конец интервала для анализа");
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.НачалоИнтервала) Тогда
		Сообщить("Не указано начало интервала для анализа");
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Параметры.ИнформационнаяБаза) Тогда
		Сообщить("Не указана информационная база интервала для анализа");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ИнициализироватьПеременныеФормы();
	ИнициализироватьВременныеТаблицы();
	
	// Вычислить вес всех проблем
	ВесВсехПроблем = ПолучитьВесВсехПроблем();
	
	// Заполнить деревья анализа
	ВыбратьКонтексты();
	ВыбратьОбъектыМетаданных();
	ВыбратьПользователей();
	
	Если РеквизитФормыВЗначение("КодКонфигурации").Строки.Количество() = 0 
		И РеквизитФормыВЗначение("СтруктураДанных").Строки.Количество() = 0 Тогда
		
		ТекстСообщения = "Получено пустое дерево анализа проблем производительности." + Символы.ПС + 
		                 "Возможные причины:" + Символы.ПС + 
		                 "1. Список выбранных показателей производительности не содержит ни одного аналитического показателя" + Символы.ПС + 
		                 "2. Выбранный интервал просмотра не содержит ни одной проблемы производительности";
		
		Сообщить(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует переменные при открытии формы
//
// Параметры:
//  Нет
//
&НаСервере
Процедура ИнициализироватьПеременныеФормы()
	
	КоэффицентВзаимоблокировки = ПоказателиПроизводительности.ПолучитьВесовойКоэффициент(Справочники.Показатели.АнализВзаимоблокировок);
	КоэффицентВзаимоблокировки = ?(КоэффицентВзаимоблокировки = 0, 1, КоэффицентВзаимоблокировки);

	КоэффицентОжидания         = ПоказателиПроизводительности.ПолучитьВесовойКоэффициент(Справочники.Показатели.АнализОжиданийНаБлокировках);
	КоэффицентОжидания         = ?(КоэффицентОжидания = 0, 1, КоэффицентОжидания);

	КоэффицентВыполнения       = ПоказателиПроизводительности.ПолучитьВесовойКоэффициент(Справочники.Показатели.АнализЗапросов);
	КоэффицентВыполнения       = ?(КоэффицентВыполнения = 0, 1, КоэффицентВыполнения);
	
	КоэффицентСерверныхВызовов = ПоказателиПроизводительности.ПолучитьВесовойКоэффициент(Справочники.Показатели.АнализСерверныхВызовов);
	КоэффицентСерверныхВызовов = ?(КоэффицентСерверныхВызовов = 0, 1, КоэффицентСерверныхВызовов);

	ТекстОжиданияНаБлокировках = "Ожидания на блокировках";
	ТекстВзаимоблокировки      = "Взаимоблокировки";
	ТекстВыполненияЗапросов    = "Выполнения запросов";
	ТекстСерверныеВызовы = "Серверные вызовы";
	
	ИнформационнаяБаза = Параметры.ИнформационнаяБаза;
	НачалоИнтервала = Параметры.НачалоИнтервала;
	КонецИнтервала = Параметры.КонецИнтервала;
	УчитыватьВзаимоблокировкиСУБД = Параметры.УчитыватьВзаимоблокировкиСУБД;
	УчитыватьВзаимоблокировки1С = Параметры.УчитыватьВзаимоблокировки1С;
	УчитыватьВыполненияЗапросов = Параметры.УчитыватьВыполненияЗапросов;
	УчитыватьОжиданияНаБлокировках = Параметры.УчитыватьОжиданияНаБлокировках;
	УчитыватьСерверныеВызовы = Параметры.УчитыватьСерверныеВызовы;
	
	Если УчитыватьВзаимоблокировки1С Тогда
		ТипыБлокировок.Добавить(Перечисления.ТипыБлокировок.Блокировка1СПредприятия);
	КонецЕсли;
	Если УчитыватьВзаимоблокировкиСУБД Тогда
		ТипыБлокировок.Добавить(Перечисления.ТипыБлокировок.БлокировкаСУБД);
		ТипыБлокировок.Добавить(Перечисления.ТипыБлокировок.ПустаяСсылка());
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьПеременныеФормы()

&НаСервере
// Процедура выбирает Контексты и вес проблем для каждого контекста.
// Заполняет ДеревоЗначений КодКонфигурации.
//
Процедура ВыбратьКонтексты()
	
	Если мЗапросКонтексты = Неопределено Тогда
		
		мЗапросКонтексты = Новый Запрос;
		мЗапросКонтексты.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
		
		мЗапросКонтексты.Текст = ТекстЗапросаКонтексты();
		
	КонецЕсли;
	
	мЗапросКонтексты.УстановитьПараметр("ИБ",                         ИнформационнаяБаза);
	мЗапросКонтексты.УстановитьПараметр("НачалоИнтервала",            НачалоИнтервала);
	мЗапросКонтексты.УстановитьПараметр("КонецИнтервала",             КонецИнтервала);
	мЗапросКонтексты.УстановитьПараметр("КоэффицентОжидания",         КоэффицентОжидания);
	мЗапросКонтексты.УстановитьПараметр("КоэффицентВзаимоблокировки", КоэффицентВзаимоблокировки);
	мЗапросКонтексты.УстановитьПараметр("КоэффицентВыполнения",       КоэффицентВыполнения);
	мЗапросКонтексты.УстановитьПараметр("КоэффицентСерверныхВызовов", КоэффицентСерверныхВызовов);
	мЗапросКонтексты.УстановитьПараметр("ВесВсехПроблем",             ВесВсехПроблем);
	мЗапросКонтексты.УстановитьПараметр("ТипыБлокировок",             ТипыБлокировок);
	
	ДеревоКодКонфигурации = мЗапросКонтексты.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗначениеВРеквизитФормы(ДеревоКодКонфигурации, "КодКонфигурации");
	
КонецПроцедуры // ВыбратьКонтексты()

&НаСервере
// Процедура выбирает Ресурсы и вес проблем для каждого ресурса.
// Заполняет ДеревоЗначений КодКонфигурации.
//
Процедура ВыбратьОбъектыМетаданных()
	
	Если мЗапросОбъектыМетаданных = Неопределено Тогда
		
		мЗапросОбъектыМетаданных = Новый Запрос;
		мЗапросОбъектыМетаданных.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
		
		ТекстЗапроса = ТекстЗапросаОбъектыМетаданных();
		Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
			СтруктураДанных.ПолучитьЭлементы().Очистить();
			Возврат;
		КонецЕсли;
		мЗапросОбъектыМетаданных.Текст = ТекстЗапроса;
		
	КонецЕсли;

	мЗапросОбъектыМетаданных.УстановитьПараметр("ИБ",                         ИнформационнаяБаза);
	мЗапросОбъектыМетаданных.УстановитьПараметр("НачалоИнтервала",            НачалоИнтервала);
	мЗапросОбъектыМетаданных.УстановитьПараметр("КонецИнтервала",             КонецИнтервала);
	мЗапросОбъектыМетаданных.УстановитьПараметр("КоэффицентОжидания",         КоэффицентОжидания);
	мЗапросОбъектыМетаданных.УстановитьПараметр("КоэффицентВзаимоблокировки", КоэффицентВзаимоблокировки);
	мЗапросОбъектыМетаданных.УстановитьПараметр("КоэффицентВыполнения",       КоэффицентВыполнения);
	мЗапросОбъектыМетаданных.УстановитьПараметр("КоэффицентСерверныхВызовов",       КоэффицентСерверныхВызовов);
	
	мЗапросОбъектыМетаданных.УстановитьПараметр("ТипТаблица",                 Перечисления.ТипыРесурсов.Таблица);
	мЗапросОбъектыМетаданных.УстановитьПараметр("ТипИндекс",                  Перечисления.ТипыРесурсов.Индекс);
	мЗапросОбъектыМетаданных.УстановитьПараметр("ТипОбъект",                  Перечисления.ТипыРесурсов.ОбъектМетаданных);
	мЗапросОбъектыМетаданных.УстановитьПараметр("ВесВсехПроблем",             ВесВсехПроблем);
	мЗапросОбъектыМетаданных.УстановитьПараметр("ТипыБлокировок",             ТипыБлокировок);
	
	ДеревоСтруктураДанных = мЗапросОбъектыМетаданных.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗначениеВРеквизитФормы(ДеревоСтруктураДанных, "СтруктураДанных");
	
КонецПроцедуры // ВыбратьОбъектыМетаданных()

&НаСервере
// Процедура выбирает пользователей и вес проблем для каждого пользователя.
// Заполняет ДеревоЗначений Пользователи.
//
Процедура ВыбратьПользователей()
	
	Если мЗапросПользователи = Неопределено Тогда
		
		мЗапросПользователи = Новый Запрос;
		мЗапросПользователи.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
		
		мЗапросПользователи.Текст = ТекстЗапросаПользователи();
		
	КонецЕсли;
	
	мЗапросПользователи.УстановитьПараметр("ИБ",                         ИнформационнаяБаза);
	мЗапросПользователи.УстановитьПараметр("НачалоИнтервала",            НачалоИнтервала);
	мЗапросПользователи.УстановитьПараметр("КонецИнтервала",             КонецИнтервала);
	мЗапросПользователи.УстановитьПараметр("КоэффицентОжидания",         КоэффицентОжидания);
	мЗапросПользователи.УстановитьПараметр("КоэффицентВзаимоблокировки", КоэффицентВзаимоблокировки);
	мЗапросПользователи.УстановитьПараметр("КоэффицентВыполнения",       КоэффицентВыполнения);
	мЗапросПользователи.УстановитьПараметр("КоэффицентСерверныхВызовов", КоэффицентСерверныхВызовов);
	мЗапросПользователи.УстановитьПараметр("ВесВсехПроблем",             ВесВсехПроблем);
	мЗапросПользователи.УстановитьПараметр("ТипыБлокировок",             ТипыБлокировок);
	
	ДеревоПользователи = мЗапросПользователи.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗначениеВРеквизитФормы(ДеревоПользователи, "Пользователи");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКодКонфигурации

&НаКлиенте
Процедура КодКонфигурацииПередРазворачиванием(Элемент, ИдентификаторСтроки, Отказ)
	
	// Выполнить обработку строк дерева
	ВетвьДерева = КодКонфигурации.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ВетвьДерева <> Неопределено Тогда
		Для Каждого Строка Из ВетвьДерева.ПолучитьЭлементы() Цикл
			ТипПроблемы = Строка.ТипПроблемы;
			Если НЕ ПустаяСтрока(ТипПроблемы) Тогда
				Строка.Проблема = ТипПроблемы;
				Если ТипПроблемы = ТекстВыполненияЗапросов Тогда
					Строка.ИндексКартинки = 2;
				ИначеЕсли ТипПроблемы = ТекстОжиданияНаБлокировках Тогда
					Строка.ИндексКартинки = 3;
				ИначеЕсли ТипПроблемы = ТекстВзаимоблокировки Тогда
					Строка.ИндексКартинки = 4;
				ИначеЕсли ТипПроблемы = ТекстСерверныеВызовы Тогда
					Строка.ИндексКартинки = 5;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодКонфигурацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = КодКонфигурации.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ПустаяСтрока(ДанныеСтроки.ТипПроблемы) Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Контекст) Тогда
			
			// Открыть форму контекста
			ПараметрыФормы = Новый Структура("Ключ", ДанныеСтроки.Контекст);
			ФормаКонтекста = ПолучитьФорму("Справочник.Контексты.ФормаОбъекта", ПараметрыФормы);
			ФормаКонтекста.Открыть();
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьДетальныйАнализ(ДанныеСтроки.ТипПроблемы, ДанныеСтроки.Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтруктураДанных

&НаКлиенте
// Процедура обработки события ПередРазворачиванием элемента формы СтруктураДанных.
//
Процедура СтруктураДанныхПередРазворачиванием(Элемент, ИдентификаторСтроки, Отказ)
	
	СтруктураДанныхПередРазворачиваниемНаСервере(ИдентификаторСтроки, Отказ);
	
	ВетвьДерева = СтруктураДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ВетвьДерева <> Неопределено Тогда
		УровеньСтроки = ОбщегоНазначенияКлиент.ПолучитьУровеньСтрокиДерева(ВетвьДерева);
		
		Для Каждого Строка Из ВетвьДерева.ПолучитьЭлементы() Цикл
			Если Строка.Проблема = ТекстВыполненияЗапросов Тогда
				Строка.ИндексКартинки = 3;
			ИначеЕсли Строка.Проблема = ТекстОжиданияНаБлокировках Тогда
				Строка.ИндексКартинки = 4;
			ИначеЕсли Строка.Проблема = ТекстВзаимоблокировки Тогда
				Строка.ИндексКартинки = 5;
			ИначеЕсли УровеньСтроки = 1 Тогда
				Строка.ИндексКартинки = 1;
			Иначе
				Строка.ИндексКартинки = 2;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура обработки события ПередРазворачиванием элемента формы СтруктураДанных.
//
Процедура СтруктураДанныхПередРазворачиваниемНаСервере(ИдентификаторСтроки, Отказ)
	
	Строка = СтруктураДанных.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	// Получить текущий ресурс
	Ресурс = Строка.Ресурс;
	
	Если ЗначениеЗаполнено(Ресурс) Тогда
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		
		// Добавить таблицы хранения данных
		Если Ресурс.Тип = Перечисления.ТипыРесурсов.ОбъектМетаданных Тогда
			
			Если ПодчиненныеСтроки[0].Ресурс.Тип = Перечисления.ТипыРесурсов.ОбъектМетаданных Тогда
				
				// Удалить подчиненные строки
				ПодчиненныеСтроки.Очистить();
				
				Таблицы = ПолучитьТаблицыОбъектаМетаданных(Ресурс);
				
				// Добавить список таблиц в дерево
				Пока Таблицы.Следующий() Цикл
					
					СтрокаДерева = ПодчиненныеСтроки.Добавить();
					
					СтрокаДерева.Проблема = Таблицы.Проблема;
					СтрокаДерева.Вес      = Таблицы.Вес;
					СтрокаДерева.Процент  = Таблицы.Процент;
					СтрокаДерева.Ресурс   = Таблицы.Ресурс;
					
					// Добавить подчиненную фиктивную строку таблице
					ФиктивнаяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
					
				КонецЦикла;
				
			КонецЕсли;
			
		// Добавить индексы таблиц
		ИначеЕсли Ресурс.Тип = Перечисления.ТипыРесурсов.Таблица Тогда
			
			Если ПодчиненныеСтроки.Количество() = 1 Тогда
				
				ПодчиненныеСтроки.Очистить();
				
				Индексы = ПолучитьИндексыТаблиц(Ресурс);
				
				// Добавить список индексов в дерево
				Пока Индексы.Следующий() Цикл
					
					СтрокаДерева = ПодчиненныеСтроки.Добавить();
					
					СтрокаДерева.Проблема = Индексы.Проблема;
					СтрокаДерева.Вес      = Индексы.Вес;
					СтрокаДерева.Процент  = Индексы.Процент;
					СтрокаДерева.Ресурс   = Индексы.Ресурс;
					
					// Добавить подчиненную фиктивную строку индексу
					Если ТипЗнч(СтрокаДерева.Ресурс) = Тип("СправочникСсылка.Ресурсы") И ЗначениеЗаполнено(СтрокаДерева.Ресурс) Тогда
						ФиктивнаяСтрока = СтрокаДерева.ПолучитьЭлементы().Добавить();
					КонецЕсли;
					
				КонецЦикла;
				
				//ПодчиненныеСтроки.Сортировать("Вес УБЫВ");
				
			КонецЕсли;
			
		// Добавить разобранный вес индекса (Ожидания на блокировках, Взаимоблокировки, Выполнение запроса)
		Иначе
			
			ПодчиненныеСтроки.Очистить();
			
			// Получить и добавить в дерево вес ожидания на блокировках на ресурсе
			Если УчитыватьОжиданияНаБлокировках Тогда
				
				ВесОжидания = ПолучитьВесОжиданияНаИндексе(Ресурс);
				ДобавитьДетальныйВес(ТекстОжиданияНаБлокировках, ВесОжидания, Строка);
				
			КонецЕсли;
			
			// Получить и добавить в дерево вес взаимоблокировок на ресурсе
			Если УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
				
				ВесВзаимоблокировок = ПолучитьВесВзаимоблокировкиИндекса(Ресурс);
				ДобавитьДетальныйВес(ТекстВзаимоблокировки, ВесВзаимоблокировок, Строка);
				
			КонецЕсли;
			
			// Получить и добавить в дерево вес ыполнений запросов на ресурсе
			Если УчитыватьВыполненияЗапросов Тогда
				
				ВесВыполненийЗапросов = ПолучитьВесВыполненияНаИндексе(Ресурс);
				ДобавитьДетальныйВес(ТекстВыполненияЗапросов, ВесВыполненийЗапросов, Строка);
				
			КонецЕсли;
			
			//ПодчиненныеСтроки.Сортировать("Вес УБЫВ");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктураДанныхПередРазворачиванием()

&НаКлиенте
Процедура СтруктураДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = СтруктураДанных.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ЗначениеЗаполнено(ДанныеСтроки.Ресурс) Тогда
		
		// Открыть форму ресурса
		ПараметрыФормы = Новый Структура("Ключ", ДанныеСтроки.Ресурс);
		ФормаРесурса = ПолучитьФорму("Справочник.Ресурсы.ФормаОбъекта", ПараметрыФормы);
		ФормаРесурса.Открыть();
		
	ИначеЕсли ДанныеСтроки.Вес > 0 Тогда
		
		ОткрытьДетальныйАнализ(ДанныеСтроки.Проблема,, ДанныеСтроки.ПолучитьРодителя().Ресурс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция получает список таблиц хранения данных для объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - СправочникСсылка.Ресурс
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Список таблиц
//
Функция ПолучитьТаблицыОбъектаМетаданных(ОбъектМетаданных)
	
	ИнициализироватьВременныеТаблицы();
	
	Если мЗапросТаблицыОбъектаМетаданных = Неопределено Тогда
		
		мЗапросТаблицыОбъектаМетаданных = Новый Запрос;
		мЗапросТаблицыОбъектаМетаданных.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
		
		мЗапросТаблицыОбъектаМетаданных.Текст = ТекстЗапросаТаблицыОбъектаМетаданных();
		
	КонецЕсли;
	
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("ИБ",                         ИнформационнаяБаза);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("НачалоИнтервала",            НачалоИнтервала);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("КонецИнтервала",             КонецИнтервала);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("КоэффицентОжидания",         КоэффицентОжидания);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("КоэффицентВзаимоблокировки", КоэффицентВзаимоблокировки);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("КоэффицентВыполнения",       КоэффицентВыполнения);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("ТипИндекс",                  Перечисления.ТипыРесурсов.Индекс);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("ТипТаблица",                 Перечисления.ТипыРесурсов.Таблица);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("ТипОбъект",                  Перечисления.ТипыРесурсов.ОбъектМетаданных);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("Объект",                     ОбъектМетаданных);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("ВесВсехПроблем",             ВесВсехПроблем);
	мЗапросТаблицыОбъектаМетаданных.УстановитьПараметр("ТипыБлокировок",             ТипыБлокировок);
	
	Возврат мЗапросТаблицыОбъектаМетаданных.Выполнить().Выбрать();
	
КонецФункции // ПолучитьТаблицыОбъектаМетаданных()

&НаСервере
// Функция получает список индексов таблицы хранения данных
//
// Параметры:
//  ОбъектМетаданных - СправочникСсылка.Ресурс
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Список индексов
//
Функция ПолучитьИндексыТаблиц(Таблица)
	
	ИнициализироватьВременныеТаблицы();
	
	Если мЗапросИндексыТаблиц = Неопределено Тогда
		
		мЗапросИндексыТаблиц = Новый Запрос;
		мЗапросИндексыТаблиц.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
		
		мЗапросИндексыТаблиц.Текст = ТекстЗапросаИндексыТаблиц();
		
	КонецЕсли;
	
	мЗапросИндексыТаблиц.УстановитьПараметр("ИБ",                         ИнформационнаяБаза);
	мЗапросИндексыТаблиц.УстановитьПараметр("НачалоИнтервала",            НачалоИнтервала);
	мЗапросИндексыТаблиц.УстановитьПараметр("КонецИнтервала",             КонецИнтервала);
	мЗапросИндексыТаблиц.УстановитьПараметр("КоэффицентОжидания",         КоэффицентОжидания);
	мЗапросИндексыТаблиц.УстановитьПараметр("КоэффицентВзаимоблокировки", КоэффицентВзаимоблокировки);
	мЗапросИндексыТаблиц.УстановитьПараметр("КоэффицентВыполнения",       КоэффицентВыполнения);
	мЗапросИндексыТаблиц.УстановитьПараметр("Таблица",                    Таблица);
	мЗапросИндексыТаблиц.УстановитьПараметр("ТипИндекс",                  Перечисления.ТипыРесурсов.Индекс);
	мЗапросИндексыТаблиц.УстановитьПараметр("ТипТаблица",                 Перечисления.ТипыРесурсов.Таблица);
	мЗапросИндексыТаблиц.УстановитьПараметр("ВесВсехПроблем",             ВесВсехПроблем);
	мЗапросИндексыТаблиц.УстановитьПараметр("ТипыБлокировок",             ТипыБлокировок);
	
	Возврат мЗапросИндексыТаблиц.Выполнить().Выбрать();
	
КонецФункции // ПолучитьИндексыТаблиц()

&НаСервере
// Функция получает вес ожидания на блокировке ресурса и процент веса проблемы из общего веса всех проблем.
//
// Параметры:
//  Запрос - СправочникСсылка.Ресурс
//
// Возвращаемое значение:
//  Структура - Вес ожидания на блокировке. Ключи:
//              Вес     - Сисло.
//              Процент - Число, процент веса проблемы из общего веса всех проблем.
//
Функция ПолучитьВесОжиданияНаИндексе(Индекс)
	
	ИнициализироватьВременныеТаблицы();
	
	Если мЗапросВесОжиданияРесурса = Неопределено Тогда
		
		мЗапросВесОжиданияРесурса = Новый Запрос;
		мЗапросВесОжиданияРесурса.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
		
		мЗапросВесОжиданияРесурса.Текст = ТекстЗапросаВесОжиданияНаИндексе();
		
	КонецЕсли;
	
	мЗапросВесОжиданияРесурса.УстановитьПараметр("ИБ",                 ИнформационнаяБаза);
	мЗапросВесОжиданияРесурса.УстановитьПараметр("Индекс",             Индекс);
	мЗапросВесОжиданияРесурса.УстановитьПараметр("Таблица",            Индекс.Родитель);
	мЗапросВесОжиданияРесурса.УстановитьПараметр("ТипИндекс",          Перечисления.ТипыРесурсов.Индекс);
	мЗапросВесОжиданияРесурса.УстановитьПараметр("НачалоИнтервала",    НачалоИнтервала);
	мЗапросВесОжиданияРесурса.УстановитьПараметр("КонецИнтервала",     КонецИнтервала);
	мЗапросВесОжиданияРесурса.УстановитьПараметр("КоэффицентОжидания", КоэффицентОжидания);
	мЗапросВесОжиданияРесурса.УстановитьПараметр("ВесВсехПроблем",     ВесВсехПроблем);
	
	Выборка = мЗапросВесОжиданияРесурса.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Вес, Процент", Выборка.Вес, Выборка.Процент);
	Иначе
		Возврат Новый Структура("Вес, Процент", 0, 0);
	КонецЕсли;
	
КонецФункции // ПолучитьВесОжиданияРесурса()

&НаСервере
// Функция получает вес взаимоблокировок ресурса и процент веса проблемы из общего веса всех проблем.
//
// Параметры:
//  Запрос - СправочникСсылка.Ресурс
//
// Возвращаемое значение:
//  Структура - Вес ожидания на блокировке. Ключи:
//              Вес     - Сисло.
//              Процент - Число, процент веса проблемы из общего веса всех проблем.
//
Функция ПолучитьВесВзаимоблокировкиИндекса(Индекс)
	
	ИнициализироватьВременныеТаблицы();
	
	Если мЗапросВесВзаимоблокировокИндекса = Неопределено Тогда
		
		мЗапросВесВзаимоблокировокИндекса = Новый Запрос;
		мЗапросВесВзаимоблокировокИндекса.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
		
		мЗапросВесВзаимоблокировокИндекса.Текст = ТекстЗапросаВесВзаимоблокировокНаИндексе();
		
	КонецЕсли;
	
	мЗапросВесВзаимоблокировокИндекса.УстановитьПараметр("ИБ",                         ИнформационнаяБаза);
	мЗапросВесВзаимоблокировокИндекса.УстановитьПараметр("Индекс",                     Индекс);
	мЗапросВесВзаимоблокировокИндекса.УстановитьПараметр("Таблица",                    Индекс.Родитель);
	мЗапросВесВзаимоблокировокИндекса.УстановитьПараметр("ТипИндекс",                  Перечисления.ТипыРесурсов.Индекс);
	мЗапросВесВзаимоблокировокИндекса.УстановитьПараметр("НачалоИнтервала",            НачалоИнтервала);
	мЗапросВесВзаимоблокировокИндекса.УстановитьПараметр("КонецИнтервала",             КонецИнтервала);
	мЗапросВесВзаимоблокировокИндекса.УстановитьПараметр("КоэффицентВзаимоблокировки", КоэффицентВзаимоблокировки);
	мЗапросВесВзаимоблокировокИндекса.УстановитьПараметр("ВесВсехПроблем",             ВесВсехПроблем);
	
	Выборка = мЗапросВесВзаимоблокировокИндекса.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Вес, Процент", Выборка.Вес, Выборка.Процент);
	Иначе
		Возврат Новый Структура("Вес, Процент", 0, 0);
	КонецЕсли;
	
КонецФункции // ПолучитьВесВзаимоблокировкиИндекса()

&НаСервере
// Функция получает вес выполнения запросов ресурса и процент веса проблемы из общего веса всех проблем.
//
// Параметры:
//  Ресурс - СправочникСсылка.Ресурс
//
// Возвращаемое значение:
//  Структура - Вес ожидания на блокировке. Ключи:
//              Вес     - Сисло.
//              Процент - Число, процент веса проблемы из общего веса всех проблем.
//
Функция ПолучитьВесВыполненияНаИндексе(Индекс)
	
	ИнициализироватьВременныеТаблицы();
	
	Если мЗапросВесВыполненияРесурса = Неопределено Тогда
		
		мЗапросВесВыполненияРесурса = Новый Запрос;
		мЗапросВесВыполненияРесурса.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
		
		мЗапросВесВыполненияРесурса.Текст = ТекстЗапросаВесВыполненияНаИндексе();
		
	КонецЕсли;
	
	
	мЗапросВесВыполненияРесурса.УстановитьПараметр("ИБ",                         ИнформационнаяБаза);
	мЗапросВесВыполненияРесурса.УстановитьПараметр("Индекс",                     Индекс);
	мЗапросВесВыполненияРесурса.УстановитьПараметр("Таблица",                    Индекс.Родитель);
	мЗапросВесВыполненияРесурса.УстановитьПараметр("ТипИндекс",                  Перечисления.ТипыРесурсов.Индекс);
	мЗапросВесВыполненияРесурса.УстановитьПараметр("НачалоИнтервала",            НачалоИнтервала);
	мЗапросВесВыполненияРесурса.УстановитьПараметр("КонецИнтервала",             КонецИнтервала);
	мЗапросВесВыполненияРесурса.УстановитьПараметр("КоэффицентВыполнения",       КоэффицентВыполнения);
	мЗапросВесВыполненияРесурса.УстановитьПараметр("ВесВсехПроблем",             ВесВсехПроблем);
	
	Выборка = мЗапросВесВыполненияРесурса.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Вес, Процент", Выборка.Вес, Выборка.Процент);
	Иначе
		Возврат Новый Структура("Вес, Процент", 0, 0);
	КонецЕсли;
	
КонецФункции // ПолучитьВесВремениВыполненияЗапросовРесурса()

&НаСервере
// Создает и заполняет временные таблицы необходимые для анализа
//
// Параметры:
//  Нет
//
Процедура ИнициализироватьВременныеТаблицы()
	
	Если мМенеджерВременныхТаблиц = Неопределено Тогда
		Если УчитыватьОжиданияНаБлокировках Тогда
			ЗаполнитьВесОжиданий();
		КонецЕсли;
		
		Если УчитыватьВыполненияЗапросов Тогда
			ЗаполнитьВесВыполненийНаРесурсах();
		КонецЕсли;
		
		Если УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
			ЗаполнитьВесВзаимоблокировок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьВременныеТаблицы()


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПользователи

&НаКлиенте
Процедура ПользователиПередРазворачиванием(Элемент, ИдентификаторСтроки, Отказ)
	
	// Выполнить обработку строк дерева
	ВетвьДерева = Пользователи.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ВетвьДерева <> Неопределено Тогда
		Для Каждого Строка Из ВетвьДерева.ПолучитьЭлементы() Цикл
			ТипПроблемы = Строка.ТипПроблемы;
			Если НЕ ПустаяСтрока(ТипПроблемы) Тогда
				Строка.Проблема = ТипПроблемы;
				Если ТипПроблемы = ТекстВыполненияЗапросов Тогда
					Строка.ИндексКартинки = 2;
				ИначеЕсли ТипПроблемы = ТекстОжиданияНаБлокировках Тогда
					Строка.ИндексКартинки = 3;
				ИначеЕсли ТипПроблемы = ТекстВзаимоблокировки Тогда
					Строка.ИндексКартинки = 4;
				ИначеЕсли ТипПроблемы = ТекстСерверныеВызовы Тогда
					Строка.ИндексКартинки = 5;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Пользователи.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ПустаяСтрока(ДанныеСтроки.ТипПроблемы) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДетальныйАнализ(ДанныеСтроки.ТипПроблемы,,, ДанныеСтроки.Пользователь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Функция возвращает вес всех проблем.
//
// Возвращаемое значение:
//  Число
//
Функция ПолучитьВесВсехПроблем()
	
	ИнициализироватьВременныеТаблицы();
	
	Если мЗапросВесВсехПроблем = Неопределено Тогда
		
		мЗапросВесВсехПроблем = Новый Запрос;
		мЗапросВесВсехПроблем.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
		
		мЗапросВесВсехПроблем.Текст = ТекстЗапросаВесВсехПроблем();
		
	КонецЕсли;
	
	мЗапросВесВсехПроблем.УстановитьПараметр("ИБ",                         ИнформационнаяБаза);
	мЗапросВесВсехПроблем.УстановитьПараметр("НачалоИнтервала",            НачалоИнтервала);
	мЗапросВесВсехПроблем.УстановитьПараметр("КонецИнтервала",             КонецИнтервала);
	мЗапросВесВсехПроблем.УстановитьПараметр("КоэффицентОжидания",         КоэффицентОжидания);
	мЗапросВесВсехПроблем.УстановитьПараметр("КоэффицентВзаимоблокировки", КоэффицентВзаимоблокировки);
	мЗапросВесВсехПроблем.УстановитьПараметр("КоэффицентВыполнения",       КоэффицентВыполнения);
	мЗапросВесВсехПроблем.УстановитьПараметр("КоэффицентСерверныхВызовов", КоэффицентСерверныхВызовов);
	мЗапросВесВсехПроблем.УстановитьПараметр("ТипыБлокировок",             ТипыБлокировок);
	
	Выборка = мЗапросВесВсехПроблем.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.Вес), Выборка.Вес, 0);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьВесВсехПроблем()

&НаСервере
// Процедура создает и заполняет временные таблицы ожиданиями на блокировках.
//
Процедура ЗаполнитьВесОжиданий()
	
	Если мМенеджерВременныхТаблиц = Неопределено Тогда
		
		мМенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
	
	// Количество ожиданий на блокировках
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса КАК Выполнение,
	               |	КОЛИЧЕСТВО(*) КАК Количество
	               |ПОМЕСТИТЬ ОжиданияКоличество
	               |ИЗ
	               |	Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
	               |ГДЕ
	               |	ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
	               |	И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Выполнение";
	
	Запрос.УстановитьПараметр("ИБ",              ИнформационнаяБаза);
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала",  КонецИнтервала);
	Запрос.Выполнить();
	
	// Веса контекстов
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество / 2 КАК Вес,
	               |	ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса.КонтекстСсылка КАК Контекст
	               |ПОМЕСТИТЬ КонтекстыВес
	               |ИЗ
	               |	Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
	               |		ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
	               |ГДЕ
	               |	ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
	               |	И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество / 2,
	               |	ОжиданиеНаБлокировке.Блокирует.ВыполнениеЗапроса.КонтекстСсылка
	               |ИЗ
	               |	Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
	               |		ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
	               |ГДЕ
	               |	ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
	               |	И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Контекст";
	
	Запрос.Выполнить();
	
	// Веса пользователей
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество / 2 КАК Вес,
	               |	ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса.ПользовательИБ КАК ПользовательИБ
	               |ПОМЕСТИТЬ ПользователиВес
	               |ИЗ
	               |	Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
	               |		ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
	               |ГДЕ
	               |	ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
	               |	И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество / 2,
	               |	ОжиданиеНаБлокировке.Блокирует.ВыполнениеЗапроса.ПользовательИБ
	               |ИЗ
	               |	Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
	               |		ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
	               |ГДЕ
	               |	ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
	               |	И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ПользовательИБ";
	
	Запрос.Выполнить();
	
КонецПроцедуры // ЗаполнитьВесОжиданий()

&НаСервере
// Процедура создает и заполняет временную таблицу с выполнениями запросов
//
Процедура ЗаполнитьВесВыполненийНаРесурсах()
	
	Если мМенеджерВременныхТаблиц = Неопределено Тогда
		
		мМенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Б.ВыполнениеЗапроса КАК ВыполнениеЗапроса,
	               |	КОЛИЧЕСТВО(*) КАК Количество
	               |ПОМЕСТИТЬ БлокировкиВыполненийЗапросов
	               |ИЗ
	               |	Документ.Блокировка КАК Б
	               |ГДЕ
	               |	Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |	И Б.ИнформационнаяБаза = &ИБ
	               |	И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
	               |	И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Б.ВыполнениеЗапроса
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВыполнениеЗапроса";
	
	Запрос.УстановитьПараметр("ИБ",              ИнформационнаяБаза);
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала",  КонецИнтервала);
	
	Запрос.Выполнить();
	
КонецПроцедуры // ЗаполнитьВесВыполненийНаРесурсах()

&НаСервере
// Процедура создает и заполняет временную таблицу с взаимоблокировками
//
Процедура ЗаполнитьВесВзаимоблокировок()
	
	Если мМенеджерВременныхТаблиц = Неопределено Тогда
		
		мМенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = мМенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Блокировки.Ссылка КАК Взаимоблокировка,
	               |	КОЛИЧЕСТВО(*) КАК Количество
	               |ПОМЕСТИТЬ КоличествоБлокировок
	               |ИЗ
	               |	Документ.Взаимоблокировка.Блокировки КАК Блокировки
	               |ГДЕ
	               |	Блокировки.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |	И Блокировки.Ссылка.ИнформационнаяБаза = &ИБ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Блокировки.Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Взаимоблокировка";
	
	Запрос.УстановитьПараметр("ИБ",              ИнформационнаяБаза);
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала",  КонецИнтервала);
	
	Запрос.Выполнить();
	
КонецПроцедуры // ЗаполнитьВесВзаимоблокировок()

&НаКлиенте
// Процедура открывает форму детального анализа проблемы: Ожидания на блокировках, Взаимоблокировок.
//
// Параметры:
//  ИмяОтчета - Строка, имя общего макета.
//  Контекст    - СправочникСсылка.Контекст (необязательный)
//  Ресурс    - СправочникСсылка.Ресурс (необязательный)
//
Процедура ОткрытьДетальныйАнализ(Знач ИмяОтчета, Контекст = Неопределено, Ресурс = Неопределено, Пользователь = Неопределено)
	
	ПараметрыФормы = Новый Структура(
		"ИнформационнаяБаза,ПроблемнаяСтрокаКонтекста,СпособГруппировки,НачалоИнтервала,
		|КонецИнтервала,ПроблемныйРесурс,ПроблемныйПользователь",
		ИнформационнаяБаза,
		Контекст,
		"ПоследняяСтрока",
		НачалоИнтервала,
		КонецИнтервала,
		Ресурс,
		Пользователь
	);
	
	Если ИмяОтчета = ТекстОжиданияНаБлокировках Тогда
		ФормаАнализа = ПолучитьФорму("ОбщаяФорма.АнализОжиданий", ПараметрыФормы);
	ИначеЕсли ИмяОтчета = ТекстВзаимоблокировки Тогда
		ФормаАнализа = ПолучитьФорму("ОбщаяФорма.АнализВзаимоблокировок", ПараметрыФормы);
	ИначеЕсли ИмяОтчета = ТекстВыполненияЗапросов Тогда
		ФормаАнализа = ПолучитьФорму("ОбщаяФорма.АнализЗапросов", ПараметрыФормы);
	ИначеЕсли ИмяОтчета = ТекстСерверныеВызовы Тогда
		ФормаАнализа = ПолучитьФорму("ОбщаяФорма.АнализСерверныхВызовов", ПараметрыФормы);
	КонецЕсли;
	
	Если ФормаАнализа.Открыта() Тогда
		ФормаАнализа.Закрыть();
	КонецЕсли;
	
	ФормаАнализа.Открыть();
	
КонецПроцедуры // ОткрытьДетальныйАнализ()

&НаСервере
// Функция возвращает текст запроса вычисления общего веса всех проблем.
// Запрос для соединения с основным запросом.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаВесВсехПроблем()
	
	ТекстЗапроса = "ВЫБРАТЬ
					 |	СУММА(ВсеПроблемы.Вес) КАК Вес
					 |	ИЗ (";
		
	Если УчитыватьОжиданияНаБлокировках Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
									 |	ВЫБРАТЬ
									 |		СУММА(Вес)* &КоэффицентОжидания КАК Вес
									 |	ИЗ КонтекстыВес
									 |";
		
	КонецЕсли;
	
	Если УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
		
		Если УчитыватьОжиданияНаБлокировках Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
									 |	ВЫБРАТЬ
									 |	СУММА(1 / КоличествоБлокировок.Количество) * &КоэффицентВзаимоблокировки КАК Вес
									 |ИЗ
									 |	Документ.Взаимоблокировка.Блокировки КАК Б
									 |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
									 |		ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
									 |ГДЕ
									 |	Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
									 |	И Б.Ссылка.ИнформационнаяБаза = &ИБ
									 |	И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)
									 |";
		
	КонецЕсли;
	
	Если УчитыватьВыполненияЗапросов Тогда
		
		Если УчитыватьОжиданияНаБлокировках ИЛИ УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
									 |	ВЫБРАТЬ
									 |	СУММА(Выполнение.ВремяВыполненияМс) / 1000 * &КоэффицентВыполнения КАК Вес
									 |ИЗ
									 |	Документ.ВыполнениеЗапроса КАК Выполнение
									 |ГДЕ
									 |	Выполнение.ИнформационнаяБаза = &ИБ
									 |	И Выполнение.ВремяВыполненияМс > 0
									 |	И Выполнение.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
									 |ИМЕЮЩИЕ СУММА(Выполнение.ВремяВыполненияМс) > 0
									 |";
		
	КонецЕсли;
	
	Если УчитыватьСерверныеВызовы Тогда
		
		Если УчитыватьОжиданияНаБлокировках ИЛИ УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С ИЛИ УчитыватьВыполненияЗапросов Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
									 |	ВЫБРАТЬ
									 |	СУММА(Выполнение.ВремяВыполненияМс) / 1000 * &КоэффицентСерверныхВызовов КАК Вес
									 |ИЗ
									 |	Документ.ВыполнениеКода КАК Выполнение
									 |ГДЕ
									 |	Выполнение.ИнформационнаяБаза = &ИБ
									 |	И Выполнение.ВремяВыполненияМс > 0
									 |	И Выполнение.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
									 |	И Выполнение.ТипВыполнения = ЗНАЧЕНИЕ(Перечисление.ТипыВыполненийКода.СерверныйВызов)
									 |ИМЕЮЩИЕ СУММА(Выполнение.ВремяВыполненияМс) > 0
									 |";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
								  |	) КАК ВсеПроблемы
								  |";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВесВсехПроблем()

&НаСервере
// Функция возвращает текст запроса выбора проблоемных контекстов с весом.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаКонтексты()
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	0 КАК ИндексКартинки,
				   |	Контексты.Контекст КАК Контекст,
				   |	Контексты.ТипПроблемы КАК ТипПроблемы,
				   |	ЕСТЬNULL(Контексты.Вес,0) КАК Вес,
				   |	ЕСТЬNULL(Контексты.Вес,0) * 100 / &ВесВсехПроблем КАК Процент,
				   |	ВЫРАЗИТЬ(Контексты.Контекст.Наименование КАК СТРОКА) КАК Проблема
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		ВыполнениеЗапросов.Контекст.ПоследняяСтрока КАК Контекст,
				   |		СУММА(ВыполнениеЗапросов.Вес) КАК Вес,
				   |		ВыполнениеЗапросов.ТипПроблемы КАК ТипПроблемы
				   |	ИЗ
				   |		(";
	
	Если УчитыватьОжиданияНаБлокировках Тогда
					   
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
			|	Контекст,
			|	СУММА(Вес)* &КоэффицентОжидания КАК Вес,
			|	""" + ТекстОжиданияНаБлокировках + """ КАК ТипПроблемы
			|	ИЗ КонтекстыВес
			|	СГРУППИРОВАТЬ ПО Контекст
			|";
	КонецЕсли;
	
	Если УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
		
		Если УчитыватьОжиданияНаБлокировках Тогда
			
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	Б.Блокировка.ВыполнениеЗапроса.КонтекстСсылка КАК Контекст,
		                              |	СУММА(1 / КоличествоБлокировок.Количество) * &КоэффицентВзаимоблокировки КАК Вес,
		                              |	""" + ТекстВзаимоблокировки + """ КАК ТипПроблемы
		                              |ИЗ
		                              |	Документ.Взаимоблокировка.Блокировки КАК Б
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |		ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |ГДЕ
		                              |	Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |	И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |	И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)
		                              |СГРУППИРОВАТЬ ПО
		                              |	Б.Блокировка.ВыполнениеЗапроса.КонтекстСсылка";
		
	КонецЕсли;
	
	Если УчитыватьВыполненияЗапросов Тогда
		
		Если УчитыватьОжиданияНаБлокировках ИЛИ УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
			
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Выполнение.КонтекстСсылка КАК Контекст,
			|	СУММА(Выполнение.ВремяВыполненияМс) / 1000 * &КоэффицентВыполнения КАК Вес,
			|	""" + ТекстВыполненияЗапросов + """ КАК ТипПроблемы
			|ИЗ
			|	Документ.ВыполнениеЗапроса КАК Выполнение
			|ГДЕ
			|	Выполнение.ИнформационнаяБаза = &ИБ
			|	И Выполнение.ВремяВыполненияМс > 0
			|	И Выполнение.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
			|СГРУППИРОВАТЬ ПО Выполнение.КонтекстСсылка
			|	ИМЕЮЩИЕ СУММА(Выполнение.ВремяВыполненияМс) > 0 
			|";
			
	КонецЕсли;
	
	Если УчитыватьСерверныеВызовы Тогда
		
		Если УчитыватьОжиданияНаБлокировках ИЛИ УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С ИЛИ УчитыватьВыполненияЗапросов Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Выполнение.КонтекстСсылка КАК Контекст,
			|	СУММА(Выполнение.ВремяВыполненияМс) / 1000 * &КоэффицентВыполнения КАК Вес,
			|	""" + ТекстСерверныеВызовы + """ КАК ТипПроблемы
			|ИЗ
			|	Документ.ВыполнениеКода КАК Выполнение
			|ГДЕ
			|	Выполнение.ИнформационнаяБаза = &ИБ
			|	И Выполнение.ВремяВыполненияМс > 0
			|	И Выполнение.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
			|	И Выполнение.ТипВыполнения = ЗНАЧЕНИЕ(Перечисление.ТипыВыполненийКода.СерверныйВызов)
			|СГРУППИРОВАТЬ ПО Выполнение.КонтекстСсылка
			|	ИМЕЮЩИЕ СУММА(Выполнение.ВремяВыполненияМс) > 0 
			|";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
				   |) КАК ВыполнениеЗапросов
				   |	
				   |СГРУППИРОВАТЬ ПО
				   |	ВыполнениеЗапросов.Контекст.ПоследняяСтрока,
				   |	ВыполнениеЗапросов.ТипПроблемы
				   |) КАК Контексты
				   |	";
	
	ТекстЗапроса = ТекстЗапроса + "
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Вес УБЫВ
				   |ИТОГИ
				   |	СУММА(Вес),
				   |	СУММА(Процент)
				   |ПО
				   |	Контекст";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаКонтексты()

&НаСервере
// Функция возвращает текст запроса выбора проблемных ресурсов с весом.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаОбъектыМетаданных()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	0 КАК ИндексКартинки,
	               |	Проблемы.Ресурс.Наименование КАК Проблема,
	               |	Проблемы.Ресурс КАК Ресурс,
	               |	ЕСТЬNULL(Проблемы.Вес,0) КАК Вес,
	               |	ЕСТЬNULL(Проблемы.Вес,0) * 100 / &ВесВсехПроблем КАК Процент
	               |ИЗ
				   |	(ВЫБРАТЬ
				   |		Проблемы.Ресурс КАК Ресурс,
				   |		СУММА(Проблемы.Вес) КАК Вес
				   |	ИЗ
	               |		(
	               |";
	
	ВложенныйЗапрос = "";
	Если УчитыватьОжиданияНаБлокировках Тогда
		
		ВложенныйЗапрос = ВложенныйЗапрос + 
		"ВЫБРАТЬ
		|	П.ОбъектМетаданных КАК Ресурс,
		|	СУММА(П.Вес) * &КоэффицентОжидания КАК Вес
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОжиданиеНаБлокировке.Заблокирована.Ресурс КАК ОбъектМетаданных,
		|		ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество КАК Вес
		|	ИЗ
		|		Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
		|			ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
		|	ГДЕ
		|		ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
		|		И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		|		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Тип = &ТипОбъект
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОжиданиеНаБлокировке.Заблокирована.Ресурс.Родитель,
		|		ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество
		|	ИЗ
		|		Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
		|			ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
		|	ГДЕ
		|		ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
		|		И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		|		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Тип = &ТипТаблица
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОжиданиеНаБлокировке.Заблокирована.Ресурс.Родитель.Родитель,
		|		ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество
		|	ИЗ
		|		Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
		|			ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
		|			ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
		|	ГДЕ
		|		ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
		|		И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		|		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Тип = &ТипИндекс) КАК П
		|
		|СГРУППИРОВАТЬ ПО
		|	П.ОбъектМетаданных";
		
	КонецЕсли;
	
	Если УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
		
		Если Не ПустаяСтрока(ВложенныйЗапрос) Тогда
			ВложенныйЗапрос = ВложенныйЗапрос + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
		
		ВложенныйЗапрос = ВложенныйЗапрос + "ВЫБРАТЬ
		                              |	П.ОбъектМетаданных КАК Ресурс,
		                              |	СУММА(П.Вес) * &КоэффицентВзаимоблокировки КАК Вес
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		Б.Блокировка.Ресурс КАК ОбъектМетаданных,
		                              |		1 / КоличествоБлокировок.Количество КАК Вес
		                              |	ИЗ
		                              |		Документ.Взаимоблокировка.Блокировки КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |			ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |	ГДЕ
		                              |		Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |		И Б.Блокировка.Ресурс.Тип = &ТипОбъект
		                              |		И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Блокировка.Ресурс.Родитель,
		                              |		1 / КоличествоБлокировок.Количество
		                              |	ИЗ
		                              |		Документ.Взаимоблокировка.Блокировки КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |			ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |	ГДЕ
		                              |		Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |		И Б.Блокировка.Ресурс.Тип = &ТипТаблица
		                              |		И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Блокировка.Ресурс.Родитель.Родитель,
		                              |		1 / КоличествоБлокировок.Количество
		                              |	ИЗ
		                              |		Документ.Взаимоблокировка.Блокировки КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |			ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |	ГДЕ
		                              |		Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |		И Б.Блокировка.Ресурс.Тип = &ТипИндекс
		                              |		И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)) КАК П
		                              |
		                              |СГРУППИРОВАТЬ ПО
		                              |	П.ОбъектМетаданных";
		
	КонецЕсли;
	
	Если УчитыватьВыполненияЗапросов Тогда
		
		Если Не ПустаяСтрока(ВложенныйЗапрос) Тогда
			ВложенныйЗапрос = ВложенныйЗапрос + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
		
		ВложенныйЗапрос = ВложенныйЗапрос + "ВЫБРАТЬ
		                              |	П.ОбъектМетаданных КАК Ресурс,
		                              |	СУММА(П.Вес) * &КоэффицентВыполнения КАК Вес
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		Б.Ресурс КАК ОбъектМетаданных,
		                              |		Б.ВыполнениеЗапроса.ВремяВыполненияМс / К.Количество / 1000 КАК Вес
		                              |	ИЗ
		                              |		Документ.Блокировка КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ БлокировкиВыполненийЗапросов КАК К
		                              |			ПО (К.ВыполнениеЗапроса = Б.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.ИнформационнаяБаза = &ИБ
		                              |		И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
		                              |		И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
		                              |		И Б.Ресурс.Тип = &ТипОбъект
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Ресурс.Родитель КАК Ресурс,
		                              |		Б.ВыполнениеЗапроса.ВремяВыполненияМс / К.Количество / 1000 КАК Вес
		                              |	ИЗ
		                              |		Документ.Блокировка КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ БлокировкиВыполненийЗапросов КАК К
		                              |			ПО (К.ВыполнениеЗапроса = Б.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.ИнформационнаяБаза = &ИБ
		                              |		И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
		                              |		И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
		                              |		И Б.Ресурс.Тип = &ТипТаблица
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Ресурс.Родитель.Родитель КАК Ресурс,
		                              |		Б.ВыполнениеЗапроса.ВремяВыполненияМс / К.Количество / 1000 КАК Вес
		                              |	ИЗ
		                              |		Документ.Блокировка КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ БлокировкиВыполненийЗапросов КАК К
		                              |			ПО (К.ВыполнениеЗапроса = Б.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.ИнформационнаяБаза = &ИБ
		                              |		И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
		                              |		И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
		                              |		И Б.Ресурс.Тип = &ТипИндекс) КАК П
		                              |
		                              |СГРУППИРОВАТЬ ПО
		                              |	П.ОбъектМетаданных";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ВложенныйЗапрос) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ВложенныйЗапрос;
	ТекстЗапроса = ТекстЗапроса + "
	                   |	) КАК Проблемы
					   |	
					   |	СГРУППИРОВАТЬ ПО
					   |		Проблемы.Ресурс
					   |		) КАК Проблемы
	                   |	";
	
	ТекстЗапроса = ТекстЗапроса + "
	                   |УПОРЯДОЧИТЬ ПО
	                   |	Вес УБЫВ
	                   |ИТОГИ
	                   |	СУММА(Вес),
	                   |	СУММА(Процент)
	                   |ПО
	                   |	Ресурс";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаОбъектыМетаданных()

&НаСервере
// Функция возвращает текст запроса выбора проблемных пользователей с весом.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаПользователи()
	
	ТекстЗапроса = "ВЫБРАТЬ
				   |	0 КАК ИндексКартинки,
				   |	Пользователи.ПользовательИБ КАК Пользователь,
				   |	Пользователи.ТипПроблемы КАК ТипПроблемы,
				   |	ЕСТЬNULL(Пользователи.Вес,0) КАК Вес,
				   |	ЕСТЬNULL(Пользователи.Вес,0) * 100 / &ВесВсехПроблем КАК Процент,
				   |	ВЫРАЗИТЬ(Пользователи.ПользовательИБ.Наименование КАК СТРОКА) КАК Проблема
				   |ИЗ
				   |	(ВЫБРАТЬ
				   |		ВыполнениеЗапросов.ПользовательИБ КАК ПользовательИБ,
				   |		СУММА(ВыполнениеЗапросов.Вес) КАК Вес,
				   |		ВыполнениеЗапросов.ТипПроблемы КАК ТипПроблемы
				   |	ИЗ
				   |		(";
	
	Если УчитыватьОжиданияНаБлокировках Тогда
					   
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
			|	ПользователиВес.ПользовательИБ,
			|	СУММА(ПользователиВес.Вес)* &КоэффицентОжидания КАК Вес,
			|	""" + ТекстОжиданияНаБлокировках + """ КАК ТипПроблемы
			|	ИЗ ПользователиВес
			|	СГРУППИРОВАТЬ ПО ПользовательИБ
			|";
	КонецЕсли;
	
	Если УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
		
		Если УчитыватьОжиданияНаБлокировках Тогда
			
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	Б.Блокировка.ВыполнениеЗапроса.ПользовательИБ КАК ПользовательИБ,
		                              |	СУММА(1 / КоличествоБлокировок.Количество) * &КоэффицентВзаимоблокировки КАК Вес,
		                              |	""" + ТекстВзаимоблокировки + """ КАК ТипПроблемы
		                              |ИЗ
		                              |	Документ.Взаимоблокировка.Блокировки КАК Б
		                              |		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |		ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |ГДЕ
		                              |	Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |	И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |	И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)
		                              |СГРУППИРОВАТЬ ПО
		                              |	Б.Блокировка.ВыполнениеЗапроса.ПользовательИБ";
		
	КонецЕсли;
	
	Если УчитыватьВыполненияЗапросов Тогда
		
		Если УчитыватьОжиданияНаБлокировках ИЛИ УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
			
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Выполнение.ПользовательИБ КАК ПользовательИБ,
			|	СУММА(Выполнение.ВремяВыполненияМс) / 1000 * &КоэффицентВыполнения КАК Вес,
			|	""" + ТекстВыполненияЗапросов + """ КАК ТипПроблемы
			|ИЗ
			|	Документ.ВыполнениеЗапроса КАК Выполнение
			|ГДЕ
			|	Выполнение.ИнформационнаяБаза = &ИБ
			|	И Выполнение.ВремяВыполненияМс > 0
			|	И Выполнение.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
			|СГРУППИРОВАТЬ ПО Выполнение.ПользовательИБ
			|	ИМЕЮЩИЕ СУММА(Выполнение.ВремяВыполненияМс) > 0 
			|";
			
	КонецЕсли;
	
	Если УчитыватьСерверныеВызовы Тогда
		
		Если УчитыватьОжиданияНаБлокировках ИЛИ УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С ИЛИ УчитыватьВыполненияЗапросов Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Выполнение.ПользовательИБ КАК ПользовательИБ,
			|	СУММА(Выполнение.ВремяВыполненияМс) / 1000 * &КоэффицентВыполнения КАК Вес,
			|	""" + ТекстСерверныеВызовы + """ КАК ТипПроблемы
			|ИЗ
			|	Документ.ВыполнениеКода КАК Выполнение
			|ГДЕ
			|	Выполнение.ИнформационнаяБаза = &ИБ
			|	И Выполнение.ВремяВыполненияМс > 0
			|	И Выполнение.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
			|	И Выполнение.ТипВыполнения = ЗНАЧЕНИЕ(Перечисление.ТипыВыполненийКода.СерверныйВызов)
			|СГРУППИРОВАТЬ ПО Выполнение.ПользовательИБ
			|	ИМЕЮЩИЕ СУММА(Выполнение.ВремяВыполненияМс) > 0 
			|";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
				   |) КАК ВыполнениеЗапросов
				   |	
				   |СГРУППИРОВАТЬ ПО
				   |	ВыполнениеЗапросов.ПользовательИБ,
				   |	ВыполнениеЗапросов.ТипПроблемы
				   |) КАК Пользователи
				   |	";
	
	ТекстЗапроса = ТекстЗапроса + "
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	Вес УБЫВ
				   |ИТОГИ
				   |	СУММА(Вес),
				   |	СУММА(Процент)
				   |ПО
				   |	ПользовательИБ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
// Функция возвращает текст запроса выбора проблемных таблиц ресурса с весом.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаТаблицыОбъектаМетаданных()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Проблемы.Проблема КАК Проблема,
	               |	Проблемы.Ресурс КАК Ресурс,
	               |	СУММА(ЕСТЬNULL(Проблемы.Вес,0)) КАК Вес,
	               |	СУММА(ЕСТЬNULL(Проблемы.Вес,0)) * 100 / &ВесВсехПроблем КАК Процент
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫРАЗИТЬ(Проблемы.Ресурс КАК Справочник.Ресурсы) КАК Ресурс,
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(Проблемы.Ресурс КАК Справочник.Ресурсы) <> ЗНАЧЕНИЕ(Справочник.Ресурсы.ПустаяСсылка)
	               |				ТОГДА Проблемы.Ресурс.Наименование
	               |			ИНАЧЕ Проблемы.Ресурс
	               |		КОНЕЦ КАК Проблема,
	               |		СУММА(Проблемы.Вес) КАК Вес
	               |	ИЗ
	               |		(
	               |	";
	
	Если УчитыватьОжиданияНаБлокировках Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	П.Таблица КАК Ресурс,
		                              |	СУММА(П.Вес) * &КоэффицентОжидания КАК Вес
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		""" + ТекстОжиданияНаБлокировках + """ КАК Таблица,
		                              |		ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество КАК Вес
		                              |	ИЗ
		                              |		Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
		                              |			ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
		                              |		И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Тип = &ТипОбъект
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс = &Объект
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		ОжиданиеНаБлокировке.Заблокирована.Ресурс,
		                              |		ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество
		                              |	ИЗ
		                              |		Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
		                              |			ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
		                              |		И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Тип = &ТипТаблица
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Родитель = &Объект
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		ОжиданиеНаБлокировке.Заблокирована.Ресурс.Родитель,
		                              |		ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество
		                              |	ИЗ
		                              |		Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
		                              |			ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
		                              |		И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Тип = &ТипИндекс
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Родитель.Родитель = &Объект) КАК П
		                              |
		                              |СГРУППИРОВАТЬ ПО
		                              |	П.Таблица";
		
	КонецЕсли;
	
	Если УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
		
		Если УчитыватьОжиданияНаБлокировках Тогда
			ТекстЗапроса = ТекстЗапроса + "  ОБЪЕДИНИТЬ ВСЕ  ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	П.Таблица КАК Ресурс,
		                              |	СУММА(П.Вес) * &КоэффицентВзаимоблокировки КАК Вес
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		""" + ТекстВзаимоблокировки + """ КАК Таблица,
		                              |		1 / КоличествоБлокировок.Количество КАК Вес
		                              |	ИЗ
		                              |		Документ.Взаимоблокировка.Блокировки КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |			ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |	ГДЕ
		                              |		Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |		И Б.Блокировка.Ресурс.Тип = &ТипОбъект
		                              |		И Б.Блокировка.Ресурс = &Объект
		                              |		И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Блокировка.Ресурс,
		                              |		1 / КоличествоБлокировок.Количество
		                              |	ИЗ
		                              |		Документ.Взаимоблокировка.Блокировки КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |			ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |	ГДЕ
		                              |		Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |		И Б.Блокировка.Ресурс.Тип = &ТипТаблица
		                              |		И Б.Блокировка.Ресурс.Родитель = &Объект
		                              |		И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Блокировка.Ресурс.Родитель,
		                              |		1 / КоличествоБлокировок.Количество
		                              |	ИЗ
		                              |		Документ.Взаимоблокировка.Блокировки КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |			ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |	ГДЕ
		                              |		Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |		И Б.Блокировка.Ресурс.Тип = &ТипИндекс
		                              |		И Б.Блокировка.Ресурс.Родитель.Родитель = &Объект
		                              |		И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)) КАК П
		                              |
		                              |СГРУППИРОВАТЬ ПО
		                              |	П.Таблица";
		
	КонецЕсли;
	
	Если УчитыватьВыполненияЗапросов Тогда
		
		Если УчитыватьОжиданияНаБлокировках ИЛИ УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
			ТекстЗапроса = ТекстЗапроса + "  ОБЪЕДИНИТЬ ВСЕ  ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	П.Таблица КАК Ресурс,
		                              |	СУММА(П.Вес) * &КоэффицентВыполнения КАК Вес
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		""" + ТекстВыполненияЗапросов + """ КАК Таблица,
		                              |		Б.ВыполнениеЗапроса.ВремяВыполненияМс / К.Количество / 1000 КАК Вес
		                              |	ИЗ
		                              |		Документ.Блокировка КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ БлокировкиВыполненийЗапросов КАК К
		                              |			ПО (К.ВыполнениеЗапроса = Б.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.ИнформационнаяБаза = &ИБ
		                              |		И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
		                              |		И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
		                              |		И Б.Ресурс.Тип = &ТипОбъект
		                              |		И Б.Ресурс = &Объект
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Ресурс,
		                              |		Б.ВыполнениеЗапроса.ВремяВыполненияМс / К.Количество / 1000
		                              |	ИЗ
		                              |		Документ.Блокировка КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ БлокировкиВыполненийЗапросов КАК К
		                              |			ПО (К.ВыполнениеЗапроса = Б.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.ИнформационнаяБаза = &ИБ
		                              |		И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
		                              |		И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
		                              |		И Б.Ресурс.Тип = &ТипТаблица
		                              |		И Б.Ресурс.Родитель = &Объект
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Ресурс.Родитель,
		                              |		Б.ВыполнениеЗапроса.ВремяВыполненияМс / К.Количество / 1000
		                              |	ИЗ
		                              |		Документ.Блокировка КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ БлокировкиВыполненийЗапросов КАК К
		                              |			ПО (К.ВыполнениеЗапроса = Б.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.ИнформационнаяБаза = &ИБ
		                              |		И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
		                              |		И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
		                              |		И Б.Ресурс.Тип = &ТипИндекс
		                              |		И Б.Ресурс.Родитель.Родитель = &Объект) КАК П
		                              |
		                              |СГРУППИРОВАТЬ ПО
		                              |	П.Таблица";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	               |	) КАК Проблемы
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Проблемы.Ресурс,
	               |	ВЫБОР
	               |	КОГДА ВЫРАЗИТЬ(Проблемы.Ресурс КАК Справочник.Ресурсы) <> ЗНАЧЕНИЕ(Справочник.Ресурсы.ПустаяСсылка)
	               |	ТОГДА Проблемы.Ресурс.Наименование
	               |	ИНАЧЕ Проблемы.Ресурс
	               |	КОНЕЦ
	               |			)
	               |	КАК Проблемы
	               |	";
	
	ТекстЗапроса = ТекстЗапроса + "
	               |СГРУППИРОВАТЬ ПО
	               |	Проблемы.Проблема,
	               |	Проблемы.Ресурс
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Вес УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицыОбъектаМетаданных()

&НаСервере
// Функция возвращает текст запроса выбора проблемных индексов ресурса с весом.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаИндексыТаблиц()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Проблемы.Проблема КАК Проблема,
	               |	Проблемы.Ресурс КАК Ресурс,
	               |	ЕСТЬNULL(Проблемы.Вес,0) КАК Вес,
	               |	ЕСТЬNULL(Проблемы.Вес,0) * 100 / &ВесВсехПроблем КАК Процент
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВЫРАЗИТЬ(Проблемы.Ресурс КАК Справочник.Ресурсы) КАК Ресурс,
	               |		ВЫБОР
	               |			КОГДА ВЫРАЗИТЬ(Проблемы.Ресурс КАК Справочник.Ресурсы) <> ЗНАЧЕНИЕ(Справочник.Ресурсы.ПустаяСсылка)
	               |				ТОГДА Проблемы.Ресурс.Наименование
	               |			ИНАЧЕ Проблемы.Ресурс
	               |		КОНЕЦ КАК Проблема,
	               |		СУММА(Проблемы.Вес) КАК Вес
	               |	ИЗ
	               |		(
	               |	";
	
	Если УчитыватьОжиданияНаБлокировках Тогда
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	П.Индекс КАК Ресурс,
		                              |	СУММА(П.Вес) * &КоэффицентОжидания КАК Вес
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		""" + ТекстОжиданияНаБлокировках + """ КАК Индекс,
		                              |		ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество КАК Вес
		                              |	ИЗ
		                              |		Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
		                              |			ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
		                              |		И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Тип = &ТипТаблица
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс = &Таблица
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		ОжиданиеНаБлокировке.Заблокирована.Ресурс,
		                              |		ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество
		                              |	ИЗ
		                              |		Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
		                              |			ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
		                              |		И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Тип = &ТипИндекс
		                              |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Родитель = &Таблица) КАК П
		                              |
		                              |СГРУППИРОВАТЬ ПО
		                              |	П.Индекс";
	КонецЕсли;
	
	Если УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
		
		Если УчитыватьОжиданияНаБлокировках Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	П.Индекс КАК Ресурс,
		                              |	СУММА(П.Вес) * &КоэффицентВзаимоблокировки КАК Вес
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		""" + ТекстВзаимоблокировки + """ КАК Индекс,
		                              |		1 / КоличествоБлокировок.Количество КАК Вес
		                              |	ИЗ
		                              |		Документ.Взаимоблокировка.Блокировки КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |			ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |	ГДЕ
		                              |		Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |		И Б.Блокировка.Ресурс.Тип = &ТипТаблица
		                              |		И Б.Блокировка.Ресурс = &Таблица
		                              |		И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Блокировка.Ресурс,
		                              |		1 / КоличествоБлокировок.Количество
		                              |	ИЗ
		                              |		Документ.Взаимоблокировка.Блокировки КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
		                              |			ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
		                              |	ГДЕ
		                              |		Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.Ссылка.ИнформационнаяБаза = &ИБ
		                              |		И Б.Блокировка.Ресурс.Тип = &ТипИндекс
		                              |		И Б.Блокировка.Ресурс.Родитель = &Таблица
		                              |		И Б.Ссылка.ТипБлокировки В (&ТипыБлокировок)) КАК П
		                              |
		                              |СГРУППИРОВАТЬ ПО
		                              |	П.Индекс";
	КонецЕсли;
	
	Если УчитыватьВыполненияЗапросов Тогда
		
		Если УчитыватьОжиданияНаБлокировках ИЛИ УчитыватьВзаимоблокировкиСУБД ИЛИ УчитыватьВзаимоблокировки1С Тогда
			ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ ";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
		                              |	П.Индекс КАК Ресурс,
		                              |	СУММА(П.Вес) * &КоэффицентВыполнения КАК Вес
		                              |ИЗ
		                              |	(ВЫБРАТЬ
		                              |		""" + ТекстВыполненияЗапросов + """ КАК Индекс,
		                              |		Б.ВыполнениеЗапроса.ВремяВыполненияМс / К.Количество / 1000 КАК Вес
		                              |	ИЗ
		                              |		Документ.Блокировка КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ БлокировкиВыполненийЗапросов КАК К
		                              |			ПО (К.ВыполнениеЗапроса = Б.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.ИнформационнаяБаза = &ИБ
		                              |		И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
		                              |		И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
		                              |		И Б.Ресурс.Тип = &ТипТаблица
		                              |		И Б.Ресурс = &Таблица
		                              |	
		                              |	ОБЪЕДИНИТЬ ВСЕ
		                              |	
		                              |	ВЫБРАТЬ
		                              |		Б.Ресурс,
		                              |		Б.ВыполнениеЗапроса.ВремяВыполненияМс / К.Количество / 1000
		                              |	ИЗ
		                              |		Документ.Блокировка КАК Б
		                              |			ЛЕВОЕ СОЕДИНЕНИЕ БлокировкиВыполненийЗапросов КАК К
		                              |			ПО (К.ВыполнениеЗапроса = Б.ВыполнениеЗапроса)
		                              |	ГДЕ
		                              |		Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		                              |		И Б.ИнформационнаяБаза = &ИБ
		                              |		И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
		                              |		И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
		                              |		И Б.Ресурс.Тип = &ТипИндекс
		                              |		И Б.Ресурс.Родитель = &Таблица) КАК П
		                              |
		                              |СГРУППИРОВАТЬ ПО
		                              |	П.Индекс";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	               |	) КАК Проблемы
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		Проблемы.Ресурс,
	               |	ВЫБОР
	               |	КОГДА ВЫРАЗИТЬ(Проблемы.Ресурс КАК Справочник.Ресурсы) <> ЗНАЧЕНИЕ(Справочник.Ресурсы.ПустаяСсылка)
	               |	ТОГДА Проблемы.Ресурс.Наименование
	               |	ИНАЧЕ Проблемы.Ресурс
	               |	КОНЕЦ
	               |			)
	               |	КАК Проблемы
	               |	";
	
	ТекстЗапроса = ТекстЗапроса + "
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Вес УБЫВ";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаИндексыТаблиц()

&НаСервере
// Функция возвращает текст запроса вычисления веса ожидания на ресурсе.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаВесОжиданияНаИндексе()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ВесРесурса.Вес, 0)) КАК Вес,
	               |	СУММА(ЕСТЬNULL(ВесРесурса.Вес, 0)) * 100 / &ВесВсехПроблем КАК Процент
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ОжиданиеНаБлокировке.Заблокирована.Ресурс КАК Ресурс,
	               |		ОжиданиеНаБлокировке.ВремяОжидания / 1000 / ОжиданияКоличество.Количество * &КоэффицентОжидания КАК Вес
	               |	ИЗ
	               |		Документ.ОжиданиеНаБлокировке КАК ОжиданиеНаБлокировке
	               |			ЛЕВОЕ СОЕДИНЕНИЕ ОжиданияКоличество КАК ОжиданияКоличество
	               |			ПО (ОжиданияКоличество.Выполнение = ОжиданиеНаБлокировке.Заблокирована.ВыполнениеЗапроса)
	               |	ГДЕ
	               |		ОжиданиеНаБлокировке.ИнформационнаяБаза = &ИБ
	               |		И ОжиданиеНаБлокировке.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Тип = &ТипИндекс
	               |		И ОжиданиеНаБлокировке.Блокирует.Ресурс.Родитель = &Таблица) КАК ВесРесурса
	               |ГДЕ
	               |	ВесРесурса.Ресурс = &Индекс";

	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВесОжиданияРесурса()

&НаСервере
// Функция возвращает текст запроса вычисления веса взаимоблокировок на индексе.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаВесВзаимоблокировокНаИндексе()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ВесРесурса.Вес, 0)) КАК Вес,
	               |	СУММА(ЕСТЬNULL(ВесРесурса.Вес, 0)) * 100 / &ВесВсехПроблем КАК Процент
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Б.Блокировка.Ресурс КАК Ресурс,
	               |		1 / КоличествоБлокировок.Количество * &КоэффицентВзаимоблокировки КАК Вес
	               |	ИЗ
	               |		Документ.Взаимоблокировка.Блокировки КАК Б
	               |			ЛЕВОЕ СОЕДИНЕНИЕ КоличествоБлокировок КАК КоличествоБлокировок
	               |			ПО (КоличествоБлокировок.Взаимоблокировка = Б.Ссылка)
	               |	ГДЕ
	               |		Б.Ссылка.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |		И Б.Ссылка.ИнформационнаяБаза = &ИБ
	               |		И Б.Блокировка.Ресурс.Тип = &ТипИндекс
	               |		И Б.Блокировка.Ресурс.Родитель = &Таблица) КАК ВесРесурса
	               |ГДЕ
	               |	ВесРесурса.Ресурс = &Индекс";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВесВзаимоблокировокИндекса()

&НаСервере
// Функция возвращает текст запроса вычисления веса выполнения запросов на ресурсе.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаВесВыполненияНаИндексе()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СУММА(ЕСТЬNULL(ВесРесурса.Вес, 0)) КАК Вес,
	               |	СУММА(ЕСТЬNULL(ВесРесурса.Вес, 0)) * 100 / &ВесВсехПроблем КАК Процент
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Б.Ресурс КАК Ресурс,
	               |		Б.ВыполнениеЗапроса.ВремяВыполненияМс / К.Количество / 1000 * &КоэффицентВыполнения КАК Вес
	               |	ИЗ
	               |		Документ.Блокировка КАК Б
	               |			ЛЕВОЕ СОЕДИНЕНИЕ БлокировкиВыполненийЗапросов КАК К
	               |			ПО (К.ВыполнениеЗапроса = Б.ВыполнениеЗапроса)
	               |	ГДЕ
	               |		Б.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
	               |		И Б.ИнформационнаяБаза = &ИБ
	               |		И ВЫРАЗИТЬ (Б.ВыполнениеЗапроса КАК Документ.ВыполнениеЗапроса) <> ЗНАЧЕНИЕ(Документ.ВыполнениеЗапроса.ПустаяСсылка)
	               |		И Б.ВыполнениеЗапроса.ВремяВыполненияМс > 0
	               |		И Б.Ресурс.Тип = &ТипИндекс
	               |		И Б.Ресурс.Родитель = &Таблица) КАК ВесРесурса
	               |ГДЕ
	               |	ВесРесурса.Ресурс = &Индекс";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВесВыполненияПоИднекса()

&НаСервере
// Процедура добавляет строку в дерево.
// Добавляет подчиненную строке дерева: Тип проблемы и вес.
//
// Параметры:
//  Проблема     - Строка, тип проблемы.
//  ВесПроблемы  - Число, вес проблемы.
//  СтрокаДерева - Строка дерева значений.
//
Процедура ДобавитьДетальныйВес(Проблема, Знач ВесПроблемы, СтрокаДерева)
	
	ВесПроблемы.Вес = ?(НЕ ЗначениеЗаполнено(ВесПроблемы.Вес), 0, ВесПроблемы.Вес);
	
	Если ВесПроблемы.Вес > 0 Тогда
		
		СтрокаПробемы = СтрокаДерева.ПолучитьЭлементы().Добавить();
		
		СтрокаПробемы.Проблема = Проблема;
		СтрокаПробемы.Вес      = ВесПроблемы.Вес;
		СтрокаПробемы.Процент  = ВесПроблемы.Процент;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьДетальныйВес()

#КонецОбласти


