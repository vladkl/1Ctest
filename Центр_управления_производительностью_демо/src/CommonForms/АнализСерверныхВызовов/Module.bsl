&НаСервере
Перем мВременныеТаблицы;

&НаСервере
Перем мЗапросы;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформационнаяБаза = Параметры.ИнформационнаяБаза;
	НачалоИнтервала = Параметры.НачалоИнтервала;
	КонецИнтервала = Параметры.КонецИнтервала;
	ПроблемнаяСтрокаКонтекста = Параметры.ПроблемнаяСтрокаКонтекста;
	ПроблемныйПользователь = Параметры.ПроблемныйПользователь;
	Если ЗначениеЗаполнено(ПроблемныйПользователь) Тогда
		ОтключитьОтборПоКонтексту = Истина;
		Элементы.ОтключитьОтборПоКонтексту.Видимость = Ложь;
	КонецЕсли;
	СпособГруппировки = Параметры.СпособГруппировки;
	
	Если НЕ ЗначениеЗаполнено(НачалоИнтервала) Тогда
		Сообщить("Не указано начало интервала!");
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(КонецИнтервала) Тогда
		Сообщить("Не указан конец интервала!");
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
		Сообщить("Не указана информационная база!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	// Получить коэффицент ожидания на блокировках
	КоэффицентВыполнения = ПоказателиПроизводительности.ПолучитьВесовойКоэффициент(Справочники.Показатели.АнализСерверныхВызовов);
	КоэффицентВыполнения = ?(КоэффицентВыполнения = 0, 1, КоэффицентВыполнения);
	
	ЗаполнитьТаблицуКритериевРасчетаВеса();
	КритерийРасчетаВеса = "ДлительностьВызова";
	
	УстановитьВидимостьКолонкам();
	ЗаполнитьТаблицуСерверныхВызовов();
	
КонецПроцедуры

&НаКлиенте
Процедура СерверныеВызовыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = СерверныеВызовы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	// Открыть форму выполнения кода
	ИнтерфейсыКлиент.ОткрытьВыполнениеЗапроса(ДанныеСтроки.ВыполнениеСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательВесаПриИзменении(Элемент)
	
	ЗаполнитьТаблицуСерверныхВызовов();
	Отбор = Новый Структура("Критерий", КритерийРасчетаВеса);
	СтрокиКритерия = КритерииРасчетаВеса.НайтиСтроки(Отбор);
	Элементы.СерверныеВызовыВремяВыполнения.Заголовок = СтрокиКритерия[0].Заголовок;
	Элементы.СерверныеВызовыВремяВыполнения.Подсказка = СтрокиКритерия[0].Подсказка;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособГруппировкиПриИзменении(Элемент)
	
	УстановитьВидимостьКолонкам();
	
	ЗаполнитьТаблицуСерверныхВызовов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФункцияГруппировкиПриИзменении(Элемент)
	
	ЗаполнитьТаблицуСерверныхВызовов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОтборПоКонтекстуПриИзменении(Элемент)
	
	ЗаполнитьТаблицуСерверныхВызовов();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
// Процедура устанавляет видемость некоторым колонкам таблицы
//
Процедура УстановитьВидимостьКолонкам()
	
	ВключенаГруппировка = (СпособГруппировки <> "БезГруппировки");
	Элементы.СерверныеВызовыДатаВремяВыполнения.Видимость = НЕ ВключенаГруппировка;
	Элементы.СерверныеВызовыПользователь.Видимость        = НЕ ВключенаГруппировка;
	Элементы.ФункцияГруппировки.Доступность                = ВключенаГруппировка;
	
	Элементы.СерверныеВызовыКонтекст.Высота = ?(СпособГруппировки = "Контекст", 3, 1);
	
КонецПроцедуры // УстановитьВидимостьКолонкамЗапросов()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫБОРА ДАННЫХ

&НаСервере
// Функция возвращает текст запроса выбора проблемных запросов в случае анализа запросов по контекстам.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВыполненияПоКонтексту(ИмяРеквизитаКонтекста)
	
	ВключенаГруппировка = (СпособГруппировки <> "БезГруппировки");
	Если НЕ ВключенаГруппировка Тогда
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	1 КАК ИндексКартинки,
		               |	&ПоказательВеса / 1000 КАК ВремяВыполнения,
		               |	&ПоказательВеса / 1000 * &КоэффицентВыполнения КАК Вес,
		               |	Выполнение.Дата КАК ДатаВремяВыполнения,
		               |	Выполнение.ПользовательИБ КАК Пользователь,
		               |	Выполнение.КонтекстСсылка.ПоследняяСтрока КАК Контекст,
		               |	Выполнение.Ссылка КАК ВыполнениеСсылка
		               |ИЗ
		               |	Документ.ВыполнениеКода КАК Выполнение
		               |ГДЕ
		               |	Выполнение.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		               |	И &ПоказательВеса > 0
		               |	И &ПоказательВеса / 1000 * &КоэффицентВыполнения > 0
		               |	И Выполнение.ИнформационнаяБаза = &ИБ
		               |	И (Выполнение.КонтекстСсылка.ПоследняяСтрока = &СтрокаКонтекста ИЛИ &БезОтбораПоКонтексту)
		               |	И (Выполнение.ПользовательИБ = &Пользователь ИЛИ &БезОтбораПоПользователю)
		               |	И Выполнение.ТипВыполнения = ЗНАЧЕНИЕ(Перечисление.ТипыВыполненийКода.СерверныйВызов)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВремяВыполнения УБЫВ";
		
	Иначе
		
		ТекстЗапроса = "ВЫБРАТЬ
		               |	1 КАК ИндексКартинки,
		               |	СУММА(&ПоказательВеса / 1000) КАК ВремяВыполнения,
		               |	СУММА(&ПоказательВеса / 1000 * &КоэффицентВыполнения) КАК Вес,
		               |	Выполнение.КонтекстСсылка.ПоследняяСтрока КАК Контекст,
		               |	Выполнение.Ссылка КАК ВыполнениеСсылка
		               |ИЗ
		               |	Документ.ВыполнениеКода КАК Выполнение
		               |ГДЕ
		               |	Выполнение.Дата МЕЖДУ &НачалоИнтервала И &КонецИнтервала
		               |	И &ПоказательВеса > 0
		               |	И &ПоказательВеса / 1000 * &КоэффицентВыполнения > 0
		               |	И Выполнение.ИнформационнаяБаза = &ИБ
		               |	И (Выполнение.КонтекстСсылка.ПоследняяСтрока = &СтрокаКонтекста ИЛИ &БезОтбораПоКонтексту)
		               |	И (Выполнение.ПользовательИБ = &Пользователь ИЛИ &БезОтбораПоПользователю)
		               |	И Выполнение.ТипВыполнения = ЗНАЧЕНИЕ(Перечисление.ТипыВыполненийКода.СерверныйВызов)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	Выполнение.КонтекстСсылка,
		               |	Выполнение.Ссылка
		               |ИТОГИ ПО
		               |	Контекст ИЕРАРХИЯ";
		
		Если ФункцияГруппировки = 1 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СУММА(", "СРЕДНЕЕ(");
		ИначеЕсли ФункцияГруппировки = 2 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СУММА(", "МАКСИМУМ(");
		КонецЕсли;
		
	КонецЕсли;
	
	Отбор = Новый Структура("Критерий", КритерийРасчетаВеса);
	СтрокиКритерия = КритерииРасчетаВеса.НайтиСтроки(Отбор);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоказательВеса", "Выполнение." + СтрокиКритерия[0].ИмяРеквизита);
	
	// Результат
	Если ИмяРеквизитаКонтекста = "Ссылка" Тогда
		ИмяРеквизитаКонтекстаРезультат = "Контекст";
	Иначе
		ИмяРеквизитаКонтекстаРезультат = ИмяРеквизитаКонтекста;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"Выполнение.КонтекстСсылка.ПоследняяСтрока КАК Контекст", 
		"Выполнение.КонтекстСсылка." + ИмяРеквизитаКонтекстаРезультат + " КАК Контекст");
	
	Возврат ТекстЗапроса;
	
КонецФункции //ТекстЗапросаВыполненияПоКонтексту()

&НаСервере
// Процедура заполняет таблицу Запросы.
// Выполняет запрос выбора проблемных запросов.
//
// Параметры:
//  ЗаблокированныйКонтекст - СправочникСсылка.Контекст
//  БлокирующийКонтекст     - СправочникСсылка.Контекст
//  ЗаблокированныйРесурс   - СправочникСсылка.Ресурс
//
Процедура ЗаполнитьТаблицуСерверныхВызовов()
	
	// Сформировать запрос выбора
	Если мЗапросы = Неопределено Тогда
		
		мЗапросы = Новый Запрос;
		
		// Получить текст запроса выбора проблемных запросов по заданному контексту
		Если СпособГруппировки = "БезГруппировки" Тогда
			ИмяРеквизитаКонтекста = "ПоследняяСтрока";
		ИначеЕсли СпособГруппировки = "Контекст" Тогда
			ИмяРеквизитаКонтекста = "Ссылка";
		Иначе
			ИмяРеквизитаКонтекста = СпособГруппировки;
		КонецЕсли;
		мЗапросы.Текст = ТекстЗапросаВыполненияПоКонтексту(ИмяРеквизитаКонтекста);
		
		мЗапросы.УстановитьПараметр("СтрокаКонтекста",      ПроблемнаяСтрокаКонтекста);
		мЗапросы.УстановитьПараметр("БезОтбораПоКонтексту", ОтключитьОтборПоКонтексту);
		
		мЗапросы.УстановитьПараметр("Пользователь",         ПроблемныйПользователь);
		мЗапросы.УстановитьПараметр("БезОтбораПоПользователю", НЕ ЗначениеЗаполнено(ПроблемныйПользователь));
		
		// Установить общие параметры запроса
		мЗапросы.УстановитьПараметр("КоэффицентВыполнения", КоэффицентВыполнения);
		мЗапросы.УстановитьПараметр("НачалоИнтервала",      НачалоИнтервала);
		мЗапросы.УстановитьПараметр("КонецИнтервала",       КонецИнтервала);
		мЗапросы.УстановитьПараметр("ИБ",                   ИнформационнаяБаза);
		
	КонецЕсли;
	
	// Заполнить таблицу
	ВключенаГруппировка = (СпособГруппировки <> "БезГруппировки");
	Если НЕ ВключенаГруппировка Тогда
		
		// Выгрузить список всех запросов
		ТаблицаЗапросы = мЗапросы.Выполнить().Выгрузить();
		ЗначениеВДанныеФормы(ТаблицаЗапросы, СерверныеВызовы);
		
	Иначе
		
		СерверныеВызовы.Очистить();
		
		// Выгрузить запросы и сгруппировать по типу запроса
		Выборка1 = мЗапросы.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка1.Следующий() Цикл
			
			Стр = СерверныеВызовы.Добавить();
			
			Стр.ИндексКартинки  = 1;
			Стр.Вес             = Выборка1.Вес;
			Стр.ВремяВыполнения = Выборка1.ВремяВыполнения;
			
			Выборка2 = Выборка1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Выборка2.Следующий() Цикл
				
				Стр.Контекст         = Выборка2.Контекст;
				Стр.ВыполнениеСсылка = Выборка2.ВыполнениеСсылка;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СерверныеВызовы.Сортировать("ВремяВыполнения УБЫВ");
		
	КонецЕсли;
	
	// Заполнить копию таблицы (используется при установке отбора)
	ВсеЗапросы = Новый ХранилищеЗначения(РеквизитФормыВЗначение("СерверныеВызовы").Скопировать());
	
	мФильтрЗапросы = Неопределено;
	
КонецПроцедуры // ЗаполнитьТаблицуСерверныхВызовов()

&НаСервере
Процедура ЗаполнитьТаблицуКритериевРасчетаВеса()
	
	ДобавитьСтрокуКритерияРасчетаВеса("ДлительностьВызова", "Длительность (сек)",
		"Время выполнения вызова в секундах", "ВремяВыполненияМс");
	
	ДобавитьСтрокуКритерияРасчетаВеса("МаксимальныйРасходПамяти", "Максимальный расход памяти (байт)",
		"Пиковое значение памяти, выделенной за время выполнения вызова (в байтах)", "МаксимальныйРасходПамяти");
	
	ДобавитьСтрокуКритерияРасчетаВеса("ОбъемНеосвобожденнойПамяти", "Объем неосвобожденной памяти (байт)",
		"Объем памяти, занятой, но не освобожденной за серверный вызов (в байтах)", "ОбъемНеосвобожденнойПамяти");
	
	ДобавитьСтрокуКритерияРасчетаВеса("СчитаноДанных", "Считано данных (байт)",
		"Количество данных, прочитанных с диска за время вызова (в байтах)", "СчитаноДанных");
	
	ДобавитьСтрокуКритерияРасчетаВеса("ЗаписаноДанных", "Записано данных (байт)",
		"Количество данных, записанных на диск за время вызова (в байтах)", "ЗаписаноДанных");
	
КонецПроцедуры // ЗаполнитьТаблицуКритериевРасчетаВеса()

&НаСервере
Процедура ДобавитьСтрокуКритерияРасчетаВеса(Критерий, Заголовок, Подсказка, ИмяРеквизита)
	
	НоваяСтрока = КритерииРасчетаВеса.Добавить();
	НоваяСтрока.Критерий = Критерий;
	НоваяСтрока.Заголовок = Заголовок;
	НоваяСтрока.Подсказка = Подсказка;
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	
КонецПроцедуры
