#Область ПеременныеСостояниеМонитора

&НаКлиенте
Перем мМониторВключен;

&НаКлиенте
Перем мРежимПросмотра;

&НаКлиенте
Перем мМониторИнициализирован;

#КонецОбласти

#Область ПеременныеИнтервал

&НаКлиенте
Перем мПредыдущаяПозицияИнтервала;

&НаКлиенте
Перем мНачалоИнтервала;

&НаКлиенте
Перем мМасштабИнтервала;

&НаКлиенте
Перем кМинШиринаИнтервала;

&НаКлиенте
Перем кТолшинаРамкиИнтервала;

#КонецОбласти


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	График.СерииВСтроках = Ложь;
	
	Слайдер.Обновление = Истина;
	Слайдер.АвтоОпределениеПолногоИнтервала = Ложь;
	Слайдер.ОбластьПостроения.Низ = 1;
	Серия = Слайдер.Серии.Добавить();
	Серия.Цвет = ЦветаСтиля.ЦветРамки;
	Точка = Слайдер.Точки.Добавить();
	Точка.Текст = "";
	
	ИнициализироватьРеквизиты();
	
КонецПроцедуры

&НаСервере
// Процедура инициализирует дополнительные колонки реквизита "ЗначенияПоказателей",
// предназначенные для хранения значений показателей произвольных счетчиков ОС
//
Процедура ИнициализироватьРеквизиты()
	
	ТаблицаЗначенийПоказателей = РеквизитФормыВЗначение("ЗначенияПоказателей");
	
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Показатели.Код КАК Код,
	               |	Показатели.Представление КАК Представление
	               |ИЗ
	               |	Справочник.Показатели КАК Показатели
	               |ГДЕ
	               |	Показатели.Родитель = ЗНАЧЕНИЕ(Справочник.Показатели.ПроизводительностьОборудования)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТаблицаЗначенийПоказателей.Колонки.Найти(Выборка.Код) = Неопределено Тогда
				Реквизит = Новый РеквизитФормы(Выборка.Код, ОписаниеТипаЧисло, "ЗначенияПоказателей" , Выборка.Представление, Ложь);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
			ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьФормуМонитора(ЭтотОбъект);
	
	мРежимПросмотра = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗакладку(Команда)
	
	Если ЗначениеЗаполнено(ВремяНачалаИнтервалаНаПанели) Тогда
		Период = ВремяНачалаИнтервалаНаПанели;
	Иначе
		Период = ВремяКонцаИнтервалаНаПанели - 100;
	КонецЕсли;
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ДобавитьЗакладку"), Период);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗакладокЛеваяГраница(Команда)
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ВидГраницы", ПредопределенноеЗначение("Перечисление.ВидыГраницОкнаПросмотра.Левая"));
	ПараметрыКоманды.Вставить("Владелец", ЭтотОбъект);
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.СписокЗакладок"), ПараметрыКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗакладокПраваяГраница(Команда)
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ВидГраницы", ПредопределенноеЗначение("Перечисление.ВидыГраницОкнаПросмотра.Правая"));
	ПараметрыКоманды.Вставить("Владелец", ЭтотОбъект);
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.СписокЗакладок"), ПараметрыКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаИнтервалаНаПанелиПриИзменении(Элемент)
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("НачалоИнтервала", ВремяНачалаИнтервалаНаПанели);
	ПараметрыКоманды.Вставить("КонецИнтервала", Контекст.КонецИнтервала());
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.УстановитьИнтервалПросмотра"), ПараметрыКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяКонцаИнтервалаНаПанелиПриИзменении(Элемент)
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("НачалоИнтервала", Контекст.НачалоИнтервала());
	ПараметрыКоманды.Вставить("КонецИнтервала", ВремяКонцаИнтервалаНаПанели);
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.УстановитьИнтервалПросмотра"), ПараметрыКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьЗамеры(Команда)
	
	ПараметрыФормы = Новый Структура("ИБ,Показатели,НачалоИнтервала,КонецИнтервала",
		Контекст.ИнформационнаяБаза(),
		Контекст.Показатели(),
		Контекст.НачалоИнтервала(),
		Контекст.КонецИнтервала()
	);
	ОткрытьФорму("ОбщаяФорма.Экспорт", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортироватьЗамеры(Команда)
	
	ОткрытьФорму("ОбщаяФорма.Импорт");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	КомандаДобавитьПоказатель();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	КомандаУдалитьПоказатель();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ВНЕШНИЙ ИНТЕРФЕЙС

&НаКлиенте
// Получить строку выбранного показателя производительности
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - строка выбранного показателя
//
Функция ТекущаяСтрокаПоказателей() Экспорт
	
	Возврат Элементы.Показатели.ТекущиеДанные;
	
КонецФункции // ТекущаяСтрокаПоказателей()

&НаКлиенте
// Установка графических параметров показателей для графиков
//
Процедура СинхронизироватьЦветаПоказателейНаГрафике() Экспорт
	
	ОбновитьПоказатели();
	КоличествоПоказателей = Показатели.Количество() - 1;
	Серии = График.Серии;
	
	// Настройка границ показателей
	НастроитьСтильГраницы(Серии[0], WebЦвета.Красный);
	НастроитьСтильГраницы(Серии[1], WebЦвета.Зеленый);
	
	Отбор = Новый Структура("КодПоказателя");
	
	// Раскраска графиков
	Для Сч = 0 По КоличествоПоказателей Цикл
		
		СтрокаПоказателя = Показатели[Сч];
		
		РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(СтрокаПоказателя.Показатель);
		Отбор.КодПоказателя = РеквизитыПоказателя.Код;
		СтрокиИндекса = ИндексыСерийПоказателей.НайтиСтроки(Отбор);
		Если СтрокиИндекса.Количество() > 0 Тогда
			ИндексСерии = СтрокиИндекса[0].Индекс;
			
			Серия = Серии[ИндексСерии];
			Серия.ПриоритетЦвета = Истина;
			Серия.Маркер         = ТипМаркераДиаграммы.Нет;
			Серия.Линия          = СтрокаПоказателя.Линия;
			
			Если Контекст.ВыделятьПоказатель()
			   И СтрокаПоказателя.Показатель = Контекст.ВыделенныйПоказатель() Тогда
				Серия.Цвет = WebЦвета.Черный;
			Иначе
				Серия.Цвет = СтрокаПоказателя.Цвет;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СинхронизироватьЦветаПоказателейНаГрафике()

&НаКлиенте
// Настроить стиль линии границы значений активного показателя производительности
//
// Параметры:
//  Серия - Серия, для которой производится настройка
//  Цвет - Цвет настраиваемой линии
//
Процедура НастроитьСтильГраницы(Серия, Цвет)
	
	Серия.ПриоритетЦвета = Истина;
	Серия.Маркер         = ТипМаркераДиаграммы.Нет;
	Серия.Линия          = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
	Серия.Цвет           = Цвет;
	
КонецПроцедуры // НастроитьСтильГраницы()

&НаКлиенте
// Переключить монитор в режим ожидания
//
Процедура ПереключитьВРежимОжидания() Экспорт
	
	СкрытьПанельНастройкиГрафика();
	
	ВремяНачалаИнтервалаНаПанели = Неопределено;
	ВремяКонцаИнтервалаНаПанели = Неопределено;
	
	Элементы.Показатели.ПодчиненныеЭлементы.ПоказателиЗапись.Видимость = Ложь;
	Элементы.Показатели.ПодчиненныеЭлементы.ПоказателиЗначение.Видимость = Ложь;
	
	мРежимПросмотра = Ложь;
	
	Для Каждого ОткрытоеОкно Из ПолучитьОкна() Цикл
		Для Каждого Форма Из ОткрытоеОкно.Содержимое Цикл
			Если Форма.ИмяФормы = "ОбщаяФорма.АнализВзаимоблокировок"
					Или Форма.ИмяФормы = "ОбщаяФорма.АнализЗапросов"
					Или Форма.ИмяФормы = "ОбщаяФорма.АнализОжиданий"
					Или Форма.ИмяФормы = "ОбщаяФорма.АнализПроблем" Тогда
				Форма.Закрыть();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры // ПереключитьВРежимОжидания()

&НаКлиенте
// Переключить монитор в режим мониторинга
//
Процедура ПереключитьВРежимМониторинга() Экспорт
	
	СкрытьПанельНастройкиГрафика();
	
	Элементы.Показатели.ПодчиненныеЭлементы.ПоказателиЗапись.Видимость = Истина;
	Элементы.Показатели.ПодчиненныеЭлементы.ПоказателиЗначение.Видимость = Истина;
	
	мРежимПросмотра = Ложь;
	
	УстановитьДоступностьЭлементовУправления();
	ИнициализироватьРеквизиты();
	
КонецПроцедуры // ПереключитьВРежимМониторинга()

&НаКлиенте
// Переключить монитор в режим просмотра
//
Процедура ПереключитьВРежимПросмотра() Экспорт
	
	ПоказатьПанельНастройкиГрафика();
	
	Элементы.Показатели.ПодчиненныеЭлементы.ПоказателиЗапись.Видимость = Ложь;
	Элементы.Показатели.ПодчиненныеЭлементы.ПоказателиЗначение.Видимость = Ложь;
	
	мРежимПросмотра = Истина;
	
	УстановитьДоступностьЭлементовУправления();
	ИнициализироватьРеквизиты();
	
КонецПроцедуры // ПереключитьВРежимПросмотра()

&НаКлиенте
// Получить позицию интервала в %
//
// Возвращаемое значение:
//  Число - позиция интервала в %
//
Функция ПолучитьПозициюИнтервала() Экспорт
	
	ШиринаГраницыПросмотра = Контекст.ШиринаГраницыПросмотра();
	
	// Позиция / ширина
	ПозицияСлайдера = 0.5;
	ЗначенияСлайдера = Слайдер.ПолучитьЗначение(Слайдер.Точки[0], Слайдер.Серии[0]);
	Для Каждого ТекЗначение Из ЗначенияСлайдера Цикл
		СмещениеОкнаПросмотра = ТекЗначение.Начало - Контекст.НачалоГраницыПросмотра();
		СерединаСлайдера = (ТекЗначение.Конец - ТекЗначение.Начало)/2;
		ПозицияСлайдера = Окр((СмещениеОкнаПросмотра + СерединаСлайдера) / ШиринаГраницыПросмотра, 4); // от 0 до 1
		Прервать;
	КонецЦикла;
	
	Возврат ПозицияСлайдера;
	
КонецФункции // ПолучитьПозициюИнтервала()


///////////////////////////////////////////////////////////////////////////////
// ЭЛЕМЕНТ УПРАВЛЕНИЯ ИНТЕРВАЛ

&НаКлиенте
// Переключить состояние формы в режим мониторинга
//
Процедура СкрытьПанельНастройкиГрафика()
	
	Элементы.ГруппаКнопкиУправленияПросмотром.Видимость = Ложь;
	Элементы.ЗаполнительКнопкиУправленияПросмотром.Видимость = Истина;
	Элементы.ДекорацияМасштаб.Заголовок = "Масштаб";
	Элементы.ГруппаИндикаторПериода.Видимость = Ложь;
	Слайдер.ОбластьПостроения.Низ = 1;
	
КонецПроцедуры // СкрытьПанельНастройкиГрафика()

&НаКлиенте
// Переключить состояние формы в режим просмотра замера
//
Процедура ПоказатьПанельНастройкиГрафика()
	
	Элементы.ГруппаКнопкиУправленияПросмотром.Видимость = Истина;
	Элементы.ЗаполнительКнопкиУправленияПросмотром.Видимость = Ложь;
	Элементы.ГруппаИндикаторПериода.Видимость = Истина;
	
	ВключитьИнтервал();
	
КонецПроцедуры // ПоказатьПанельНастройкиГрафика()

&НаКлиенте
// Инициализировать элемент управления интервалом
//
Процедура ВключитьИнтервал()
	
	мПредыдущаяПозицияИнтервала = -1;
	мНачалоИнтервала = -1;
	мМасштабИнтервала = -1;
	
КонецПроцедуры // ВключитьИнтервал()

&НаКлиенте
// ОбновитьИнтервал в соответствии с текущим состоянием
//
Процедура ОбновитьИнтервал()
	
	// Получить текущее состояние
	НачалоГраницыПросмотра = Контекст.НачалоГраницыПросмотра();
	КонецГраницыПросмотра = Контекст.КонецГраницыПросмотра();
	НачалоИнтервала = Контекст.НачалоИнтервала();
	КонецИнтервала = Контекст.КонецИнтервала();
	ШиринаГраницыПросмотра = Контекст.ШиринаГраницыПросмотра();
	МасштабПросмотра = Контекст.МасштабПросмотра();
	
	мПредыдущаяПозицияИнтервала = ПолучитьПозициюИнтервала();
	
	// Обновить слайдер
	ОбновитьСлайдер(НачалоГраницыПросмотра, КонецГраницыПросмотра, НачалоИнтервала, КонецИнтервала, ШиринаГраницыПросмотра, МасштабПросмотра);
	
	Если мНачалоИнтервала <> НачалоИнтервала Или мМасштабИнтервала <> МасштабПросмотра Тогда
		
		мНачалоИнтервала = НачалоИнтервала;
		мМасштабИнтервала = МасштабПросмотра;
		Элементы.ДекорацияМасштаб.Заголовок = ОбщегоНазначенияКлиентСервер.ДлительностьВСтроку(КонецИнтервала - НачалоИнтервала + 1);
		
		УстановитьДоступностьЭлементовУправленияИнтервалом(НачалоГраницыПросмотра, КонецГраницыПросмотра, НачалоИнтервала, КонецИнтервала, МасштабПросмотра);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьИнтервал()

&НаКлиенте
// Обновить доступность элементов управления интервала
//
// Параметры:
//  НачалоГраницыПросмотра - Дата, начало границы просмотра
//  КонецГраницыПросмотра - Дата, конец границы просмотра
//  Позиция - Дата, реальная позиция интервала
//  МасштабПросмотра - Число, реальный масштаб интервала
//
Процедура УстановитьДоступностьЭлементовУправленияИнтервалом(НачалоГраницыПросмотра, КонецГраницыПросмтора, НачалоИнтервала, КонецИнтервала, МасштабПросмотра)
	
	КоличествоЗаписейНаСтранице = МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице();
	
	МожноНазад = (НачалоИнтервала > НачалоГраницыПросмотра);
	МожноВперед = (КонецИнтервала < КонецГраницыПросмтора);
	
	Элементы.ВНачало.Доступность = МожноНазад;
	Элементы.НаСтраницуНазад.Доступность = МожноНазад;
	Элементы.НаШагНазад.Доступность = МожноНазад;
	
	Элементы.НаШагВперед.Доступность = МожноВперед;
	Элементы.НаСтраницуВперед.Доступность = МожноВперед;
	Элементы.ВКонец.Доступность = МожноВперед;
	
	МаксимальноеПриближение = МасштабПросмотра > КоличествоЗаписейНаСтранице;
	МинимальноеПриближение = МожноВперед Или МожноНазад;
	
	Элементы.Отдалить.Доступность = МинимальноеПриближение;
	Элементы.Приблизить.Доступность = МаксимальноеПриближение;
	
КонецПроцедуры // УстановитьДоступностьЭлементовУправленияИнтервалом()

&НаКлиенте
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбновитьСлайдер(НачалоГраницыПросмотра, КонецГраницыПросмотра, НачалоИнтервала, КонецИнтервала, ШиринаГраницыПросмотра, МасштабПросмотра, ИнтервалИзменен = Истина)
	
	Слайдер.ОбластьПостроения.Низ = 0.85;
	
	ЗазорДоПравойГраницы = (ШиринаГраницыПросмотра/100);
	Слайдер.УстановитьПолныйИнтервал(НачалоГраницыПросмотра, КонецГраницыПросмотра + ЗазорДоПравойГраницы);
	Серия = Слайдер.Серии[0];
	Точка = Слайдер.Точки[0];
	
	Значение = Слайдер.ПолучитьЗначение(Точка, Серия);
	Значение.Редактирование = Истина;
	Значение.Очистить();
	Интервал = Значение.Добавить();
	Интервал.Начало = НачалоИнтервала;
	Интервал.Конец = КонецИнтервала;
	
КонецПроцедуры // ОбновитьСлайдер()

&НаКлиенте
Процедура СлайдерПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	// Получить текущее состояние
	НачалоГраницыПросмотра = Контекст.НачалоГраницыПросмотра();
	КонецГраницыПросмотра = Контекст.КонецГраницыПросмотра();
	НачалоИнтервала = Контекст.НачалоИнтервала();
	КонецИнтервала = Контекст.КонецИнтервала();
	ШиринаГраницыПросмотра = Контекст.ШиринаГраницыПросмотра();
	МасштабПросмотра = Контекст.МасштабПросмотра();
	
	// Новое состояние
	ШиринаИнтервала = Интервал.Конец - Интервал.Начало;
	Если ШиринаИнтервала > ШиринаГраницыПросмотра Тогда
		ШиринаИнтервала = ШиринаГраницыПросмотра;
	КонецЕсли;
	
	Если Интервал.Начало < НачалоГраницыПросмотра Тогда
		НовыйИнтервалНачало = НачалоГраницыПросмотра;
		НовыйИнтервалКонец = НачалоГраницыПросмотра + ШиринаИнтервала;
	ИначеЕсли Интервал.Конец > КонецГраницыПросмотра Тогда
		НовыйИнтервалКонец = КонецГраницыПросмотра;
		НовыйИнтервалНачало = КонецГраницыПросмотра - ШиринаИнтервала;
	Иначе
		НовыйИнтервалНачало = Интервал.Начало;
		НовыйИнтервалКонец = Интервал.Конец;
	КонецЕсли;
	
	Если НовыйИнтервалНачало <> НачалоИнтервала
		Или НовыйИнтервалКонец <> КонецИнтервала Тогда
		
		Контекст.УстановитьНачалоИнтервала(НовыйИнтервалНачало);
		Контекст.УстановитьКонецИнтервала(НовыйИнтервалКонец);
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.УстановитьПозицию"));
		ИнтервалИзменен = Истина;
	Иначе
		ИнтервалИзменен = Ложь;
	КонецЕсли;
	
	ОбновитьСлайдер(НачалоГраницыПросмотра, КонецГраницыПросмотра, 
		НовыйИнтервалНачало, НовыйИнтервалКонец, 
		ШиринаГраницыПросмотра, Контекст.МасштабПросмотра(),
		ИнтервалИзменен
	);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД

&НаКлиенте
// Выполнить команду
//
// Параметры:
//  Команда - Перечисление.Команда, выполняемая команда
//  Параметры - Произвольный, параметры команды
//
Процедура ВыполнитьКоманду(Команда, ПараметрыКоманды = Неопределено) Экспорт
	
	Попытка
		КомандыКлиент.ВыполнитьКоманду(Команда, ПараметрыКоманды);
	Исключение
		ОтладкаКлиентСервер.Ошибка(ИнформацияОбОшибке(), Истина);
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.Стоп"), Истина);
		ВыполнитьКоманду(
			ПредопределенноеЗначение("Справочник.Команды.ВыполнитьСценарий"),
			ПредопределенноеЗначение("Справочник.Сценарии.Базовый"));
	КонецПопытки;
	
КонецПроцедуры // ВыполнитьКоманду()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.Закладки.Форма.ФормаСписка" Тогда
		ПараметрыКоманды = Новый Структура;
		Если ВыбранноеЗначение.ВидГраницы = ПредопределенноеЗначение("Перечисление.ВидыГраницОкнаПросмотра.Левая") Тогда
			ПараметрыКоманды.Вставить("НачалоИнтервала", ВыбранноеЗначение.Значение);
			ПараметрыКоманды.Вставить("КонецИнтервала", Контекст.КонецИнтервала());
		Иначе
			ПараметрыКоманды.Вставить("НачалоИнтервала", Контекст.НачалоИнтервала());
			ПараметрыКоманды.Вставить("КонецИнтервала", ВыбранноеЗначение.Значение);
		КонецЕсли;
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.УстановитьИнтервалПросмотра"), ПараметрыКоманды);
	Иначе
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Сценарий", ВыбранноеЗначение);
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыполнитьСценарий"), ПараметрыКоманды);
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ ПОКАЗАТЕЛЕЙ

&НаКлиенте
Процедура ПоказателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НастроитьПоказатель(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказатель(Команда)
	
	КомандаДобавитьПоказатель();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьПоказатель()
	
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ДобавитьПП"));
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПоказатель(Команда)
	
	КомандаУдалитьПоказатель();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьПоказатель()
	
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.УдалитьПП"));
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

&НаКлиенте
// Настроить выбранный показатель производительности
//
Процедура НастроитьПоказатель(Команда)
	
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ИзменитьПП"));
	
КонецПроцедуры // НастроитьПоказатель()

&НаКлиенте
Процедура ВыделитьПоказатель(Команда)
	
	Слайдер.ОбластьПостроения.Низ = 0.85;
	
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыделятьПоказатель"));
	//ОбновитьЦветаПоказателейНаСервере();
	//УстановитьДоступностьЭлементовУправления();
	
	ПросмотрВключен = Контекст.ПросмотрВключен();
	МониторингВключен = Контекст.МониторингВключен();
	ВыделятьПоказатель = Контекст.ВыделятьПоказатель();
	Элементы.ПоказателиВыделитьПоказатель.Доступность = ПросмотрВключен Или МониторингВключен;
	Элементы.ПоказателиВыделитьПоказатель.Пометка = ВыделятьПоказатель;
	Элементы.ПоказателиВыделитьПоказатель.Картинка = ?(
		ВыделятьПоказатель,
		БиблиотекаКартинок.ВыделятьПоказатель,
		БиблиотекаКартинок.НеВыделятьПоказатель);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПриАктивизацииСтроки(Элемент)
	
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыделитьПоказатель"));
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиЗаписьПриИзменении(Элемент)
	
	НовоеЗначениеФлажка = Элементы.Показатели.ТекущиеДанные.Запись;
	Элементы.Показатели.ТекущиеДанные.Запись = Не Элементы.Показатели.ТекущиеДанные.Запись;
	
	Если НовоеЗначениеФлажка Тогда
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВключитьЗаписьЗначенийПП"));
	Иначе
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыключитьЗаписьЗначенийПП"));
	КонецЕсли;
	
	УстановитьДоступностьЭлементовУправления();
	ОбновитьПоказатели();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьЗаписьВсехПоказателей(Команда)
	
	ТекущаяЯчейка = Элементы.Показатели.ТекущийЭлемент;
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если СтрокаПоказателя.Запись = Ложь Тогда
			ПараметрыКоманды = КомандыКлиент.СоздатьПараметрыКоманды(ПредопределенноеЗначение("Справочник.Команды.ВключитьЗаписьЗначенийПП"));
			ПараметрыКоманды.Показатель = СтрокаПоказателя.Показатель;
			ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВключитьЗаписьЗначенийПП"), ПараметрыКоманды);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПоказатели();
	Элементы.Показатели.ТекущийЭлемент = ТекущаяЯчейка;
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьЗаписьВсехПоказателей(Команда)
	
	ТекущаяЯчейка = Элементы.Показатели.ТекущийЭлемент;
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если СтрокаПоказателя.Запись = Истина Тогда
			ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыключитьЗаписьЗначенийПП"), СтрокаПоказателя.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПоказатели();
	Элементы.Показатели.ТекущийЭлемент = ТекущаяЯчейка;
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ МОНИТОРИНГОМ

&НаКлиенте
// Выбор информационной базы для мониторинга
//
Процедура НовоеСоединение(Команда)
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Владелец", ЭтотОбъект);
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыполнитьСценарий"), ПараметрыКоманды);
	
КонецПроцедуры

&НаКлиенте
// Остановка мониторинга и переход в режим просмотра
//
Процедура ОтключитьМониторинг(Команда)
	
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.Стоп"));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметры(Команда)
	//ПараметрыКоманды = Новый Структура("ФормаМониторинга", ЭтотОбъект);
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.УстановитьЧастотуМониторинга"));
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ВНЕШНИХ СОБЫТИЙ

&НаКлиенте
// Обработчик перед изменением значений показателей производительности
//
Процедура ПередОбновлениемЗначенийПоказателей() Экспорт
	
	График.ИсточникДанных = Неопределено;
	
КонецПроцедуры // ПередОбновлениемЗначенийПоказателей()

&НаКлиенте
// Обработчик изменения значений показателей производительности
//
Процедура ПриОбновленииЗначенийПоказателей() Экспорт
	
	Если мРежимПросмотра Тогда
		ВремяКонцаИнтервалаНаПанели = Контекст.КонецИнтервала();
		ВремяНачалаИнтервалаНаПанели = Контекст.НачалоИнтервала();
	Иначе
		ОбновитьЗначенияПоказателей(Контекст.ЗначенияПоказателей(), Истина);
		ОбновитьПоказатели();
		ВремяКонцаИнтервалаНаПанели = ЗначенияПоказателей[МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице() - 1].Время;
		ВремяНачалаИнтервалаНаПанели = ЗначенияПоказателей[0].Время;
	КонецЕсли;
	
	Если мРежимПросмотра Тогда
		ОбновитьИнтервал();
	КонецЕсли;
	
КонецПроцедуры // ПриОбновленииЗначенийПоказателей()

&НаКлиенте
// Обработчик после изменения значений показателей производительности
//
Процедура ПослеОбновленияЗначенийПоказателей() Экспорт
	
	График.Обновление = Ложь;
	ПослеОбновленияЗначенийПоказателейНаСервере(Контекст.ЗначенияПоказателей());
	График.Обновление = Истина;
	
КонецПроцедуры // ПослеОбновленияЗначенийПоказателей()

&НаСервере
Процедура ПослеОбновленияЗначенийПоказателейНаСервере(МассивЗначенийПоказателей)
	
	ОбновитьЗначенияПоказателей(МассивЗначенийПоказателей, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик включения монитора
//
Процедура ПриВключенииМонитора() Экспорт
	
	мМониторВключен = Истина;
	
	МассивЗначенийПоказателей = Контекст.ЗначенияПоказателей();
	ПриВключенииМонитораНаСервере(МассивЗначенийПоказателей);
	
	ОбновитьПоказатели();
	
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры // ПриВключенииМонитора()

&НаСервере
Процедура ПриВключенииМонитораНаСервере(МассивЗначенийПоказателей)
	
	ОбновитьЗначенияПоказателей(МассивЗначенийПоказателей);
	График.ИсточникДанных = ДанныеФормыВЗначение(ЗначенияПоказателей, Тип("ТаблицаЗначений"));
	Для Каждого Серия Из График.Серии Цикл
		Серия.Маркер = ТипМаркераДиаграммы.Нет;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик выключения монитора
//
Процедура ПриВыключенииМонитора() Экспорт
	
	мМониторВключен = Ложь;
	Показатели.Очистить();
	График.ИсточникДанных = Неопределено;
	График.Очистить();
	
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры // ПриВключенииМонитора()

&НаКлиенте
// Установить доступность элементов управления формы в зависимости от ее состояния
//
Процедура УстановитьДоступностьЭлементовУправления() Экспорт
	
	МониторВключен = Контекст.МониторВключен();
	ПросмотрВключен = Контекст.ПросмотрВключен();
	МониторингВключен = Контекст.МониторингВключен();
	ВыделятьПоказатель = Контекст.ВыделятьПоказатель();
	
	Элементы.ФормаОтключитьМониторинг.Доступность = МониторВключен;
	Элементы.ФормаНовоеСоединение.Доступность     = Не МониторВключен;
	Элементы.Анализ.Доступность                   = мРежимПросмотра;
	Элементы.ФормаНастроитьПараметры.Доступность  = МониторВключен И Не мРежимПросмотра;
	
	Элементы.ПоказателиДобавитьПоказатель.Доступность = 
		МониторВключен;
	Элементы.ПоказателиУдалитьПоказатель.Доступность =
		МониторВключен И Элементы.Показатели.ТекущаяСтрока <> Неопределено;
	Элементы.ПоказателиНастроитьПоказатель.Доступность =
		МониторВключен И Элементы.Показатели.ТекущаяСтрока <> Неопределено;
		
	Элементы.ПоказателиВыделитьПоказатель.Доступность = ПросмотрВключен Или МониторингВключен;
	Элементы.ПоказателиВыделитьПоказатель.Пометка = ВыделятьПоказатель;
	Элементы.ПоказателиВыделитьПоказатель.Картинка = ?(
		ВыделятьПоказатель,
		БиблиотекаКартинок.ВыделятьПоказатель,
		БиблиотекаКартинок.НеВыделятьПоказатель);
	
	Элементы.ФормаДобавитьЗакладку.Доступность = ПросмотрВключен Или МониторингВключен;
	Элементы.СписокЗакладокЛеваяГраница.Доступность = ПросмотрВключен;
	Элементы.СписокЗакладокПраваяГраница.Доступность = ПросмотрВключен;
	Элементы.ВремяНачалаИнтервалаНаПанели.ТолькоПросмотр = Не ПросмотрВключен;
	Элементы.ВремяКонцаИнтервалаНаПанели.ТолькоПросмотр = Не ПросмотрВключен;
	
	ЕстьПоказателиСВключеннойЗаписью = Ложь;
	ЕстьПоказателиСОтключеннойЗаписью = Ложь;
	ТаблицаПоказателей = Контекст.Показатели();
	Для Каждого СтрокаПоказателей Из ТаблицаПоказателей Цикл
		
		Если СтрокаПоказателей.Запись Тогда
			ЕстьПоказателиСВключеннойЗаписью = Истина;
		Иначе
			ЕстьПоказателиСОтключеннойЗаписью = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ПоказателиВключитьЗаписьВсехПоказателей.Доступность = 
		МониторВключен И ЕстьПоказателиСОтключеннойЗаписью И Не мРежимПросмотра;
	Элементы.ПоказателиОтключитьЗаписьВсехПоказателей.Доступность = 
		МониторВключен И ЕстьПоказателиСВключеннойЗаписью И Не мРежимПросмотра;
	
	Элементы.ФормаИмпортироватьЗамеры.Доступность = Не Контекст.МониторингВключен() И Не Контекст.ПросмотрВключен();
	Элементы.ФормаЭкспортироватьЗамеры.Доступность = Контекст.ПросмотрВключен();
	
КонецПроцедуры // УстановитьДоступностьЭлементовУправления()

&НаКлиенте
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбновитьПоказатели() Экспорт
	
	// Перенос значений показателей из массива структур в таблицу на форме
	Отбор = Новый Структура("Показатель");
	Для Каждого ТекПоказатель Из Контекст.Показатели() Цикл
		Отбор.Показатель = ТекПоказатель.Показатель;
		СтрокиПоказателя = Показатели.НайтиСтроки(Отбор);
		Если СтрокиПоказателя.Количество() = 0 Тогда
			СтрокаПоказателя = ДобавитьСтрокуПоказателяСУпорядочиванием(ТекПоказатель);
		Иначе
			СтрокаПоказателя = СтрокиПоказателя[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаПоказателя, ТекПоказатель);
		СтрокаПоказателя.ЦветПоказателя = "■";
		ТолщинаЛинии = ТекПоказатель.Линия.Толщина;
		СтрокаПоказателя.ТолщинаПоказателя = ?(ТолщинаЛинии > 17, 17, ТолщинаЛинии) - 1;
		СтрокаПоказателя.СтильПоказателя = СлужебныйКлиент.ПолучитьКодЛинииПоТипу(ТекПоказатель.Линия.ТипЛинии);
	КонецЦикла;
	
	СтрокиДляУдаления = Новый Массив;
	Для Каждого ТекПоказатель Из Показатели Цикл
		СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Контекст.Показатели(), "Показатель", ТекПоказатель.Показатель);
		Если СтрокаПоказателя = Неопределено Тогда
			СтрокиДляУдаления.Добавить(ТекПоказатель);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СтрокиДляУдаления Цикл
		Показатели.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПоказатели()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Функция ДобавитьСтрокуПоказателяСУпорядочиванием(НовыйПоказатель)
	
	Для Индекс = 0 По Показатели.Количество()-1 Цикл
		ТекПоказатель = Показатели[Индекс];
		Если ТекПоказатель.КодПоказателя > НовыйПоказатель.КодПоказателя Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = Показатели.Вставить(Индекс);
	Возврат НоваяСтрока;
	
КонецФункции // ДобавитьСтрокуПоказателяСУпорядочиванием()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ОбновитьЦветаПоказателейНаСервере() Экспорт
	
	УсловноеОформление.Элементы.Очистить();
	ТаблицаПоказателей = РеквизитФормыВЗначение("Показатели");
	Для Каждого ТекСтр Из ТаблицаПоказателей Цикл
		НовыйЭлементУО = УсловноеОформление.Элементы.Добавить();
		ЭлементНастройкиУО = НовыйЭлементУО.Оформление.Элементы.Найти("ЦветТекста");
		ЭлементНастройкиУО.Значение = ТекСтр.Цвет;
		ЭлементНастройкиУО.Использование = Истина;
		
		ЭлементОтбораУО = НовыйЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораУО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.Показатель");
		ЭлементОтбораУО.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораУО.ПравоеЗначение = ТекСтр.Показатель;
		
		ОформляемыеПоля = НовыйЭлементУО.Поля.Элементы.Добавить();
		ОформляемыеПоля.Поле = Новый ПолеКомпоновкиДанных("ПоказателиЦветПоказателя");
	КонецЦикла;
	
КонецПроцедуры // ОбновитьЦветаПоказателейНаСервере()

&НаСервере
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбновитьЗначенияПоказателей(МассивЗначенийПоказателей, ОбновлятьИсточникДанных = Ложь)
	
	// Перенос значений показателей из массива структур в таблицу на форме
	ЗначенияПоказателей.Очистить();
	
	Для Каждого Стр Из МассивЗначенийПоказателей Цикл
		НоваяСтрока = ЗначенияПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
	КонецЦикла;
	
	Если ОбновлятьИсточникДанных Тогда
		// Обновление источника данных для графика
		ИсточникДанных = ДанныеФормыВЗначение(ЗначенияПоказателей, Тип("ТаблицаЗначений"));
		График.ИсточникДанных = ИсточникДанных;
		
		// Обновление индексов показателей для корректного определения серии при подсветке линии
		ИндексыСерийПоказателей.Очистить();
		Индекс = 0;
		Для Сч = 1 По ИсточникДанных.Колонки.Количество()-1 Цикл // Колонку "Время" пропускаем, т.к. она в сериях не участвует
			ТекКолонка = ИсточникДанных.Колонки[Сч];
			НоваяСтрока = ИндексыСерийПоказателей.Добавить();
			НоваяСтрока.КодПоказателя = ТекКолонка.Имя;
			НоваяСтрока.Индекс = Индекс;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗначенияПоказателей()

&НаКлиенте
// Приблизить просмотр в 2 раза
//
Процедура Приблизить(Команда)
	
	ВыполнитьКоманду(
		ПредопределенноеЗначение("Справочник.Команды.ИзменитьМасштаб"),
		ПредопределенноеЗначение("Перечисление.ОперацииМасштабирования.Приблизить"));
	
КонецПроцедуры

&НаКлиенте
// Отдалить просмотр в 2 раза
//
Процедура Отдалить(Команда)
	
	ВыполнитьКоманду(
		ПредопределенноеЗначение("Справочник.Команды.ИзменитьМасштаб"),
		ПредопределенноеЗначение("Перечисление.ОперацииМасштабирования.Отдалить"));
		
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура УстановитьМасштаб(НовыйМасштаб)
	
	// Получить текущее состояние
	НачалоГраницыПросмотра = Контекст.НачалоГраницыПросмотра();	// Начало допустимого диапазона
	КонецГраницыПросмотра = Контекст.КонецГраницыПросмотра();	// Конец допустимого диапазона
	ШиринаГраницыПросмотра = Контекст.ШиринаГраницыПросмотра(); // Ширина допустимого диапазона
	НачалоИнтервала = Контекст.НачалоИнтервала();				// Начало текущего окна просмотра
	КонецИнтервала = Контекст.КонецИнтервала();					// Конец текущего окна просмотра
	МасштабПросмотра = Контекст.МасштабПросмотра();				// Ширина текущего окна просмотра
	СерединаИнтервала = НачалоИнтервала + Цел(МасштабПросмотра/2);
	
	// Новое состояние
	Если НовыйМасштаб > ШиринаГраницыПросмотра Тогда
		НовыйМасштаб = ШиринаГраницыПросмотра;
	КонецЕсли;
	
	НовыйИнтервалНачало = СерединаИнтервала - Цел(НовыйМасштаб/2);
	НовыйИнтервалКонец = СерединаИнтервала + Цел(НовыйМасштаб/2) - 1;
	
	Если НовыйИнтервалНачало < НачалоГраницыПросмотра Тогда
		НовыйИнтервалНачало = НачалоГраницыПросмотра;
		НовыйИнтервалКонец = НачалоГраницыПросмотра + НовыйМасштаб;
	ИначеЕсли НовыйИнтервалКонец > КонецГраницыПросмотра Тогда
		НовыйИнтервалКонец = КонецГраницыПросмотра;
		НовыйИнтервалНачало = КонецГраницыПросмотра - НовыйМасштаб;
	КонецЕсли;
	
	Если НовыйИнтервалНачало <> НачалоИнтервала
		Или НовыйИнтервалКонец <> КонецИнтервала Тогда
		
		Контекст.УстановитьНачалоИнтервала(НовыйИнтервалНачало);
		Контекст.УстановитьКонецИнтервала(НовыйИнтервалКонец);
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.УстановитьПозицию"));
		ИнтервалИзменен = Истина;
	Иначе
		ИнтервалИзменен = Ложь;
	КонецЕсли;
	
	ОбновитьСлайдер(НачалоГраницыПросмотра, КонецГраницыПросмотра, 
		НовыйИнтервалНачало, НовыйИнтервалКонец, 
		ШиринаГраницыПросмотра, Контекст.МасштабПросмотра(),
		ИнтервалИзменен
	);
	
КонецПроцедуры // УстановитьМасштаб()

&НаКлиенте
Процедура УстановитьМасштабОднаМинута(Команда)
	
	УстановитьМасштаб(60);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабДесятьМинут(Команда)
	
	УстановитьМасштаб(600);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабОдинЧас(Команда)
	
	УстановитьМасштаб(1*3600);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабДваЧаса(Команда)
	УстановитьМасштаб(2*3600);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабТриЧаса(Команда)
	
	УстановитьМасштаб(3*3600);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабШестьЧасов(Команда)
	
	УстановитьМасштаб(6*3600);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабДвенадцатьЧасов(Команда)
	
	УстановитьМасштаб(12*3600);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабОдинДень(Команда)
	
	УстановитьМасштаб(86400);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабСемьДней(Команда)
	
	УстановитьМасштаб(7*86400);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабЧетырнадцатьДней(Команда)
	
	УстановитьМасштаб(14*86400);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабОдинМесяц(Команда)
	
	УстановитьМасштаб(30*86400);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМасштабШестьМесяцев(Команда)
	
	УстановитьМасштаб(6*30*86400);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИнтервал(Команда)
	
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ОчиститьИнтервал"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВНачало(Команда)
	
	ВыполнитьКоманду(
		ПредопределенноеЗначение("Справочник.Команды.ИзменитьПозицию"),
		ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.ВНачало"));
	
КонецПроцедуры

&НаКлиенте
Процедура НаСтраницуНазад(Команда)
	
	ВыполнитьКоманду(
		ПредопределенноеЗначение("Справочник.Команды.ИзменитьПозицию"),
		ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.НаСтраницуНазад"));
	
КонецПроцедуры

&НаКлиенте
Процедура НаШагНазад(Команда)
	
	ВыполнитьКоманду(
		ПредопределенноеЗначение("Справочник.Команды.ИзменитьПозицию"),
		ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.НаШагНазад"));
	
КонецПроцедуры

&НаКлиенте
Процедура НаШагВперед(Команда)
	
	ВыполнитьКоманду(
		ПредопределенноеЗначение("Справочник.Команды.ИзменитьПозицию"),
		ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.НаШагВперед"));
	
КонецПроцедуры

&НаКлиенте
Процедура НаСтраницуВперед(Команда)
	
	ВыполнитьКоманду(
		ПредопределенноеЗначение("Справочник.Команды.ИзменитьПозицию"),
		ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.НаСтраницуВперед"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВКонец(Команда)
	
	ВыполнитьКоманду(
		ПредопределенноеЗначение("Справочник.Команды.ИзменитьПозицию"),
		ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.ВКонец"));
	
КонецПроцедуры

&НаКлиенте
// Открыть форму анализа
//
Процедура Анализ(Команда)
	
	Исключения = Новый Массив;
	Исключения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.Замер"));
	ЕстьНеразобранныеЗамеры = Замер.ПроверитьНаличиеНеразобранныхЗамеров(
		Контекст.ИнформационнаяБаза(),
		Контекст.НачалоИнтервала(),
		Контекст.КонецИнтервала(),
		Исключения);
	
	Если ЕстьНеразобранныеЗамеры Тогда
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("АнализЗавершение", ЭтотОбъект);
		Если Задание.ЗаданиеАнализаЗамеровАктивно() Тогда
			АнализЗавершение(КодВозвратаДиалога.Нет, Неопределено);
		Иначе
			ТекстВопроса = СловарьКлиентСервер.Получить("ВопросВыполнитьАнализ");
			ПоказатьВопрос(ОписаниеОповещенияОЗавершении,
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	Иначе
		АнализЗавершение(КодВозвратаДиалога.Нет, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура АнализЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ОтобразитьФормуАнализа();
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		НеОбрабатыватьВсеЗамеры();
		ЗаданиеКлиент.ВключитьОбработкуЗамеров(Ложь);
	КонецЕсли;
	
КонецПроцедуры // АнализЗавершение()

&НаКлиенте
// Отобразить форму анализа
//
Процедура ОтобразитьФормуАнализа() Экспорт
	
	ЕстьАктивныеЗамеры = Замер.ПроверитьНаличиеАктивныхЗамеров(
		Контекст.ИнформационнаяБаза(),
		Контекст.НачалоИнтервала(),
		Контекст.КонецИнтервала());
		
	Если ЕстьАктивныеЗамеры Тогда
		ОписаниеОповещенияОЗавершении = 
			Новый ОписаниеОповещения("ОтобразитьФормуАнализаЗавершение", ЭтотОбъект);
		ТекстПредупреждения = СловарьКлиентСервер.Получить("ПредупреждениеЗамерыОбрабатываются");
		ПоказатьПредупреждение(ОписаниеОповещенияОЗавершении,
			ТекстПредупреждения);
	Иначе
		ОтобразитьФормуАнализаЗавершение(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьФормуАнализаЗавершение(Результат) Экспорт
	
	Отбор = Новый Структура("Показатель");
	Отбор.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализВзаимоблокировок");
	ЕстьАнализВзаимоблокировокСУБД = (Показатели.НайтиСтроки(Отбор).Количество() > 0);
	Отбор.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализВзаимоблокировок1С");
	ЕстьАнализВзаимоблокировок1С = (Показатели.НайтиСтроки(Отбор).Количество() > 0);
	Отбор.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализЗапросов");
	ЕстьАнализЗапросов = (Показатели.НайтиСтроки(Отбор).Количество() > 0);
	Отбор.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализОжиданийНаБлокировках");
	ЕстьАнализОжиданийНаБлокировках = (Показатели.НайтиСтроки(Отбор).Количество() > 0);
	Отбор.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализСерверныхВызовов");
	ЕстьАнализСерверныхВызовов = (Показатели.НайтиСтроки(Отбор).Количество() > 0);
	
	Если НЕ (ЕстьАнализВзаимоблокировокСУБД
		ИЛИ ЕстьАнализВзаимоблокировок1С
		ИЛИ ЕстьАнализЗапросов
		ИЛИ ЕстьАнализОжиданийНаБлокировках
		ИЛИ ЕстьАнализСерверныхВызовов) Тогда
		
		ИнтерфейсыКлиент.Предупредить(СловарьКлиентСервер.Получить("ПредупреждениеАнализНевозможен"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура(
		"ИнформационнаяБаза,НачалоИнтервала,КонецИнтервала,УчитыватьВзаимоблокировкиСУБД,
		|УчитыватьВзаимоблокировки1С,УчитыватьВыполненияЗапросов,УчитыватьОжиданияНаБлокировках,УчитыватьСерверныеВызовы",
		Контекст.ИнформационнаяБаза(),
		Контекст.НачалоИнтервала(),
		Контекст.КонецИнтервала(),
		ЕстьАнализВзаимоблокировокСУБД,
		ЕстьАнализВзаимоблокировок1С,
		ЕстьАнализЗапросов,
		ЕстьАнализОжиданийНаБлокировках,
		ЕстьАнализСерверныхВызовов
	);
	
	ФормаАнализа = ПолучитьФорму("ОбщаяФорма.АнализПроблем", ПараметрыФормы);
	Если ФормаАнализа <> Неопределено Тогда
		ФормаАнализа.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ПросмотрВключен = Контекст.ПросмотрВключен();
		МониторингВключен = Контекст.МониторингВключен();
		
		Если ПросмотрВключен Или МониторингВключен Тогда
			ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.Стоп"), Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		Если Элементы.ФормаОтключитьМониторинг.Доступность Тогда
			ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.Стоп"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

