
///////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ОБРАБОТЧИКИ СОБЫТИЙ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыМонитора = Новый Структура("ИдентификаторЗадания,ИБ,НачалоИнтервала,КонецИнтервала");
	ОбновитьМониторЗамеровНаСервере(ПараметрыМонитора);
	Задание.ПроверитьРаботоспособностьФоновыхЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьФормуМонитораАнализа(ЭтаФорма);
	УстановитьДоступностьЭлементовУправления();
	ПодключитьОбработчикОжидания("ОбновитьМониторЗамеров", 10);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбрабатыватьЗамеры(Команда)
	
	ПредыдущееСостояние = Элементы.ФормаКомандаОбрабатыватьЗамеры.Пометка;
	Элементы.ФормаКомандаОбрабатыватьЗамеры.Пометка = Не ПредыдущееСостояние;
	
	ПараметрыМонитора = ЗаданиеКлиент.ПолучитьПараметрыМонитораАнализа();
	КомандаОбрабатыватьЗамерыНаСервере(ПараметрыМонитора);
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура КомандаОбрабатыватьЗамерыНаСервере(ПараметрыМонитора)
	
	Если Элементы.ФормаКомандаОбрабатыватьЗамеры.Пометка Тогда
		Задание.ВключитьОбработкуЗамеров(ПараметрыМонитора, Ложь);
	Иначе
		Задание.ОтключитьОбработкуЗамеров();
	КонецЕсли;
	
КонецПроцедуры // КомандаОбрабатыватьЗамерыНаСервере()

&НаКлиенте
Процедура КомандаПовторить(Команда)
	
	ПовторяемыеЗамеры = Новый Массив;
	ВыделенныеСтроки = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.Замеры.ВыделенныеСтроки Цикл
		ВыделенныеСтроки.Добавить(Замеры.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	НайтиЗамеры(ВыделенныеСтроки, ПовторяемыеЗамеры);
	ЗамерыБезОшибок = Новый Массив;
	
	ОбновитьМонитор = Ложь;
	Для Каждого СтрокаЗамера Из ПовторяемыеЗамеры Цикл
		Если Не СтрокаЗамера.ЕстьОшибка Тогда
			ЗамерыБезОшибок.Добавить(СтрокаЗамера);
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаЗамера.Замер) Тогда
			Замер.ПовторитьЗадание(СтрокаЗамера.Замер);
		КонецЕсли;
		ОбновитьМонитор = Истина;
	КонецЦикла;
	
	Если ОбновитьМонитор Тогда
		ОбновитьМониторЗамеров();
	КонецЕсли;
	
	Если ЗамерыБезОшибок.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПовторитьЗавершение", ЭтотОбъект, ЗамерыБезОшибок);
		Если ЗамерыБезОшибок.Количество() = 1 Тогда
			ТекстВопроса = "Замер """ + СтрокаЗамера.Показатель + " (" + СтрокаЗамера.Начало + " - " + СтрокаЗамера.Конец + ")"" находится в состоянии обработки данных. Все равно выполнить повтор?";
		Иначе
			ТекстВопроса = "Замеры ";
			Для Каждого СтрокаЗамера Из ЗамерыБезОшибок Цикл
				ТекстВопроса = ТекстВопроса
					+ Символы.ПС + СтрокаЗамера.Показатель + " (" + СтрокаЗамера.Начало + " - " + СтрокаЗамера.Конец + ")";
			КонецЦикла;
			ТекстВопроса = ТекстВопроса + Символы.ПС + "находятся в состоянии обработки данных. Все равно выполнить повтор?";
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура КомандаПовторитьЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗамера Из ДопПараметры Цикл
		Если СтрокаЗамера.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.Замер") Тогда
			СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Контекст.Показатели(), "Экземпляр", СтрокаЗамера.Экземпляр);
			
			Если СтрокаПоказателя <> Неопределено И СтрокаПоказателя.Запись Тогда
				КомандыКлиент.ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыключитьЗаписьЗначенийПП"), СтрокаПоказателя.Показатель);
				ВыполнениеСценарияКлиент.ВыполнитьТакт();
				КомандыКлиент.ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВключитьЗаписьЗначенийПП"), СтрокаПоказателя);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаЗамера.Замер) Тогда
			Замер.ПовторитьЗадание(СтрокаЗамера.Замер);
		КонецЕсли;
	КонецЦикла;
	ОбновитьМониторЗамеров();
	
КонецПроцедуры // КомандаПовторитьЗавершение()

&НаКлиенте
// Найти замеры, которые являются подмножеством иерархии указанной строки и
// и поместить результат в РезультатПоиска
//
// Параметры:
//  Строки - СтрокаДереваЗначений
//  РезультатПоиска - Соответствие, результат поиска
//
Процедура НайтиЗамеры(Строки, РезультатПоиска)
	
	Для Каждого ДанныеСтроки Из Строки Цикл
		Если ДанныеСтроки.Уровень < 3 Тогда
			НайтиЗамеры(ДанныеСтроки.ПолучитьЭлементы(), РезультатПоиска);
		Иначе
			ОписаниеЗамера = Новый Структура("Замер,Состояние,Показатель,Начало,Конец,Экземпляр,ЕстьОшибка");
			ЗаполнитьЗначенияСвойств(ОписаниеЗамера, ДанныеСтроки);
			РезультатПоиска.Добавить(ОписаниеЗамера);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НайтиЗамеры()

&НаКлиенте
Процедура КомандаУдалить(Команда)
	
	Если Элементы.Замеры.ВыделенныеСтроки.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаУдалитьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Удалить выбранные замеры и все связанные с ними данные?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура КомандаУдалитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат
	КонецЕсли;
	
	УдаляемыеЗамеры = Новый Массив;
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Замеры.ВыделенныеСтроки Цикл
		ДанныеСтроки = Замеры.НайтиПоИдентификатору(Строка);
		МассивСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	НайтиЗамеры(МассивСтрок, УдаляемыеЗамеры);
	
	ПараметрыМонитораАнализа = ЗаданиеКлиент.ПолучитьПараметрыМонитораАнализа();
	НеудаленныеЗамеры = УдалитьЗамерыНаСервере(УдаляемыеЗамеры, ПараметрыМонитораАнализа);
	
	Если НеудаленныеЗамеры.Количество() > 0 Тогда
		СтрокаСообщения = "Не удалось удалить следующие замеры:";
		Для Каждого НеудаленныйЗамер Из НеудаленныеЗамеры Цикл
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + НеудаленныйЗамер.ПредставлениеЗамера;
		КонецЦикла;
		
		СтрокаСообщения = СтрокаСообщения + "
		|
		|Эти замеры не удалось удалить, т.к. они находятся в состоянии обработки.
		|Когда работа над ними завершится и они перейдут в одно из соответствующих состояний (Ошибка, Замер завершен, Исходные данные получены, Исходные данные подготовлены, Анализ завершен), их можно будет удалить.";
		
		ПоказатьПредупреждение(, СтрокаСообщения);
	Иначе
		ПоказатьПредупреждение(, "Замеры успешно удалены");
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.РазвернутьСтрокиДерева(Элементы.Замеры, Замеры.ПолучитьЭлементы());
	
КонецПроцедуры // КомандаУдалитьЗавершение()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Функция УдалитьЗамерыНаСервере(УдаляемыеЗамеры, ПараметрыМонитораАнализа)
	
	ЕстьУдаленныеЗамеры = Ложь;
	НеудаленныеЗамеры = Новый Массив;
	Для Каждого СтрокаЗамера Из УдаляемыеЗамеры Цикл
		ОшибкаУдаления = Ложь;
		Попытка
			ЗамерОбъект = СтрокаЗамера.Замер.ПолучитьОбъект();
			ЗамерОбъект.Прочитать();
			
			Удалять = 
				СтрокаЗамера.ЕстьОшибка Или
				СтрокаЗамера.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.ЗамерЗавершен") Или
				СтрокаЗамера.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.ИсходныеДанныеПолучены") Или
				СтрокаЗамера.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.ИсходныеДанныеПодготовлены") Или
				СтрокаЗамера.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.АнализЗавершен");
			
			Если Удалять Тогда
				ЗамерОбъект.Удалить();
				ЕстьУдаленныеЗамеры = Истина;
			Иначе
				ОшибкаУдаления = Истина;
			КонецЕсли;
		Исключение
			ОшибкаУдаления = Истина;
		КонецПопытки;
		Если ОшибкаУдаления Тогда
			ОписаниеЗамера = Новый Структура("Замер,ПредставлениеЗамера",
				СтрокаЗамера.Замер,
				"" + СтрокаЗамера.Показатель + " (" + СтрокаЗамера.Начало + " - " + СтрокаЗамера.Конец + ")"
			);
			НеудаленныеЗамеры.Добавить(ОписаниеЗамера);
		КонецЕсли;

	КонецЦикла;
	
	Если ЕстьУдаленныеЗамеры Тогда
		ОбновитьМониторЗамеровНаСервере(ПараметрыМонитораАнализа);
	КонецЕсли;
	
	Возврат НеудаленныеЗамеры;
	
КонецФункции // УдалитьЗамеры()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ДАННЫХ ДЛЯ МОНИТОРА ЗАМЕРОВ

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ОбновитьМониторЗамеров()
	
	ПараметрыМонитора = ЗаданиеКлиент.ПолучитьПараметрыМонитораАнализа();
	ОбновитьМониторЗамеровНаСервере(ПараметрыМонитора);
	ОбщегоНазначенияКлиент.РазвернутьСтрокиДерева(Элементы.Замеры, Замеры.ПолучитьЭлементы());
	
КонецПроцедуры // ОбновитьМониторЗамеров()

&НаСервере
// Обработчик обновления монитора замеров
//
Процедура ОбновитьМониторЗамеровНаСервере(ПараметрыМонитора)
	
	ОбрабатыватьЗамеры = Константы.ОбрабатыватьЗамеры.Получить();
	Элементы.ФормаКомандаОбрабатыватьЗамеры.Пометка = ОбрабатыватьЗамеры;
	Если ОбрабатыватьЗамеры Тогда
		Задание.ВключитьОбработкуЗамеров(ПараметрыМонитора, Ложь);
	КонецЕсли;
	
	СостоянияЗамеров = Замер.ПолучитьСостоянияЗамеров();
	СостоянияЗамеров.Колонки.Добавить("Замеры", Новый ОписаниеТипов("Строка"));
	НовыйХешЗамеров = Замер.ПолучитьХешЗамеров(СостоянияЗамеров);
	
	ПроверитьСостоянияЗамеров(СостоянияЗамеров.Строки);
	
	Если НовыйХешЗамеров <> ХешЗамеров Тогда
		ОбработатьУровниДерева(СостоянияЗамеров.Строки, 0);
		ЗначениеВРеквизитФормы(СостоянияЗамеров, "Замеры");
		ХешЗамеров = НовыйХешЗамеров;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьМониторЗамеров()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ОбработатьУровниДерева(СтрокиДерева, Уровень)
	
	Для Каждого ТекСтр Из СтрокиДерева Цикл
		ТекСтр.Уровень = Уровень;
		НастроитьОтображениеЗамеров(ТекСтр);
		Если ТекСтр.Строки.Количество() > 0 Тогда
			ОбработатьУровниДерева(ТекСтр.Строки, Уровень+1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработатьУровниДерева()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ПроверитьСостоянияЗамеров(СтрокиДерева)
	
	Для Каждого ТекСтр Из СтрокиДерева Цикл
		Если ТекСтр.Строки.Количество() > 0 Тогда
			ПроверитьСостоянияЗамеров(ТекСтр.Строки);
		Иначе
			// Проверка состояния замера
			Если ЗначениеЗаполнено(ТекСтр.ИдентификаторЗадания) Тогда
				ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ТекСтр.ИдентификаторЗадания));
				ОписаниеОшибки = "";
				Если ФоновоеЗадание = Неопределено Тогда
					ОписаниеОшибки = "Фоновое задание не найдено";
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					ОписаниеОшибки = ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке);
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					ОписаниеОшибки = "Фоновое задание отменено";
				КонецЕсли;
				Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
					ЗамерОбъект = ТекСтр.Замер.ПолучитьОбъект();
					Если ЗначениеЗаполнено(ЗамерОбъект.ИдентификаторЗадания)
						И ЗамерОбъект.ИдентификаторЗадания = ТекСтр.ИдентификаторЗадания Тогда
						ЗамерОбъект.ЕстьОшибка = Истина;
						ЗамерОбъект.ОписаниеОшибки = ОписаниеОшибки;
						ЗамерОбъект.Записать();
					
						ТекСтр.ЕстьОшибка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьСостоянияЗамеров()


&НаСервере
// Настройка картинок строк в соответствии с состояниями замеров
//
Процедура НастроитьОтображениеЗамеров(ДанныеСтроки)
	
	Уровень = ДанныеСтроки.Уровень;
	
	Если Уровень = 0 Тогда
		ДанныеСтроки.Замеры = Строка(ДанныеСтроки.ИнформационнаяБаза);
		ДанныеСтроки.ИндексКартинки = 0;
	ИначеЕсли Уровень = 1 Тогда
		ДанныеСтроки.Замеры = Строка(ДанныеСтроки.Показатель);
		Если ДанныеСтроки.Показатель = Справочники.Показатели.АнализЗапросов Тогда
			ДанныеСтроки.ИндексКартинки = 1;
		ИначеЕсли ДанныеСтроки.Показатель = Справочники.Показатели.АнализОжиданийНаБлокировках Тогда
			ДанныеСтроки.ИндексКартинки = 2;
		ИначеЕсли ДанныеСтроки.Показатель = Справочники.Показатели.АнализВзаимоблокировок Тогда
			ДанныеСтроки.ИндексКартинки = 3;
		КонецЕсли;
	ИначеЕсли Уровень = 2 Тогда
		ДанныеСтроки.Замеры = Строка(ДанныеСтроки.Состояние);
		Если ДанныеСтроки.Состояние = Перечисления.СостоянияЗамеров.Замер Тогда
			ДанныеСтроки.ИндексКартинки = 4;
		ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияЗамеров.ЗамерЗавершен Тогда
			ДанныеСтроки.ИндексКартинки = 5;
		ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияЗамеров.ПолучениеИсходныхДанных Тогда
			ДанныеСтроки.ИндексКартинки = 6;
		ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияЗамеров.ИсходныеДанныеПолучены Тогда
			ДанныеСтроки.ИндексКартинки = 7;
		ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияЗамеров.ПодготовкаИсходныхДанных Тогда
			ДанныеСтроки.ИндексКартинки = 8;
		ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияЗамеров.ИсходныеДанныеПодготовлены Тогда
			ДанныеСтроки.ИндексКартинки = 9;
		ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияЗамеров.Анализ Тогда
			ДанныеСтроки.ИндексКартинки = 10;
		ИначеЕсли ДанныеСтроки.Состояние = Перечисления.СостоянияЗамеров.АнализЗавершен Тогда
			ДанныеСтроки.ИндексКартинки = 11;
		КонецЕсли;
	ИначеЕсли Уровень = 3 Тогда
		ДанныеСтроки.Замеры = Строка(ДанныеСтроки.Начало) + " - " + ДанныеСтроки.Конец;
		Если ДанныеСтроки.ЕстьОшибка Тогда
			ДанныеСтроки.ИндексКартинки = 13;
		Иначе
			ДанныеСтроки.ИндексКартинки = 12;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НастроитьОтображениеЗамеров()

&НаКлиенте
// Установить доступность элементов управления
//
Процедура УстановитьДоступностьЭлементовУправления()
	
	ТекущиеДанные = Элементы.Замеры.ТекущиеДанные;
	ЕстьТекущиеДанные = ТекущиеДанные <> Неопределено;
	
	Если ЕстьТекущиеДанные Тогда
		Уровень = ТекущиеДанные.Уровень;
	КонецЕсли;
	
	Элементы.ФормаКомандаУдалить.Доступность = ЕстьТекущиеДанные;
	Элементы.ФормаКомандаПовторить.Доступность = ЕстьТекущиеДанные;
	
КонецПроцедуры // УстановитьДоступностьЭлементовУправления()

&НаКлиенте
Процедура ЗамерыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Замеры.ТекущиеДанные;
	Уровень = ТекущиеДанные.Уровень;
	
	Если Уровень = 3 Тогда
		ПоказатьЗначение(, ТекущиеДанные.Замер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамерыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьЭлементовУправления();
	
КонецПроцедуры

