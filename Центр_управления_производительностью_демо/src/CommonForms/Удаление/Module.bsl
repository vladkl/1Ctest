
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Автоматически = Параметры.Автоматически;
	НачалоИнтервала = Параметры.НачалоИнтервала;
	КонецИнтервала = Параметры.КонецИнтервала;
	ИБ = Параметры.ИнформационнаяБаза;
	УдалятьИБ = Параметры.УдалятьИБ;
	
	Если Автоматически Тогда
		Элементы.ИндикаторОбъектов.Доступность = Ложь;
		Элементы.ИндикаторПакетов.Доступность = Ложь;
		Элементы.ФормаКоманднаяПанель.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Автоматически = Истина Тогда
		ПодключитьОбработчикОжидания("УдалитьДанныеАвтоматически", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура УдалитьДанныеАвтоматически() Экспорт
	
	УдалитьДанныеНаИнтервале();
	Закрыть(Истина);
	
КонецПроцедуры // УдалитьДанныеАвтоматически()


&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Закрыть(ДанныеУдалены);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	УдалитьДанныеНаИнтервале();
	ИнтерфейсыКлиент.Предупредить(СловарьКлиентСервер.Получить("ПредупреждениеДанныеУдалены", ИБ, НачалоИнтервала, КонецИнтервала));
	ДанныеУдалены = Истина;
	Закрыть(Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// УДАЛЕНИЕ ДАННЫХ ИНФОРМАЦИОННОЙ БАЗЫ

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура УдалитьДанныеНаИнтервале()
	
	ШиринаИнтервалаПакета = 3600;
	ИндикаторПакетов = 0;
	КоличествоПакетов = ОбщегоНазначенияКлиентСервер.ОкрВверх((КонецИнтервала - НачалоИнтервала) / ШиринаИнтервалаПакета);
	Элементы.ИндикаторПакетов.МаксимальноеЗначение = КоличествоПакетов * 8;
	
	УдалитьДанныеНаИнтервалеНаСервере(ИБ, НачалоИнтервала, КонецИнтервала, ШиринаИнтервалаПакета, УдалятьИБ);
	
КонецПроцедуры // УдалитьДанныеНаИнтервале()

&НаСервереБезКонтекста
// Удалить данные свободные от зависимостей на указанном интервале
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//  НачалоИнтервала - Дата, начало удаляемого интервала
//  КонецИнтервала - Дата, конец удаляемого интервала
//
Процедура УдалитьДанныеНаИнтервалеНаСервере(ИБ, Начало, Конец, ШиринаИнтервалаПакета, УдалятьИБ) Экспорт
	
	НачалоИнтервала = Начало;
	КонецИнтервала = Конец;
	
	Пока НачалоИнтервала <= Конец Цикл
		КонецИнтервала = НачалоИнтервала + ШиринаИнтервалаПакета;
		
		Если КонецИнтервала > Конец Тогда
			КонецИнтервала = Конец;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			УдалитьСвободныеДанныеНаИнтервале(ИБ, НачалоИнтервала, КонецИнтервала);
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		НачалоИнтервала = КонецИнтервала + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Показатель.Ссылка
		|ИЗ
		|	Справочник.Показатели КАК Показатель
		|ГДЕ
		|	Показатель.Интерактивный = Истина";
	Показатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	УдалитьЗначенияПоказателей(ИБ, Начало, Конец, Показатели);
	
	Описание = "";
	ИндикаторОбъектов = 0;
	ИндикаторПакетов = 0;
	
	Если УдалятьИБ Тогда
		Справочники.ИнформационныеБазы.УдалитьИБ(ИБ);
	КонецЕсли;
	
КонецПроцедуры // УдалитьДанныеНаИнтервале()

&НаСервереБезКонтекста
// Удалить данные свободные от зависимостей на указанном интервале
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//  НачалоИнтервала - Дата, начало удаляемого интервала
//  КонецИнтервала - Дата, конец удаляемого интервала
//
Процедура УдалитьСвободныеДанныеНаИнтервале(ИБ, НачалоИнтервала, КонецИнтервала)
	
	УдаляемыеТипыДокументов = Новый Массив;
	УдаляемыеТипыДокументов.Добавить("ОжиданиеНаБлокировке, Взаимоблокировка");
	УдаляемыеТипыДокументов.Добавить("Блокировка");
	УдаляемыеТипыДокументов.Добавить("ВыполнениеКода, ВыполнениеЗапроса");
	УдалитьСвободныеДокументы(ИБ, НачалоИнтервала, КонецИнтервала, УдаляемыеТипыДокументов);
	
	УдаляемыеТипыСправочников = Новый Массив;
	УдаляемыеТипыСправочников.Добавить("Ресурсы, ПользователиИБ, Контексты, Запросы, ПланыЗапросов");
	УдалитьСвободныеСправочники(ИБ, УдаляемыеТипыСправочников);
	
КонецПроцедуры // УдалитьСвободныеДанныеНаИнтервале()

&НаСервереБезКонтекста
// Удалить свободные от зависимостей документы
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//  НачалоИнтервала - Дата, начало удаляемого интервала
//  КонецИнтервала - Дата, конец удаляемого интервала
//  ТипыДокументов - Массив, массив типов удаляемых документов
//
Процедура УдалитьСвободныеДокументы(ИБ, НачалоИнтервала, КонецИнтервала, ТипыДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИБ);
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала", КонецИнтервала);
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		Типы = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(ТипДокумента, ",");
		Запрос.Текст = "";
		
		Для Каждого Тип Из Типы Цикл
			Если Не ПустаяСтрока(Запрос.Текст) Тогда
				Запрос.Текст = Запрос.Текст + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|";
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	Документ.Ссылка
				|ИЗ
				|	Документ." + Тип + " КАК Документ
				|ГДЕ
				|	Документ.ИнформационнаяБаза = &ИнформационнаяБаза
				|	И Документ.Дата >= &НачалоИнтервала
				|	И Документ.Дата <= &КонецИнтервала
				|ДЛЯ ИЗМЕНЕНИЯ
				|	Документ." + Тип;
		КонецЦикла;
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		УдалитьСвободныеОбъекты(Выгрузка.ВыгрузитьКолонку(0));
	КонецЦикла;
	
КонецПроцедуры // УдалитьСвободныеДокументы()

&НаСервереБезКонтекста
// Удалить свободные от зависимостей справочники
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//  ТипыСправочников - Массив, массив типов удаляемых справочников
//
Процедура УдалитьСвободныеСправочники(ИБ, ТипыСправочников)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИБ);
	
	Для Каждого ТипСправочника Из ТипыСправочников Цикл
		Типы = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(ТипСправочника, ",");
		
		Для Каждого Тип Из Типы Цикл
			Справочник = Справочники[Тип];
			МетаданныеСправочника = Справочник.ПустаяСсылка().Метаданные();
			Иерархический = МетаданныеСправочника.Иерархический;
			КоличествоУдалений = ?(Иерархический, МетаданныеСправочника.КоличествоУровней + 1, 1);
			
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Справочник.Ссылка
				|ИЗ
				|	Справочник." + Тип + " КАК Справочник
				|ГДЕ
				|	Справочник.Владелец = &ИнформационнаяБаза
				|ДЛЯ ИЗМЕНЕНИЯ
				|	Справочник." + Тип ;
			
			Для СчетчикУдалений = 1 По КоличествоУдалений Цикл
				Выбрано = 0;
				УдаляемыеСправочники = Новый Массив;
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					Если Выбрано < 5000 Тогда
						УдаляемыеСправочники.Добавить(Выборка.Ссылка);
						Выбрано = Выбрано + 1;
					Иначе
						УдалитьСвободныеОбъекты(УдаляемыеСправочники);
						УдаляемыеСправочники = Новый Массив;
						Выбрано = 0;
					КонецЕсли;
				КонецЦикла;
				
				УдалитьСвободныеОбъекты(УдаляемыеСправочники);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // УдалитьСвободныеСправочники()

&НаСервереБезКонтекста
// Удалить свободные от зависимостей объекты
//
// Параметры:
//  УдаляемыеОбъекты - Массив, готовых к удалению объектов
//
Процедура УдалитьСвободныеОбъекты(УдаляемыеОбъекты)
	
	ИндикаторОбъектов = 0;
	//Элементы.ИндикаторОбъектов.МаксимальноеЗначение = УдаляемыеОбъекты.Количество();
	ОбъектыСЗависимостями = НайтиПоСсылкам(УдаляемыеОбъекты);
	
	Для Каждого УдаляемыйОбъект Из УдаляемыеОбъекты Цикл
		Описание = УдаляемыйОбъект;
		Если ОбъектыСЗависимостями.Найти(УдаляемыйОбъект, "Ссылка") = Неопределено Тогда
			Объект = УдаляемыйОбъект.ПолучитьОбъект();
			Объект.Удалить();
		КонецЕсли;
		ИндикаторОбъектов = ИндикаторОбъектов + 1;
	КонецЦикла;
	
КонецПроцедуры // УдалитьСвободныеОбъекты()

&НаСервереБезКонтекста
// Удалить значения показателей производительности на указанном интервале
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//  НачалоИнтервала - Дата, начало удаляемого интервала
//  КонецИнтервала - Дата, конец удаляемого интервала
//  Показатели - Массив, массив удаляемых показателей
//
Процедура УдалитьЗначенияПоказателей(ИБ, НачалоИнтервала, КонецИнтервала, Показатели)
	
	Интервалы = ОбщегоНазначенияКлиентСервер.РазделитьИнтервал(НачалоИнтервала, КонецИнтервала);
	Набор = РегистрыСведений.ЖурналПоказателей.СоздатьНаборЗаписей();
	Набор.Отбор.ИнформационнаяБаза.Установить(ИБ);
	ИндикаторОбъектов = 0;
	//Элементы.ИндикаторОбъектов.МаксимальноеЗначение = 6;
	Описание = "Значения показателей производительности";
	
	Для каждого ГодПолный Из Интервалы.ГодыПолные Цикл
		ТекущаяДата = ГодПолный.Начало;
		
		Пока ТекущаяДата <> ГодПолный.Конец + 1 Цикл
			Набор.Отбор.Год.Установить(Год(ТекущаяДата));
			Набор.Записать();
			ТекущаяДата = КонецГода(ТекущаяДата) + 1;
		КонецЦикла;
	КонецЦикла;
	
	ИндикаторОбъектов = ИндикаторОбъектов + 1;
	
	Для каждого МесяцПолный Из Интервалы.МесяцыПолные Цикл
		ТекущаяДата = МесяцПолный.Начало;
		
		Пока ТекущаяДата <> МесяцПолный.Конец + 1 Цикл
			Набор.Отбор.Год.Установить(Год(ТекущаяДата));
			Набор.Отбор.Месяц.Установить(Месяц(ТекущаяДата));
			Набор.Записать();
			ТекущаяДата = КонецМесяца(ТекущаяДата) + 1;
		КонецЦикла;
	КонецЦикла;
	
	ИндикаторОбъектов = ИндикаторОбъектов + 1;
	
	Для каждого ДеньПолный Из Интервалы.ДниПолные Цикл
		ТекущаяДата = ДеньПолный.Начало;
		
		Пока ТекущаяДата <> ДеньПолный.Конец + 1 Цикл
			Набор.Отбор.Год.Установить(Год(ТекущаяДата));
			Набор.Отбор.Месяц.Установить(Месяц(ТекущаяДата));
			Набор.Отбор.День.Установить(День(ТекущаяДата));
			Набор.Записать();
			ТекущаяДата = КонецДня(ТекущаяДата) + 1;
		КонецЦикла;
	КонецЦикла;
	
	ИндикаторОбъектов = ИндикаторОбъектов + 1;
	
	Для каждого ЧасПолный Из Интервалы.ЧасыПолные Цикл
		ТекущаяДата = ЧасПолный.Начало;
		
		Пока ТекущаяДата <> ЧасПолный.Конец + 1 Цикл
			Набор.Отбор.Год.Установить(Год(ТекущаяДата));
			Набор.Отбор.Месяц.Установить(Месяц(ТекущаяДата));
			Набор.Отбор.День.Установить(День(ТекущаяДата));
			Набор.Отбор.Час.Установить(Час(ТекущаяДата));
			Набор.Записать();
			ТекущаяДата = КонецЧаса(ТекущаяДата) + 1;
		КонецЦикла;
	КонецЦикла;
	
	ИндикаторОбъектов = ИндикаторОбъектов + 1;
	
	Для каждого МинутаПолная Из Интервалы.МинутыПолные Цикл
		ТекущаяДата = МинутаПолная.Начало;
		
		Пока ТекущаяДата <> МинутаПолная.Конец + 1 Цикл
			Набор.Отбор.Год.Установить(Год(ТекущаяДата));
			Набор.Отбор.Месяц.Установить(Месяц(ТекущаяДата));
			Набор.Отбор.День.Установить(День(ТекущаяДата));
			Набор.Отбор.Час.Установить(Час(ТекущаяДата));
			Набор.Отбор.Минута.Установить(Минута(ТекущаяДата));
			Набор.Записать();
			ТекущаяДата = КонецМинуты(ТекущаяДата) + 1;
		КонецЦикла;
	КонецЦикла;
	
	ИндикаторОбъектов = ИндикаторОбъектов + 1;
	Набор = РегистрыСведений.ЖурналПоказателей.СоздатьНаборЗаписей();
	Набор.Отбор.ИнформационнаяБаза.Установить(ИБ);
	
	Для каждого МинутаФрагмент Из Интервалы.МинутыФрагменты Цикл
		ТекущаяДата = МинутаФрагмент.Начало;
		
		Пока ТекущаяДата <> МинутаФрагмент.Конец + 1 Цикл
			Набор.Отбор.Период.Установить(ТекущаяДата);
			Набор.Записать();
			ТекущаяДата = ТекущаяДата + 1;
		КонецЦикла;
	КонецЦикла;
	
	ИндикаторОбъектов = ИндикаторОбъектов + 1;
	
КонецПроцедуры // УдалитьЗначенияПоказателей()


