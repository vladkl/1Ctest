///////////////////////////////////////////////////////////////////////////////
// СЕРВЕР

// Подключиться к указанному SQL Server'у
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//  ИмяСервера - Строка, имя SQL Server
//  ИмяБазы - Строка, имя базы к которой подключиться
//
Процедура ПодключитьMSSQL(ОбъектВК, ИБ) Экспорт
	
	Логин = "";
	Пароль = "";
	Если ИБ.СпособАутентификации = Перечисления.СпособыАутентификации.ПоЛогинуИПаролю Тогда
		Если ТипЗнч(ИБ) = Тип("Структура") Тогда
			Логин = ИБ.ИмяПользователяСУБД;
			Пароль = ИБ.ПарольПользователяСУБД;
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			ДанныеАутентификации = РегистрыСведений.БезопасноеХранилище.ПолучитьДанные(ИБ);
			УстановитьПривилегированныйРежим(Ложь);
			Если ДанныеАутентификации <> Неопределено Тогда
				Логин = ДанныеАутентификации.ИмяПользователяСУБД;
				Пароль = ДанныеАутентификации.ПарольПользователяСУБД;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПодключитьMSSQLПоИмениСервера(ОбъектВК, ИБ.СерверСУБД, ИБ.СерверИБ, ИБ.СпособАутентификации, Логин, Пароль);
	
КонецПроцедуры // ПодключитьMSSQL()

// Подключиться к указанному SQL Server'у
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//  ИмяСервера - Строка, имя SQL Server
//  ИмяБазы - Строка, имя базы к которой подключиться
//
Процедура ПодключитьMSSQLПоИмениСервера(ОбъектВК, ИмяСервераСУБД, ИмяСервера1С, СпособАутентификации, Логин = "", Пароль = "") Экспорт
	
	ИмяСервера = ПолучитьИмяСервераСУБД(ИмяСервераСУБД, ИмяСервера1С);
	КипВнешнийКомпонент.ПодключитьMSSQL(ОбъектВК, ИмяСервера, СпособАутентификации, Логин, Пароль);
	
КонецПроцедуры // ПодключитьMSSQL()

// Получить имя сервера СУБД с учетом того, что в кластере может быть указано
// имя "localhost"
//
// Параметры:
//  ИмяСервераСУБД  - Строка - Имя сервера СУБД, как оно задано в кластере
//  ИмяСервера1С  - Строка - Имя сервера 1С
//
// Возвращаемое значение:
//   Строка   - Имя сервера СУБД
//
Функция ПолучитьИмяСервераСУБД(ИмяСервераСУБД, ИмяСервера1С) Экспорт
	
	Если ВРЕГ(ИмяСервераСУБД) = "LOCALHOST" ИЛИ ВРЕГ(ИмяСервераСУБД) = "127.0.0.1" Тогда
		ИмяСервера = ИнформационнаяБаза.ПолучитьПараметрыСервера(ИмяСервера1С).ИмяСервера;
	Иначе
		ИмяСервера = ИмяСервераСУБД;
	КонецЕсли;
	
	Возврат ИмяСервера;
	
КонецФункции // ПолучитьИмяСервераСУБД()

// Получить версию СУБД
//
// Параметры:
//  СерверСУБД - COMОбъект, подключение к серверу СУБД
//
// Возвращаемое значение:
//  Число - версия СУБД
//
Функция Версия(СерверСУБД) Экспорт
	
	Запрос = "SELECT SERVERPROPERTY('ProductVersion') as Version";
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, Запрос);
	КипВнешнийКомпонент.ЕстьЗаписьMSSQL(СерверСУБД);
	ВерсияMSSQL = КипВнешнийКомпонент.ЗначениеПоляMSSQL(СерверСУБД, "Version");
	СоставВерсии = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(ВерсияMSSQL, ".");
	Возврат Число(СоставВерсии[0]) * 10 + Число(СоставВерсии[1]);
	
КонецФункции // Версия()

Функция ВремяНаСервере(ОписаниеИБ) Экспорт
	ДатаНаСервере = Дата(1,1,1);
	ВКСерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(ВКСерверСУБД, ОписаниеИБ);
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(ВКСерверСУБД, "select CONVERT(varchar(50), getdate(), 20) as Date");
	ЕстьРезультат = КипВнешнийКомпонент.ЕстьРезультатMSSQL(ВКСерверСУБД);
	
	Если ЕстьРезультат Тогда
		КипВнешнийКомпонент.СледующаяЗаписьMSSQL(ВКСерверСУБД);
		ДатаНаСервере = КипВнешнийКомпонент.ЗначениеПоляMSSQL(ВКСерверСУБД, "Date");
		ДатаНаСервере = Дата(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДатаНаСервере,"-",""), ":", ""), " ", ""));
	КонецЕсли;
	
	Возврат ДатаНаСервере;
КонецФункции

// Получить тип операционной системы сервера СУБД
//
// Параметры:
//  ОписаниеИБ  - Справочник.ИнформационныеБазы или Структура - ссылка, объект или структура,
//                 содержащая описание подключения к информационной базы
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыОС - тип ОС
//
Функция ТипОССервераСУБД(ОписаниеИБ) Экспорт
	
	ВКСерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(ВКСерверСУБД, ОписаниеИБ);
	Попытка
		КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(ВКСерверСУБД, "SELECT case when @@VERSION like '%linux%' then 'true' else 'false' end as linux_platform");
	Исключение
		Возврат Перечисления.ТипыОС.Windows;
	КонецПопытки;
	
	ЕстьРезультат = КипВнешнийКомпонент.ЕстьРезультатMSSQL(ВКСерверСУБД);
	
	Если ЕстьРезультат Тогда
		КипВнешнийКомпонент.СледующаяЗаписьMSSQL(ВКСерверСУБД);
		ЭтоLinux = КипВнешнийКомпонент.ЗначениеПоляMSSQL(ВКСерверСУБД, "linux_platform");
		Если ЭтоLinux = "true" Тогда
			Результат = Перечисления.ТипыОС.Linux;
		Иначе
			Результат = Перечисления.ТипыОС.Windows;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ТипОССервераСУБД()

// Получает значение счетчика производительности по данным DMV MSSQL сервера
//
// Параметры:
//  ОписаниеИБ  - Справочник.ИнформационныеБазы или Структура - ссылка, объект или структура,
//                 содержащая описание подключения к информационной базы
//  ТипСчетчика - Строка - "Таймауты" либо "Взаимоблокировки"
//
// Возвращаемое значение:
//   Число - Значение счетчика
//
Функция ПолучитьЗначениеСчетчикаСУБД(ОписаниеИБ, ТипСчетчика) Экспорт
	
	Результат = Неопределено;
	Если ТипСчетчика = "Таймауты" Тогда
		ТекстЗапроса = КипWindows.ЗапросКоличествоТаймаутовMSSQL();
	ИначеЕсли ТипСчетчика = "Взаимоблокировки" Тогда
		ТекстЗапроса = КипWindows.ЗапросКоличествоВзаимоблокировокMSSQL();
	Иначе
		ВызватьИсключение "Неизвестный тип счетчика: " + ТипСчетчика;
	КонецЕсли;
	
	ВКСерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(ВКСерверСУБД, ОписаниеИБ);
	Попытка
		КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(ВКСерверСУБД, ТекстЗапроса);
	Исключение
		ВызватьИсключение "Ошибка получения значения счетчика по данным DMV:" + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ЕстьРезультат = КипВнешнийКомпонент.ЕстьРезультатMSSQL(ВКСерверСУБД);
	
	Если ЕстьРезультат Тогда
		КипВнешнийКомпонент.СледующаяЗаписьMSSQL(ВКСерверСУБД);
		Результат = КипВнешнийКомпонент.ЗначениеПоляMSSQL(ВКСерверСУБД, "cntr_value");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьЗначениеСчетчикаСУБД()


///////////////////////////////////////////////////////////////////////////////
// ТРАССИРОВКА

// Получить порцию событий из трассировки. Трассировка должна содержать поле
// EventSequence
//
// Параметры:
//  НомерПоследнегоСобытия - Число, номер последнего события. Если неопределено,
//                 то события выбираются с начала. В эту же переменную записывается
//                 номер последнего события для возможности постраничного
//                 перебора событий
//  КоличествоСобытий - Число, количество получаемых событий (не полученных)
//  Трассировка - Структура, контекст трассировки
//
// Возвращаемое значение:
//  ТаблицаЗначений, описания событий или Неопределено, если ни одного события
//                 не получено
//
Функция ПолучитьПорциюСобытий(НомерПоследнегоСобытия,
                              КоличествоСобытий,
                              Трассировка) Экспорт
	
	ОтладкаКлиентСервер.Действие("ПолучитьПорциюСобытий", КоличествоСобытий);
	
	Колонки = Новый Массив;
	
	Для Каждого ИмяКолонки Из Трассировка.ИменаКолонок Цикл
		Колонки.Добавить(ИмяКолонки.Ключ);
	КонецЦикла;
	
	// Получить страницу данных
	ТекстЗапроса = "
		|select top " + Формат(КоличествоСобытий, "ЧГ=0") + "
		|	" + ОбщегоНазначенияКлиентСервер.ОбъединитьСтроку(Колонки, ",") + "
		|from
		|	::fn_trace_gettable(N'" + Трассировка.ПолноеИмяФайла + "', default)
		|" + ?(НомерПоследнегоСобытия = Неопределено, "", "
		|where
		|	EventSequence > " + Формат(НомерПоследнегоСобытия, "ЧН=0; ЧГ=0")) + "
		|order by
		|	EventSequence";
	СерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(СерверСУБД, Трассировка.ИнформационнаяБаза);
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, ТекстЗапроса);
	ЕстьРезультат = КипВнешнийКомпонент.ЕстьРезультатMSSQL(СерверСУБД);
	
	ПорцияСобытий = Новый ТаблицаЗначений;
	Для каждого Колонка Из Колонки Цикл
		ПорцияСобытий.Колонки.Добавить(Колонка);
	КонецЦикла;
	
	Если Не ЕстьРезультат Тогда
		НомерПоследнегоСобытия = Неопределено;
		ОтладкаКлиентСервер.Результат("ПолучитьПорциюСобытий", 0);
		Возврат ПорцияСобытий;
	КонецЕсли;
	
	Пока ЕстьРезультат Цикл
		ЕстьЗапись = КипВнешнийКомпонент.ЕстьЗаписьMSSQL(СерверСУБД);
		
		Пока ЕстьЗапись Цикл
			EventSequence = КипВнешнийКомпонент.ЗначениеПоляMSSQL(СерверСУБД, "EventSequence");
			Если ПустаяСтрока(EventSequence) Тогда
				ЕстьЗапись = КипВнешнийКомпонент.СледующаяЗаписьMSSQL(СерверСУБД);
				Продолжить;
			КонецЕсли;
			
			СтрокаПорцииСобытий = ПорцияСобытий.Добавить();
			Для каждого Колонка Из Колонки Цикл
				СтрокаПорцииСобытий[Колонка] = КипВнешнийКомпонент.ЗначениеПоляMSSQL(СерверСУБД, Колонка);
			КонецЦикла;
			
			ЕстьЗапись = КипВнешнийКомпонент.СледующаяЗаписьMSSQL(СерверСУБД);
		КонецЦикла;
		
		ЕстьРезультат = КипВнешнийКомпонент.СледующийРезультатMSSQL(СерверСУБД);
	КонецЦикла;
	
	Если ПорцияСобытий.Количество() = 0 Тогда
		НомерПоследнегоСобытия = Неопределено;
		Возврат ПорцияСобытий;
	КонецЕсли;
	
	КоличествоСтрок = ПорцияСобытий.Количество();
	НомерПоследнегоСобытия = ПорцияСобытий[КоличествоСтрок - 1].EventSequence;
	
	ОтладкаКлиентСервер.Результат("ПолучитьПорциюСобытий", КоличествоСтрок);
	
	Возврат ПорцияСобытий;
	
КонецФункции // ПолучитьПорциюСобытий()

// Создать трассировку
//
// Параметры:
//  ПолноеИмяСервераСУБД - Строка, полное имя сервера СУБД
//
// Возвращаемое значение:
//  Структура - контекст трассировки следующей структуры:
//              Идентификатор - Число, идентификатор трассировки
//              Файл - Строка, имя файла трассировки на сервере СУБД
//              СерверСУБД - COMОбъект, объект сервера СУБД
//
Функция СоздатьТрассировку(ОписаниеИБ, ТипОССервераСУБД, КаталогЛокальный, КаталогСетевой = "") Экспорт
	
	ЛокальныйКаталог = ОбщегоНазначенияКлиентСервер.СкорректироватьПуть(КаталогЛокальный);
	СетевойКаталог = ОбщегоНазначенияКлиентСервер.СкорректироватьПуть(КаталогСетевой);
	СерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(СерверСУБД, ОписаниеИБ);
	
	ИмяФайла = Строка(Новый УникальныйИдентификатор);
	Если ТипОССервераСУБД = Перечисления.ТипыОС.Linux Тогда
		РазделительПути = "/";
	Иначе
		РазделительПути = "\";
	КонецЕсли;
	ПолноеИмяФайла = ЛокальныйКаталог + РазделительПути + ИмяФайла;
	ПолноеСетевоеИмяФайла = СетевойКаталог + "\" + ИмяФайла;
	
	ОтладкаКлиентСервер.Действие("СоздатьТрассировку", ПолноеИмяФайла + ".trc");
	
	ТекстЗапроса = "
		|declare @trace_id int
		|declare @max_size bigint
		|set @max_size = 1024000
		|exec sp_trace_create @trace_id output, 0, N'" + ПолноеИмяФайла + "', @max_size
		|select @trace_id as TraceID";
		
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, ТекстЗапроса);
	КипВнешнийКомпонент.ЕстьЗаписьMSSQL(СерверСУБД);
	ИдентификаторТрассировки = КипВнешнийКомпонент.ЗначениеПоляMSSQL(СерверСУБД, "TraceID");
	
	Трассировка = СоздатьСтруктуруТрассировки();
	Трассировка.ИмяФайла = ИмяФайла + ".trc";
	Трассировка.ПолноеИмяФайла = ПолноеИмяФайла + ".trc";
	Трассировка.ПолноеСетевоеИмяФайла = ?(ПустаяСтрока(КаталогСетевой), "", ПолноеСетевоеИмяФайла + ".trc");
	Трассировка.Идентификатор = ИдентификаторТрассировки;
	Трассировка.ИмяСервераСУБД = ОписаниеИБ.СерверСУБД;
	Трассировка.ИменаКолонок = Новый Структура;
	Трассировка.ИнформационнаяБаза = ОписаниеИБ;
	
	ОтладкаКлиентСервер.Результат("СоздатьТрассировку", ПолноеИмяФайла + ".trc");
	
	Возврат Трассировка;
	
КонецФункции // СоздатьТрассировку()

// Создать структуру описывающую трассировку
//
// Возвращаемое значение:
//  Структруа - для описания трассировки
//
Функция СоздатьСтруктуруТрассировки() Экспорт
	
	Трассировка = Новый Структура;
	Трассировка.Вставить("ИмяФайла");
	Трассировка.Вставить("ПолноеИмяФайла");
	Трассировка.Вставить("ПолноеСетевоеИмяФайла");
	Трассировка.Вставить("Идентификатор");
	Трассировка.Вставить("СерверСУБД");
	Трассировка.Вставить("ИмяСервераСУБД");
	Трассировка.Вставить("ИменаКолонок");
	Трассировка.Вставить("ИнформационнаяБаза");
	
	Возврат Трассировка;
	
КонецФункции // СоздатьСтруктуруТрассировки()

// Преобразовать список колонок в виде строки с перечисленными через запятую
// колонками в структуру подробно описывающую каждую колонку
//
// Параметры:
//  СписокКолонок - Строка, имена колонок через запятую
//
// Возвращаемое значение:
//  Структура с подробным описанием колонок
//
Функция СписокКолонокВИменаКолонок(СписокКолонок) Экспорт
	
	ИменаКолонок = Новый Структура;
	МассивИменКолонок = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(СписокКолонок, ",");
	ИдентификаторыКолонок = MSSQL.ПолучитьКолонки();
	
	Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
		ИменаКолонок.Вставить(ИмяКолонки, ИдентификаторыКолонок[ИмяКолонки].Идентификатор);
	КонецЦикла;
	
	Возврат ИменаКолонок;
	
КонецФункции // СписокКолонокВИменаКолонок()

// Добавить событие трассировки
//
// Параметры:
//  Событие - Число, добавляемое событие
//  СписокКолонок - Строка, где колонки перечисленны через запятую
//  Трассировка - Структура, контекст трассировки
//
Процедура ДобавитьСобытиеТрассировки(Событие, СписокКолонок, Трассировка) Экспорт
	
	ОтладкаКлиентСервер.Действие("ДобавитьСобытиеТрассировки", Событие);
	
	Трассировка.ИменаКолонок = СписокКолонокВИменаКолонок(СписокКолонок);
	
	ТекстЗапроса = "
		|declare @on as bit
		|set @on = 1";
	
	Для Каждого Колонка Из Трассировка.ИменаКолонок Цикл
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС +
			"exec sp_trace_setevent " +
			Трассировка.Идентификатор + ", " +
			Событие + ", " +
			Колонка.Значение + ", @on";
		
	КонецЦикла;
	
	СерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(СерверСУБД, Трассировка.ИнформационнаяБаза);
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, ТекстЗапроса);
	
	ОтладкаКлиентСервер.Результат("ДобавитьСобытиеТрассировки", Событие);
	
КонецПроцедуры // ДобавитьСобытиеТрассировки()

// Добавить фильтр трассировки
//
// Параметры:
//  Колонка - Структура, идентификатор и тип колонки
//  ТипОтношения - Число, тип логического отношения между условиями в одной колонке
//  ТипСравнения - Число, тип сравнения фильтруемых полей
//  Значение - Произвольный, фильтруемое значение
//  Трассировка - Структура, контекст трассировки
//
Процедура ДобавитьФильтрТрассировки(Колонка, ТипОтношения, ТипСравнения, Значение, Трассировка) Экспорт
	
	ОтладкаКлиентСервер.Действие("ДобавитьФильтрТрассировки", Колонка.Идентификатор, Значение);
	
	ТекстЗапроса = "
		|declare @value " + Колонка.Тип + "
		|set @value = " + Значение + "
		|exec sp_trace_setfilter " + 
		Трассировка.Идентификатор + ", " +
		Колонка.Идентификатор + ", " +
		ТипОтношения + ", " +
		ТипСравнения + ", " +
		"@value";
	
	СерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(СерверСУБД, Трассировка.ИнформационнаяБаза);
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, ТекстЗапроса);
	
	ОтладкаКлиентСервер.Результат("ДобавитьФильтрТрассировки", Колонка.Идентификатор, Значение);
	
КонецПроцедуры // ДобавитьФильтрТрассировки()

// Включить трассировку
//
// Параметры:
//  Трассировка - Структура, контекст трассировки
//
Процедура ВключитьТрассировку(Трассировка) Экспорт
	
	ОтладкаКлиентСервер.Действие("ВключитьТрассировку", Трассировка.Идентификатор);
	
	ТекстЗапроса = "
		|declare @trace_id int
		|set @trace_id = " + Трассировка.Идентификатор + "
		|exec sp_trace_setstatus @trace_id, 1";
	
	СерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(СерверСУБД, Трассировка.ИнформационнаяБаза);
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, ТекстЗапроса);
	
	ОтладкаКлиентСервер.Результат("ВключитьТрассировку", Трассировка.Идентификатор);
	
КонецПроцедуры // ВключитьТрассировку()

// Остановить трассировку
//
// Параметры:
//  Трассировка - Структура, контекст трассировки
//
Процедура ОстановитьТрассировку(Трассировка) Экспорт
	
	ОтладкаКлиентСервер.Действие("ОстановитьТрассировку", Трассировка.Идентификатор);
	
	ТекстЗапроса = "
		|declare @trace_id int
		|set @trace_id = " + Трассировка.Идентификатор + "
		|exec sp_trace_setstatus @trace_id, 0";
	
	СерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(СерверСУБД, Трассировка.ИнформационнаяБаза);
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, ТекстЗапроса);
	
	ОтладкаКлиентСервер.Результат("ОстановитьТрассировку", Трассировка.Идентификатор);
	
КонецПроцедуры // ОстановитьТрассировку()

// Выключить трассировку
//
// Параметры:
//  Трассировка - Структура, контекст трассировки
//
Процедура ВыключитьТрассировку(Трассировка) Экспорт
	
	ОтладкаКлиентСервер.Действие("ВыключитьТрассировку", Трассировка.Идентификатор);
	
	ТекстЗапроса = "
		|declare @trace_id int
		|set @trace_id = " + Трассировка.Идентификатор + "
		|exec sp_trace_setstatus @trace_id, 2";
	
	СерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(СерверСУБД, Трассировка.ИнформационнаяБаза);
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, ТекстЗапроса);
	
	ОтладкаКлиентСервер.Результат("ВыключитьТрассировку", Трассировка.Идентификатор);
	
КонецПроцедуры // ВыключитьТрассировку()

// Очистить трассировку путем уделения ее файлов
//
// Параметры:
//  Трассировка - Структура, контекст трассировки
//
Процедура ОчиститьТрассировку(Трассировка, УдалятьБезПроверки = Ложь) Экспорт
	
	Если ПустаяСтрока(Трассировка.ПолноеСетевоеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если УдалятьБезПроверки Тогда
		Попытка
			УдалитьФайлы(Трассировка.ПолноеСетевоеИмяФайла);
		Исключение
		КонецПопытки;
	Иначе
		УдалитьФайлы(Трассировка.ПолноеСетевоеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры // ОчиститьТрассировку()

// Получить список колонок в виде строки с разделенными запятыми именами колонок
// из структуры описывающей колонки трассировки
//
// Параметры:
//  ИменаКолонок - Структура
Функция ПолучитьСписокКолонок(ИменаКолонок) Экспорт
	
	СписокКолонок = "";
	
	Для Каждого ЭлементИмени Из ИменаКолонок Цикл
		Если Не ПустаяСтрока(СписокКолонок) Тогда
			СписокКолонок = СписокКолонок + ", ";
		КонецЕсли;
		
		СписокКолонок = СписокКолонок + ЭлементИмени.Ключ;
	КонецЦикла;
	
	Возврат СписокКолонок;
	
КонецФункции // ПолучитьСписокКолонок()

// Получить количество событий в трассировке
//
// Параметры:
//  Трассировка - Структура, контекст трассировки
//
// Возвращаемое значение:
//  Число, количествро событий на текущий момент
//
Функция КоличествоСобытийВТрассировке(Трассировка) Экспорт
	
	ОтладкаКлиентСервер.Действие("КоличествоСобытийВТрассировке",
	                 Трассировка.ПолноеИмяФайла);
	
	ТекстЗапроса = "
		|select
		|	count(*) as Count
		|from
		|	::fn_trace_gettable(N'" + Трассировка.ПолноеИмяФайла + "', default)";
	
	СерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(СерверСУБД, Трассировка.ИнформационнаяБаза);
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, ТекстЗапроса);
	КипВнешнийКомпонент.ЕстьЗаписьMSSQL(СерверСУБД);
	Количество = КипВнешнийКомпонент.ЗначениеПоляMSSQL(СерверСУБД, "Count");
	
	ОтладкаКлиентСервер.Результат("КоличествоСобытийВТрассировке",
	                  Трассировка.ПолноеИмяФайла,
	                  Количество);
	
	Возврат Количество;
	
КонецФункции // ПолучитьКоличествоСобытийВТрассировке()

// Получить соответствие имен событий их числовым значениям
//
// Возвращаемое значение:
//  Соответствие - имена и числовое значение событий
//
Функция ПолучитьИдентификаторыСобытий() Экспорт
	
	ИдентификаторыСобытий = Новый Соответствие;
	ИдентификаторыСобытий.Вставить("RPC:Completed", 10);
	ИдентификаторыСобытий.Вставить("SQL:BatchCompleted", 12);
	ИдентификаторыСобытий.Вставить("Lock:Acquired", 24);
	ИдентификаторыСобытий.Вставить("Lock:Escalation", 60);
	ИдентификаторыСобытий.Вставить("Deadlock graph", 148);
	
	Возврат ИдентификаторыСобытий;
	
КонецФункции // ПолучитьИдентификаторыСобытий()

// Получить соответствие имен колонок их числовым значениям
//
// Возвращаемое значение:
//  Соответствие - имена и числовое значение колонок
//
Функция ПолучитьКолонки() Экспорт
	
	Колонки = Новый Соответствие;
	ДобавитьКолонкуТрассировки(Колонки, "TextData", 1, "nvarchar(256)");
	ДобавитьКолонкуТрассировки(Колонки, "BinaryData", 2, "binary(16)");
	ДобавитьКолонкуТрассировки(Колонки, "DatabaseID", 3, "int");
	ДобавитьКолонкуТрассировки(Колонки, "TransactionID", 4, "bigint");
	ДобавитьКолонкуТрассировки(Колонки, "SPID", 12, "int");
	ДобавитьКолонкуТрассировки(Колонки, "StartTime", 14, "datetime");
	ДобавитьКолонкуТрассировки(Колонки, "EndTime", 15, "datetime");
	ДобавитьКолонкуТрассировки(Колонки, "ObjectID", 22, "int");
	ДобавитьКолонкуТрассировки(Колонки, "EventClass", 27, "int");
	ДобавитьКолонкуТрассировки(Колонки, "Mode", 32, "int");
	ДобавитьКолонкуТрассировки(Колонки, "EventSequence", 51, "bigint");
	ДобавитьКолонкуТрассировки(Колонки, "ObjectID2", 56, "bigint");
	ДобавитьКолонкуТрассировки(Колонки, "Type", 57, "int");
	
	Возврат Колонки;
	
КонецФункции // ПолучитьКолонки()

// Получить типы логических отношений
//
// Возвращаемое значение:
//  Соответствие - строковые и числовые представления типов отношений
//
Функция ПолучитьТипыОтношений() Экспорт
	
	Отношения = Новый Соответствие;
	Отношения.Вставить("AND", 0);
	Отношения.Вставить("OR", 1);
	
	Возврат Отношения;
	
КонецФункции // ПолучитьТипыОтношений()

// Получить типы сравнения
//
// Возвращаемое значение:
//  Соответствие - строковые и числовые представления типов сравнения
//
Функция ПолучитьТипыСравнений() Экспорт
	
	Сравнения = Новый Соответствие;
	Сравнения.Вставить("=", 0);
	Сравнения.Вставить("<>", 1);
	Сравнения.Вставить(">", 2);
	Сравнения.Вставить("<", 3);
	Сравнения.Вставить(">=", 4);
	Сравнения.Вставить("<=", 5);
	Сравнения.Вставить("LIKE", 6);
	Сравнения.Вставить("NOT LIKE", 7);
	
	Возврат Сравнения;
	
КонецФункции // ПолучитьТипыСравнений()

// Добавить колонку трассировки
//
// Параметры:
//  Колонки - Соответствие, список колонок
//  Имя - Строка, наименование колонки
//  Идентификатор - Число, идентификатор колонки
//  Тип - Строка, тип колонки
//
Процедура ДобавитьКолонкуТрассировки(Колонки, Имя, Идентификатор, Тип) Экспорт
	
	ОписаниеКолонки = Новый Структура;
	ОписаниеКолонки.Вставить("Идентификатор", Идентификатор);
	ОписаниеКолонки.Вставить("Тип", Тип);
	
	Колонки.Вставить(Имя, ОписаниеКолонки);
	
КонецПроцедуры // ДобавитьКолонкуТрассировки()


///////////////////////////////////////////////////////////////////////////////
// РАЗБОР СТРУКТУРЫ ГРАФА ВЗАИМОБЛОКИРОВКИ

// Получить узел процессов взаимоблокировки
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//
// Возвращаемое значение:
//  ЭлементDOM - узел процессов взаимоблокировки
//
Функция ПолучитьУзелПроцессов(Документ) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(Документ);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"/deadlock-list/deadlock/process-list",
		Документ,
		Разыменовыватель).ПолучитьСледующий();
		
	Возврат ?(Результат = Неопределено, Неопределено, Результат);
	
КонецФункции // ПолучитьУзелПроцессов()

// Получить узел ресурсов взаимоблокировки
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//
// Возвращаемое значение:
//  ЭлементDOM - узел ресурсов взаимоблокировки
//
Функция ПолучитьУзелРесурсов(Документ) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(Документ);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"/deadlock-list/deadlock/resource-list",
		Документ,
		Разыменовыватель).ПолучитьСледующий();
		
	Возврат ?(Результат = Неопределено, Неопределено, Результат);
	
КонецФункции // ПолучитьУзелРесурсов()

// Получить узел ресурсов взаимоблокировки
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелПроцессов - ЭлементDOM, узел процессов взаимоблокировки
//  ИдентификаторБлокировкиРесурса - Строка, идентификатор блокировки ресурса
//
// Возвращаемое значение:
//  ЭлементDOM - узел блокировки ресурса
//
Функция ПолучитьУзелБлокировки(Документ, УзелРесурсов, ИдентификаторБлокировкиРесурса) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелРесурсов);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"./*[@id=""" + ИдентификаторБлокировкиРесурса + """]",
		УзелРесурсов,
		Разыменовыватель).ПолучитьСледующий();
		
	Возврат ?(Результат = Неопределено, Неопределено, Результат);
	
КонецФункции // ПолучитьУзелБлокировки()

// Получить идентификатор процесса-жертвы взаимоблокировки
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//
// Возвращаемое значение:
//  Строка - идентификатор процесса-жертвы
//
Функция ПолучитьИдентификаторПроцессаЖертвы(Документ) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(Документ);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"/deadlock-list/deadlock/@victim",
		Документ,
		Разыменовыватель).ПолучитьСледующий();
		
	Возврат ?(Результат = Неопределено, Неопределено, Результат.Значение);
	
КонецФункции // ПолучитьИдентификаторПроцессаЖертвы()

// Получить массив идентификаторов процессов
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелПроцессов - ЭлементDOM, узел процессов взаимоблокировки
//
// Возвращаемое значение:
//  Массив - массив идентификаторов процессов
//
Функция ПолучитьИдентификаторыПроцессов(Документ, УзелПроцессов) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелПроцессов);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"process/@id",
		УзелПроцессов,
		Разыменовыватель);
		
	ИдентификаторыПроцессов = Новый ТаблицаЗначений();
	ИдентификаторыПроцессов.Колонки.Добавить("Процесс");
		
	Если Результат <> Неопределено Тогда
		Идентификатор = Результат.ПолучитьСледующий();
		
		Пока Идентификатор <> Неопределено Цикл
			СтрокаПроцесса = ИдентификаторыПроцессов.Добавить();
			СтрокаПроцесса.Процесс = Идентификатор.Значение;
			Идентификатор = Результат.ПолучитьСледующий();
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИдентификаторыПроцессов;
	
КонецФункции // ПолучитьИдентификаторыПроцессов()

// Получить описание процесса
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелПроцессов - ЭлементDOM, узел процессов взаимоблокировки
//  ИдентификаторПроцесса - Строка, идентификатор процесса
//
// Возвращаемое значение:
//  Структура - описание процесса со следующими полями:
//                 ВремяОжидания - Число, время ожидания процессом на блокировке
//                 Текст - Строка, текст запроса
//
Функция ПолучитьОписаниеПроцесса(Документ, УзелПроцессов, ИдентификаторПроцесса) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелПроцессов);
	ОписаниеПроцесса = Новый Структура;
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"process[@id=""" + ИдентификаторПроцесса + """]/@waittime",
		УзелПроцессов,
		Разыменовыватель).ПолучитьСледующий();
		
	ВремяОжидания = ?(Результат <> Неопределено, Число(Результат.Значение), 0);
	ОписаниеПроцесса.Вставить("ВремяОжидания", ВремяОжидания);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"process[@id=""" + ИдентификаторПроцесса + """]/executionStack/frame/text()",
		УзелПроцессов,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Результат <> Неопределено Тогда
		ОписаниеПроцесса.Вставить("Текст", Результат.ТекстовоеСодержимое);
	КонецЕсли;
	
	Возврат ОписаниеПроцесса;
	
КонецФункции // ПолучитьОписаниеПроцесса()

// Получить свойства процесса
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелПроцессов - ЭлементDOM, узел процессов взаимоблокировки
//  ИдентификаторПроцесса - Строка, идентификатор процесса
//
// Возвращаемое значение:
//  Структура - свойства процесса со следующими полями:
//              Свойство - Строка, наименование свойства
//              Значение - Строка, значение свойства
//
Функция ПолучитьСвойстваПроцесса(Документ, УзелПроцессов, ИдентификаторПроцесса) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелПроцессов);
	Узел = Документ.ВычислитьВыражениеXPath(
		"process[@id=""" + ИдентификаторПроцесса + """]",
		УзелПроцессов,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Узел <> Неопределено Тогда
		Возврат ПолучитьСвойстваУзла(Документ, Узел);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСвойстваПроцесса()

// Получить запрос процесса
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелПроцессов - ЭлементDOM, узел процессов взаимоблокировки
//  ИдентификаторПроцесса - Строка, идентификатор процесса
//
// Возвращаемое значение:
//  Строка - запрос процесса
//
Функция ПолучитьЗапросПроцесса(Документ, УзелПроцессов, ИдентификаторПроцесса) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелПроцессов);
	Узел = Документ.ВычислитьВыражениеXPath(
		"process[@id=""" + ИдентификаторПроцесса + """]/executionStack/frame[@procname=""adhoc""]",
		УзелПроцессов,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Узел = Неопределено Или СокрЛП(Узел.ТекстовоеСодержимое) = "unknown" Тогда
		Узел = Документ.ВычислитьВыражениеXPath(
			"process[@id=""" + ИдентификаторПроцесса + """]/inputbuf",
			УзелПроцессов,
			Разыменовыватель).ПолучитьСледующий();
	КонецЕсли;
		
	Если Узел <> Неопределено Тогда
		Возврат Узел.ТекстовоеСодержимое;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьЗапросПроцесса()

// Получить свойства узла DOM
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  Узел - ЭлементDOM, узел
//
// Возвращаемое значение:
//  Структура - свойства узла со следующими полями:
//              Свойство - Строка, наименование свойства
//              Значение - Строка, значение свойства
//
Функция ПолучитьСвойстваУзла(Документ, Узел)
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(Узел);
	Свойства = Новый ТаблицаЗначений;
	Свойства.Колонки.Добавить("Свойство");
	Свойства.Колонки.Добавить("Значение");
	
	Результат = Документ.ВычислитьВыражениеXPath("./@*", Узел, Разыменовыватель);
		
	Если Результат <> Неопределено Тогда
		
		Свойство = Результат.ПолучитьСледующий();
		
		Пока Свойство <> Неопределено Цикл
			
			СтрокаСвойства = Свойства.Добавить();
			СтрокаСвойства.Свойство = Свойство.Имя;
			СтрокаСвойства.Значение = Свойство.Значение;
			Свойство = Результат.ПолучитьСледующий();
			
		КонецЦикла;
		
		Свойства.Сортировать("Свойство");
		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции // ПолучитьСвойстваПроцесса()

// Получить массив идентификаторов блокировок ресурсов
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелРесурсов - ЭлементDOM, узел блокировок ресурсов
//
// Возвращаемое значение:
//  Массив - массив идентификаторов блокировок ресурсов
//
Функция ПолучитьИдентификаторыБлокировокРесурсов(Документ, УзелРесурсов) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелРесурсов);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"./*/@id",
		УзелРесурсов,
		Разыменовыватель);
		
	ИдентификаторыБлокировокРесурсов = Новый Массив();
		
	Если Результат <> Неопределено Тогда
		Идентификатор = Результат.ПолучитьСледующий();
		
		Пока Идентификатор <> Неопределено Цикл
			ИдентификаторыБлокировокРесурсов.Добавить(Идентификатор.Значение);
			Идентификатор = Результат.ПолучитьСледующий();
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИдентификаторыБлокировокРесурсов;
	
КонецФункции // ПолучитьИдентификаторыБлокировокРесурсов()

// Получить описание блокировки ресурса
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелБлокировки - ЭлементDOM, узел блокировки ресурса
//
// Возвращаемое значение:
//  Структура - описание блокировки ресурса со следующими полями:
//              ТипРесурса - Строка, тип блокируемого ресурса
//              ИмяБлокируемогоРесурса - Строка, имя блокируемого ресурса
//              Индекс - Строка, имя индекса блокируемого ресурса
//
Функция ПолучитьОписаниеБлокировкиРесурса(Документ, УзелБлокировки) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелБлокировки);
	ОписаниеБлокировкиРесурса = Новый Структура;
	ОписаниеБлокировкиРесурса.Вставить("Гранулярность");
	ОписаниеБлокировкиРесурса.Вставить("Идентификатор");
	ОписаниеБлокировкиРесурса.Вставить("Имя");
	ОписаниеБлокировкиРесурса.Вставить("ИмяБД");
	ОписаниеБлокировкиРесурса.Вставить("Индекс");
	ОписаниеБлокировкиРесурса.Вставить("ИдентификаторОбъекта");
	
	Результат = Документ.ВычислитьВыражениеXPath(
		".",
		УзелБлокировки,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Результат <> Неопределено Тогда
		ОписаниеБлокировкиРесурса.Вставить("Гранулярность", ПолучитьГранулярность(Результат.ИмяЭлемента));
	КонецЕсли;
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"@id",
		УзелБлокировки,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Результат <> Неопределено Тогда
		ОписаниеБлокировкиРесурса.Вставить("Идентификатор", ПолучитьИмяРесурсаИБ(Результат.Значение));
	КонецЕсли;
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"@objectname",
		УзелБлокировки,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Результат <> Неопределено Тогда
		ПолноеИмяРесурса = ПолучитьИмяРесурсаИБ(Результат.Значение);
		СоставляющиеРесурса = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(ПолноеИмяРесурса, ".");
		ОписаниеБлокировкиРесурса.Вставить("Имя", СоставляющиеРесурса[СоставляющиеРесурса.Количество() - 1]);
		ОписаниеБлокировкиРесурса.Вставить("ИмяБД", СоставляющиеРесурса[0]);
	КонецЕсли;
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"@indexname",
		УзелБлокировки,
		Разыменовыватель).ПолучитьСледующий();
		
	Индекс = ?(Результат <> Неопределено, ПолучитьИмяРесурсаИБ(Результат.Значение), Неопределено);
	ОписаниеБлокировкиРесурса.Вставить("Индекс", Индекс);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"@associatedObjectId",
		УзелБлокировки,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Результат <> Неопределено Тогда
		ОписаниеБлокировкиРесурса.Вставить("ИдентификаторОбъекта", ПолучитьИмяРесурсаИБ(Результат.Значение));
	КонецЕсли;
	
	Возврат ОписаниеБлокировкиРесурса;
	
КонецФункции // ПолучитьОписаниеБлокировкиРесурса()

// Получить массив идентификаторов владельцев блокировки
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелБлокировки - ЭлементDOM, узел блокировки ресурса
//
// Возвращаемое значение:
//  Массив - массив идентификаторов владельцев блокировки
//
Функция ПолучитьИдентификаторыВладельцевБлокировки(Документ, УзелБлокировки) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелБлокировки);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"owner-list/owner/@id",
		УзелБлокировки,
		Разыменовыватель);
		
	ИдентификаторыВладельцевБлокировки = Новый Массив();
		
	Если Результат <> Неопределено Тогда
		Идентификатор = Результат.ПолучитьСледующий();
		
		Пока Идентификатор <> Неопределено Цикл
			ИдентификаторыВладельцевБлокировки.Добавить(Идентификатор.Значение);
			Идентификатор = Результат.ПолучитьСледующий();
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИдентификаторыВладельцевБлокировки;
	
КонецФункции // ПолучитьИдентификаторыВладельцевБлокировки()

// Получить описание владельцев блокируемого ресурса
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелБлокировки - ЭлементDOM, узел блокировки ресурса
//  ИдентификаторВладельцаБлокировки - Строка, идентификатор владельца блокировки
//
// Возвращаемое значение:
//  Структура - описание владельуа блокировки
//              РежимБлокировки - Строка, режим блокировки
//
Функция ПолучитьОписаниеВладельцаБлокировки(Документ, УзелБлокировки, ИдентификаторВладельцаБлокировки) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелБлокировки);
	ОписаниеВладельцаБлокировки = Новый Структура;
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"owner-list/owner[@id=""" + ИдентификаторВладельцаБлокировки + """]/@mode",
		УзелБлокировки,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Результат <> Неопределено Тогда
		ОписаниеВладельцаБлокировки.Вставить("РежимБлокировки", ПолучитьРежимБлокировки(Результат.Значение));
	КонецЕсли;
	
	ОписаниеВладельцаБлокировки.Вставить("СостояниеБлокировки", Перечисления.СостоянияБлокировок.Установлена);
	
	Возврат ОписаниеВладельцаБлокировки;
	
КонецФункции // ПолучитьОписаниеВладельцаБлокировки()

// Получить массив идентификаторов процессов ожидающих на блокировке
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелБлокировки - ЭлементDOM, узел блокировки ресурса
//
// Возвращаемое значение:
//  Массив - массив идентификаторов процессов ожидающих на блокировке
//
Функция ПолучитьИдентификаторыОжидающихНаБлокировке(Документ, УзелБлокировки) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелБлокировки);
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"waiter-list/waiter/@id",
		УзелБлокировки,
		Разыменовыватель);
		
	ИдентификаторыОжидающихНаБлокировке = Новый Массив();
		
	Если Результат <> Неопределено Тогда
		Идентификатор = Результат.ПолучитьСледующий();
		
		Пока Идентификатор <> Неопределено Цикл
			ИдентификаторыОжидающихНаБлокировке.Добавить(Идентификатор.Значение);
			Идентификатор = Результат.ПолучитьСледующий();
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИдентификаторыОжидающихНаБлокировке;
	
КонецФункции // ПолучитьИдентификаторыОжидающихНаБлокировке()

// Получить описание владельцев блокируемого ресурса
//
// Параметры:
//  Документ - ДокументDOM, граф взаимоблокировки в виде DOM
//  УзелБлокировки - ЭлементDOM, узел блокировки ресурса
//  ИдентификаторОжидающегоНаБлокировке - Строка, идентификатор ожидающего на блокировке
//
// Возвращаемое значение:
//  Структура - описание владельуа блокировки
//              РежимБлокировки - Строка, режим блокировки
//              СостояниеБлокировки - Строка, режим ожидания блокировки
//
Функция ПолучитьОписаниеОжидающегоНаБлокировке(Документ, УзелБлокировки, ИдентификаторОжидающегоНаБлокировке) Экспорт
	
	Разыменовыватель = Документ.СоздатьРазыменовательПИ(УзелБлокировки);
	ОписаниеОжидающегоНаБлокировке = Новый Структура;
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"waiter-list/waiter[@id=""" + ИдентификаторОжидающегоНаБлокировке + """]/@mode",
		УзелБлокировки,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Результат <> Неопределено Тогда
		ОписаниеОжидающегоНаБлокировке.Вставить("РежимБлокировки", ПолучитьРежимБлокировки(Результат.Значение));
	КонецЕсли;
	
	Результат = Документ.ВычислитьВыражениеXPath(
		"waiter-list/waiter[@id=""" + ИдентификаторОжидающегоНаБлокировке + """]/@requestType",
		УзелБлокировки,
		Разыменовыватель).ПолучитьСледующий();
		
	Если Результат <> Неопределено Тогда
		ОписаниеОжидающегоНаБлокировке.Вставить("СостояниеБлокировки", ПолучитьСостояниеБлокировки(Результат.Значение));
	КонецЕсли;
	
	Возврат ОписаниеОжидающегоНаБлокировке;
	
КонецФункции // ПолучитьОписаниеОжидающегоНаБлокировке()

// Получить гранулярность ресурса из строкового представления
//
// Параметры:
//  СтроковоеПредставление - Строка, строковое представление блокируемого ресурса
//
// Возвращаемое заначение:
//  Перечисления.ТипРесурса - тип блокируемого ресурса в виде перечисления
//
Функция ПолучитьГранулярность(СтроковоеПредставление)
	
	Представление = ВРег(СтроковоеПредставление);
	
	Если Представление = "KEYLOCK" Тогда
		Возврат Перечисления.ВидыГранулярностиБлокировок.Ключ;
	ИначеЕсли Представление = "PAGELOCK" Тогда
		Возврат Перечисления.ВидыГранулярностиБлокировок.Страница;
	ИначеЕсли Представление = "RIDLOCK" Тогда
		Возврат Перечисления.ВидыГранулярностиБлокировок.Строка;
	ИначеЕсли Представление = "OBJECTLOCK" Тогда
		Возврат Перечисления.ВидыГранулярностиБлокировок.Таблица;
	Иначе
		Возврат Перечисления.ВидыГранулярностиБлокировок.Неизвестно;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьГранулярность()

// Получить тип ожидания на блокировке из строкового представления
//
// Параметры:
//  СтроковоеПредставление - Строка, тип ожидания на блокировке
//
// Возвращаемое значение:
//  Перечисление.СостояниеБлокировки - тип ожидания на блокировке в виде перечисления
Функция ПолучитьСостояниеБлокировки(СтроковоеПредставление)
	
	Представление = ВРег(СтроковоеПредставление);
	
	Если Представление = "CONVERT" Тогда
		Возврат Перечисления.СостоянияБлокировок.Преобразование;
	ИначеЕсли Представление = "WAIT" Тогда
		Возврат Перечисления.СостоянияБлокировок.Ожидание;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСостояниеБлокировки()

// Получить имя ресурса в представлении информационной базы из представления СУБД
//
// Параметры:
//  ИмяРесурсаСУБД - Строка, имя ресурса в представлении СУБД
//
// Возвращаемое значение:
//  Строка - имя ресурса в представлении информационной базы
//
Функция ПолучитьИмяРесурсаИБ(ИмяРесурсаСУБД)
	
	Возврат ИмяРесурсаСУБД;
	
КонецФункции // ПолучитьИмяРесурсаИБ()


///////////////////////////////////////////////////////////////////////////////
// ЗАПРОСЫ

// Получить текст запроса в котором вместо параметров @Pn будут параметры ?
//
// Параметры:
//  Запрос - Строка, запрос с параметрами типа @P
//
// Возвращаемое значение:
//  Строка - Запрос с параметрами типа ?
//
Функция ПолучитьТекстЗапросаСПараметрамиВопросами(Знач Запрос) Экспорт
	
	НомерПараметра = ОпределитьМаксимальныйПараметр(Запрос);
	
	Пока НомерПараметра > 0 Цикл
		ИмяПараметра = "@P" + Формат(НомерПараметра, "ЧГ=0");
		Запрос = СтрЗаменить(Запрос, ИмяПараметра, "?");
		НомерПараметра = НомерПараметра - 1;
	КонецЦикла;
	
	// Удаление блока вида "(? varbinary(1),? varbinary(16),? varbinary(8000))"
	Если Сред(Запрос, 1, 1) = "(" Тогда
		УровеньВложенности = 1;
		Для Сч = 2 По СтрДлина(Запрос) Цикл
			Если Сред(Запрос, Сч, 1) = "(" Тогда
				УровеньВложенности = УровеньВложенности + 1;
			ИначеЕсли Сред(Запрос, Сч, 1) = ")" Тогда
				УровеньВложенности = УровеньВложенности - 1;
			КонецЕсли;
			
			Если УровеньВложенности = 0 Тогда
				Запрос = Сред(Запрос, Сч+1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции // ПолучитьТекстЗапросаСПараметрамиВопросами()

// Определить максимальный номер параметра в запросе
//
// Параметры:
//  Запрос - Строка, исходный запрос
//
// Возвращаемое значение:
//  Число - максимальный номер параметра
//
Функция ОпределитьМаксимальныйПараметр(Знач Запрос)
	
	Перем Позиция;
	Перем Длина;
	
	МаксЗначение = 0;
	
	Пока Истина Цикл
		ПозицияПараметра = СтрНайти(Запрос, "@P");
		
		Если ПозицияПараметра = 0 Тогда
			Прервать;
		Иначе
			Запрос = Прав(Запрос, СтрДлина(Запрос) - ПозицияПараметра - 1);
			
			Если ОбщегоНазначенияКлиентСервер.НайтиЧислоВСтроке(Запрос, Позиция, Длина) Тогда
				Значение = Число(Сред(Запрос, Позиция, Длина));
				
				Если Значение > МаксЗначение Тогда
					МаксЗначение = Значение;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксЗначение;
	
КонецФункции // ОпределитьМаксимальныйПараметр()


///////////////////////////////////////////////////////////////////////////////
// ВРЕМЯ

// Преобразовать время из формата MSSQL в тики
//
// Параметры:
//  ВремяMSSQL - Строка, время в формате MSSQL
//
// Возвращаемое значение:
//  Число - количество тиков
//
Функция ВремяMSSQLВТики(ВремяMSSQL) Экспорт
	
	Время1С = ВремяMSSQLВоВремя1С(ВремяMSSQL);
	СтрокаМиллисекунд = Сред(ВремяMSSQL, 21, 3);
	Миллисекунды = 0;
	
	Если Не ПустаяСтрока(СтрокаМиллисекунд) Тогда
		Миллисекунды = Число(СтрокаМиллисекунд) * 10000;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПреобразоватьДатуВСекунды(Время1С) * 10000000 + Миллисекунды;
	
КонецФункции // ВремяMSSQLВТики()

// Преобразовать время из формата MSSQL в тики
//
// Параметры:
//  ВремяMSSQL - Строка, время в формате MSSQL
//
// Возвращаемое значение:
//  Число - количество тиков
//
Функция ВремяMSSQLВоВремя1С(ВремяMSSQL) Экспорт
	
	Возврат Дата(Сред(ВремяMSSQL, 1, 4)
		+ Сред(ВремяMSSQL, 6, 2)
		+ Сред(ВремяMSSQL, 9, 2)
		+ Сред(ВремяMSSQL, 12, 2)
		+ Сред(ВремяMSSQL, 15, 2)
		+ Сред(ВремяMSSQL, 18, 2));
	
КонецФункции // ВремяMSSQLВТики()


///////////////////////////////////////////////////////////////////////////////
// БЛОКИРОВКИ

// Получить режим блокировки из строкового представления
//
// Параметры:
//  СтроковоеПредставление - Строка, режим блокировки в виде строки
//
// Возвращаемое значение:
//  Перечисления.Режимлокировки - режим блокировки в виде перечисления
//
Функция ПолучитьРежимБлокировки(СтроковоеПредставление) Экспорт
	
	Представление = ВРег(СтроковоеПредставление);
	
	Если Представление = "S" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_S;
	ИначеЕсли Представление = "U" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_U;
	ИначеЕсли Представление = "X" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_X;
	ИначеЕсли Представление = "IS" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_IS;
	ИначеЕсли Представление = "IU" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_IU;
	ИначеЕсли Представление = "IX" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_IX;
	ИначеЕсли Представление = "SIU" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_SIU;
	ИначеЕсли Представление = "SIX" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_SIX;
	ИначеЕсли Представление = "UIX" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_UIX;
	ИначеЕсли Представление = "RANGES-S" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_RangeS_S;
	ИначеЕсли Представление = "RANGES-U" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_RangeS_U;
	ИначеЕсли Представление = "RANGEX-S" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_RangeX_S;
	ИначеЕсли Представление = "RANGEX-U" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_RangeX_U;
	ИначеЕсли Представление = "RANGEX-X" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_RangeX_X;
	ИначеЕсли Представление = "RANGEI-N" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_RangeI_N;
	ИначеЕсли Представление = "RANGEI-S" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_RangeI_S;
	ИначеЕсли Представление = "RANGEI-U" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_RangeI_U;
	ИначеЕсли Представление = "RANGEI-X" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_RangeI_X;
	ИначеЕсли Представление = "SCH-S" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_Sch_S;
	ИначеЕсли Представление = "SCH-M" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_Sch_M;
	ИначеЕсли Представление = "BU" Тогда
		Возврат Перечисления.РежимыБлокировок.MSSQL_BU;
	Иначе
		Возврат Перечисления.РежимыБлокировок.Неизвестный;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьРежимБлокировки()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьИдентификаторБазыДанных(ОписаниеИБ) Экспорт
	
	СерверСУБД = КипВнешнийКомпонент.ПолучитьMSSQL();
	MSSQL.ПодключитьMSSQL(СерверСУБД, ОписаниеИБ);
	
	ТекстЗапроса = "
		|select db_id('" + ОписаниеИБ.ИмяБД + "') as dbid";
		
	КипВнешнийКомпонент.ВыполнитьЗапросMSSQL(СерверСУБД, ТекстЗапроса);
	КипВнешнийКомпонент.ЕстьЗаписьMSSQL(СерверСУБД);
	ИдентификаторБД = КипВнешнийКомпонент.ЗначениеПоляMSSQL(СерверСУБД, "dbid");
	
	Возврат ИдентификаторБД;
	
КонецФункции // ПолучитьИдентификаторБазыДанных()

