///////////////////////////////////////////////////////////////////////////////
// АНАЛИЗ ОЖИДАНИЙ НА БЛОКИРОВКАХ В УПРАВЛЯЕМОМ РЕЖИМЕ

// Включить сбор информации для анализа ожиданий на блокировках.
// Включается технологический журнал на сервере иследуемой информационной базы.
//
Функция ВключитьСборБлокировок(ИБ, Показатели) Экспорт
	
	ОтладкаКлиентСервер.Действие("ВключитьСборБлокировок1С");
	
	Описатель = ТехнологическийЖурнал.ВключитьТехнологическийЖурнал(
		ТехнологическийЖурнал.КонфигурацияАнализаБлокировок1С(ИБ.ИмяИБ),
		ИБ.ИменаКаталоговТЖ
	);
	
	// Зафиксировать каталоги ТЖ
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализОжиданийНаБлокировках);
	СтрокаПоказателя.ЗамерАнализБлокировок1С = Замер.СоздатьЗамер(
		ИБ,
		СтрокаПоказателя.Показатель,
		СтрокаПоказателя.Экземпляр,
		ИБ.ТипСУБД,,
		Перечисления.ТипыБлокировок.Блокировка1СПредприятия);
	Замер.УстановитьКаталогиТЖ(СтрокаПоказателя.ЗамерАнализБлокировок1С, Описатель.КаталогиТЖ);
	
	ОтладкаКлиентСервер.Результат("ВключитьСборБлокировок1С");
	
	Возврат Описатель;
	
КонецФункции // ВключитьСборБлокировок()

// Отключить сбор информации для анализа ожиданий на блокировках
//
Процедура ОтключитьСборБлокировок(ИБ, Показатели, ОписательТЖ, АнализНеобходим) Экспорт
	
	ОтладкаКлиентСервер.Действие("ОтключитьСборБлокировок1С");
	
	// Отключить технологический журнал
	ТехнологическийЖурнал.ОтключитьТехнологическийЖурнал(
		ОписательТЖ,
		ИБ.ИменаКаталоговТЖ);
		
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализОжиданийНаБлокировках);
	Замер.ЗавершитьЗамер(СтрокаПоказателя.ЗамерАнализБлокировок1С);
	
	Если Не АнализНеобходим Тогда
		Замер.Отменить(СтрокаПоказателя.ЗамерАнализБлокировок1С);
	КонецЕсли;
	
	ОтладкаКлиентСервер.Результат("ОтключитьСборБлокировок1С");
	
КонецПроцедуры // ОтключитьСборБлокировок()

// Функция выполняет анализ ожиданий на блокировках по данным из регистра
// сведений ТехнологическийЖурнал.
//
Процедура ПроанализироватьБлокировки(КонтекстАнализа) Экспорт
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьБлокировки1С");
	КоличествоОжиданий = 0;
	ПодготовитьИсходныеДанные(КонтекстАнализа);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СобытиеContext", "Context");
	Запрос.УстановитьПараметр("ДокументЗамер", КонтекстАнализа.Замер);
	Запрос.УстановитьПараметр("Период", КонтекстАнализа.Замер.Дата);
	
	ПодготовитьДанные(Запрос);
	ОпределитьВиновников(Запрос);
	ОпределитьКонтекстыЖертв(Запрос);
	ОпределитьКонтекстыВиновников(Запрос);
	ВыборкаМоментВремени = ПолучитьРезультатАнализа(Запрос);
	
	Пока ВыборкаМоментВремени.Следующий() Цикл
		ВыборкаСоединения = ВыборкаМоментВремени.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСоединения.Следующий() Цикл
			ВыборкаБлокировки = ВыборкаСоединения.Выбрать();
			
			Пока ВыборкаБлокировки.Следующий() Цикл
				
				НачатьТранзакцию();
				
				Попытка
					ЗафиксироватьОжидание(ВыборкаБлокировки, КонтекстАнализа, Инструменты);
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
				
				ЗафиксироватьТранзакцию();
				КоличествоОжиданий = КоличествоОжиданий + 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОтладкаКлиентСервер.Результат("ПроанализироватьБлокировки1С", КоличествоОжиданий);
	
КонецПроцедуры // ПроанализироватьБлокировки()

// Создать документ описывающий ожидание на блокировке
//
Процедура ЗафиксироватьОжидание(РезультатЗапроса, КонтекстАнализа, Инструменты)
	
	Жертва = СоздатьСтруктуруБлокировки(
		РезультатЗапроса.МоментВремениЖертвы,
		РезультатЗапроса.СоединениеЖертвы,
		Строка(РезультатЗапроса.КонтекстКлиентаЖертвы) + Строка(РезультатЗапроса.КонтекстСервераЖертвы),
		РезультатЗапроса.ВремяВыполненияМсЖертвы,
		РезультатЗапроса.ДатаВремяСобытияЖертвы,
		РезультатЗапроса.КомпьютерЖертвы,
		РезультатЗапроса.ИмяПользователяЖертвы,
		РезультатЗапроса.ИмяРесурса,
		РезультатЗапроса.РежимБлокировкиЖертвы,
		КонтекстАнализа);
	Жертва.Вставить("Состояние", Перечисления.СостоянияБлокировок.Ожидание);
	
	Виновник = СоздатьСтруктуруБлокировки(
		РезультатЗапроса.МоментВремениВиновника,
		РезультатЗапроса.СоединениеВиновника,
		Строка(РезультатЗапроса.КонтекстКлиентаВиновника) + Строка(РезультатЗапроса.КонтекстСервераВиновника),
		РезультатЗапроса.ВремяВыполненияМсВиновника,
		РезультатЗапроса.ДатаВремяСобытияВиновника,
		РезультатЗапроса.КомпьютерВиновника,
		РезультатЗапроса.ИмяПользователяВиновника,
		РезультатЗапроса.ИмяРесурса,
		РезультатЗапроса.РежимБлокировкиВиновника,
		КонтекстАнализа);
	Виновник.Вставить("Состояние", Перечисления.СостоянияБлокировок.Установлена);
	
	СчетчикОжиданий = Справочники.СчетчикиОжиданий.СоздатьЭлемент();
	СчетчикОжиданий.Владелец = КонтекстАнализа.Замер.ИнформационнаяБаза;
	СчетчикОжиданий.Количество = 0;
	СчетчикОжиданий.Записать();
	
	СтруктураДанных.ЗафиксироватьОжиданиеНаБлокировке(
		Жертва,
		Виновник,
		Перечисления.ТипыБлокировок.Блокировка1СПредприятия,
		СчетчикОжиданий.Ссылка,
		КонтекстАнализа,
		Инструменты);
	
КонецПроцедуры // ЗафиксироватьОжидание();

// Зафиксировать выполнение запроса
//
// Параметры:
//  МоментВремени - Число, момент времени выполнения запроса
//  Соединение - Число, номер соединения выполнения запроса
//  ТекстКонтекста - Строка, стек вызовов при выполнении запроса
//  ВремяВыполненияМс - Число, длительность выполнения запроса
//  ДатаВремяСобытия - ДатаВремя
//  Компьютер - Строка, компьютер пользователя, который выполнял запрос
//  ИмяРесурса - Строка, полное имя ресурс на котором произошла блокировка
//
// Возвращаемое значение:
//  Структура, структура для фиксации блокировки
//
Функция СоздатьСтруктуруБлокировки(МоментВремени,
                                   Соединение,
                                   ТекстКонтекста,
                                   ВремяВыполненияМс,
                                   ДатаВремяСобытия,
                                   Компьютер,
                                   Пользователь,
                                   Знач ИмяРесурса,
                                   РежимБлокировки,
                                   КонтекстАнализа) Экспорт
	
	СтруктураХраненияБазы = КонтекстАнализа.СтруктураБазы.SDBL;
	ИменаРесурса = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(ИмяРесурса, ".");
	ИмяТаблицы = ИменаРесурса[0];
	Если ИменаРесурса.Количество() > 1 Тогда
		ИмяИндекса = Лев(ИменаРесурса[1], СтрНайти(ИменаРесурса[1], " ") - 1);
	КонецЕсли;
	ИмяТаблицы1С = СтруктураМетаданных.ПолучитьИмяТаблицы1С(
		СтруктураХраненияБазы,
		ИмяТаблицы);
	
	Попытка
		ИмяИндекса = СловарьКлиентСервер.Получить(ИмяИндекса);
	Исключение
	КонецПопытки;
	
	// Создание соответствия измерений для помещения в справочник Ресурс
	Измерения = Новый Соответствие;
    
    ЕстьЗамена = Ложь;
	ИндексКавычки = СтрНайти(ИмяРесурса, """");
	Если ИндексКавычки > 0 Тогда
		ЕстьЗамена = Истина;
		ИмяРесурса = ЗаменитьСимволыВнутриДвойныхКавычек(ИмяРесурса);
	КонецЕсли;
    
	Ресурсы = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(ИмяРесурса, " ");
	Для Каждого Ресурс Из Ресурсы Цикл
		
		Если Не СтрНайти(Ресурс, "=") Тогда
			Продолжить;
        КонецЕсли;
        
        Если ЕстьЗамена Тогда
           Ресурс = ВернутьСимволыВнутриДвойныхКавычек(Ресурс);
        КонецЕсли;
        		
		ИзмеренияМассив = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Ресурс, "=");
		ИмяВТерминахМетаданных = "";
		СтрокаТаблицы = СтруктураХраненияБазы.Найти(ИмяТаблицы, "ИмяТаблицыХранения");
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаПоля = СтрокаТаблицы.Поля.Найти(ИзмеренияМассив[0], "ИмяПоляХранения");
			Если СтрокаПоля <> Неопределено Тогда
				ИмяВТерминахМетаданных = СтрокаПоля.ИмяПоля;
			КонецЕсли;
		КонецЕсли;
		Измерения.Вставить(ИзмеренияМассив[0] + 
			?(ИмяВТерминахМетаданных = "", "", "(" + ИмяВТерминахМетаданных + ")"), ИзмеренияМассив[1]);
		
	КонецЦикла;
	
	
	Ресурс = СтруктураДанных.ПолучитьСтруктуруРесурса(ИмяТаблицы1С, ИмяТаблицы, ИмяИндекса, Измерения);
	
	СтруктураБлокировки = Новый Структура;
	СтруктураБлокировки.Вставить("Запрос", Неопределено);
	СтруктураБлокировки.Вставить("КонтекстВыполнения", ТекстКонтекста);
	СтруктураБлокировки.Вставить("ВремяВыполненияМс", ВремяВыполненияМс);
	СтруктураБлокировки.Вставить("МоментВремениОкончания", МоментВремени);
	СтруктураБлокировки.Вставить("ДатаВремяСобытия", ДатаВремяСобытия);
	СтруктураБлокировки.Вставить("Пользователь", "");
	СтруктураБлокировки.Вставить("Компьютер", Компьютер);
	СтруктураБлокировки.Вставить("Пользователь", Пользователь);
	СтруктураБлокировки.Вставить("НомерСоединения", Соединение);
	СтруктураБлокировки.Вставить("Ресурс", Ресурс);
	СтруктураБлокировки.Вставить("Режим", РежимБлокировки);
	СтруктураБлокировки.Вставить("Гранулярность", Перечисления.ВидыГранулярностиБлокировок.Неизвестно);
	СтруктураБлокировки.Вставить("СтатусИнформации", Перечисления.СтатусыИнформации.ТочныеДанные);
	СтруктураБлокировки.Вставить("ТипВыполнения", Перечисления.ТипыВыполненийКода.УстановкаБлокировки);
	
	Возврат СтруктураБлокировки;
	
КонецФункции // СоздатьСтруктуруБлокировки

// Подготовить исходные данные для анализа
//
Процедура ПодготовитьИсходныеДанные(КонтекстАнализа) Экспорт
	
	ТехнологическийЖурнал.ОчиститьИсходныеДанныеДляАнализа(КонтекстАнализа.Замер);
	
	НаборЗначенийРесурсов = РегистрыСведений.ЗначенияПолейРесурсов.СоздатьНаборЗаписей();
	НаборЗначенийРесурсов.Отбор.Регистратор.Установить(КонтекстАнализа.Замер);
	НаборЗначенийРесурсов.Записать(Истина);
	КэшОписанийБлокировок = Неопределено;
	
	// Определение жертв и запись исходных данных анализа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическийЖурнал.МоментВремени КАК МоментВремениЖертвы,
	|	ТехнологическийЖурнал.connectID КАК СоединениеЖертвы,
	|	ТехнологическийЖурнал.WaitConnections КАК БлокирующиеСоединения,
	|	ТехнологическийЖурнал.Locks КАК Блокировки
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|ГДЕ
	|	ТехнологическийЖурнал.Период = &Период
	|	И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
	|	И ТехнологическийЖурнал.Событие = &Событие
	|	И (НЕ ТехнологическийЖурнал.WaitConnections ПОДОБНО """")";
	
	Запрос.УстановитьПараметр("Событие", "TLOCK");
	Запрос.УстановитьПараметр("ДокументЗамер", КонтекстАнализа.Замер);
	Запрос.УстановитьПараметр("Период", КонтекстАнализа.Замер.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборИсточника = РегистрыСведений.ИсточникиАнализаТЖ.СоздатьНаборЗаписей();
	НаборИсточника.Отбор.Регистратор.Установить(КонтекстАнализа.Замер);
	
	НаборЗначенияПолей = РегистрыСведений.ЗначенияПолейРесурсов.СоздатьНаборЗаписей();
	НаборЗначенияПолей.Отбор.Регистратор.Установить(КонтекстАнализа.Замер);
	
	Пока Выборка.Следующий() Цикл
		
		БлокирующиеПроцессы = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Выборка.БлокирующиеСоединения, ",");
		
		ЗаблокированныеРесурсы = РазобратьЗаблокированныеРесурсы(
			КэшОписанийБлокировок,
			НаборЗначенияПолей,
			КонтекстАнализа.Замер,
			Строка(Выборка.Блокировки),
			Выборка.СоединениеЖертвы,
			Выборка.МоментВремениЖертвы
		);
		
		НомерБлокировки = 0; // Для обеспечения уникальности в ИсточникАнализаТЖ
		Для каждого БлокирующийПроцесс Из БлокирующиеПроцессы Цикл
			
			БлокирующийПроцесс = Число(БлокирующийПроцесс);
			
			СтрокаНабораИсточника = НаборИсточника.Добавить();
			СтрокаНабораИсточника.Период = КонтекстАнализа.Замер.Дата;
			СтрокаНабораИсточника.МоментВремениЖертвы = Выборка.МоментВремениЖертвы;
			СтрокаНабораИсточника.СоединениеЖертвы = Выборка.СоединениеЖертвы;
			СтрокаНабораИсточника.НомерБлокировки = НомерБлокировки;
			СтрокаНабораИсточника.БлокирующийПроцесс = БлокирующийПроцесс;
			СтрокаНабораИсточника.Владелец = КонтекстАнализа.Замер;
			НомерБлокировки = НомерБлокировки + 1;
			
			Для Каждого ЗаблокированныйРесурс Из ЗаблокированныеРесурсы Цикл
				ПодготовитьПредполагаемыхВиновников(
					КэшОписанийБлокировок,
					НаборЗначенияПолей,
					КонтекстАнализа.Замер,
					БлокирующийПроцесс,
					Выборка.МоментВремениЖертвы,
					ЗаблокированныйРесурс.Ресурс,
					ЗаблокированныйРесурс.Режим
				);
			КонецЦикла;
			
			Если НаборИсточника.Количество() = 1000 Тогда
				НаборИсточника.Записать(Ложь);
				НаборИсточника.Очистить();
			КонецЕсли;
			
			Если НаборЗначенияПолей.Количество() = 1000 Тогда
				НаборЗначенияПолей.Записать(Ложь);
				НаборЗначенияПолей.Очистить();
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если НаборИсточника.Количество() > 0 Тогда
		НаборИсточника.Записать(Ложь);
	КонецЕсли;
	Если НаборЗначенияПолей.Количество() > 0 Тогда
		НаборЗначенияПолей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьИсходныеДанные()

Процедура ПодготовитьПредполагаемыхВиновников(КэшОписанийБлокировок, НаборЗначенияПолей, ДокументЗамер, БлокирующийПроцесс, МоментВремениЖертвы, Ресурс, РежимЖертвы)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("connectID", БлокирующийПроцесс);
	Запрос.УстановитьПараметр("МоментВремениЖертвы", МоментВремениЖертвы);
	Запрос.УстановитьПараметр("Владелец", ДокументЗамер);
	Запрос.УстановитьПараметр("Период", ДокументЗамер.Дата);
	Запрос.УстановитьПараметр("Регистратор", ДокументЗамер);
	Запрос.УстановитьПараметр("Ресурс", "%" + Ресурс + ?(РежимЖертвы = Перечисления.РежимыБлокировок.Managed_Shared, " Exclusive", "") + "%");
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|ГДЕ
	|	ТехнологическийЖурнал.connectID = &connectID
	|	И ТехнологическийЖурнал.МоментВремени <= &МоментВремениЖертвы
	|	И ТехнологическийЖурнал.Период = &Период
	|	И ТехнологическийЖурнал.Регистратор = &Регистратор
	|	И ТехнологическийЖурнал.Событие = ""SDBL""
	|	И ТехнологическийЖурнал.Func ПОДОБНО ""BeginTransaction""
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		УслМоментВремени = "И ТЖ.МоментВремени МЕЖДУ &НачалоТранзакции И &МоментВремениЖертвы";
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос.УстановитьПараметр("НачалоТранзакции", Выборка.МоментВремени);
		КонецЕсли;
	Иначе
		УслМоментВремени = "И ТЖ.МоментВремени <= &МоментВремениЖертвы";
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЖ.МоментВремени КАК МоментВремениВиновника,
	|	ТЖ.Locks КАК Блокировки
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТЖ
	|ГДЕ
	|	ТЖ.connectID = &connectID
	|	" + УслМоментВремени + "
	|	И ТЖ.Владелец = &Владелец
	|	И ТЖ.Период = &Период
	|	И ТЖ.Регистратор = &Регистратор
	|	И ТЖ.Locks ПОДОБНО &Ресурс";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		РазобратьЗаблокированныеРесурсы(КэшОписанийБлокировок, НаборЗначенияПолей, ДокументЗамер, Строка(Выборка.Блокировки), БлокирующийПроцесс, Выборка.МоментВремениВиновника);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготовить данные
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
Процедура ПодготовитьДанные(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникАнализаТЖ.СоединениеЖертвы КАК СоединениеЖертвы,
	|	ИсточникАнализаТЖ.МоментВремениЖертвы КАК МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.НомерБлокировки КАК НомерБлокировки,
	|	МАКСИМУМ(ТехнологическийЖурнал.МоментВремени) КАК НачалоБлокирующейТранзакции
	|ПОМЕСТИТЬ ВсеЖертвы
	|ИЗ
	|	РегистрСведений.ИсточникиАнализаТЖ КАК ИсточникАнализаТЖ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|		ПО ИсточникАнализаТЖ.БлокирующийПроцесс = ТехнологическийЖурнал.connectID
	|			И ИсточникАнализаТЖ.МоментВремениЖертвы >= ТехнологическийЖурнал.МоментВремени
	|			И (ТехнологическийЖурнал.Владелец = &ДокументЗамер)
	|			И (ТехнологическийЖурнал.Событие = ""SDBL"")
	|			И (ТехнологическийЖурнал.Func ПОДОБНО ""BeginTransaction"")
	|			И (ТехнологическийЖурнал.Период = &Период)
	|			И (ТехнологическийЖурнал.Регистратор = &ДокументЗамер)
	|			И (ИсточникАнализаТЖ.Период = &Период)
	|			И (ИсточникАнализаТЖ.Регистратор = &ДокументЗамер)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникАнализаТЖ.СоединениеЖертвы,
	|	ИсточникАнализаТЖ.МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.НомерБлокировки";
	Запрос.Выполнить();
	
КонецПроцедуры // ПодготовитьДанные()

// Определить виновников жертв
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
Процедура ОпределитьВиновников(Запрос)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("МоментВремениЖертвы",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("СоединениеЖертвы",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("МоментВремениВиновника",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("СоединениеВиновника",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("РежимБлокировкиЖертвы",
		Новый ОписаниеТипов("ПеречислениеСсылка.РежимыБлокировок"));
	ТЗ.Колонки.Добавить("РежимБлокировкиВиновника",
		Новый ОписаниеТипов("ПеречислениеСсылка.РежимыБлокировок"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВсеЖертвы.СоединениеЖертвы,
	|	ВсеЖертвы.МоментВремениЖертвы,
	|	ВсеЖертвы.НомерБлокировки,
	|	ВсеЖертвы.НачалоБлокирующейТранзакции
	|ИЗ
	|	ВсеЖертвы КАК ВсеЖертвы";
	ВыборкаЖертв = Запрос.Выполнить().Выбрать();
	
	ПериодЗапроса = Неопределено;
	ДокументЗамер = Неопределено;
	Запрос.Параметры.Свойство("Период", ПериодЗапроса);
	Запрос.Параметры.Свойство("ДокументЗамер", ДокументЗамер);
	
	ЗапросВиновников = Новый Запрос;
	ЗапросВиновников.УстановитьПараметр("Период", ПериодЗапроса);
	ЗапросВиновников.УстановитьПараметр("ДокументЗамер", ДокументЗамер);
	Пока ВыборкаЖертв.Следующий() Цикл
		
		ЗапросВиновников.УстановитьПараметр("СоединениеЖертвы", ВыборкаЖертв.СоединениеЖертвы);
		ЗапросВиновников.УстановитьПараметр("МоментВремениЖертвы", ВыборкаЖертв.МоментВремениЖертвы);
		ЗапросВиновников.УстановитьПараметр("НачалоБлокирующейТранзакции", ВыборкаЖертв.НачалоБлокирующейТранзакции);
		ЗапросВиновников.УстановитьПараметр("НомерБлокировки", ВыборкаЖертв.НомерБлокировки);
		ЗапросВиновников.Текст = 
		"ВЫБРАТЬ
		|	ИсточникАнализаТЖ.СоединениеЖертвы КАК СоединениеЖертвы,
		|	ИсточникАнализаТЖ.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|	ИсточникАнализаТЖ.БлокирующийПроцесс КАК СоединениеВиновника,
		|	ЗначенияПолейЖертвы.ИмяПоля КАК ИмяПоляЖертвы,
		|	ЗначенияПолейЖертвы.ЭтоДиапазон КАК ЭтоДиапазон,
		|	ЗначенияПолейЖертвы.Значение КАК Значение,
		|	ЗначенияПолейЖертвы.Значение1 КАК Значение1,
		|	ЗначенияПолейЖертвы.Значение2 КАК Значение2,
		|	ЗначенияПолейЖертвы.РежимБлокировки КАК РежимБлокировкиЖертвы,
		|	ЗначенияПолейЖертвы.ИмяРесурса КАК ИмяРесурсаЖертвы,
		|	&НачалоБлокирующейТранзакции КАК НачалоБлокирующейТранзакции
		|ПОМЕСТИТЬ ВТ_Жертвы
		|ИЗ
		|	РегистрСведений.ИсточникиАнализаТЖ КАК ИсточникАнализаТЖ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПолейРесурсов КАК ЗначенияПолейЖертвы
		|		ПО ИсточникАнализаТЖ.СоединениеЖертвы = ЗначенияПолейЖертвы.Соединение
		|			И ИсточникАнализаТЖ.МоментВремениЖертвы = ЗначенияПолейЖертвы.МоментВремени
		|ГДЕ
		|	ЗначенияПолейЖертвы.Период = &Период
		|	И ЗначенияПолейЖертвы.Регистратор = &ДокументЗамер
		|	И ИсточникАнализаТЖ.Период = &Период
		|	И ИсточникАнализаТЖ.Регистратор = &ДокументЗамер
		|	И ИсточникАнализаТЖ.Владелец = &ДокументЗамер
		|	И ИсточникАнализаТЖ.СоединениеЖертвы = &СоединениеЖертвы
		|	И ЗначенияПолейЖертвы.Соединение = &СоединениеЖертвы
		|	И ИсточникАнализаТЖ.МоментВремениЖертвы = &МоментВремениЖертвы
		|	И ЗначенияПолейЖертвы.МоментВремени = &МоментВремениЖертвы
		|	И ИсточникАнализаТЖ.НомерБлокировки = &НомерБлокировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПолейВиновников.Соединение КАК СоединениеВиновника,
		|	ЗначенияПолейВиновников.МоментВремени КАК МоментВремениВиновника,
		|	ЗначенияПолейВиновников.ИмяПоля КАК ИмяПоляВиновника,
		|	ЗначенияПолейВиновников.ЭтоДиапазон КАК ЭтоДиапазон,
		|	ЗначенияПолейВиновников.Значение КАК Значение,
		|	ЗначенияПолейВиновников.Значение1 КАК Значение1,
		|	ЗначенияПолейВиновников.Значение2 КАК Значение2,
		|	ЗначенияПолейВиновников.РежимБлокировки КАК РежимБлокировкиВиновника,
		|	ЗначенияЖертвы.РежимБлокировкиЖертвы КАК РежимБлокировкиЖертвы
		|ПОМЕСТИТЬ ВТ_ВиновникиПредполагаемые
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ВТ_Жертвы.СоединениеВиновника КАК СоединениеВиновника,
		|		ВТ_Жертвы.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|		ВТ_Жертвы.ИмяРесурсаЖертвы КАК ИмяРесурсаЖертвы,
		|		ВТ_Жертвы.РежимБлокировкиЖертвы КАК РежимБлокировкиЖертвы,
		|		ВТ_Жертвы.НачалоБлокирующейТранзакции КАК НачалоБлокирующейТранзакции
		|	ИЗ
		|		ВТ_Жертвы КАК ВТ_Жертвы) КАК ЗначенияЖертвы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПолейРесурсов КАК ЗначенияПолейВиновников
		|		ПО ЗначенияЖертвы.СоединениеВиновника = ЗначенияПолейВиновников.Соединение
		|			И ЗначенияЖертвы.МоментВремениЖертвы >= ЗначенияПолейВиновников.МоментВремени
		|			И ЗначенияЖертвы.НачалоБлокирующейТранзакции <= ЗначенияПолейВиновников.МоментВремени
		|			И ЗначенияЖертвы.ИмяРесурсаЖертвы = ЗначенияПолейВиновников.ИмяРесурса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СовместимостьБлокировок КАК Блокировки
		|		ПО ЗначенияЖертвы.РежимБлокировкиЖертвы = Блокировки.УстанавливаемаяБлокировка
		|			И (ЗначенияПолейВиновников.РежимБлокировки = Блокировки.УстановленнаяБлокировка)
		|			И (Блокировки.Совместимость = ЗНАЧЕНИЕ(Перечисление.ВидыСовместимостиБлокировок.Несовместима))
		|			И (Блокировки.ТипСУБД = ЗНАЧЕНИЕ(Перечисление.ТипыСУБД.DBV8DBEng))
		|ГДЕ
		|	ЗначенияПолейВиновников.Период = &Период
		|	И ЗначенияПолейВиновников.Регистратор = &ДокументЗамер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВиновникиПредполагаемые.СоединениеВиновника,
		|	ВТ_ВиновникиПредполагаемые.МоментВремениВиновника,
		|	ВТ_ВиновникиПредполагаемые.ИмяПоляВиновника,
		|	ВТ_ВиновникиПредполагаемые.ЭтоДиапазон,
		|	ВТ_ВиновникиПредполагаемые.Значение,
		|	ВТ_ВиновникиПредполагаемые.Значение1,
		|	ВТ_ВиновникиПредполагаемые.Значение2,
		|	ВТ_ВиновникиПредполагаемые.РежимБлокировкиВиновника,
		|	ВТ_ВиновникиПредполагаемые.РежимБлокировкиЖертвы
		|ПОМЕСТИТЬ ВТ_НеВиновные
		|ИЗ
		|	ВТ_Жертвы КАК ВТ_Жертвы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВиновникиПредполагаемые КАК ВТ_ВиновникиПредполагаемые
		|		ПО ВТ_Жертвы.ИмяПоляЖертвы = ВТ_ВиновникиПредполагаемые.ИмяПоляВиновника
		|			И (ВЫБОР
		|				КОГДА ВТ_Жертвы.ЭтоДиапазон
		|						ИЛИ ВТ_ВиновникиПредполагаемые.ЭтоДиапазон
		|					ТОГДА (НЕ(ВТ_Жертвы.Значение1 <= ВТ_ВиновникиПредполагаемые.Значение2
		|								И ВТ_ВиновникиПредполагаемые.Значение1 <= ВТ_Жертвы.Значение2))
		|				ИНАЧЕ ВТ_Жертвы.Значение <> ВТ_ВиновникиПредполагаемые.Значение
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_ВиновникиПредполагаемые.СоединениеВиновника,
		|	ВТ_ВиновникиПредполагаемые.МоментВремениВиновника,
		|	ВТ_ВиновникиПредполагаемые.РежимБлокировкиВиновника,
		|	ВТ_ВиновникиПредполагаемые.РежимБлокировкиЖертвы
		|ИЗ
		|	ВТ_ВиновникиПредполагаемые КАК ВТ_ВиновникиПредполагаемые
		|ГДЕ
		|	(НЕ (ВТ_ВиновникиПредполагаемые.СоединениеВиновника, ВТ_ВиновникиПредполагаемые.МоментВремениВиновника, ВТ_ВиновникиПредполагаемые.ИмяПоляВиновника, ВТ_ВиновникиПредполагаемые.ЭтоДиапазон, ВТ_ВиновникиПредполагаемые.Значение, ВТ_ВиновникиПредполагаемые.Значение1, ВТ_ВиновникиПредполагаемые.Значение2, ВТ_ВиновникиПредполагаемые.РежимБлокировкиВиновника, ВТ_ВиновникиПредполагаемые.РежимБлокировкиЖертвы) В
		|				(ВЫБРАТЬ
		|					ВТ_НеВиновные.СоединениеВиновника,
		|					ВТ_НеВиновные.МоментВремениВиновника,
		|					ВТ_НеВиновные.ИмяПоляВиновника,
		|					ВТ_НеВиновные.ЭтоДиапазон,
		|					ВТ_НеВиновные.Значение,
		|					ВТ_НеВиновные.Значение1,
		|					ВТ_НеВиновные.Значение2,
		|					ВТ_НеВиновные.РежимБлокировкиВиновника,
		|					ВТ_НеВиновные.РежимБлокировкиЖертвы
		|				ИЗ
		|					ВТ_НеВиновные КАК ВТ_НеВиновные))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ВиновникиПредполагаемые.МоментВремениВиновника УБЫВ";
		Выборка = ЗапросВиновников.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТЗ = ТЗ.Добавить();
			СтрокаТЗ.МоментВремениЖертвы = ВыборкаЖертв.МоментВремениЖертвы;
			СтрокаТЗ.СоединениеЖертвы = ВыборкаЖертв.СоединениеЖертвы;
			СтрокаТЗ.РежимБлокировкиЖертвы = Выборка.РежимБлокировкиЖертвы;
			СтрокаТЗ.МоментВремениВиновника = Выборка.МоментВремениВиновника;
			СтрокаТЗ.СоединениеВиновника = Выборка.СоединениеВиновника;
			СтрокаТЗ.РежимБлокировкиВиновника = Выборка.РежимБлокировкиВиновника;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ Виновники
	|ИЗ
	|	&ТЗ КАК ТЗ";
	Запрос.Выполнить();
	
КонецПроцедуры // ОпределитьВиновников()

// Определить контексты жертв
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
Процедура ОпределитьКонтекстыЖертв(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникАнализаТЖ.МоментВремениЖертвы КАК МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.СоединениеЖертвы КАК СоединениеЖертвы,
	|	МИНИМУМ(ВременаКонтекстовЖертв.МоментВремени) КАК ВремяКонтекстаЖертвы
	|ПОМЕСТИТЬ ВременаКонтекстовЖертв
	|ИЗ
	|	РегистрСведений.ИсточникиАнализаТЖ КАК ИсточникАнализаТЖ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ВременаКонтекстовЖертв
	|		ПО (ВременаКонтекстовЖертв.connectID = ИсточникАнализаТЖ.СоединениеЖертвы)
	|			И (ВременаКонтекстовЖертв.МоментВремени > ИсточникАнализаТЖ.МоментВремениЖертвы)
	|ГДЕ
	|	ВременаКонтекстовЖертв.Период = &Период
	|	И ВременаКонтекстовЖертв.Регистратор = &ДокументЗамер
	|	И ВременаКонтекстовЖертв.Событие = &СобытиеContext
	|	И ИсточникАнализаТЖ.Период = &Период
	|	И ИсточникАнализаТЖ.Регистратор = &ДокументЗамер
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникАнализаТЖ.МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.СоединениеЖертвы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсточникАнализаТЖ.МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.СоединениеЖертвы";
	Запрос.Выполнить();
	
КонецПроцедуры // ОпределитьКонтекстыЖертв()

// Определить контексты виновников
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
Процедура ОпределитьКонтекстыВиновников(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Виновники.МоментВремениВиновника КАК МоментВремениВиновника,
	|	Виновники.СоединениеВиновника КАК СоединениеВиновника,
	|	МИНИМУМ(ВременаКонтекстовВиновников.МоментВремени) КАК ВремяКонтекстаВиновника
	|ПОМЕСТИТЬ ВременаКонтекстовВиновников
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Виновники.МоментВремениВиновника КАК МоментВремениВиновника,
	|		Виновники.СоединениеВиновника КАК СоединениеВиновника
	|	ИЗ
	|		Виновники КАК Виновники) КАК Виновники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ВременаКонтекстовВиновников
	|		ПО (ВременаКонтекстовВиновников.connectID = Виновники.СоединениеВиновника)
	|			И (ВременаКонтекстовВиновников.МоментВремени > Виновники.МоментВремениВиновника)
	|ГДЕ
	|	ВременаКонтекстовВиновников.Период = &Период
	|	И ВременаКонтекстовВиновников.Регистратор = &ДокументЗамер
	|	И ВременаКонтекстовВиновников.Событие = &СобытиеContext
	|
	|СГРУППИРОВАТЬ ПО
	|	Виновники.МоментВремениВиновника,
	|	Виновники.СоединениеВиновника
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Виновники.МоментВремениВиновника,
	|	Виновники.СоединениеВиновника";
	Запрос.Выполнить();
	
КонецПроцедуры // ОпределитьКонтекстыВиновников()

// Получить результат анализа
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция ПолучитьРезультатАнализа(Запрос)
	
	ПериодЗапроса = Неопределено;
	ДокументЗамер = Неопределено;
	Запрос.Параметры.Свойство("Период", ПериодЗапроса);
	Запрос.Параметры.Свойство("ДокументЗамер", ДокументЗамер);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Соединение",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("МоментВремени",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("ИмяРесурсаПолное",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	ЗапросЗначенийПолей = Новый Запрос;
	ЗапросЗначенийПолей.УстановитьПараметр("Период", ПериодЗапроса);
	ЗапросЗначенийПолей.УстановитьПараметр("ДокументЗамер", ДокументЗамер);
	
	ЗапросЗначенийПолей.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПолей.Соединение КАК Соединение1,
	|	ЗначенияПолей.МоментВремени КАК МоментВремени,
	|	ЗначенияПолей.ИмяРесурса КАК ИмяРесурса,
	|	ЗначенияПолей.ИмяРесурсаПолное
	|ИЗ
	|	РегистрСведений.ЗначенияПолейРесурсов КАК ЗначенияПолей
	|ГДЕ
	|	ЗначенияПолей.Период = &Период
	|	И ЗначенияПолей.Регистратор = &ДокументЗамер
	|ИТОГИ ПО
	|	Соединение1,
	|	МоментВремени,
	|	ИмяРесурса";
	ВыборкаСоединение = ЗапросЗначенийПолей.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Соединение1");
	Пока ВыборкаСоединение.Следующий() Цикл
		ВыборкаМоментВремени = ВыборкаСоединение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МоментВремени");
		Пока ВыборкаМоментВремени.Следующий() Цикл
			ВыборкаРесурс = ВыборкаМоментВремени.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИмяРесурса");
			Пока ВыборкаРесурс.Следующий() Цикл
				Выборка = ВыборкаРесурс.Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЗ = ТЗ.Добавить();
					СтрокаТЗ.Соединение = Выборка.Соединение1;
					СтрокаТЗ.МоментВремени = Выборка.МоментВремени;
					СтрокаТЗ.ИмяРесурсаПолное = Выборка.ИмяРесурсаПолное;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ЗначенияПолейТЗ", ТЗ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическийЖурнал.connectID КАК connectID,
	|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени,
	|	ТехнологическийЖурнал.computerName КАК computerName,
	|	ТехнологическийЖурнал.Context КАК Context,
	|	ТехнологическийЖурнал.Usr КАК Usr,
	|	ТехнологическийЖурнал.ДатаВремяСобытия КАК ДатаВремяСобытия,
	|	ТехнологическийЖурнал.Продолжительность КАК Продолжительность,
	|	ТехнологическийЖурнал.Событие КАК Событие
	|ПОМЕСТИТЬ ТЖПолный
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|ГДЕ
	|	ТехнологическийЖурнал.Период = &Период
	|	И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МоментВремени,
	|	connectID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЖПолный.connectID КАК connectID,
	|	ТЖПолный.МоментВремени КАК МоментВремени,
	|	ТЖПолный.Context КАК Context
	|ПОМЕСТИТЬ ТЖКонтекст
	|ИЗ
	|	ТЖПолный КАК ТЖПолный
	|ГДЕ
	|	ТЖПолный.Событие = &СобытиеContext
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МоментВремени,
	|	connectID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПолейРесурсов.Соединение КАК Соединение1,
	|	ЗначенияПолейРесурсов.МоментВремени КАК МоментВремени,
	|	ЗначенияПолейРесурсов.ИмяРесурсаПолное КАК ИмяРесурсаПолное
	|ПОМЕСТИТЬ ЗначенияПолей
	|ИЗ
	|	&ЗначенияПолейТЗ КАК ЗначенияПолейРесурсов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МоментВремени,
	|	Соединение1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Виновники.МоментВремениЖертвы КАК МоментВремениЖертвы,
	|	Виновники.СоединениеЖертвы КАК СоединениеЖертвы,
	|	КонтекстыЖертв.Context КАК КонтекстКлиентаЖертвы,
	|	ДеталиЖертвы.Context КАК КонтекстСервераЖертвы,
	|	ДеталиЖертвы.Продолжительность / 1000 КАК ВремяВыполненияМсЖертвы,
	|	ДеталиЖертвы.ДатаВремяСобытия КАК ДатаВремяСобытияЖертвы,
	|	ДеталиЖертвы.computerName КАК КомпьютерЖертвы,
	|	ДеталиЖертвы.Usr КАК ИмяПользователяЖертвы,
	|	Виновники.МоментВремениВиновника КАК МоментВремениВиновника,
	|	Виновники.СоединениеВиновника КАК СоединениеВиновника,
	|	КонтекстыВиновников.Context КАК КонтекстКлиентаВиновника,
	|	ДеталиВиновника.Context КАК КонтекстСервераВиновника,
	|	ДеталиВиновника.Продолжительность / 1000 КАК ВремяВыполненияМсВиновника,
	|	ДеталиВиновника.ДатаВремяСобытия КАК ДатаВремяСобытияВиновника,
	|	ДеталиВиновника.computerName КАК КомпьютерВиновника,
	|	ДеталиВиновника.Usr КАК ИмяПользователяВиновника,
	|	ЗначенияПолей.ИмяРесурсаПолное КАК ИмяРесурса,
	|	Виновники.РежимБлокировкиВиновника КАК РежимБлокировкиВиновника,
	|	Виновники.РежимБлокировкиЖертвы КАК РежимБлокировкиЖертвы
	|ИЗ
	|	Виновники КАК Виновники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременаКонтекстовЖертв КАК ВременаКонтекстовЖертв
	|		ПО Виновники.МоментВремениЖертвы = ВременаКонтекстовЖертв.МоментВремениЖертвы
	|			И Виновники.СоединениеЖертвы = ВременаКонтекстовЖертв.СоединениеЖертвы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЖКонтекст КАК КонтекстыЖертв
	|		ПО (ВременаКонтекстовЖертв.ВремяКонтекстаЖертвы = КонтекстыЖертв.МоментВремени)
	|			И (ВременаКонтекстовЖертв.СоединениеЖертвы = КонтекстыЖертв.connectID)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременаКонтекстовВиновников КАК ВременаКонтекстовВиновников
	|		ПО Виновники.МоментВремениВиновника = ВременаКонтекстовВиновников.МоментВремениВиновника
	|			И Виновники.СоединениеВиновника = ВременаКонтекстовВиновников.СоединениеВиновника
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЖКонтекст КАК КонтекстыВиновников
	|		ПО (ВременаКонтекстовВиновников.ВремяКонтекстаВиновника = КонтекстыВиновников.МоментВремени)
	|			И (ВременаКонтекстовВиновников.СоединениеВиновника = КонтекстыВиновников.connectID)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПолей КАК ЗначенияПолей
	|		ПО Виновники.МоментВремениЖертвы = ЗначенияПолей.МоментВремени
	|			И Виновники.СоединениеЖертвы = ЗначенияПолей.Соединение1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЖПолный КАК ДеталиЖертвы
	|		ПО Виновники.МоментВремениЖертвы = ДеталиЖертвы.МоментВремени
	|			И Виновники.СоединениеЖертвы = ДеталиЖертвы.connectID
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЖПолный КАК ДеталиВиновника
	|		ПО Виновники.МоментВремениВиновника = ДеталиВиновника.МоментВремени
	|			И Виновники.СоединениеВиновника = ДеталиВиновника.connectID
	|ГДЕ
	|	Виновники.МоментВремениВиновника ЕСТЬ НЕ NULL 
	|ИТОГИ ПО
	|	МоментВремениЖертвы,
	|	СоединениеЖертвы";
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ПолучитьРезультатАнализа()

Функция ПолучитьШаблонЗаменыВнутриДвойныхКавычек()
	
	ШаблонЗамены = Новый Соответствие;
	ШаблонЗамены.Вставить(",", "☺");
	ШаблонЗамены.Вставить(" ", "☻");
	
	Возврат ШаблонЗамены;
	
КонецФункции

Функция ЗаменитьСимволыВнутриДвойныхКавычек(Знач пСтрока)
	
	СтрокаНовая = "";
	
	ШаблонЗамены = ПолучитьШаблонЗаменыВнутриДвойныхКавычек();
		
	Искать = Истина;
	Пока Искать Цикл
		ИндексКавычекОткрытие = СтрНайти(пСтрока, """");
		Если ИндексКавычекОткрытие > 0 Тогда
			СтрокаНовая = СтрокаНовая + Лев(пСтрока, ИндексКавычекОткрытие);
			пСтрока = Прав(пСтрока, СтрДлина(пСтрока) - ИндексКавычекОткрытие);
			
			ИндексКавычекЗакрытие = СтрНайти(пСтрока, """");
			Если ИндексКавычекЗакрытие > 0 Тогда
				СтрокаЗамены = Лев(пСтрока, ИндексКавычекЗакрытие);
				пСтрока = Прав(пСтрока, СтрДлина(пСтрока) - ИндексКавычекЗакрытие);
				
				Для Каждого ТекШаблон Из ШаблонЗамены Цикл
					СтрокаЗамены = СтрЗаменить(СтрокаЗамены, ТекШаблон.Ключ, ТекШаблон.Значение);
				КонецЦикла;
				СтрокаНовая = СтрокаНовая + СтрокаЗамены;
			Иначе
				Искать = Ложь;
			КонецЕсли;
		Иначе
			Искать = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаНовая = СтрокаНовая + пСтрока;
	
	Возврат СтрокаНовая;
	
КонецФункции

Функция ВернутьСимволыВнутриДвойныхКавычек(Строка)
	ШаблонЗамены = ПолучитьШаблонЗаменыВнутриДвойныхКавычек();
	Для Каждого ТекШаблон Из ШаблонЗамены Цикл
		Строка = СтрЗаменить(Строка, ТекШаблон.Значение, ТекШаблон.Ключ);
	КонецЦикла;
	
	Возврат Строка;
КонецФункции

// Получить массив имен заблокированных ресурсов
//
// Параметры:
//  Описание - Строка, описание события TLOCK
//
// Возвращаемое значение:
//  Массив - имена заблокированных ресурсов
//
Функция РазобратьЗаблокированныеРесурсы(КэшОписанийБлокировок, НаборЗначенияПолей, ДокументЗамер, Описание, Соединение, МоментВремени, ЭтоРесурсыВзаимоблокировки = Ложь) Экспорт
	
	ОписанияБлокировок = БлокировкаРазобрана(КэшОписанийБлокировок, ДокументЗамер, Соединение, МоментВремени);
	Если ОписанияБлокировок <> Неопределено Тогда
		Возврат ОписанияБлокировок;
	КонецЕсли;
	
	ОписанияБлокировок = Новый Массив;
	ЕстьЗамена = Ложь;
	ИндексКавычки = СтрНайти(Описание, """");
	Если ИндексКавычки > 0 Тогда
		ЕстьЗамена = Истина;
		Описание = ЗаменитьСимволыВнутриДвойныхКавычек(Описание);
	КонецЕсли;
	
	ВсеБлокировки = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Описание, ",");
	ПодготовленныеБлокировки = ВсеБлокировки;
	
	УникальностьРесурсов = Новый Соответствие;
	НомераПолей = Новый Соответствие;
	НомерБлокировки = 0;
	РесурсПредыдущий = Неопределено;
	РежимБлокировкиПредыдущий = Неопределено;
	Для Каждого Блокировка Из ПодготовленныеБлокировки Цикл
		
		СоставБлокировки = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Блокировка, " ");
		Если ЕстьЗамена Тогда
			Для ТекИндекс = 0 По СоставБлокировки.ВГраница() Цикл
				СоставБлокировки[ТекИндекс] = ВернутьСимволыВнутриДвойныхКавычек(СоставБлокировки[ТекИндекс]);
			КонецЦикла;
		КонецЕсли;
		
		Ресурс = СоставБлокировки[0];
		РежимБлокировки = ПолучитьРежимБлокировки(СоставБлокировки[1]);
		Всего = СоставБлокировки.Количество();
		
		Если РежимБлокировки = Перечисления.РежимыБлокировок.Неизвестный Тогда
			СоставБлокировки.Вставить(0, РежимБлокировкиПредыдущий);
			СоставБлокировки.Вставить(0, РесурсПредыдущий);
			
			Ресурс = СоставБлокировки[0];
			РежимБлокировки = ПолучитьРежимБлокировки(СоставБлокировки[1]);
			Всего = СоставБлокировки.Количество();
		КонецЕсли;
		
		РесурсПредыдущий = СоставБлокировки[0];
		РежимБлокировкиПредыдущий = СоставБлокировки[1];
		
		ПолноеИмяРесурса = Ресурс;
		Для СчИзмерения = 2 По Всего - 1 Цикл
			ПолноеИмяРесурса = ПолноеИмяРесурса + " " + СоставБлокировки[СчИзмерения];
		КонецЦикла;
		Если УникальностьРесурсов.Получить(ПолноеИмяРесурса) = Неопределено Тогда
			УникальностьРесурсов.Вставить(ПолноеИмяРесурса, Истина);
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ПолноеИмяРесурса = Ресурс Тогда
			СтрокаНабора = НаборЗначенияПолей.Добавить();
			СтрокаНабора.Период = ДокументЗамер.Дата;
			СтрокаНабора.Соединение = Соединение;
			СтрокаНабора.МоментВремени = МоментВремени;
			СтрокаНабора.ИмяПоля = Строка(Ресурс);
			СтрокаНабора.НомерБлокировки = НомерБлокировки;
			СтрокаНабора.РежимБлокировки = РежимБлокировки;
			СтрокаНабора.ИмяРесурса = Ресурс;
			СтрокаНабора.ИмяРесурсаПолное = ПолноеИмяРесурса;
			СтрокаНабора.ЭтоРесурсВзаимоблокировки = ЭтоРесурсыВзаимоблокировки;
		КонецЕсли;
		
		Для СчИзмерения = 2 По Всего - 1 Цикл
			КлючЗначение = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(СоставБлокировки[СчИзмерения], "=");
			
			ИмяПоля = Строка(Ресурс) + КлючЗначение[0];
			ПрошлыйНомерПоля = НомераПолей.Получить(ИмяПоля);
			Если ПрошлыйНомерПоля = Неопределено Тогда
				НомераПолей.Вставить(ИмяПоля, 0);
				ИмяПоля = ИмяПоля + "0";
			Иначе
				ПрошлыйНомерПоля = ПрошлыйНомерПоля + 1;
				НомераПолей.Вставить(ИмяПоля, ПрошлыйНомерПоля);
				ИмяПоля = ИмяПоля + Строка(ПрошлыйНомерПоля);
			КонецЕсли;
			
			СтрокаНабора = НаборЗначенияПолей.Добавить();
			СтрокаНабора.Период = ДокументЗамер.Дата;
			СтрокаНабора.Соединение = Соединение;
			СтрокаНабора.МоментВремени = МоментВремени;
			СтрокаНабора.ИмяПоля = ИмяПоля;
			СтрокаНабора.НомерБлокировки = НомерБлокировки;
			ЗаполнитьЗначения(СтрокаНабора, КлючЗначение[1]);
			СтрокаНабора.РежимБлокировки = РежимБлокировки;
			СтрокаНабора.ИмяРесурса = Ресурс;
			СтрокаНабора.ИмяРесурсаПолное = ПолноеИмяРесурса;
			СтрокаНабора.ЭтоРесурсВзаимоблокировки = ЭтоРесурсыВзаимоблокировки;
		КонецЦикла;
		
		ОписаниеБлокировки = Новый Структура("Режим, Ресурс", РежимБлокировки, Ресурс);
		ОписанияБлокировок.Добавить(ОписаниеБлокировки);
		НомерБлокировки = НомерБлокировки + 1;
		
	КонецЦикла;
	
	ДобавитьОписанияБлокировокВКэш(КэшОписанийБлокировок, Соединение, МоментВремени, ДокументЗамер, ОписанияБлокировок);
	
	Возврат ОписанияБлокировок;
	
КонецФункции // РазобратьЗаблокированныеРесурсы()

///////////////////////////////////////////////////////////////////////////////
// БЛОКИРОВКИ

Функция БлокировкаРазобрана(КэшОписанийБлокировок, ДокументЗамер, Соединение, МоментВремени)
	
	Если КэшОписанийБлокировок = Неопределено Тогда
		КэшОписанийБлокировок = Новый ТаблицаЗначений;
		КэшОписанийБлокировок.Колонки.Добавить("Соединение");
		КэшОписанийБлокировок.Колонки.Добавить("МоментВремени");
		КэшОписанийБлокировок.Колонки.Добавить("ДокументЗамер");
		КэшОписанийБлокировок.Колонки.Добавить("ОписанияБлокировок");
		КэшОписанийБлокировок.Индексы.Добавить("Соединение,МоментВремени,ДокументЗамер");
	КонецЕсли;
	
	КлючПоиска = Новый Структура("Соединение,МоментВремени,ДокументЗамер",
		Соединение,
		МоментВремени,
		ДокументЗамер
	);
	СтрокиКэша = КэшОписанийБлокировок.НайтиСтроки(КлючПоиска);
	Если СтрокиКэша.Количество() > 0 Тогда
		Возврат СтрокиКэша[0].ОписанияБлокировок;
	КонецЕсли;
	
	ОписанияБлокировок = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Соединение", Соединение);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("Период", ДокументЗамер.Дата);
	Запрос.УстановитьПараметр("Регистратор", ДокументЗамер);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ресурсы.РежимБлокировки КАК РежимБлокировки,
	|	Ресурсы.ИмяРесурса КАК Ресурс
	|ИЗ
	|	РегистрСведений.ЗначенияПолейРесурсов КАК Ресурсы
	|ГДЕ
	|	Ресурсы.Соединение = &Соединение
	|	И Ресурсы.МоментВремени = &МоментВремени
	|	И Ресурсы.Период = &Период
	|	И Ресурсы.Регистратор = &Регистратор";
	
	БлокировкаРазобрана = Ложь;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		БлокировкаРазобрана = Истина;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Структура = Новый Структура("Режим, Ресурс", Выборка.РежимБлокировки, Выборка.Ресурс);
			ОписанияБлокировок.Добавить(Структура);
		КонецЦикла;
	КонецЕсли;
	
	Если БлокировкаРазобрана Тогда
		ДобавитьОписанияБлокировокВКэш(КэшОписанийБлокировок, Соединение, МоментВремени, ДокументЗамер, ОписанияБлокировок);
		Возврат ОписанияБлокировок;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьОписанияБлокировокВКэш(КэшОписанийБлокировок, Соединение, МоментВремени, ДокументЗамер, ОписанияБлокировок)
	
	НоваяСтрока = КэшОписанийБлокировок.Добавить();
	НоваяСтрока.Соединение = Соединение;
	НоваяСтрока.МоментВремени = МоментВремени;
	НоваяСтрока.ДокументЗамер = ДокументЗамер;
	НоваяСтрока.ОписанияБлокировок = ОписанияБлокировок;
	
КонецПроцедуры // ДобавитьОписанияБлокировокВКэш()


// Получить режим блокировки из строкового представления
//
// Параметры:
//  СтроковоеПредставление - Строка, режим блокировки в виде строки
//
// Возвращаемое значение:
//  Перечисления.Режимлокировки - режим блокировки в виде перечисления
//
Функция ПолучитьРежимБлокировки(СтроковоеПредставление) Экспорт
	
	Представление = ВРег(СтроковоеПредставление);
	
	Если Представление = "SHARED" Тогда
		Возврат Перечисления.РежимыБлокировок.Managed_Shared;
	ИначеЕсли Представление = "UPDLOCK" Тогда
		Возврат Перечисления.РежимыБлокировок.Managed_Updlock;
	ИначеЕсли Представление = "EXCLUSIVE" Тогда
		Возврат Перечисления.РежимыБлокировок.Managed_Exclusive;
	Иначе
		Возврат Перечисления.РежимыБлокировок.Неизвестный;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьРежимБлокировки()

///////////////////////////////////////////////////////////////////////////////
// РЕСУРСЫ УПРАВЛЯЕМОЙ БЛОКИРОВКИ

Процедура ЗаполнитьЗначения(Запись, Значение)
	
	Запись.Значение = "";
	Запись.Значение1 = 0;
	Запись.Значение2 = 0;
	НачалоЭпохи = Дата(1970, 1, 1, 0, 0, 0);
	МинимальныйПредел = -99999999999999999999999999999999;
	МаксимальныйПредел = 99999999999999999999999999999999;
	Если Лев(Значение, 1) = "[" И Прав(Значение, 1) = "]" Тогда
		Запись.ЭтоДиапазон = Истина;
		ЗначениеДиапазона = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Значение, ":");
		НЗнач = ЗначениеДиапазона[0];
		ВЗнач = ЗначениеДиапазона[1];
		ПервыйСимвол = ВРег(Сред(НЗнач, 2, 1));
		// Если дата
		Если ПервыйСимвол = "T" Тогда
			// -4 = Открывающаяся скобка + буква "Т" + первый апостроф + последний апостроф
			НачДата = Дата(Сред(НЗнач, 4, СтрДлина(НЗнач) - 4));
			Запись.Значение1 = НачДата - НачалоЭпохи;
		// Если предел не ограничен
		ИначеЕсли ПервыйСимвол = "-" Тогда
			Запись.Значение1 = МинимальныйПредел;
		// Если число
		Иначе
			Запись.Значение1 = Число(Сред(НЗнач, 2));
		КонецЕсли;
		
		ПервыйСимвол = ВРег(Лев(ВЗнач, 1));
		// Если дата
		Если ПервыйСимвол = "T" Тогда
			// -4 = буква "Т" + первый апостроф + последний апостроф + закрывающаяся скобка
			КонДата = Дата(Сред(ВЗнач, 3, СтрДлина(ВЗнач) - 4));
			Запись.Значение2 = КонДата - НачалоЭпохи;
		// Если предел не ограничен
		ИначеЕсли ПервыйСимвол = "+" Тогда
			Запись.Значение2 = МаксимальныйПредел;
		// Если число
		Иначе
			Запись.Значение2 = Число(Лев(ВЗнач, СтрДлина(ВЗнач) - 1));
		КонецЕсли;
	Иначе
		Запись.ЭтоДиапазон = Ложь;
		Запись.Значение = Значение;
		
		ЗначениеДляДиапазона = Неопределено;
		Если Лев(Значение, 1) = "T" Тогда
			Если Значение <> "True" Тогда
				ЗначениеДляДиапазона = Дата(Сред(Значение, 3, СтрДлина(Значение) - 3)) - НачалоЭпохи;
				Запись.Значение1 = ЗначениеДляДиапазона;
				Запись.Значение2 = ЗначениеДляДиапазона;
			КонецЕсли;
		ИначеЕсли ВЧисло(Значение, ЗначениеДляДиапазона) Тогда
			Запись.Значение1 = ЗначениеДляДиапазона;
			Запись.Значение2 = ЗначениеДляДиапазона;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВЧисло(Строка, Значение)
	
	Результат = Истина;
	Попытка
		Значение = Число(Строка);
	Исключение
		Значение = Неопределено;
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
