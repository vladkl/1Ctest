///////////////////////////////////////////////////////////////////////////////
// АНАЛИЗ ОЖИДАНИЙ НА БЛОКИРОВКАХ В АВТОМАТИЧЕСКОМ РЕЖИМЕ

// Включить сбор информации для анализа ожиданий на блокировках.
// Включается технологический журнал на сервере иследуемой информационной базы.
//
Функция ВключитьСборБлокировок(ИБ, Показатели) Экспорт
	
	ОтладкаКлиентСервер.Действие("ВключитьСборБлокировокСУБД");
	
	Если ИБ.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.PostgreSQL") Тогда
		// Пока ожидания на блокировках СУБД PostgreSQL не анализируются
		Возврат Неопределено;
	КонецЕсли;
	
	АнализОжиданийНаБлокировкахОбъект = Справочники.Показатели.АнализОжиданийНаБлокировках.ПолучитьОбъект();
	ПолучатьПланы = АнализОжиданийНаБлокировкахОбъект.ПолучатьПланыЗапросов();
	
	ОписательТЖ = ТехнологическийЖурнал.ВключитьТехнологическийЖурнал(
		ТехнологическийЖурнал.КонфигурацияАнализаБлокировокСУБД(
			ИБ.ИмяИБ,
			ИБ.ТипСУБД,
			ПолучатьПланы),
		ИБ.ИменаКаталоговТЖ);
		
	// Зафиксировать каталоги ТЖ
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализОжиданийНаБлокировках);
	СтрокаПоказателя.ЗамерАнализЗапросов = Замер.СоздатьЗамер(
		ИБ,
		СтрокаПоказателя.Показатель,
		СтрокаПоказателя.Экземпляр,
		ИБ.ТипСУБД,,
		Перечисления.ТипыБлокировок.БлокировкаСУБД);
	Замер.УстановитьКаталогиТЖ(СтрокаПоказателя.ЗамерАнализЗапросов, ОписательТЖ.КаталогиТЖ);
	
	Если ИБ.ИспользоватьППАнализГранулярностиБлокировок Тогда
		// Создать трассировку
		ОписательТрассировки = MSSQL.СоздатьТрассировку(
			ИБ,
			ИБ.ТипОССервераСУБД,
			ИБ.КаталогТрассировкиЛокальный);
		
		// Добавить события трассировки
		ИдентификаторыСобытий = MSSQL.ПолучитьИдентификаторыСобытий();
		
		MSSQL.ДобавитьСобытиеТрассировки(
			ИдентификаторыСобытий["RPC:Completed"],
			"SPID, StartTime, EndTime, TextData, EventSequence, TransactionID",
			ОписательТрассировки
		);
		
		MSSQL.ДобавитьСобытиеТрассировки(
			ИдентификаторыСобытий["SQL:BatchCompleted"],
			"SPID, StartTime, EndTime, TextData, EventSequence, TransactionID",
			ОписательТрассировки
		);
		
		MSSQL.ДобавитьСобытиеТрассировки(
			ИдентификаторыСобытий["Lock:Acquired"],
			"SPID, StartTime, TextData, ObjectID, ObjectID2, EventSequence, TransactionID, Mode, Type",
			ОписательТрассировки
		);
		
		MSSQL.ДобавитьСобытиеТрассировки(
			ИдентификаторыСобытий["Lock:Escalation"],
			"SPID, StartTime, TextData, ObjectID, ObjectID2, EventSequence, TransactionID, Mode, Type",
			ОписательТрассировки
		);
		
		// Установить фильтр трассировки
		ИдентификаторБД = MSSQL.ПолучитьИдентификаторБазыДанных(ИБ);
		ТипыОтношений = MSSQL.ПолучитьТипыОтношений();
		ТипыСравнений = MSSQL.ПолучитьТипыСравнений();
		ИдентификаторыКолонок = MSSQL.ПолучитьКолонки();
		MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["DatabaseID"], ТипыОтношений["AND"], ТипыСравнений["="], ИдентификаторБД, ОписательТрассировки);
		MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["Mode"], ТипыОтношений["AND"], ТипыСравнений[">="], 3, ОписательТрассировки);
		MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["TextData"], ТипыОтношений["AND"], ТипыСравнений["NOT LIKE"], "'%FROM master.dbo.sysprocesses%'", ОписательТрассировки);
		MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["TextData"], ТипыОтношений["AND"], ТипыСравнений["NOT LIKE"], "'%from sysobjects%'", ОписательТрассировки);
		MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["TextData"], ТипыОтношений["AND"], ТипыСравнений["NOT LIKE"], "'%FROM Files WHERE FileName = @P1%'", ОписательТрассировки);
		MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["TextData"], ТипыОтношений["AND"], ТипыСравнений["NOT LIKE"], "'%FROM Params WHERE FileName = @P1%'", ОписательТрассировки);
		MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["TextData"], ТипыОтношений["AND"], ТипыСравнений["NOT LIKE"], "'%FROM Config WHERE FileName = @P1%'", ОписательТрассировки);
		MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["TextData"], ТипыОтношений["AND"], ТипыСравнений["<>"], "'select count(*) from _YearOffset'", ОписательТрассировки);
		MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["TextData"], ТипыОтношений["AND"], ТипыСравнений["<>"], "'select Offset from _YearOffset'", ОписательТрассировки);
		
		ИдентификаторыСлужебныхТаблиц = ПолучитьИдентификаторыСлужебныхТаблиц(ИБ);
		Для Каждого Идентификатор Из ИдентификаторыСлужебныхТаблиц Цикл
			Если ЗначениеЗаполнено(Идентификатор.ObjectID) Тогда
				MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["ObjectID"], ТипыОтношений["AND"], ТипыСравнений["<>"], Идентификатор.ObjectID, ОписательТрассировки);
			ИначеЕсли ЗначениеЗаполнено(Идентификатор.ObjectID2) Тогда
				MSSQL.ДобавитьФильтрТрассировки(ИдентификаторыКолонок["ObjectID2"], ТипыОтношений["AND"], ТипыСравнений["<>"], Идентификатор.ObjectID2, ОписательТрассировки);
			КонецЕсли;
		КонецЦикла;
		
		// Включить трассировку
		MSSQL.ВключитьТрассировку(ОписательТрассировки);
		
		ФайлыТрассировок = Новый Массив;
		Пути = Новый Структура;
		Пути.Вставить("Локальный", ОписательТрассировки.ПолноеИмяФайла);
		ФайлыТрассировок.Добавить(Пути);
		Замер.УстановитьФайлыТрассировок(СтрокаПоказателя.ЗамерАнализЗапросов, ФайлыТрассировок);
	Иначе
		ОписательТрассировки = Неопределено;
	КонецЕсли;
	
	ОтладкаКлиентСервер.Результат("ВключитьСборБлокировокСУБД");
	
	ОписателиСбораДанных = Новый Структура("ОписательТЖ, ОписательТрассировки",
		ОписательТЖ,
		ОписательТрассировки
	);
	
	Возврат ОписателиСбораДанных;
	
КонецФункции // ВключитьСборБлокировок()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьИдентификаторыСлужебныхТаблиц(ИБ)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ObjectID");
	Результат.Колонки.Добавить("ObjectID2");
	
	ИменаТаблиц = Новый Массив;
	ИменаТаблиц.Добавить("sysschobjs");
	ИменаТаблиц.Добавить("syscolpars");
	ИменаТаблиц.Добавить("sysidxstats");
	ИменаТаблиц.Добавить("sysobjvalues");
	ИменаТаблиц.Добавить("sysiscols");
	ИменаТаблиц.Добавить("sysrowsets");
	ИменаТаблиц.Добавить("sysallocunits");
	ИменаТаблиц.Добавить("sysrscols");
	ИменаТаблиц.Добавить("_YearOffset");
	ИменаТаблиц.Добавить("IBVersion");
	ИменаТаблиц.Добавить("v8users");
	
	Для Каждого Таблица Из ИменаТаблиц Цикл
		Идентификаторы = MSSQLПовтИсп.ПолучитьИдентификаторыОбъекта(ИБ, Таблица);
		Для Каждого ТекСтрока Из Идентификаторы Цикл
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	КонецЦикла;
	
	Результат.Сортировать("ObjectID,ObjectID2");
	
	Возврат Результат;
	
КонецФункции // ПолучитьИдентификаторыСлужебныхТаблиц()

// Отключить сбор информации для анализа ожиданий на блокировках
//
Процедура ОтключитьСборБлокировок(ИБ, Показатели, ОписательСбораДанных, АнализНеобходим) Экспорт
	
	ОтладкаКлиентСервер.Действие("ОтключитьСборБлокировокСУБД");
	
	Если ИБ.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.PostgreSQL") Тогда
		// Пока ожидания на блокировках СУБД PostgreSQL не анализируются
		Возврат;
	КонецЕсли;
	
	// Остановить трассировку
	ОписательТрассировки = ОписательСбораДанных.ОписательТрассировки;
	Если ОписательТрассировки <> Неопределено Тогда
		MSSQL.ОстановитьТрассировку(ОписательСбораДанных.ОписательТрассировки);
		MSSQL.ВыключитьТрассировку(ОписательСбораДанных.ОписательТрассировки);
	КонецЕсли;
	
	// Отключить технологический журнал
	ТехнологическийЖурнал.ОтключитьТехнологическийЖурнал(
		ОписательСбораДанных.ОписательТЖ,
		ИБ.ИменаКаталоговТЖ);
		
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализОжиданийНаБлокировках);
	Замер.ЗавершитьЗамер(СтрокаПоказателя.ЗамерАнализЗапросов);
	
	Если Не АнализНеобходим Тогда
		Замер.Отменить(СтрокаПоказателя.ЗамерАнализЗапросов);
	КонецЕсли;
		
	ОтладкаКлиентСервер.Результат("ОтключитьСборБлокировокСУБД");
	
КонецПроцедуры // ОтключитьСборБлокировок()

// Функция выполняет анализ ожиданий на блокировках по данным из регистра сведений ТехнологическийЖурнал.
//
Процедура ПроанализироватьБлокировки(КонтекстАнализа, Индикатор = Неопределено) Экспорт
	
	Перем ПараметрыЖертвы;
	Перем ПараметрыВиновника;
	Перем БлокирующиеЗапросы;
	Перем ЗафиксироватьЗначенияПоказателей;
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьБлокировки");
	
	// Получить ссылку на показатель производительности
	Показатель = Справочники.Показатели.АнализОжиданийНаБлокировках;
	ИБ = КонтекстАнализа.Замер.ИнформационнаяБаза;
	
	АнализироватьГранулярностьБлокировок = ИБ.ИспользоватьППАнализГранулярностиБлокировок;
	
	ЗаполнитьИсточникРесурсыАнализа(КонтекстАнализа);
	
	ТипСУБД = КонтекстАнализа.Замер.ТипСУБД;
	
	// Получить результат заблокированных и блокирующих запросов
	Запрос = ТехнологическийЖурнал.СоздатьЗапросДляАнализа(ТипСУБД, КонтекстАнализа.Замер);
	РезультатОжидания = ТехнологическийЖурнал.ПроанализироватьОжидания(Запрос, ТипСУБД, КонтекстАнализа.Замер, АнализироватьГранулярностьБлокировок);
	
	Если РезультатОжидания.Пустой() Тогда
		ОтладкаКлиентСервер.Результат("ПроанализироватьБлокировкиПусто");
		Возврат;
	КонецЕсли;
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	// Выбрать моменты времени
	ВыборкаМоментыВремени = РезультатОжидания.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Настроить индикатор
	Если Индикатор <> Неопределено Тогда
		
		Индикатор.Значение = 0;
		Индикатор.МаксимальноеЗначение = 0;
		
		Пока ВыборкаМоментыВремени.Следующий() Цикл
			
			ВыборкаСоединений = ВыборкаМоментыВремени.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаСоединений.Следующий() Цикл
				
				ВыборкаБлокировки = ВыборкаСоединений.Выбрать();
				
				Индикатор.МаксимальноеЗначение = Индикатор.МаксимальноеЗначение + ВыборкаБлокировки.Количество();
				
			КонецЦикла;
			
		КонецЦикла;
		
		ВыборкаМоментыВремени.Сбросить();
		
	КонецЕсли;
	
	КоличествоОжиданий = 0;
	
	Пока ВыборкаМоментыВремени.Следующий() Цикл
		
		// Выбрать соединения
		ВыборкаСоединений = ВыборкаМоментыВремени.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСоединений.Следующий() Цикл
			
			// Получить данные блокировки
			ВыборкаБлокировки = ВыборкаСоединений.Выбрать();
			РазобратьЖертву = Истина;
			
			// Создание счетчика ожиданий на блокировке
			СчетчикОжиданий = Справочники.СчетчикиОжиданий.СоздатьЭлемент();
			СчетчикОжиданий.Владелец = ИБ;
			СчетчикОжиданий.Количество = 0;
			
			НачатьТранзакцию();
			
			Попытка
				СчетчикОжиданий.Записать();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			// Выполнить обход запросов
			Пока ВыборкаБлокировки.Следующий() Цикл
				
				// Разобрать заблокированный запрос
				Если РазобратьЖертву Тогда
					
					Попытка
						РазобратьЗапрос(ПараметрыЖертвы, ВыборкаБлокировки, "Жертвы", АнализироватьГранулярностьБлокировок);
					Исключение
						ОтменитьТранзакцию();
						ВызватьИсключение;
					КонецПопытки;
					
					РазобратьЖертву = Ложь;
					ЗафиксироватьЗначенияПоказателей = Истина;
					
				КонецЕсли;
				
				// Разобрать блокирующий запрос
				Попытка
					РазобратьЗапрос(ПараметрыВиновника, ВыборкаБлокировки, "Виновника", АнализироватьГранулярностьБлокировок);
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
				
				// Вычислить статус текущей информации
				СтатусИнформации = ?(ВыборкаБлокировки.Количество() = 1, Перечисления.СтатусыИнформации.ТочныеДанные, Перечисления.СтатусыИнформации.Предположение);
				
				// Получить информацию о гранулярности блокировок
				ИмяРесурса = ВыборкаБлокировки.ИмяРесурса;
				Индекс = Неопределено;
				Если АнализироватьГранулярностьБлокировок Тогда
					ДанныеОГранулярности = ПолучитьИнформациюОГранулярностиБлокировок(КонтекстАнализа.Замер, ПараметрыЖертвы, ПараметрыВиновника);
					Если ДанныеОГранулярности.Количество() > 0 Тогда
						СтатусИнформации = Перечисления.СтатусыИнформации.ТочныеДанные;
						ИмяРесурса = ДанныеОГранулярности[0].ObjectName;
						Индекс = ДанныеОГранулярности[0].IndexNamе;
						
						// Дополнить структуру жертвы
						ПараметрыЖертвы.Вставить("Режим", ДанныеОГранулярности[0].РежимБлокировкиЖертвы);
						ПараметрыЖертвы.Вставить("Гранулярность", ДанныеОГранулярности[0].ГранулярностьЖертвы);
						
						// Дополнить структуру виновника
						ПараметрыВиновника.Вставить("Режим", ДанныеОГранулярности[0].РежимБлокировкиВиновника);
						ПараметрыВиновника.Вставить("Гранулярность", ДанныеОГранулярности[0].ГранулярностьВиновника);
					КонецЕсли;
				КонецЕсли;
				
				// Создать структуру ресурса
				СтруктураРесурса = СтруктураДанных.ПолучитьСтруктуруРесурса(, ИмяРесурса, Индекс);
				
				// Дополнить структуру жертвы
				ПараметрыЖертвы.Вставить("СтатусИнформации", СтатусИнформации);
				ПараметрыЖертвы.Вставить("Состояние",        Перечисления.СостоянияБлокировок.Ожидание);
				ПараметрыЖертвы.Вставить("Ресурс",           СтруктураРесурса);
				
				// Дополнить структуру виновника
				ПараметрыВиновника.Вставить("СтатусИнформации", СтатусИнформации);
				ПараметрыВиновника.Вставить("Состояние",        Перечисления.СостоянияБлокировок.Установлена);
				ПараметрыВиновника.Вставить("Ресурс",           СтруктураРесурса);
				
				// Зафиксировать факт ожидания на блокировке
				Попытка
					СтруктураДанных.ЗафиксироватьОжиданиеНаБлокировке(
						ПараметрыЖертвы,
						ПараметрыВиновника,
						Перечисления.ТипыБлокировок.БлокировкаСУБД,
						СчетчикОжиданий.Ссылка,
						КонтекстАнализа,
						Инструменты);
					КоличествоОжиданий = КоличествоОжиданий + 1;
				Исключение
					ОтменитьТранзакцию();
					ВызватьИсключение;
				КонецПопытки;
				
				// Увеличить значение индикатора
				Если Индикатор <> Неопределено Тогда
					Индикатор.Значение = Индикатор.Значение + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОтладкаКлиентСервер.Результат("ПроанализироватьБлокировки", КоличествоОжиданий);
	
КонецПроцедуры // ПроанализироватьБлокировки()

// Функция выполняет разбор данных запроса. Результат разбора помещает в структуру.
// Данные выбираются из коллекции значений. Наименование ключей коллекции фиксировано (см. тело функции).
//
// Параметры:
//  Разбор          - Структура, результат разбора запроса, возвращаемое значение. Ключи:
//                    НомерСоединения        - Число, номер соединения с сервером 1С.
//                    Запрос                 - Строка, SQL запрос.
//                    ВремяВыполненияМс      - Число, время выполнения запроса в миллисекугдах.
//                    МоментВремениОкончания - Число, точное время события
//                    ДатаВремяСобытия       - ДатаВремя.
//                    Пользователь           - Строка, имя пользователя, который выполнил запрос.
//                    Компьютер              - Строка, имя комьютера, с которого выполнили запрос.
//                    Ресурсы                - Соответсвтие, ресурсы запроса.
//  ДанныеЗапроса   - Коллекция значений вида: Значение = ДанныеЗапроса.Ключ.
//  Префикс         - Строка, Префикс наименованиий ключей данных запроса.
//
Процедура РазобратьЗапрос(Разбор, Знач ДанныеЗапроса, Префикс, АнализироватьГранулярностьБлокировок)
	
	// Выбрать необходимые для рабора значения полей данных запроса
	МоментВремени     = ДанныеЗапроса["МоментВремени"     + Префикс];
	connectID         = ДанныеЗапроса["Соединение"        + Префикс];
	КонтекстЗапроса   = Строка(ДанныеЗапроса["КонтекстКлиента"   + Префикс]) + Строка(ДанныеЗапроса["КонтекстСервера"   + Префикс]);
	ТекстЗапроса      = ДанныеЗапроса["Запрос"            + Префикс];
	План              = ДанныеЗапроса["План"              + Префикс];
	Продолжительность = ДанныеЗапроса["Продолжительность" + Префикс];
	ДатаВремя         = ДанныеЗапроса["ДатаВремяСобытия"  + Префикс];
	Компьютер         = ДанныеЗапроса["Компьютер"         + Префикс];
	Пользователь      = ДанныеЗапроса["ИмяПользователя"   + Префикс];
	ТекстSdbl         = Строка(ДанныеЗапроса["SdblЗапрос" + Префикс]) + Строка(ДанныеЗапроса["SdblФункция" + Префикс]) + Строка(ДанныеЗапроса["SdblИмяТаблицы" + Префикс]);
	НомерСтроки       = ДанныеЗапроса["НомерСтроки"       + Префикс];
	
	// Выполнить разбор данных запроса
	
	Разбор = Новый Структура;
	
	// Получить номер соединения
	Разбор.Вставить("НомерСоединения", connectID);
	
	// Получить заблокированный запрос
	Разбор.Вставить("Запрос", ТекстЗапроса);
	Разбор.Вставить("План", План);
	Разбор.Вставить("ТекстSdbl", ТекстSdbl);
	
	// Получить контекст запроса
	Разбор.Вставить("КонтекстЗапроса", КонтекстЗапроса);
	
	// Время выполнения запроса
	Разбор.Вставить("ВремяВыполненияМс", Продолжительность/1000);
	
	// Момент времени окончания
	Разбор.Вставить("МоментВремениОкончания", МоментВремени);
	Разбор.Вставить("ДатаВремяСобытия",       ДатаВремя);
	
	// Получить заблокированного пользователя
	Разбор.Вставить("Пользователь", Пользователь);
	Разбор.Вставить("Компьютер", Компьютер);
	
	// Получить номер строки запроса
	Разбор.Вставить("НомерСтроки", НомерСтроки);
	
КонецПроцедуры // РазобратьЗапрос()

// Подготовить исходные данные для анализа
//
Процедура ЗаполнитьИсточникРесурсыАнализа(КонтекстАнализа, КоличествоЗаписей = 0) Экспорт
	
	Перем СловарьШаблонов;
	
	ОтладкаКлиентСервер.Действие("ЗаполнитьИсточникРесурсыАнализа");
	
	// Получить наименования таблиц в терминах 1С
	СловарьШаблонов = КонтекстАнализа.СловарьШаблонов;
	
	// Очисить регистры
	ТехнологическийЖурнал.ОчиститьИсходныеДанныеДляАнализа(КонтекстАнализа.Замер);
	
	// Найти жертв
	Запрос = Новый Запрос;
	ТипСУБД = КонтекстАнализа.Замер.ТипСУБД;
	Запрос.УстановитьПараметр("СобытиеСУБД", ТехнологическийЖурнал.ПолучитьИмяСобытияСУБД(ТипСУБД));
	Запрос.УстановитьПараметр("ДокументЗамер", КонтекстАнализа.Замер);
	Запрос.УстановитьПараметр("Период", КонтекстАнализа.Замер.Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТехнологическийЖурнал.connectID КАК НомерСоединения,
	               |	ТехнологическийЖурнал.МоментВремени КАК МоментВремени,
	               |	ТехнологическийЖурнал.lkpid КАК lkpid,
	               |	ТехнологическийЖурнал.lksrc КАК lksrc,
	               |	ТехнологическийЖурнал.Sql КАК ТекстЗапроса
	               |ИЗ
	               |	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	               |ГДЕ
	               |	ТехнологическийЖурнал.Событие = &СобытиеСУБД И
	               |	ТехнологическийЖурнал.Регистратор = &ДокументЗамер И
	               |	ТехнологическийЖурнал.Период = &Период И
	               |	lkp = 1";
	Жертвы = Запрос.Выполнить().Выбрать();
	
	// Создать наборы записей
	РесурсАнализа = РегистрыСведений.РесурсыАнализаТЖ.СоздатьНаборЗаписей();
	РесурсАнализа.Отбор.Регистратор.Установить(КонтекстАнализа.Замер);
	ИсточникАнализа = РегистрыСведений.ИсточникиАнализаТЖ.СоздатьНаборЗаписей();
	ИсточникАнализа.Отбор.Регистратор.Установить(КонтекстАнализа.Замер);
	
	Пока Жертвы.Следующий() Цикл
		
		// Получить ресурсы (имена таблиц) заблокированного запроса
		Ресурсы = СтруктураМетаданных.ПолучитьСловарьЗапроса(Жертвы.ТекстЗапроса, СловарьШаблонов, ТипСУБД);
		
		// Заполнить регистр сведений РесурсыАнализаТЖ
		Для Каждого Ресурс Из Ресурсы Цикл
			
			СтрокаРесурсАнализа = РесурсАнализа.Добавить();
			СтрокаРесурсАнализа.Период = КонтекстАнализа.Замер.Дата;
			СтрокаРесурсАнализа.МоментВремениЖертвы = Жертвы.МоментВремени;
			СтрокаРесурсАнализа.СоединениеЖертвы    = Жертвы.НомерСоединения;
			СтрокаРесурсАнализа.ИмяРесурса          = Ресурс.Ключ;
			СтрокаРесурсАнализа.Владелец = КонтекстАнализа.Замер;
			
			Если РесурсАнализа.Количество() = 1000 Тогда
				НачатьТранзакцию();
				Блокировка = Новый БлокировкаДанных;
				СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.РесурсыАнализаТЖ");
				СтрокаБлокировки.УстановитьЗначение("Владелец", КонтекстАнализа.Замер);
				СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				//Блокировка.Заблокировать();
				
				РесурсАнализа.Записать(Ложь);
				РесурсАнализа.Очистить();
				
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		КонецЦикла;
		
		lkpids = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Жертвы.lkpid, ",");
		lksrcs = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Жертвы.lksrc, ",");
		Всего = lkpids.Количество() - 1;
		
		Для Сч = 0 По Всего Цикл
			
			// Заполнить источник анализа
			СтрокаИсточникаАнализа = ИсточникАнализа.Добавить();
			СтрокаИсточникаАнализа.Период = КонтекстАнализа.Замер.Дата;
			СтрокаИсточникаАнализа.Владелец = КонтекстАнализа.Замер;
			СтрокаИсточникаАнализа.СоединениеЖертвы = Жертвы.НомерСоединения;
			СтрокаИсточникаАнализа.МоментВремениЖертвы = Жертвы.МоментВремени;
			СтрокаИсточникаАнализа.НомерБлокировки = Сч;
			СтрокаИсточникаАнализа.lkpid = Число(lkpids[Сч]);
			СтрокаИсточникаАнализа.lksrc = Число(lksrcs[Сч]);
			
			Если ИсточникАнализа.Количество() = 1000 Тогда
				НачатьТранзакцию();
				Блокировка = Новый БлокировкаДанных;
				СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ИсточникиАнализаТЖ");
				СтрокаБлокировки.УстановитьЗначение("Владелец", КонтекстАнализа.Замер);
				СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				//Блокировка.Заблокировать();
				
				ИсточникАнализа.Записать(Ложь);
				ИсточникАнализа.Очистить();
				
				ЗафиксироватьТранзакцию();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.РесурсыАнализаТЖ");
	СтрокаБлокировки.УстановитьЗначение("Владелец", КонтекстАнализа.Замер);
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ИсточникиАнализаТЖ");
	СтрокаБлокировки.УстановитьЗначение("Владелец", КонтекстАнализа.Замер);
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//Блокировка.Заблокировать();
	
	ИсточникАнализа.Записать(Ложь);
	ИсточникАнализа.Очистить();
	РесурсАнализа.Записать(Ложь);
	РесурсАнализа.Очистить();
	
	ЗафиксироватьТранзакцию();
	
	ОтладкаКлиентСервер.Результат("ЗаполнитьИсточникРесурсыАнализа", Жертвы.Количество());
	
КонецПроцедуры

// Получить данные о блокировках, установленных при выполнении соответствующих запросов
//
// Параметры:
//  Запрос - Запрос в котором установлены все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Функция ПолучитьИнформациюОГранулярностиБлокировок(ДокументЗамер, ПараметрыЖертвы, ПараметрыВиновника)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическийЖурнал.НомерСтроки КАК НомерСтроки,
	|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени,
	|	ТехнологическийЖурнал.Sql КАК Sql,
	|	ТехнологическийЖурнал.dbpid КАК dbpid
	|ПОМЕСТИТЬ СобытияТЖ
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|ГДЕ
	|	ТехнологическийЖурнал.Регистратор = &ДокументЗамер
	|	И (ТехнологическийЖурнал.НомерСтроки = &НомерСтрокиЖертвы
	|			ИЛИ ТехнологическийЖурнал.НомерСтроки = &НомерСтрокиВиновника)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТрассировок.SPID КАК SPID,
	|	ДанныеТрассировок.TransactionID КАК TransactionID,
	|	ДанныеТрассировок.EventSequence КАК EventSequence,
	|	ДанныеТрассировок.МоментВремениОкончанияСобытия КАК МоментВремениОкончанияСобытия,
	|	ДанныеТрассировок.НомерСтроки КАК НомерСтрокиТрассировки,
	|	ДанныеТрассировок.ТекстЗапроса КАК ТекстЗапроса,
	|	ВЫБОР
	|		КОГДА СобытияТЖ.МоментВремени - ДанныеТрассировок.МоментВремениОкончанияСобытия >= 0
	|			ТОГДА СобытияТЖ.МоментВремени - ДанныеТрассировок.МоментВремениОкончанияСобытия
	|		ИНАЧЕ ДанныеТрассировок.МоментВремениОкончанияСобытия - СобытияТЖ.МоментВремени
	|	КОНЕЦ КАК Дельта,
	|	СобытияТЖ.НомерСтроки КАК НомерСтрокиТЖ
	|ПОМЕСТИТЬ ДанныеТрассировокЗапросы
	|ИЗ
	|	РегистрСведений.ДанныеТрассировок КАК ДанныеТрассировок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СобытияТЖ КАК СобытияТЖ
	|		ПО ДанныеТрассировок.SPID = СобытияТЖ.dbpid
	|			И (СобытияТЖ.Sql ПОДОБНО ""%"" + ПОДСТРОКА(ДанныеТрассировок.ТекстЗапроса, 0, 3998) + ""%"")
	|			И (ДанныеТрассировок.МоментВремениОкончанияСобытия - СобытияТЖ.МоментВремени >= -600000000)
	|			И (ДанныеТрассировок.МоментВремениОкончанияСобытия - СобытияТЖ.МоментВремени <= 600000000)
	|ГДЕ
	|	ДанныеТрассировок.Регистратор = &ДокументЗамер
	|	И ДанныеТрассировок.Период = &Период
	|	И (ДанныеТрассировок.EventClass = 10
	|			ИЛИ ДанныеТрассировок.EventClass = 12)
	|	И НЕ ДанныеТрассировок.ТекстЗапроса ПОДОБНО """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТрассировок.EventClass КАК EventClass,
	|	ДанныеТрассировок.TransactionID КАК TransactionID,
	|	ДанныеТрассировок.EventSequence КАК EventSequence,
	|	ПОДСТРОКА(ДанныеТрассировок.TextData, 0, 256) КАК TextData,
	|	ДанныеТрассировок.Type КАК Type,
	|	ДанныеТрассировок.Mode КАК Mode,
	|	ПОДСТРОКА(ДанныеТрассировок.ObjectName, 0, 256) КАК ObjectName,
	|	ПОДСТРОКА(ДанныеТрассировок.IndexName, 0, 256) КАК IndexName,
	|	ДанныеТрассировок.ObjectType КАК ObjectType,
	|	ДанныеТрассировок.SPID КАК SPID
	|ПОМЕСТИТЬ ДанныеТрассировокБлокировки
	|ИЗ
	|	РегистрСведений.ДанныеТрассировок КАК ДанныеТрассировок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СобытияТЖ КАК СобытияТЖ
	|		ПО ДанныеТрассировок.SPID = СобытияТЖ.dbpid
	|ГДЕ
	|	ДанныеТрассировок.Регистратор = &ДокументЗамер
	|	И ДанныеТрассировок.Период = &Период
	|	И (ДанныеТрассировок.EventClass = 24
	|			ИЛИ ДанныеТрассировок.EventClass = 60)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТрассировокЗапросы.НомерСтрокиТЖ КАК НомерСтрокиТЖ,
	|	МИНИМУМ(ДанныеТрассировокЗапросы.Дельта) КАК Дельта
	|ПОМЕСТИТЬ БлижайшиеЗапросы
	|ИЗ
	|	ДанныеТрассировокЗапросы КАК ДанныеТрассировокЗапросы
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТрассировокЗапросы.НомерСтрокиТЖ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТрассировокЗапросы.НомерСтрокиТЖ КАК НомерСтрокиТЖ,
	|	МИНИМУМ(ДанныеТрассировокЗапросы.EventSequence) КАК EventSequence
	|ПОМЕСТИТЬ СоответствиеЗапросов
	|ИЗ
	|	ДанныеТрассировокЗапросы КАК ДанныеТрассировокЗапросы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БлижайшиеЗапросы КАК БлижайшиеЗапросы
	|		ПО ДанныеТрассировокЗапросы.НомерСтрокиТЖ = БлижайшиеЗапросы.НомерСтрокиТЖ
	|			И ДанныеТрассировокЗапросы.Дельта = БлижайшиеЗапросы.Дельта
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТрассировокЗапросы.НомерСтрокиТЖ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТрассировок1.SPID КАК SPID,
	|	ДанныеТрассировок1.TransactionID КАК TransactionID,
	|	ЕСТЬNULL(ДанныеТрассировок2.EventSequence, 0) КАК EventSequence1,
	|	МИНИМУМ(ДанныеТрассировок1.EventSequence) КАК EventSequence2
	|ПОМЕСТИТЬ ПоследовательностьЗапросов
	|ИЗ
	|	ДанныеТрассировокЗапросы КАК ДанныеТрассировок1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТрассировокЗапросы КАК ДанныеТрассировок2
	|		ПО ДанныеТрассировок1.SPID = ДанныеТрассировок2.SPID
	|			И ДанныеТрассировок1.TransactionID = ДанныеТрассировок2.TransactionID
	|			И ДанныеТрассировок1.EventSequence > ДанныеТрассировок2.EventSequence
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеТрассировок1.SPID,
	|	ДанныеТрассировок1.TransactionID,
	|	ДанныеТрассировок2.EventSequence
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеЗапросов.НомерСтрокиТЖ КАК НомерСтрокиТЖ,
	|	ПоследовательностьЗапросов.EventSequence1 КАК EventSequence1,
	|	СоответствиеЗапросов.EventSequence КАК EventSequence2,
	|	ДанныеТрассировокЗапросы.SPID КАК SPID,
	|	ДанныеТрассировокЗапросы.TransactionID КАК TransactionID
	|ПОМЕСТИТЬ СоответствиеЗапросовДополненное
	|ИЗ
	|	СоответствиеЗапросов КАК СоответствиеЗапросов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеТрассировокЗапросы КАК ДанныеТрассировокЗапросы
	|		ПО СоответствиеЗапросов.EventSequence = ДанныеТрассировокЗапросы.EventSequence
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследовательностьЗапросов КАК ПоследовательностьЗапросов
	|		ПО СоответствиеЗапросов.EventSequence = ПоследовательностьЗапросов.EventSequence2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеЗапросовДополненное.НомерСтрокиТЖ КАК НомерСтрокиТЖ,
	|	СоответствиеЗапросовДополненное.SPID КАК SPID,
	|	СоответствиеЗапросовДополненное.TransactionID КАК TransactionID,
	|	ДанныеТрассировокБлокировки.EventClass КАК EventClass,
	|	ДанныеТрассировокБлокировки.TextData КАК TextData,
	|	ДанныеТрассировокБлокировки.Type КАК Type,
	|	ДанныеТрассировокБлокировки.Mode КАК Mode,
	|	ДанныеТрассировокБлокировки.ObjectName КАК ObjectName,
	|	ДанныеТрассировокБлокировки.IndexName КАК IndexName,
	|	ДанныеТрассировокБлокировки.ObjectType КАК ObjectType,
	|	ВЫБОР
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_NULL)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_SCH_S)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_SCH_M)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_S)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 4
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_U)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 5
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_X)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 6
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_IS)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 7
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_IU)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 8
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_IX)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 9
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_SIU)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 10
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_SIX)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 11
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_UIX)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 12
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_BU)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 13
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_RangeS_S)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 14
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_RangeS_U)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 15
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_RangeI_N)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 16
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_RangeI_S)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 17
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_RangeI_U)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 18
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_RangeI_X)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 19
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_RangeX_S)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 20
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_RangeX_U)
	|		КОГДА ДанныеТрассировокБлокировки.Mode = 21
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.MSSQL_RangeX_X)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РежимыБлокировок.Неизвестный)
	|	КОНЕЦ КАК РежимБлокировки,
	|	ВЫБОР
	|		КОГДА ДанныеТрассировокБлокировки.Type = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыГранулярностиБлокировок.БазаДанных)
	|		КОГДА ДанныеТрассировокБлокировки.Type = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыГранулярностиБлокировок.Файл)
	|		КОГДА ДанныеТрассировокБлокировки.Type = 5
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыГранулярностиБлокировок.Таблица)
	|		КОГДА ДанныеТрассировокБлокировки.Type = 6
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыГранулярностиБлокировок.Страница)
	|		КОГДА ДанныеТрассировокБлокировки.Type = 7
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыГранулярностиБлокировок.Ключ)
	|		КОГДА ДанныеТрассировокБлокировки.Type = 8
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыГранулярностиБлокировок.Экстент)
	|		КОГДА ДанныеТрассировокБлокировки.Type = 9
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыГранулярностиБлокировок.ИдентификаторСтроки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыГранулярностиБлокировок.Неизвестно)
	|	КОНЕЦ КАК Гранулярность
	|ПОМЕСТИТЬ ДанныеПоГранулярностиБлокировок
	|ИЗ
	|	СоответствиеЗапросовДополненное КАК СоответствиеЗапросовДополненное
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТрассировокБлокировки КАК ДанныеТрассировокБлокировки
	|		ПО СоответствиеЗапросовДополненное.TransactionID = ДанныеТрассировокБлокировки.TransactionID
	|			И СоответствиеЗапросовДополненное.EventSequence1 < ДанныеТрассировокБлокировки.EventSequence
	|			И СоответствиеЗапросовДополненное.EventSequence2 > ДанныеТрассировокБлокировки.EventSequence
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтрокиТЖ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БлокировкиЖертвы.ObjectName КАК ObjectName,
	|	БлокировкиЖертвы.IndexName КАК IndexNamе,
	|	БлокировкиЖертвы.EventClass КАК EventClassЖертвы,
	|	БлокировкиВиновника.EventClass КАК EventClassВиновника,
	|	БлокировкиЖертвы.РежимБлокировки КАК РежимБлокировкиЖертвы,
	|	БлокировкиВиновника.РежимБлокировки КАК РежимБлокировкиВиновника,
	|	БлокировкиЖертвы.Гранулярность КАК ГранулярностьЖертвы,
	|	БлокировкиВиновника.Гранулярность КАК ГранулярностьВиновника,
	|	БлокировкиЖертвы.TextData КАК TextDataЖертвы,
	|	БлокировкиВиновника.TextData КАК TextDataВиновника
	|ПОМЕСТИТЬ ПересекающиесяБлокировки
	|ИЗ
	|	ДанныеПоГранулярностиБлокировок КАК БлокировкиЖертвы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПоГранулярностиБлокировок КАК БлокировкиВиновника
	|		ПО БлокировкиЖертвы.ObjectName = БлокировкиВиновника.ObjectName
	|			И БлокировкиЖертвы.IndexName = БлокировкиВиновника.IndexName
	|			И БлокировкиЖертвы.TextData = БлокировкиВиновника.TextData
	|ГДЕ
	|	БлокировкиЖертвы.НомерСтрокиТЖ = &НомерСтрокиЖертвы
	|	И БлокировкиВиновника.НомерСтрокиТЖ = &НомерСтрокиВиновника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПересекающиесяБлокировки.ObjectName КАК ObjectName,
	|	ПересекающиесяБлокировки.IndexNamе КАК IndexNamе,
	|	ПересекающиесяБлокировки.EventClassЖертвы КАК EventClassЖертвы,
	|	ПересекающиесяБлокировки.EventClassВиновника КАК EventClassВиновника,
	|	ПересекающиесяБлокировки.РежимБлокировкиЖертвы КАК РежимБлокировкиЖертвы,
	|	ПересекающиесяБлокировки.РежимБлокировкиВиновника КАК РежимБлокировкиВиновника,
	|	ПересекающиесяБлокировки.ГранулярностьЖертвы КАК ГранулярностьЖертвы,
	|	ПересекающиесяБлокировки.ГранулярностьВиновника КАК ГранулярностьВиновника,
	|	ПересекающиесяБлокировки.TextDataЖертвы КАК TextDataЖертвы,
	|	ПересекающиесяБлокировки.TextDataВиновника КАК TextDataВиновника,
	|	СовместимостьБлокировок.ТипСУБД КАК ТипСУБД,
	|	СовместимостьБлокировок.УстановленнаяБлокировка КАК УстановленнаяБлокировка,
	|	СовместимостьБлокировок.УстанавливаемаяБлокировка КАК УстанавливаемаяБлокировка,
	|	СовместимостьБлокировок.Совместимость КАК Совместимость
	|ИЗ
	|	ПересекающиесяБлокировки КАК ПересекающиесяБлокировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СовместимостьБлокировок КАК СовместимостьБлокировок
	|		ПО (СовместимостьБлокировок.УстанавливаемаяБлокировка = ПересекающиесяБлокировки.РежимБлокировкиЖертвы)
	|			И (СовместимостьБлокировок.УстановленнаяБлокировка = ПересекающиесяБлокировки.РежимБлокировкиВиновника)
	|			И (СовместимостьБлокировок.Совместимость = ЗНАЧЕНИЕ(Перечисление.ВидыСовместимостиБлокировок.Несовместима))
	|			И (СовместимостьБлокировок.ТипСУБД = ЗНАЧЕНИЕ(Перечисление.ТипыСУБД.MSSQLServer))";
	
	Запрос.УстановитьПараметр("ДокументЗамер", ДокументЗамер);
	Запрос.УстановитьПараметр("Период", ДокументЗамер.Дата);
	Запрос.УстановитьПараметр("НомерСтрокиЖертвы", ПараметрыЖертвы.НомерСтроки);
	Запрос.УстановитьПараметр("НомерСтрокиВиновника", ПараметрыВиновника.НомерСтроки);
	ДанныеОГранулярности = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеОГранулярности;
	
КонецФункции // ПолучитьИнформациюОГранулярностиБлокировок()

