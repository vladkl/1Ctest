///////////////////////////////////////////////////////////////////////////////
// АНАЛИЗ ВЗАИМОБЛОКИРОВОК

// Включить сбор информации для анализа взаимоблокировок 1С
//
Функция ВключитьСборВзаимоблокировок(ИБ, Показатели) Экспорт
	
	ОтладкаКлиентСервер.Действие("ВключитьСборВзаимоблокировок");
	
	ОписательТЖ = ВключитьСборВзаимоблокировок1С(ИБ, Показатели);
	
	ОтладкаКлиентСервер.Результат("ВключитьСборВзаимоблокировок");
	
	Возврат ОписательТЖ;
	
КонецФункции // ВключитьСборВзаимоблокировок

// Отключить сбор информации для анализа взаимоблокировок 1С
//
Процедура ОтключитьСборВзаимоблокировок(ИБ, Показатели, ОписательТЖ, АнализНеобходим) Экспорт
	
	ОтладкаКлиентСервер.Действие("ОтключитьСборВзаимоблокировок");
	
	ОстановитьСборВзаимоблокировок1С(ИБ, Показатели, ОписательТЖ, АнализНеобходим);
	
	ОтладкаКлиентСервер.Результат("ОтключитьСборВзаимоблокировок");
	
КонецПроцедуры // ОтключитьСборВзаимоблокировок

// Провести анализ ожиданий на блокировках
//
Процедура ПроанализироватьВзаимоблокировки(КонтекстАнализа) Экспорт
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьВзаимоблокировки");
	
	ПроанализироватьВзаимоблокировки1С(КонтекстАнализа);
	
	ОтладкаКлиентСервер.Результат("ПроанализироватьВзаимоблокировки");
	
КонецПроцедуры // ПроанализироватьВзаимоблокировки


///////////////////////////////////////////////////////////////////////////////
// АНАЛИЗ ВЗАИМОБЛОКИРОВОК 1С

// Включить сбор информации для анализа взаимоблокировок
//
Функция ВключитьСборВзаимоблокировок1С(ИБ, Показатели) Экспорт
	
	ОтладкаКлиентСервер.Действие("ВключитьСборВзаимоблокировок1С");
	
	// Включить технологический журнал
	ОписательТЖВзаимоблокировок = ТехнологическийЖурнал.ВключитьТехнологическийЖурнал(
		ТехнологическийЖурнал.КонфигурацияАнализаВзаимоблокировок1С(ИБ.ИмяИБ),
		ИБ.ИменаКаталоговТЖ);
		
	// Зафиксировать каталоги ТЖ
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализВзаимоблокировок1С);
	СтрокаПоказателя.ЗамерАнализБлокировок1С = Замер.СоздатьЗамер(
		ИБ,
		СтрокаПоказателя.Показатель,
		СтрокаПоказателя.Экземпляр,
		ИБ.ТипСУБД,,
		Перечисления.ТипыБлокировок.Блокировка1СПредприятия,
		ИБ.ИмяБД);
	Замер.УстановитьКаталогиТЖ(СтрокаПоказателя.ЗамерАнализБлокировок1С, ОписательТЖВзаимоблокировок.КаталогиТЖ);
	
	ОтладкаКлиентСервер.Результат("ВключитьСборВзаимоблокировок1С");
	
	Возврат ОписательТЖВзаимоблокировок;
	
КонецФункции // ВключитьСборВзаимоблокировок1С

// Остановить сбор информации для анализа взаимоблокировок 1С
//
Процедура ОстановитьСборВзаимоблокировок1С(ИБ, Показатели, ОписательТЖ, АнализНеобходим) Экспорт
	
	ОтладкаКлиентСервер.Действие("ОстановитьСборВзаимоблокировок1С");
	
	// Остановить технологический журнал
	ТехнологическийЖурнал.ОтключитьТехнологическийЖурнал(
		ОписательТЖ,
		ИБ.ИменаКаталоговТЖ);
		
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализВзаимоблокировок1С);
	Замер.ЗавершитьЗамер(СтрокаПоказателя.ЗамерАнализБлокировок1С);
	
	Если Не АнализНеобходим Тогда
		Замер.Отменить(СтрокаПоказателя.ЗамерАнализБлокировок1С);
	КонецЕсли;
	
	ОтладкаКлиентСервер.Результат("ОстановитьСборВзаимоблокировок1С");
	
КонецПроцедуры // ОстановитьСборВзаимоблокировок1С

// Провести анализ взаимоблокировок 1С
//
Процедура ПроанализироватьВзаимоблокировки1С(КонтекстАнализа) Экспорт
	
	Перем НомерПоследнегоСобытия;
	Перем РезультатРазбора;
	Перем Взаимоблокировка;
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьВзаимоблокировки1С");
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	// Подготовить данные по событиям TLOCK
	АнализБлокировок1С.ПодготовитьИсходныеДанные(КонтекстАнализа);
	
	// Подготовить данные по событиям TDEADLOCK
	РазобратьГрафыВзаимоблокировок1С(КонтекстАнализа);
	
	// Дополнить данные событиями TLOCK, которые были в состоянии ожидания на взаимоблокировке
	ДополнитьГрафыЖертвамиБлокировок(КонтекстАнализа);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СобытиеContext", "Context");
	Запрос.УстановитьПараметр("ДокументЗамер", КонтекстАнализа.Замер);
	Запрос.УстановитьПараметр("Период", КонтекстАнализа.Замер.Дата);
	
	ПодготовитьДанные(Запрос);
	ОпределитьВиновников(Запрос);
	ОпределитьКонтекстыЖертв(Запрос);
	ОпределитьКонтекстыВиновников(Запрос);
	ВыборкаВзаимоблокировки = ПолучитьРезультатАнализа(Запрос);
	КоличествоВзаимоблокировок = 0;
	НомерРесурса = 1;
	
	Пока ВыборкаВзаимоблокировки.Следующий() Цикл
		РезультатРазбора = Анализ.ПолучитьШаблонОписанияВзаимоблокировки();
		РезультатРазбора.Дата = '00010101' + ВыборкаВзаимоблокировки.МоментВремениВзаимоблокировки / 10000000;
		РезультатРазбора.МоментВремени = ВыборкаВзаимоблокировки.МоментВремениВзаимоблокировки;
		РезультатРазбора.ИнформационнаяБаза = КонтекстАнализа.Замер.ИнформационнаяБаза;
		РезультатРазбора.НомерВзаимоблокировки = КоличествоВзаимоблокировок;
		РезультатРазбора.ТипБлокировки = Перечисления.ТипыБлокировок.Блокировка1СПредприятия;
		
		ВыборкаБлокировки = ВыборкаВзаимоблокировки.Выбрать();
		Пока ВыборкаБлокировки.Следующий() Цикл
			БлокировкаЖертвы = АнализБлокировок1С.СоздатьСтруктуруБлокировки(
				ВыборкаБлокировки.МоментВремениЖертвы,
				ВыборкаБлокировки.СоединениеЖертвы,
				Строка(ВыборкаБлокировки.КонтекстКлиентаЖертвы) + Строка(ВыборкаБлокировки.КонтекстСервераЖертвы),
				ВыборкаБлокировки.ВремяВыполненияМсЖертвы,
				ВыборкаБлокировки.ДатаВремяСобытияЖертвы,
				ВыборкаБлокировки.КомпьютерЖертвы,
				ВыборкаБлокировки.ИмяПользователяЖертвы,
				ВыборкаБлокировки.ИмяРесурса,
				ВыборкаБлокировки.РежимБлокировкиЖертвы,
				КонтекстАнализа
			);
			БлокировкаЖертвы.Вставить("Состояние", Перечисления.СостоянияБлокировок.Ожидание);
			
			БлокировкаВиновника = АнализБлокировок1С.СоздатьСтруктуруБлокировки(
				ВыборкаБлокировки.МоментВремениВиновника,
				ВыборкаБлокировки.СоединениеВиновника,
				Строка(ВыборкаБлокировки.КонтекстКлиентаВиновника) + Строка(ВыборкаБлокировки.КонтекстСервераВиновника),
				ВыборкаБлокировки.ВремяВыполненияМсВиновника,
				ВыборкаБлокировки.ДатаВремяСобытияВиновника,
				ВыборкаБлокировки.КомпьютерВиновника,
				ВыборкаБлокировки.ИмяПользователяВиновника,
				ВыборкаБлокировки.ИмяРесурса,
				ВыборкаБлокировки.РежимБлокировкиВиновника,
				КонтекстАнализа
			);
			БлокировкаВиновника.Вставить("Состояние", Перечисления.СостоянияБлокировок.Установлена);
			
			СтрокаБлокировки = РезультатРазбора.Блокировки.Добавить();
			СтрокаБлокировки.Процесс = ВыборкаБлокировки.СоединениеВиновника;
			СтрокаБлокировки.Блокировка = БлокировкаВиновника;
			
			СтрокаБлокировки = РезультатРазбора.Блокировки.Добавить();
			СтрокаБлокировки.Процесс = ВыборкаБлокировки.СоединениеЖертвы;
			СтрокаБлокировки.Блокировка = БлокировкаЖертвы;
			КоличествоВзаимоблокировок = КоличествоВзаимоблокировок + 1;
		КонецЦикла;
		
		НачатьТранзакцию();
		Попытка
			Взаимоблокировка = СтруктураДанных.ЗафиксироватьВзаимоблокировку(РезультатРазбора, КонтекстАнализа, Инструменты);
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	ОтладкаКлиентСервер.Результат("ПроанализироватьВзаимоблокировки1С", КоличествоВзаимоблокировок);
	
КонецПроцедуры // ПроанализироватьВзаимоблокировкиMSSQL

// Подготовить исходные данные по событиям TDEADLOCK для анализа
//
Процедура РазобратьГрафыВзаимоблокировок1С(КонтекстАнализа)
	
	Результат = Новый Массив;
	НаборЗаписей = РегистрыСведений.ГрафыВзаимоблокировок1С.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(КонтекстАнализа.Замер);
	НаборЗаписей.Записать(Истина);
	КэшОписанийБлокировок = Неопределено;
	
	НаборЗначенияПолей = РегистрыСведений.ЗначенияПолейРесурсов.СоздатьНаборЗаписей();
	НаборЗначенияПолей.Отбор.Регистратор.Установить(КонтекстАнализа.Замер);
	
	// Разбор графов взаимоблокировок и запись исходных данных анализа
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическийЖурнал.Период КАК Период,
	|	ТехнологическийЖурнал.МоментВремени КАК МоментВремениЖертвы,
	|	ТехнологическийЖурнал.connectID КАК СоединениеЖертвы,
	|	ТехнологическийЖурнал.DeadlockConnectionIntersections КАК Граф
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|ГДЕ
	|	ТехнологическийЖурнал.Период = &Период
	|	И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
	|	И ТехнологическийЖурнал.Событие = &Событие";
	
	Запрос.УстановитьПараметр("Событие", "TDEADLOCK");
	Запрос.УстановитьПараметр("ДокументЗамер", КонтекстАнализа.Замер);
	Запрос.УстановитьПараметр("Период", КонтекстАнализа.Замер.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейГрафы = РегистрыСведений.ГрафыВзаимоблокировок1С.СоздатьНаборЗаписей();
	НаборЗаписейГрафы.Отбор.Регистратор.Установить(КонтекстАнализа.Замер);
	НаборЗаписейГрафы.Записать(Истина);
	
	КоличествоЗаписейНабора = 0;
	НомерВзаимоблокировки = 0;
	Пока Выборка.Следующий() Цикл
		
		// Примеры событий:
		// TDEADLOCK
		//  479977 479978 Reference11.REFLOCK Exclusive ID=11:87e950465d9e289111e6299c9a7016f5
		//|,479978 479977 Reference11.REFLOCK Exclusive ID=11:87e950465d9e289111e6299c9a7016f5
		// TLOCK
		//                Reference11.REFLOCK Shared ID=11:87e950465d9e289111e6299c9a7016f5
		УчастникиВзаимоблокировки = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Выборка.Граф, ",");
		НомерБлокировки = 0;
		Для Каждого Участник Из УчастникиВзаимоблокировки Цикл
			ЭлементыОписанияБлокировки = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Участник, " ");
			СоединениеЖертвы = ЭлементыОписанияБлокировки[0];
			СоединениеВиновника = ЭлементыОписанияБлокировки[1];
			ЗначенияПолей = "";
			Для Сч = 2 По ЭлементыОписанияБлокировки.ВГраница() Цикл
				ЗначенияПолей = 
					ЗначенияПолей + ?(ПустаяСтрока(ЗначенияПолей), "", " ") + ЭлементыОписанияБлокировки[Сч];
			КонецЦикла;
			ЗаблокированныеРесурсы = АнализБлокировок1С.РазобратьЗаблокированныеРесурсы(
				КэшОписанийБлокировок,
				НаборЗначенияПолей,
				КонтекстАнализа.Замер,
				ЗначенияПолей,
				Число(СоединениеЖертвы),
				Выборка.МоментВремениЖертвы,
				Истина
			);
			
			СтрокаНабораИсточника = НаборЗаписейГрафы.Добавить();
			СтрокаНабораИсточника.Событие = "TDEADLOCK";
			СтрокаНабораИсточника.Период = КонтекстАнализа.Замер.Дата;
			СтрокаНабораИсточника.МоментВремениЖертвы = Выборка.МоментВремениЖертвы;
			СтрокаНабораИсточника.СоединениеЖертвы = СоединениеЖертвы;
			СтрокаНабораИсточника.НомерБлокировки = НомерБлокировки;
			СтрокаНабораИсточника.НомерВзаимоблокировки = НомерВзаимоблокировки;
			СтрокаНабораИсточника.БлокирующийПроцесс = Число(СоединениеВиновника);
			СтрокаНабораИсточника.Владелец = КонтекстАнализа.Замер;
			
			НомерБлокировки = НомерБлокировки + 1;
			КоличествоЗаписейНабора = КоличествоЗаписейНабора + 1;
		КонецЦикла;
		
		НомерВзаимоблокировки = НомерВзаимоблокировки + 1;
	КонецЦикла;
	
	Если КоличествоЗаписейНабора > 0 Или НаборЗначенияПолей.Количество() > 0 Тогда
		НачатьТранзакцию();
		Блокировка = Новый БлокировкаДанных;
		СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ИсточникиАнализаТЖ");
		СтрокаБлокировки.УстановитьЗначение("Владелец", КонтекстАнализа.Замер);
		СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		НаборЗаписейГрафы.Записать(Ложь);
		
		НаборЗначенияПолей.Записать(Ложь);
		
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры // РазобратьГрафыВзаимоблокировок1С()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДополнитьГрафыЖертвамиБлокировок(КонтекстАнализа)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафыВзаимоблокировок1С.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
	|	ГрафыВзаимоблокировок1С.НомерБлокировки КАК НомерБлокировки,
	|	ГрафыВзаимоблокировок1С.СоединениеЖертвы КАК СоединениеЖертвы,
	|	ГрафыВзаимоблокировок1С.МоментВремениЖертвы КАК МоментВремениВзаимоблокировки,
	|	ГрафыВзаимоблокировок1С.Владелец КАК Владелец,
	|	ГрафыВзаимоблокировок1С.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ Взаимоблокировки
	|ИЗ
	|	РегистрСведений.ГрафыВзаимоблокировок1С КАК ГрафыВзаимоблокировок1С
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПолейРесурсов КАК ЗначенияПолейРесурсов
	|		ПО ГрафыВзаимоблокировок1С.СоединениеЖертвы = ЗначенияПолейРесурсов.Соединение
	|ГДЕ
	|	ГрафыВзаимоблокировок1С.Регистратор = &ДокументЗамер
	|	И ЗначенияПолейРесурсов.Регистратор = &ДокументЗамер
	|	И ГрафыВзаимоблокировок1С.Период = &Период
	|	И ЗначенияПолейРесурсов.Период = &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаимоблокировки.Владелец КАК Владелец,
	|	Взаимоблокировки.МоментВремениВзаимоблокировки КАК МоментВремениВзаимоблокировки,
	|	Взаимоблокировки.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
	|	Взаимоблокировки.НомерБлокировки КАК НомерБлокировки,
	|	ИсточникиАнализаТЖ.СоединениеЖертвы КАК СоединениеЖертвы,
	|	МИНИМУМ(ИсточникиАнализаТЖ.МоментВремениЖертвы) КАК МоментВремениЖертвы,
	|	ИсточникиАнализаТЖ.НомерВзаимоблокировки КАК НомерВзаимоблокировкиИсточник,
	|	ИсточникиАнализаТЖ.НомерБлокировки КАК НомерБлокировкиИсточник
	|ПОМЕСТИТЬ ЖертвыОжиданий
	|ИЗ
	|	Взаимоблокировки КАК Взаимоблокировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсточникиАнализаТЖ КАК ИсточникиАнализаТЖ
	|		ПО Взаимоблокировки.СоединениеЖертвы = ИсточникиАнализаТЖ.СоединениеЖертвы
	|			И Взаимоблокировки.МоментВремениВзаимоблокировки <= ИсточникиАнализаТЖ.МоментВремениЖертвы
	|ГДЕ
	|	ИсточникиАнализаТЖ.Период = &Период
	|	И ИсточникиАнализаТЖ.Регистратор = &ДокументЗамер
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникиАнализаТЖ.СоединениеЖертвы,
	|	ИсточникиАнализаТЖ.НомерВзаимоблокировки,
	|	ИсточникиАнализаТЖ.НомерБлокировки,
	|	Взаимоблокировки.Владелец,
	|	Взаимоблокировки.МоментВремениВзаимоблокировки,
	|	Взаимоблокировки.НомерВзаимоблокировки,
	|	Взаимоблокировки.НомерБлокировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖертвыОжиданий.МоментВремениВзаимоблокировки КАК МоментВремениВзаимоблокировки,
	|	ЖертвыОжиданий.Владелец КАК Владелец,
	|	ЖертвыОжиданий.СоединениеЖертвы КАК СоединениеЖертвы,
	|	ЖертвыОжиданий.МоментВремениЖертвы КАК МоментВремениЖертвы,
	|	ЖертвыОжиданий.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
	|	ЖертвыОжиданий.НомерБлокировки КАК НомерБлокировки,
	|	ИсточникиАнализаТЖ.БлокирующийПроцесс КАК БлокирующийПроцесс
	|ИЗ
	|	ЖертвыОжиданий КАК ЖертвыОжиданий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсточникиАнализаТЖ КАК ИсточникиАнализаТЖ
	|		ПО ЖертвыОжиданий.СоединениеЖертвы = ИсточникиАнализаТЖ.СоединениеЖертвы
	|			И ЖертвыОжиданий.МоментВремениЖертвы = ИсточникиАнализаТЖ.МоментВремениЖертвы
	|			И ЖертвыОжиданий.НомерВзаимоблокировкиИсточник = ИсточникиАнализаТЖ.НомерВзаимоблокировки
	|			И ЖертвыОжиданий.НомерБлокировкиИсточник = ИсточникиАнализаТЖ.НомерБлокировки
	|			И ЖертвыОжиданий.Владелец = ИсточникиАнализаТЖ.Владелец";
	
	Запрос.УстановитьПараметр("ДокументЗамер", КонтекстАнализа.Замер);
	Запрос.УстановитьПараметр("Период", КонтекстАнализа.Замер.Дата);
	
	КоличествоЗаписейНабора = 0;
	НаборЗаписей = РегистрыСведений.ГрафыВзаимоблокировок1С.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(КонтекстАнализа.Замер);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНабораИсточника = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабораИсточника, Выборка);
		СтрокаНабораИсточника.Событие = "TLOCK";
		СтрокаНабораИсточника.Период = КонтекстАнализа.Замер.Дата;
		КоличествоЗаписейНабора = КоличествоЗаписейНабора + 1;
	КонецЦикла;
	
	Если КоличествоЗаписейНабора > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры // ДополнитьГрафыЖертвамиБлокировок()

// Подготовить данные
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
Процедура ПодготовитьДанные(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникАнализаТЖ.МоментВремениВзаимоблокировки КАК МоментВремениВзаимоблокировки,
	|	ИсточникАнализаТЖ.СоединениеЖертвы КАК СоединениеЖертвы,
	|	ИсточникАнализаТЖ.МоментВремениЖертвы КАК МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
	|	МАКСИМУМ(ТехнологическийЖурнал.МоментВремени) КАК НачалоБлокирующейТранзакции
	|ПОМЕСТИТЬ ВсеЖертвы
	|ИЗ
	|	РегистрСведений.ГрафыВзаимоблокировок1С КАК ИсточникАнализаТЖ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|		ПО    ИсточникАнализаТЖ.Событие = ""TLOCK""
	|			И ИсточникАнализаТЖ.БлокирующийПроцесс = ТехнологическийЖурнал.connectID
	|			И ИсточникАнализаТЖ.МоментВремениЖертвы >= ТехнологическийЖурнал.МоментВремени
	|			И (ТехнологическийЖурнал.Владелец = &ДокументЗамер)
	|			И (ТехнологическийЖурнал.Событие = ""SDBL"")
	|			И (ТехнологическийЖурнал.Func ПОДОБНО ""BeginTransaction"")
	|			И (ТехнологическийЖурнал.Период = &Период)
	|			И (ТехнологическийЖурнал.Регистратор = &ДокументЗамер)
	|			И (ИсточникАнализаТЖ.Период = &Период)
	|			И (ИсточникАнализаТЖ.Регистратор = &ДокументЗамер)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникАнализаТЖ.МоментВремениВзаимоблокировки,
	|	ИсточникАнализаТЖ.СоединениеЖертвы,
	|	ИсточникАнализаТЖ.МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.НомерВзаимоблокировки";
	Запрос.Выполнить();
	
КонецПроцедуры // ПодготовитьДанные()

// Определить виновников жертв
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
Процедура ОпределитьВиновников(Запрос)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("МоментВремениВзаимоблокировки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("НомерВзаимоблокировки",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("МоментВремениЖертвы",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("СоединениеЖертвы",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("МоментВремениВиновника",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("СоединениеВиновника",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("РежимБлокировкиЖертвы",
		Новый ОписаниеТипов("ПеречислениеСсылка.РежимыБлокировок"));
	ТЗ.Колонки.Добавить("РежимБлокировкиВиновника",
		Новый ОписаниеТипов("ПеречислениеСсылка.РежимыБлокировок"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВсеЖертвы.МоментВремениВзаимоблокировки,
	|	ВсеЖертвы.НомерВзаимоблокировки,
	|	ВсеЖертвы.СоединениеЖертвы,
	|	ВсеЖертвы.МоментВремениЖертвы,
	|	ВсеЖертвы.НачалоБлокирующейТранзакции
	|ИЗ
	|	ВсеЖертвы КАК ВсеЖертвы";
	ВыборкаЖертв = Запрос.Выполнить().Выбрать();
	
	ПериодЗапроса = Неопределено;
	ДокументЗамер = Неопределено;
	Запрос.Параметры.Свойство("Период", ПериодЗапроса);
	Запрос.Параметры.Свойство("ДокументЗамер", ДокументЗамер);
	
	ЗапросВиновников = Новый Запрос;
	ЗапросВиновников.УстановитьПараметр("Период", ПериодЗапроса);
	ЗапросВиновников.УстановитьПараметр("ДокументЗамер", ДокументЗамер);
	Пока ВыборкаЖертв.Следующий() Цикл
		
		ЗапросВиновников.УстановитьПараметр("СоединениеЖертвы", ВыборкаЖертв.СоединениеЖертвы);
		ЗапросВиновников.УстановитьПараметр("МоментВремениЖертвы", ВыборкаЖертв.МоментВремениЖертвы);
		ЗапросВиновников.УстановитьПараметр("НачалоБлокирующейТранзакции", ВыборкаЖертв.НачалоБлокирующейТранзакции);
		ЗапросВиновников.УстановитьПараметр("НомерВзаимоблокировки", ВыборкаЖертв.НомерВзаимоблокировки);
		ЗапросВиновников.Текст = 
		"ВЫБРАТЬ
		|	ИсточникАнализаТЖ.СоединениеЖертвы КАК СоединениеЖертвы,
		|	ИсточникАнализаТЖ.БлокирующийПроцесс КАК СоединениеВиновника,
		|	ИсточникАнализаТЖ.МоментВремениВзаимоблокировки КАК МоментВремениВзаимоблокировки,
		|	ЗначенияПолейЖертвы.ИмяПоля КАК ИмяПоляЖертвы,
		|	ЗначенияПолейЖертвы.ЭтоДиапазон КАК ЭтоДиапазон,
		|	ЗначенияПолейЖертвы.Значение КАК Значение,
		|	ЗначенияПолейЖертвы.Значение1 КАК Значение1,
		|	ЗначенияПолейЖертвы.Значение2 КАК Значение2,
		|	ЗначенияПолейЖертвы.РежимБлокировки КАК РежимБлокировкиЖертвы,
		|	ЗначенияПолейЖертвы.ИмяРесурса КАК ИмяРесурсаЖертвы,
		|	&НачалоБлокирующейТранзакции КАК НачалоБлокирующейТранзакции
		|ПОМЕСТИТЬ ВТ_Жертвы
		|ИЗ
		|	РегистрСведений.ГрафыВзаимоблокировок1С КАК ИсточникАнализаТЖ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПолейРесурсов КАК ЗначенияПолейЖертвы
		|		ПО ИсточникАнализаТЖ.СоединениеЖертвы = ЗначенияПолейЖертвы.Соединение
		|			И ИсточникАнализаТЖ.МоментВремениЖертвы = ЗначенияПолейЖертвы.МоментВремени
		|ГДЕ
		|	ЗначенияПолейЖертвы.Период = &Период
		|	И ЗначенияПолейЖертвы.Регистратор = &ДокументЗамер
		|	И ИсточникАнализаТЖ.Период = &Период
		|	И ИсточникАнализаТЖ.Регистратор = &ДокументЗамер
		|	И ИсточникАнализаТЖ.Владелец = &ДокументЗамер
		|	И ИсточникАнализаТЖ.СоединениеЖертвы = &СоединениеЖертвы
		|	И ЗначенияПолейЖертвы.Соединение = &СоединениеЖертвы
		|	И ИсточникАнализаТЖ.МоментВремениЖертвы = &МоментВремениЖертвы
		|	И ЗначенияПолейЖертвы.МоментВремени = &МоментВремениЖертвы
		|	И ИсточникАнализаТЖ.НомерВзаимоблокировки = &НомерВзаимоблокировки
		|	И ИсточникАнализаТЖ.Событие = ""TLOCK""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияПолейВиновников.Соединение КАК СоединениеВиновника,
		|	ЗначенияПолейВиновников.МоментВремени КАК МоментВремениВиновника,
		|	ЗначенияПолейВиновников.ИмяПоля КАК ИмяПоляВиновника,
		|	ЗначенияПолейВиновников.ЭтоДиапазон КАК ЭтоДиапазон,
		|	ЗначенияПолейВиновников.Значение КАК Значение,
		|	ЗначенияПолейВиновников.Значение1 КАК Значение1,
		|	ЗначенияПолейВиновников.Значение2 КАК Значение2,
		|	ЗначенияПолейВиновников.РежимБлокировки КАК РежимБлокировкиВиновника,
		|	ЗначенияЖертвы.РежимБлокировкиЖертвы КАК РежимБлокировкиЖертвы
		|ПОМЕСТИТЬ ВТ_ВиновникиПредполагаемые
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		ВТ_Жертвы.СоединениеВиновника КАК СоединениеВиновника,
		|		ВТ_Жертвы.МоментВремениВзаимоблокировки КАК МоментВремениВзаимоблокировки,
		|		ВТ_Жертвы.ИмяРесурсаЖертвы КАК ИмяРесурсаЖертвы,
		|		ВТ_Жертвы.РежимБлокировкиЖертвы КАК РежимБлокировкиЖертвы,
		|		ВТ_Жертвы.НачалоБлокирующейТранзакции КАК НачалоБлокирующейТранзакции
		|	ИЗ
		|		ВТ_Жертвы КАК ВТ_Жертвы) КАК ЗначенияЖертвы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПолейРесурсов КАК ЗначенияПолейВиновников
		|		ПО ЗначенияЖертвы.СоединениеВиновника = ЗначенияПолейВиновников.Соединение
		|			И ЗначенияЖертвы.МоментВремениВзаимоблокировки >= ЗначенияПолейВиновников.МоментВремени
		|			И ЗначенияЖертвы.НачалоБлокирующейТранзакции <= ЗначенияПолейВиновников.МоментВремени
		|			И ЗначенияЖертвы.ИмяРесурсаЖертвы = ЗначенияПолейВиновников.ИмяРесурса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СовместимостьБлокировок КАК Блокировки
		|		ПО ЗначенияЖертвы.РежимБлокировкиЖертвы = Блокировки.УстанавливаемаяБлокировка
		|			И (ЗначенияПолейВиновников.РежимБлокировки = Блокировки.УстановленнаяБлокировка)
		|			И (Блокировки.Совместимость = ЗНАЧЕНИЕ(Перечисление.ВидыСовместимостиБлокировок.Несовместима))
		|			И (Блокировки.ТипСУБД = ЗНАЧЕНИЕ(Перечисление.ТипыСУБД.DBV8DBEng))
		|ГДЕ
		|	ЗначенияПолейВиновников.Период = &Период
		|	И ЗначенияПолейВиновников.Регистратор = &ДокументЗамер
		|	И НЕ ЗначенияПолейВиновников.ЭтоРесурсВзаимоблокировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВиновникиПредполагаемые.СоединениеВиновника КАК СоединениеВиновника,
		|	ВТ_ВиновникиПредполагаемые.МоментВремениВиновника КАК МоментВремениВиновника,
		|	ВТ_ВиновникиПредполагаемые.ИмяПоляВиновника КАК ИмяПоляВиновника,
		|	ВТ_ВиновникиПредполагаемые.ЭтоДиапазон КАК ЭтоДиапазон,
		|	ВТ_ВиновникиПредполагаемые.Значение КАК Значение,
		|	ВТ_ВиновникиПредполагаемые.Значение1 КАК Значение1,
		|	ВТ_ВиновникиПредполагаемые.Значение2 КАК Значение2,
		|	ВТ_ВиновникиПредполагаемые.РежимБлокировкиВиновника КАК РежимБлокировкиВиновника,
		|	ВТ_ВиновникиПредполагаемые.РежимБлокировкиЖертвы КАК РежимБлокировкиЖертвы
		|ПОМЕСТИТЬ ВТ_НеВиновные
		|ИЗ
		|	ВТ_Жертвы КАК ВТ_Жертвы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВиновникиПредполагаемые КАК ВТ_ВиновникиПредполагаемые
		|		ПО ВТ_Жертвы.ИмяПоляЖертвы = ВТ_ВиновникиПредполагаемые.ИмяПоляВиновника
		|			И (ВЫБОР
		|				КОГДА ВТ_Жертвы.ЭтоДиапазон
		|						ИЛИ ВТ_ВиновникиПредполагаемые.ЭтоДиапазон
		|					ТОГДА НЕ(ВТ_Жертвы.Значение1 <= ВТ_ВиновникиПредполагаемые.Значение2
		|								И ВТ_ВиновникиПредполагаемые.Значение1 <= ВТ_Жертвы.Значение2)
		|				ИНАЧЕ ВТ_Жертвы.Значение <> ВТ_ВиновникиПредполагаемые.Значение
		|			КОНЕЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_ВиновникиПредполагаемые.СоединениеВиновника КАК СоединениеВиновника,
		|	ВТ_ВиновникиПредполагаемые.МоментВремениВиновника КАК МоментВремениВиновника,
		|	ВТ_ВиновникиПредполагаемые.РежимБлокировкиВиновника КАК РежимБлокировкиВиновника,
		|	ВТ_ВиновникиПредполагаемые.РежимБлокировкиЖертвы КАК РежимБлокировкиЖертвы
		|ИЗ
		|	ВТ_ВиновникиПредполагаемые КАК ВТ_ВиновникиПредполагаемые
		|ГДЕ
		|	НЕ (ВТ_ВиновникиПредполагаемые.СоединениеВиновника, ВТ_ВиновникиПредполагаемые.МоментВремениВиновника, ВТ_ВиновникиПредполагаемые.ИмяПоляВиновника, ВТ_ВиновникиПредполагаемые.ЭтоДиапазон, ВТ_ВиновникиПредполагаемые.Значение, ВТ_ВиновникиПредполагаемые.Значение1, ВТ_ВиновникиПредполагаемые.Значение2, ВТ_ВиновникиПредполагаемые.РежимБлокировкиВиновника, ВТ_ВиновникиПредполагаемые.РежимБлокировкиЖертвы) В
		|				(ВЫБРАТЬ
		|					ВТ_НеВиновные.СоединениеВиновника,
		|					ВТ_НеВиновные.МоментВремениВиновника,
		|					ВТ_НеВиновные.ИмяПоляВиновника,
		|					ВТ_НеВиновные.ЭтоДиапазон,
		|					ВТ_НеВиновные.Значение,
		|					ВТ_НеВиновные.Значение1,
		|					ВТ_НеВиновные.Значение2,
		|					ВТ_НеВиновные.РежимБлокировкиВиновника,
		|					ВТ_НеВиновные.РежимБлокировкиЖертвы
		|				ИЗ
		|					ВТ_НеВиновные КАК ВТ_НеВиновные)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ВиновникиПредполагаемые.МоментВремениВиновника УБЫВ";
		Выборка = ЗапросВиновников.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТЗ = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, ВыборкаЖертв);
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ Виновники
	|ИЗ
	|	&ТЗ КАК ТЗ";
	Запрос.Выполнить();
	
КонецПроцедуры // ОпределитьВиновников()

// Определить контексты жертв
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
Процедура ОпределитьКонтекстыЖертв(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникАнализаТЖ.МоментВремениЖертвы КАК МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.СоединениеЖертвы КАК СоединениеЖертвы,
	|	МИНИМУМ(ВременаКонтекстовЖертв.МоментВремени) КАК ВремяКонтекстаЖертвы
	|ПОМЕСТИТЬ ВременаКонтекстовЖертв
	|ИЗ
	|	РегистрСведений.ГрафыВзаимоблокировок1С КАК ИсточникАнализаТЖ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ВременаКонтекстовЖертв
	|		ПО (ВременаКонтекстовЖертв.connectID = ИсточникАнализаТЖ.СоединениеЖертвы)
	|			И (ВременаКонтекстовЖертв.МоментВремени > ИсточникАнализаТЖ.МоментВремениЖертвы)
	|ГДЕ
	|	ВременаКонтекстовЖертв.Период = &Период
	|	И ВременаКонтекстовЖертв.Регистратор = &ДокументЗамер
	|	И ВременаКонтекстовЖертв.Событие = &СобытиеContext
	|	И ИсточникАнализаТЖ.Период = &Период
	|	И ИсточникАнализаТЖ.Регистратор = &ДокументЗамер
	|	И ИсточникАнализаТЖ.Событие = ""TLOCK""
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникАнализаТЖ.МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.СоединениеЖертвы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсточникАнализаТЖ.МоментВремениЖертвы,
	|	ИсточникАнализаТЖ.СоединениеЖертвы";
	Запрос.Выполнить();
	
КонецПроцедуры // ОпределитьКонтекстыЖертв()

// Определить контексты виновников
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
Процедура ОпределитьКонтекстыВиновников(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Виновники.МоментВремениВиновника КАК МоментВремениВиновника,
	|	Виновники.СоединениеВиновника КАК СоединениеВиновника,
	|	МИНИМУМ(ВременаКонтекстовВиновников.МоментВремени) КАК ВремяКонтекстаВиновника
	|ПОМЕСТИТЬ ВременаКонтекстовВиновников
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Виновники.МоментВремениВиновника КАК МоментВремениВиновника,
	|		Виновники.СоединениеВиновника КАК СоединениеВиновника
	|	ИЗ
	|		Виновники КАК Виновники) КАК Виновники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ВременаКонтекстовВиновников
	|		ПО (ВременаКонтекстовВиновников.connectID = Виновники.СоединениеВиновника)
	|			И (ВременаКонтекстовВиновников.МоментВремени > Виновники.МоментВремениВиновника)
	|ГДЕ
	|	ВременаКонтекстовВиновников.Период = &Период
	|	И ВременаКонтекстовВиновников.Регистратор = &ДокументЗамер
	|	И ВременаКонтекстовВиновников.Событие = &СобытиеContext
	|
	|СГРУППИРОВАТЬ ПО
	|	Виновники.МоментВремениВиновника,
	|	Виновники.СоединениеВиновника
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Виновники.МоментВремениВиновника,
	|	Виновники.СоединениеВиновника";
	Запрос.Выполнить();
	
КонецПроцедуры // ОпределитьКонтекстыВиновников()

// Получить результат анализа
//
// Параметры:
//  Запрос - Запрос с необходимыми параметрами и временными таблицами
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
//
Функция ПолучитьРезультатАнализа(Запрос)
	
	ПериодЗапроса = Неопределено;
	ДокументЗамер = Неопределено;
	Запрос.Параметры.Свойство("Период", ПериодЗапроса);
	Запрос.Параметры.Свойство("ДокументЗамер", ДокументЗамер);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Соединение",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("МоментВремени",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный)));
	ТЗ.Колонки.Добавить("ИмяРесурсаПолное",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	
	ЗапросЗначенийПолей = Новый Запрос;
	ЗапросЗначенийПолей.УстановитьПараметр("Период", ПериодЗапроса);
	ЗапросЗначенийПолей.УстановитьПараметр("ДокументЗамер", ДокументЗамер);
	
	ЗапросЗначенийПолей.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияПолей.Соединение КАК Соединение1,
	|	ЗначенияПолей.МоментВремени КАК МоментВремени,
	|	ЗначенияПолей.ИмяРесурса КАК ИмяРесурса,
	|	ЗначенияПолей.ИмяРесурсаПолное
	|ИЗ
	|	РегистрСведений.ЗначенияПолейРесурсов КАК ЗначенияПолей
	|ГДЕ
	|	ЗначенияПолей.Период = &Период
	|	И ЗначенияПолей.Регистратор = &ДокументЗамер
	|ИТОГИ ПО
	|	Соединение1,
	|	МоментВремени,
	|	ИмяРесурса";
	ВыборкаСоединение = ЗапросЗначенийПолей.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Соединение1");
	Пока ВыборкаСоединение.Следующий() Цикл
		ВыборкаМоментВремени = ВыборкаСоединение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "МоментВремени");
		Пока ВыборкаМоментВремени.Следующий() Цикл
			ВыборкаРесурс = ВыборкаМоментВремени.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИмяРесурса");
			Пока ВыборкаРесурс.Следующий() Цикл
				Выборка = ВыборкаРесурс.Выбрать();
				Если Выборка.Следующий() Тогда
					СтрокаТЗ = ТЗ.Добавить();
					СтрокаТЗ.Соединение = Выборка.Соединение1;
					СтрокаТЗ.МоментВремени = Выборка.МоментВремени;
					СтрокаТЗ.ИмяРесурсаПолное = Выборка.ИмяРесурсаПолное;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ЗначенияПолейТЗ", ТЗ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическийЖурнал.connectID КАК connectID,
	|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени,
	|	ТехнологическийЖурнал.computerName КАК computerName,
	|	ТехнологическийЖурнал.Context КАК Context,
	|	ТехнологическийЖурнал.Usr КАК Usr,
	|	ТехнологическийЖурнал.ДатаВремяСобытия КАК ДатаВремяСобытия,
	|	ТехнологическийЖурнал.Продолжительность КАК Продолжительность,
	|	ТехнологическийЖурнал.Событие КАК Событие
	|ПОМЕСТИТЬ ТЖПолный
	|ИЗ
	|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|ГДЕ
	|	ТехнологическийЖурнал.Период = &Период
	|	И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МоментВремени,
	|	connectID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЖПолный.connectID КАК connectID,
	|	ТЖПолный.МоментВремени КАК МоментВремени,
	|	ТЖПолный.Context КАК Context
	|ПОМЕСТИТЬ ТЖКонтекст
	|ИЗ
	|	ТЖПолный КАК ТЖПолный
	|ГДЕ
	|	ТЖПолный.Событие = &СобытиеContext
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МоментВремени,
	|	connectID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПолейРесурсов.Соединение КАК Соединение1,
	|	ЗначенияПолейРесурсов.МоментВремени КАК МоментВремени,
	|	ЗначенияПолейРесурсов.ИмяРесурсаПолное КАК ИмяРесурсаПолное
	|ПОМЕСТИТЬ ЗначенияПолей
	|ИЗ
	|	&ЗначенияПолейТЗ КАК ЗначенияПолейРесурсов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МоментВремени,
	|	Соединение1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Виновники.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
	|	Виновники.МоментВремениВзаимоблокировки КАК МоментВремениВзаимоблокировки,
	|	Виновники.СоединениеЖертвы КАК СоединениеЖертвы,
	|	Виновники.МоментВремениЖертвы КАК МоментВремениЖертвы,
	|	КонтекстыЖертв.Context КАК КонтекстКлиентаЖертвы,
	|	ДеталиЖертвы.Context КАК КонтекстСервераЖертвы,
	|	ДеталиЖертвы.Продолжительность / 1000 КАК ВремяВыполненияМсЖертвы,
	|	ДеталиЖертвы.ДатаВремяСобытия КАК ДатаВремяСобытияЖертвы,
	|	ДеталиЖертвы.computerName КАК КомпьютерЖертвы,
	|	ДеталиЖертвы.Usr КАК ИмяПользователяЖертвы,
	|	Виновники.МоментВремениВиновника КАК МоментВремениВиновника,
	|	Виновники.СоединениеВиновника КАК СоединениеВиновника,
	|	КонтекстыВиновников.Context КАК КонтекстКлиентаВиновника,
	|	ДеталиВиновника.Context КАК КонтекстСервераВиновника,
	|	ДеталиВиновника.Продолжительность / 1000 КАК ВремяВыполненияМсВиновника,
	|	ДеталиВиновника.ДатаВремяСобытия КАК ДатаВремяСобытияВиновника,
	|	ДеталиВиновника.computerName КАК КомпьютерВиновника,
	|	ДеталиВиновника.Usr КАК ИмяПользователяВиновника,
	|	ЗначенияПолей.ИмяРесурсаПолное КАК ИмяРесурса,
	|	Виновники.РежимБлокировкиВиновника КАК РежимБлокировкиВиновника,
	|	Виновники.РежимБлокировкиЖертвы КАК РежимБлокировкиЖертвы
	|ИЗ
	|	Виновники КАК Виновники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременаКонтекстовЖертв КАК ВременаКонтекстовЖертв
	|		ПО Виновники.МоментВремениЖертвы = ВременаКонтекстовЖертв.МоментВремениЖертвы
	|			И Виновники.СоединениеЖертвы = ВременаКонтекстовЖертв.СоединениеЖертвы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЖКонтекст КАК КонтекстыЖертв
	|		ПО (ВременаКонтекстовЖертв.ВремяКонтекстаЖертвы = КонтекстыЖертв.МоментВремени)
	|			И (ВременаКонтекстовЖертв.СоединениеЖертвы = КонтекстыЖертв.connectID)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременаКонтекстовВиновников КАК ВременаКонтекстовВиновников
	|		ПО Виновники.МоментВремениВиновника = ВременаКонтекстовВиновников.МоментВремениВиновника
	|			И Виновники.СоединениеВиновника = ВременаКонтекстовВиновников.СоединениеВиновника
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЖКонтекст КАК КонтекстыВиновников
	|		ПО (ВременаКонтекстовВиновников.ВремяКонтекстаВиновника = КонтекстыВиновников.МоментВремени)
	|			И (ВременаКонтекстовВиновников.СоединениеВиновника = КонтекстыВиновников.connectID)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПолей КАК ЗначенияПолей
	|		ПО Виновники.МоментВремениЖертвы = ЗначенияПолей.МоментВремени
	|			И Виновники.СоединениеЖертвы = ЗначенияПолей.Соединение1
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЖПолный КАК ДеталиЖертвы
	|		ПО Виновники.МоментВремениЖертвы = ДеталиЖертвы.МоментВремени
	|			И Виновники.СоединениеЖертвы = ДеталиЖертвы.connectID
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЖПолный КАК ДеталиВиновника
	|		ПО Виновники.МоментВремениВиновника = ДеталиВиновника.МоментВремени
	|			И Виновники.СоединениеВиновника = ДеталиВиновника.connectID
	|ГДЕ
	|	Виновники.МоментВремениВиновника ЕСТЬ НЕ NULL 
	|ИТОГИ
	|	МАКСИМУМ(МоментВремениВзаимоблокировки)
	|ПО
	|	НомерВзаимоблокировки";
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции // ПолучитьРезультатАнализа()
