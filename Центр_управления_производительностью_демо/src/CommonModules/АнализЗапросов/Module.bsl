///////////////////////////////////////////////////////////////////////////////
// АНАЛИЗ ЗАПРОСОВ

// Включить сбор информации для анализа взаимоблокировок
//
Функция ВключитьСборЗапросов(ИнформационнаяБаза, Показатели) Экспорт
	
	ОтладкаКлиентСервер.Действие("ВключитьСборЗапросов");
	
	АнализЗапросовОбъект = Справочники.Показатели.АнализЗапросов.ПолучитьОбъект();
	МинимальнаяДлительностьЗапроса = АнализЗапросовОбъект.ПолучитьМинимальнуюДлительностьЗапроса();
	ПолучатьПланы = АнализЗапросовОбъект.ПолучатьПланыЗапросов();
	
	// Включить технологический журнал
	ОписательТЖЗапросов = ТехнологическийЖурнал.ВключитьТехнологическийЖурнал(
		ТехнологическийЖурнал.КонфигурацияАнализаЗапросов(
			ИнформационнаяБаза.ИмяИБ,
			ИнформационнаяБаза.ТипСУБД,
			МинимальнаяДлительностьЗапроса,
			ПолучатьПланы),
		ИнформационнаяБаза.ИменаКаталоговТЖ);
		
	// Зафиксировать каталоги ТЖ
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализЗапросов);
	СтрокаПоказателя.ЗамерАнализЗапросов = Замер.СоздатьЗамер(
		ИнформационнаяБаза,
		СтрокаПоказателя.Показатель,
		СтрокаПоказателя.Экземпляр,
		ИнформационнаяБаза.ТипСУБД);
	Замер.УстановитьКаталогиТЖ(СтрокаПоказателя.ЗамерАнализЗапросов, ОписательТЖЗапросов.КаталогиТЖ);
	
	ОтладкаКлиентСервер.Результат("ВключитьСборЗапросов");
	
	Возврат ОписательТЖЗапросов;
	
КонецФункции // ВключитьСборЗапросов()

// Отключить сбор информации для анализа взаимоблокировок
//
Процедура ОтключитьСборЗапросов(ИнформационнаяБаза, Показатели, АнализНеобходим, ОписательТЖЗапросов) Экспорт
	
	ОтладкаКлиентСервер.Действие("ОтключитьСборЗапросов");
	
	// Отключить технологический журнал
	ТехнологическийЖурнал.ОтключитьТехнологическийЖурнал(
		ОписательТЖЗапросов,
		ИнформационнаяБаза.ИменаКаталоговТЖ);
		
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализЗапросов);
	Замер.ЗавершитьЗамер(СтрокаПоказателя.ЗамерАнализЗапросов);
	
	Если Не АнализНеобходим Тогда
		Замер.Отменить(СтрокаПоказателя.ЗамерАнализЗапросов);
	КонецЕсли;
	
	ОтладкаКлиентСервер.Результат("ОтключитьСборЗапросов");
	
КонецПроцедуры // ОтключитьСборЗапросов()

// Провести анализ выполнений запросов
//
// Параметры:
//  КонтекстАнализа - Структура
//
Процедура ПроанализироватьЗапросы(КонтекстАнализа) Экспорт
	
	Перем Блокировка;
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьЗапросы");
	
	// Получить структуру базы
	СтруктураБазы = КонтекстАнализа.СтруктураБазы.СУБД;
	СловарьШаблонов = КонтекстАнализа.СловарьШаблонов;
	
	ТехнологическийЖурнал.ОчиститьИсходныеДанныеДляАнализа(КонтекстАнализа.Замер);
	ТипСУБД = КонтекстАнализа.Замер.ТипСУБД;
	
	// Получить минимальную длительность запроса
	АнализЗапросовОбъект = Справочники.Показатели.АнализЗапросов.ПолучитьОбъект();
	МинимальнаяДлительностьЗапроса = АнализЗапросовОбъект.ПолучитьМинимальнуюДлительностьЗапроса();
	
	// Получить информацию о запросах
	РезультатЗапроса = ТехнологическийЖурнал.ПроанализироватьЗапросы(ТипСУБД, КонтекстАнализа.Замер).Выбрать();
	
	КоличествоЗапросов = 0;
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	// Обработать запросы
	Пока РезультатЗапроса.Следующий() Цикл
		
		// Создать описание блокировки
		ОписаниеБлокировки = Анализ.СоздатьОписаниеБлокировки();
		ОписаниеБлокировки.Запрос = РезультатЗапроса.Запрос;
		ОписаниеБлокировки.ТекстSdbl = Строка(РезультатЗапроса.SdblЗапрос) + Строка(РезультатЗапроса.SdblФункция) + Строка(РезультатЗапроса.SdblИмяТаблицы);
		ОписаниеБлокировки.План = РезультатЗапроса.План;
		ОписаниеБлокировки.КонтекстЗапроса = Строка(РезультатЗапроса.КонтекстКлиента) + Строка(РезультатЗапроса.КонтекстСервера);
		ОписаниеБлокировки.ВремяВыполненияМс = РезультатЗапроса.ВремяВыполненияМс;
		ОписаниеБлокировки.МоментВремениОкончания = РезультатЗапроса.МоментВремени;
		ОписаниеБлокировки.ДатаВремяСобытия = РезультатЗапроса.ДатаВремяСобытия;
		ОписаниеБлокировки.Компьютер = РезультатЗапроса.Компьютер;
		ОписаниеБлокировки.Пользователь = РезультатЗапроса.Пользователь;
		ОписаниеБлокировки.НомерСоединения = РезультатЗапроса.НомерСоединения;
		ОписаниеБлокировки.Состояние = Перечисления.СостоянияБлокировок.Установлена;
		ОписаниеБлокировки.ТипВыполнения = Перечисления.ТипыВыполненийКода.УстановкаБлокировки;
		
		// Получить список ресурсов запроса
		СловарьЗапроса = СтруктураМетаданных.ПолучитьСловарьЗапроса(
			РезультатЗапроса.Запрос,
			СловарьШаблонов,
			ТипСУБД);
		
		// Создать документы блокировок для каждого ресурса
		Для Каждого ЭлементСловаряЗапроса Из СловарьЗапроса Цикл
			
			ИмяТаблицы = ЭлементСловаряЗапроса.Ключ;
			
			// Создать описание ресурса
			ИмяТаблицы1С = СтруктураМетаданных.ПолучитьИмяТаблицы1С(
				СтруктураБазы,
				ИмяТаблицы);
			
			ОписаниеБлокировки.Ресурс = СтруктураДанных.ПолучитьСтруктуруРесурса(ИмяТаблицы1С, ИмяТаблицы);
				
			НачатьТранзакцию();
			
			Попытка
				Блокировка = СтруктураДанных.ЗафиксироватьБлокировкуРесурса(ОписаниеБлокировки, КонтекстАнализа, Инструменты);
				КоличествоЗапросов = КоличествоЗапросов + 1;
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			ЗафиксироватьТранзакцию();
		КонецЦикла;
	КонецЦикла;
	
	ОтладкаКлиентСервер.Результат("ПроанализироватьЗапросы", КоличествоЗапросов);
	
КонецПроцедуры // ПроанализироватьЗапросы()


///////////////////////////////////////////////////////////////////////////////
// ФОРМАТИРОВАНИЕ

// Оформить план запроса
//
// Параметры:
//  Текст - Строка, текст сырого плана запроса
//  ТипСУБД - ПеречислениеСсылка.ТипСУБД, тип СУБД плана запроса
//
// Возвращаемое значение:
//  Строка - план запроса в отформатированном виде
//
Функция ОформитьПлан(Текст, ТипСУБД) Экспорт
	
	Если ТипСУБД = Перечисления.ТипыСУБД.MSSQLServer Тогда
		Возврат ОформитьПланMSSQL(Текст);
	ИначеЕсли ТипСУБД = Перечисления.ТипыСУБД.IBMDB2 Тогда
		Возврат ОформитьПланDB2(Текст);
	Иначе
		Возврат Текст;
	КонецЕсли;
	
КонецФункции // ОформитьПлан()

// Оформить план запроса для Microsoft SQL Server
//
// Параметры:
//  Текст - Строка, текст сырого плана запроса
//
Функция ОформитьПланMSSQL(Текст)
	
	Перем ТаблицаПлана;
	Перем ДлиныПолей;
	Перем СтрокиПлана;
	
	ВсегоКолонок = 9;
	Заголовки = Новый Массив(ВсегоКолонок);
	Заголовки[0] = "Rows";
	Заголовки[1] = "Executes";
	Заголовки[2] = "EstimateRows";
	Заголовки[3] = "EstimateIO";
	Заголовки[4] = "EstimateCPU";
	Заголовки[5] = "AvgRowSize";
	Заголовки[6] = "TotalSubtreeCost";
	Заголовки[7] = "EstimateExecutions";
	Заголовки[8] = "StmtText";
	Длины = Новый Массив(ВсегоКолонок);
	Длины[0] = 4;
	Длины[1] = 8;
	Длины[2] = 12;
	Длины[3] = 10;
	Длины[4] = 11;
	Длины[5] = 10;
	Длины[6] = 16;
	Длины[7] = 18;
	Длины[8] = 8;
	
	Строки = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(СокрЛП(Текст), Символы.ПС, Истина);
	Строки.Добавить("");
	ТекстПлана = "";
	
	Для каждого Строка Из Строки Цикл
		Если ТаблицаПлана = Неопределено Тогда
			ТаблицаПлана = Новый Массив;
			ТаблицаПлана.Добавить(Заголовки);
			ДлиныПолей = Новый Массив;
			ДлиныПолей.Добавить(Длины);
			СтрокиПлана = Новый Массив;
		КонецЕсли;
		
		Если ПустаяСтрока(Строка) Тогда
			ТекстПлана = ТекстПлана + ОформитьТекстПлана(
				СтрокиПлана,
				ВсегоКолонок,
				ДлиныПолей,
				ТаблицаПлана) + Символы.ПС;
			ТаблицаПлана = Неопределено;
		Иначе
			ТаблицаПлана.Добавить(Новый Массив(ВсегоКолонок));
			ДлиныПолей.Добавить(Новый Массив(ВсегоКолонок));
			СтрокиПлана.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстПлана;
	
КонецФункции // ОформитьПланMSSQL()

// Оформить план запроса для IBM DB2
//
// Параметры:
//  Текст - Строка, текст сырого плана запроса
//
Функция ОформитьПланDB2(Текст)
	
	Перем ТаблицаПлана;
	Перем ДлиныПолей;
	Перем СтрокиПлана;
	
	ВсегоКолонок = 8;
	Заголовки = Новый Массив(ВсегоКолонок);
	Заголовки[0] = "Operation";
	Заголовки[1] = "Cost";
	Заголовки[2] = "Rows";
	Заголовки[3] = "IO Cost";
	Заголовки[4] = "CPU Cost";
	Заголовки[5] = "TCP/IP Cost";
	Заголовки[6] = "Buffers";
	Заголовки[7] = "Predicates";
	Длины = Новый Массив(ВсегоКолонок);
	Длины[0] = 9;
	Длины[1] = 4;
	Длины[2] = 4;
	Длины[3] = 7;
	Длины[4] = 8;
	Длины[5] = 11;
	Длины[6] = 7;
	Длины[7] = 10;
	
	Строки = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(СокрЛП(Текст), Символы.ПС, Истина, Ложь);
	Строки.Добавить(";");
	ТекстПлана = "";
	
	Для каждого Строка Из Строки Цикл
		Если ТаблицаПлана = Неопределено Тогда
			ТаблицаПлана = Новый Массив;
			ТаблицаПлана.Добавить(Заголовки);
			ДлиныПолей = Новый Массив;
			ДлиныПолей.Добавить(Длины);
			СтрокиПлана = Новый Массив;
		КонецЕсли;
		
		Если ПустаяСтрока(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СокрЛП(Строка) = ";" Тогда
			ПоследняяСтрока = СтрокиПлана.Количество() - 1;
			ОптимизированныйЗапрос = СтрокиПлана[ПоследняяСтрока];
			СтрокиПлана.Удалить(ПоследняяСтрока);
			ТекстПлана = ТекстПлана + ОформитьТекстПлана(
				СтрокиПлана,
				ВсегоКолонок,
				ДлиныПолей,
				ТаблицаПлана) + ОптимизированныйЗапрос + Символы.ПС + Символы.ПС;
			ТаблицаПлана = Неопределено;
		Иначе
			ТаблицаПлана.Добавить(Новый Массив(ВсегоКолонок));
			ДлиныПолей.Добавить(Новый Массив(ВсегоКолонок));
			СтрокиПлана.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстПлана;
	
КонецФункции // ОформитьПланDB2()

// Оформить план в таблицу
//
// Параметры:
//  Строки - Массив, строки плана запроса
//  ВсегоКолонок - Число, количество колонок плана
//  ДлиныПолей - Массив, длина каждого поля (будет вычислена)
//  ТаблицаПлана - Массив, по сути таблица плана
//
// Возвращаемое значение - Строка, план запроса в виде тадлицы
//
Функция ОформитьТекстПлана(Строки, ВсегоКолонок, ДлиныПолей, ТаблицаПлана) Экспорт
	
	ВсегоСтрок = Строки.Количество();
	Заголовки = ТаблицаПлана[0];
	МаксДлина = Новый Массив(ВсегоКолонок);
	Для Сч = 1 По ВсегоКолонок Цикл
		МаксДлина[Сч - 1] = СтрДлина(Заголовки[Сч - 1]);
	КонецЦикла;
	
	Для НомерСтроки = 1 По ВсегоСтрок Цикл
		Строка = Строки[НомерСтроки - 1];
		СтрокаДлины = ДлиныПолей[НомерСтроки];
		ДлинаСтроки = СтрДлина(Строка);
		Для НомерКолонки = 1 По ВсегоКолонок Цикл
			ИндексКолонки = НомерКолонки - 1;
			Конец = ?(НомерКолонки = ВсегоКолонок, ДлинаСтроки + 1, СтрНайти(Строка, ","));
			ДлинаПоля = Конец - 1;
			СтрокаДлины[ИндексКолонки] = ДлинаПоля;
			Поле = Лев(Строка, ДлинаПоля);
			ТаблицаПлана[НомерСтроки][ИндексКолонки] = Поле;
			ДлинаСтроки = ДлинаСтроки - Конец - 1;
			Строка = Прав(Строка, ДлинаСтроки);
			
			Если МаксДлина[ИндексКолонки] < ДлинаПоля Тогда
				МаксДлина[ИндексКолонки] = ДлинаПоля;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекстПлана = "";
	Для НомерСтроки = 1 По ВсегоСтрок + 1 Цикл
		ИндексСтроки = НомерСтроки - 1;
		СтрокаПлана = ТаблицаПлана[ИндексСтроки];
		СтрокаДлины = ДлиныПолей[ИндексСтроки];
		СтрокаТекстаПлана = "";
		
		Если НомерСтроки = 1 Тогда
			Разделитель = РазделительПлана(ВсегоКолонок, МаксДлина);
			СтрокаТекстаПлана = СтрокаТекстаПлана + Разделитель + Символы.ПС;
		КонецЕсли;
		
		Для НомерКолонки = 1 По ВсегоКолонок Цикл
			СтрокаТекстаПлана = СтрокаТекстаПлана + "| ";
			ИндексКолонки = НомерКолонки - 1;
			ДлинаКолонки = МаксДлина[ИндексКолонки];
			Поле = ТаблицаПлана[ИндексСтроки][ИндексКолонки];
			ДлинаПоля = ДлиныПолей[ИндексСтроки][ИндексКолонки];
			СтрокаТекстаПлана = СтрокаТекстаПлана + Поле;
			Отступ = ОтступПлана(" ", ДлинаКолонки - ДлинаПоля + 1);
			СтрокаТекстаПлана = СтрокаТекстаПлана + Отступ;
			
			Если НомерКолонки = ВсегоКолонок Тогда
				СтрокаТекстаПлана = СтрокаТекстаПлана + "|";
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТекстаПлана = СтрокаТекстаПлана + Символы.ПС;
		
		Если НомерСтроки = 1 Или НомерСтроки = ВсегоСтрок + 1 Тогда
			Разделитель = РазделительПлана(ВсегоКолонок, МаксДлина);
			СтрокаТекстаПлана = СтрокаТекстаПлана + Разделитель + Символы.ПС;
		КонецЕсли;
		
		ТекстПлана = ТекстПлана + СтрокаТекстаПлана;
	КонецЦикла;
	
	Возврат ТекстПлана;
	
КонецФункции // ОформитьТекстПлана()

// Создать отступ
//
// Параметры:
//  Символ - Строка, символ разделителя
//  Длина - Число, длина строки разделителя
//
// Возвращаемое значение:
//  Строка - готовый отступ
//
Функция ОтступПлана(Символ, Длина)
	
	СтрокаОтступа = "";
	
	Для Сч = 1 По Длина Цикл
		СтрокаОтступа = СтрокаОтступа + Символ;
	КонецЦикла;
	
	Возврат СтрокаОтступа;
	
КонецФункции // ОтступПлана() 

// Создать разделитель
//
// Параметры:
//  КоличествоКолонок - Число, количество колонок для разделения
//  МаксимальныеДлины - Массив, длины колонок
//
// Возвращаемое значение:
//  Строка - Разделитель в виде "+--------+----------+-------+
//
Функция РазделительПлана(КоличествоКолонок, МаксимальныеДлины)
	
	ТекстРазделителя = "+";
	
	Для НомерКолонки = 1 По КоличествоКолонок Цикл
		Отступ = ОтступПлана("-", МаксимальныеДлины[НомерКолонки - 1] + 2);
		ТекстРазделителя = ТекстРазделителя + Отступ + "+";
	КонецЦикла;
	
	Возврат ТекстРазделителя;
	
КонецФункции // РазделительПлана()
