
///////////////////////////////////////////////////////////////////////////////
// АНАЛИЗ СЕРВЕРНЫХ ВЫЗОВОВ

// Включить сбор информации для анализа серверных вызовов
//
Функция ВключитьСборСерверныхВызовов(ИнформационнаяБаза, Показатели) Экспорт
	
	ОтладкаКлиентСервер.Действие("ВключитьСборСерверныхВызовов");
	
	АнализСерверныхВызововОбъект = Справочники.Показатели.АнализСерверныхВызовов.ПолучитьОбъект();
	МинимальнаяДлительностьВызова = АнализСерверныхВызововОбъект.ПолучитьМинимальнуюДлительностьСерверногоВызова();
	
	// Включить технологический журнал
	ОписательТЖ = ТехнологическийЖурнал.ВключитьТехнологическийЖурнал(
		ТехнологическийЖурнал.КонфигурацияАнализаСерверныхВызовов(
			ИнформационнаяБаза.ИмяИБ,
			МинимальнаяДлительностьВызова),
		ИнформационнаяБаза.ИменаКаталоговТЖ);
		
	// Зафиксировать каталоги ТЖ
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализСерверныхВызовов);
	СтрокаПоказателя.ЗамерАнализСерверныхВызовов = Замер.СоздатьЗамер(
		ИнформационнаяБаза,
		СтрокаПоказателя.Показатель,
		СтрокаПоказателя.Экземпляр,
		ИнформационнаяБаза.ТипСУБД);
	Замер.УстановитьКаталогиТЖ(СтрокаПоказателя.ЗамерАнализСерверныхВызовов, ОписательТЖ.КаталогиТЖ);
	
	ОтладкаКлиентСервер.Результат("ВключитьСборСерверныхВызовов");
	
	Возврат ОписательТЖ;
	
КонецФункции // ВключитьСборСерверныхВызовов()

// Отключить сбор информации для анализа серверных вызовов
//
Процедура ОтключитьСборСерверныхВызовов(ИнформационнаяБаза, Показатели, АнализНеобходим, ОписательТЖ) Экспорт
	
	ОтладкаКлиентСервер.Действие("ОтключитьСборСерверныхВызовов");
	
	// Отключить технологический журнал
	ТехнологическийЖурнал.ОтключитьТехнологическийЖурнал(
		ОписательТЖ,
		ИнформационнаяБаза.ИменаКаталоговТЖ);
		
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Справочники.Показатели.АнализСерверныхВызовов);
	Замер.ЗавершитьЗамер(СтрокаПоказателя.ЗамерАнализСерверныхВызовов);
	
	Если Не АнализНеобходим Тогда
		Замер.Отменить(СтрокаПоказателя.ЗамерАнализСерверныхВызовов);
	КонецЕсли;
	
	ОтладкаКлиентСервер.Результат("ОтключитьСборСерверныхВызовов");
	
КонецПроцедуры // ОтключитьСборСерверныхВызовов()

// Провести анализ серверных вызовов
//
// Параметры:
//  КонтекстАнализа - Структура
//
Процедура ПроанализироватьСерверныеВызовы(КонтекстАнализа) Экспорт
	
	Перем Блокировка;
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьСерверныеВызовы");
	
	// Получить структуру базы
	СтруктураБазы = КонтекстАнализа.СтруктураБазы.СУБД;
	СловарьШаблонов = КонтекстАнализа.СловарьШаблонов;
	
	ТехнологическийЖурнал.ОчиститьИсходныеДанныеДляАнализа(КонтекстАнализа.Замер);
	
	// Получить минимальную длительность запроса
	АнализСерверныхВызововОбъект = Справочники.Показатели.АнализСерверныхВызовов.ПолучитьОбъект();
	МинимальнаяДлительностьВызова = АнализСерверныхВызововОбъект.ПолучитьМинимальнуюДлительностьСерверногоВызова();
	
	// Получить информацию о серверных вызовах
	РезультатЗапроса = ТехнологическийЖурнал.ПроанализироватьСерверныеВызовы(КонтекстАнализа.Замер).Выбрать();
	
	КоличествоВызовов = 0;
	
	// Обработать серверные вызовы
	Пока РезультатЗапроса.Следующий() Цикл
		
		// Создать описание серверного вызова
		ОписаниеВыполнения = Анализ.СоздатьОписаниеБлокировки();
		ОписаниеВыполнения.КонтекстВыполнения = Строка(РезультатЗапроса.КонтекстКлиента) + Строка(РезультатЗапроса.КонтекстСервера);
		ОписаниеВыполнения.ВремяВыполненияМс = РезультатЗапроса.ВремяВыполненияМс;
		ОписаниеВыполнения.МоментВремениОкончания = РезультатЗапроса.МоментВремени;
		ОписаниеВыполнения.ДатаВремяСобытия = РезультатЗапроса.ДатаВремяСобытия;
		ОписаниеВыполнения.Компьютер = РезультатЗапроса.Компьютер;
		ОписаниеВыполнения.Пользователь = РезультатЗапроса.Пользователь;
		ОписаниеВыполнения.НомерСоединения = РезультатЗапроса.НомерСоединения;
		ОписаниеВыполнения.Состояние = Перечисления.СостоянияБлокировок.Установлена;
		ОписаниеВыполнения.ОбъемНеосвобожденнойПамяти = РезультатЗапроса.ОбъемНеосвобожденнойПамяти;
		ОписаниеВыполнения.МаксимальныйРасходПамяти = РезультатЗапроса.МаксимальныйРасходПамяти;
		ОписаниеВыполнения.СчитаноДанных = РезультатЗапроса.СчитаноДанных;
		ОписаниеВыполнения.ЗаписаноДанных = РезультатЗапроса.ЗаписаноДанных;
		ОписаниеВыполнения.ТипВыполнения = Перечисления.ТипыВыполненийКода.СерверныйВызов;
		
		// Создать документ выполнения кода для каждого серверного вызова
		НачатьТранзакцию();
		
		Попытка
			ВыполнениеКода = СтруктураДанных.ЗафиксироватьВыполнениеКода(ОписаниеВыполнения, КонтекстАнализа);
			КоличествоВызовов = КоличествоВызовов + 1;
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
	ОтладкаКлиентСервер.Результат("ПроанализироватьСерверныеВызовы", КоличествоВызовов);
	
КонецПроцедуры // ПроанализироватьЗапросы()
