///////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ ВЫПОЛЕНИЯ СЦЕНАРИЯ

// Включить механизм выполнения сценария
//
Процедура Включить() Экспорт
	
	Выключить();
	Контекст.УстановитьМониторВключен(Истина);
	Возобновить();
	
КонецПроцедуры // Включить()

// Выключить механизм выполнения сценария
//
Процедура Выключить() Экспорт
	
	Приостановить();
	
КонецПроцедуры // Включить()

// Подключить обработчик выполнения сценария "ПриВыполненииСценария"
//
Процедура Возобновить() Экспорт
	
	ПодключитьОбработчикОжидания("ПриВыполненииСценария", 1);
	Контекст.УстановитьСценарийВыполняется(Истина);
	
КонецПроцедуры // Возобновить()

// Отключить обработчик выполнения сценария "ПриВыполненииСценария"
//
Процедура Приостановить() Экспорт
	
	ОтключитьОбработчикОжидания("ПриВыполненииСценария");
	Контекст.УстановитьСценарийВыполняется(Ложь);
	
КонецПроцедуры // Приостановить()

// Выполнить один такт сценария
//
Функция ВыполнитьТакт(глКонтекст) Экспорт
	
	Если Не Контекст.МониторВключен() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СгенерироватьСобытия();
	Результат = ОбработатьСобытия(глКонтекст);
	
	Если Контекст.МониторингВключен() Тогда
		ВыполнитьТактМониторинга();
		ВыполнитьТактАнализа();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ВыполнитьТакт()

// Выполнить один такт мониторинга
//
Процедура ВыполнитьТактМониторинга()
	
	ТекущееВремя = ТекущаяДата();
	ПрошлоВремени = ТекущееВремя - Контекст.ВремяПоследнегоТакта();
	ПрошлоВремениЗаписи = ТекущееВремя - Контекст.ВремяПоследнегоТактаЗаписи();
	Контекст.УстановитьВремяНачалаТакта(ТекущееВремя);
	
	// Если подошло время выполнить следующий шаг
	Если ПрошлоВремениЗаписи >= Контекст.ЧастотаМониторинга() Тогда
		
		// Устранить скачки показателей при непридвиденных задержках
		Если ПрошлоВремени >= Контекст.ЧастотаМониторинга() * 2 + 4 Тогда
			Контекст.УстановитьПервыеЗначенияПоказателейПолучены(Ложь);
		КонецЕсли;
		
		// Получить и записать значения показателей производительности
		Если Контекст.МониторингВключен() Тогда
			МониторингКлиент.ПолучитьЗначенияПП();
			МониторингКлиент.ЗаписатьЗначенияПП();
		КонецЕсли;
		
		Контекст.УстановитьВремяПоследнегоТактаЗаписи(ТекущееВремя);
	Иначе
		// Получить значения показателей производительности для накопительных ПП
		Если Контекст.МониторингВключен() Тогда
			МониторингКлиент.ПолучитьЗначенияПП(Истина);
		КонецЕсли;
	КонецЕсли;
	
	МониторингКлиент.ОтключитьВременнуюЗаписьПП();
	Контекст.УстановитьВремяПоследнегоТакта(ТекущееВремя);
	
КонецПроцедуры // ВыполнитьТактМониторинга()

// Выполнить такт анализа показателей производительности
//
Процедура ВыполнитьТактАнализа() Экспорт
	
	ВыполнитьТактАнализаБлокировок1С();
	ВыполнитьТактАнализаБлокировокСУБД(Контекст.ИнформационнаяБаза());
	ВыполнитьТактАнализаВзаимоблокировок();
	ВыполнитьТактАнализаВзаимоблокировок1С();
	ВыполнитьТактАнализаЗапросов();
	ВыполнитьТактАнализаСерверныхВызовов();
	
	// Сгенерировать событие завершения анализа
	Если Контекст.АнализВключен() Тогда
		Если Не Контекст.АнализБлокировок1СВключен() И
			 Не Контекст.АнализБлокировокСУБДВключен() И
			 Не Контекст.АнализВзаимоблокировокВключен() И
			 Не Контекст.АнализВзаимоблокировок1СВключен() И
			 Не Контекст.АнализЗапросовВключен() И
			 Не Контекст.АнализСерверныхВызововВключен() Тогда
			
			Контекст.УстановитьАнализВключен(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьТактАнализа()

// Выполнить один такт анализа блокировок
//
Процедура ВыполнитьТактАнализаБлокировок1С()
	
	Если Контекст.АнализБлокировок1СВключен() Тогда
		
		// Если сбор информации об ожиданиях на блокировках еще не включен
		Если Не Контекст.СборБлокировок1СВключен() Тогда
			
			// Включить сбор информации для анализа ожиданий на блокировках
			ИБ = Контекст.ИнформационнаяБаза();
			Если ОбщегоНазначенияВызовСервера.ВключенУправляемыйРежимБлокировок(ИБ) Тогда
				Показатели = Контекст.Показатели();
				ОписательТЖ = АнализБлокировок1С.ВключитьСборБлокировок(ИБ, Показатели);
				глКонтекст.Показатели = Показатели;
				Контекст.УстановитьОписательТЖОжиданийНаБлокировках1С(ОписательТЖ);
			КонецЕсли;
			Контекст.УстановитьСборБлокировок1СВключен(Истина);
			Контекст.УстановитьАнализВключен(Истина);
			
		КонецЕсли;
	Иначе
		Если Контекст.СборБлокировок1СВключен() Тогда
			
			// Отключить сбор информации
			ИБ = Контекст.ИнформационнаяБаза();
			Если ОбщегоНазначенияВызовСервера.ВключенУправляемыйРежимБлокировок(ИБ) Тогда
				ОписательТЖ = Контекст.ОписательТЖОжиданийНаБлокировках1С();
				АнализБлокировок1С.ОтключитьСборБлокировок(ИБ, Контекст.Показатели(), ОписательТЖ, Контекст.АнализНеобходим());
				Контекст.УстановитьПервыеЗначенияПоказателейПолучены(Ложь);
			КонецЕсли;
			Контекст.УстановитьСборБлокировок1СВключен(Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьТактАнализаБлокировок1С()

// Выполнить один такт анализа блокировок
//
Процедура ВыполнитьТактАнализаБлокировокСУБД(ИБ)
	
	Если Контекст.АнализБлокировокСУБДВключен() Тогда
		
		// Если сбор информации об ожиданиях на блокировках еще не включен
		Если Не Контекст.СборБлокировокСУБДВключен() Тогда
			
			// Включить сбор информации для анализа ожиданий на блокировках
			Показатели = Контекст.Показатели();
			ОписательСбораДанных = АнализБлокировокСУБД.ВключитьСборБлокировок(ИБ, Показатели);
			Если ОписательСбораДанных <> Неопределено Тогда
				Контекст.УстановитьОписательСбораДанныхОжиданийНаБлокировкахСУБД(ОписательСбораДанных);
				глКонтекст.Показатели = Показатели;
			КонецЕсли;
			Контекст.УстановитьСборБлокировокСУБДВключен(Истина);
			Контекст.УстановитьАнализВключен(Истина);
			
		КонецЕсли;
	Иначе
		Если Контекст.СборБлокировокСУБДВключен() Тогда
			
			// Отключить сбор информации
			ОписательСбораДанных = Контекст.ОписательСбораДанныхОжиданийНаБлокировкахСУБД();
			АнализБлокировокСУБД.ОтключитьСборБлокировок(ИБ, Контекст.Показатели(), ОписательСбораДанных, Контекст.АнализНеобходим());
			Контекст.УстановитьПервыеЗначенияПоказателейПолучены(Ложь);
			Контекст.УстановитьСборБлокировокСУБДВключен(Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьТактАнализаБлокировокСУБД()

// Выполнить один такт анализа взаимоблокировок
//
Процедура ВыполнитьТактАнализаВзаимоблокировок()
	
	Если Контекст.АнализВзаимоблокировокВключен() Тогда
		
		// Если сбор информации о взаимоблокировках еще не включен
		Если Не Контекст.СборВзаимоблокировокВключен() Тогда
			
			// Включить сбор информации для анализа взаимоблокировок
			ИБ = Контекст.ИнформационнаяБаза();
			Показатели = Контекст.Показатели();
			ОписателиСбораДанных = АнализВзаимоблокировок.ВключитьСборВзаимоблокировок(ИБ, Показатели);
			глКонтекст.Показатели = Показатели;
			Контекст.УстановитьОписательТЖВзаимоблокировок(ОписателиСбораДанных.ОписательТЖ);
			Контекст.УстановитьMSSQLТрассировкаВзаимоблокировок(ОписателиСбораДанных.ОписательТрассировки);
			Контекст.УстановитьСборВзаимоблокировокВключен(Истина);
			Контекст.УстановитьАнализВключен(Истина);
			
		КонецЕсли;
	Иначе
		Если Контекст.СборВзаимоблокировокВключен() Тогда
			
			// Отключить сбор информации
			ИБ = Контекст.ИнформационнаяБаза();
			ОписательТЖ = Контекст.ОписательТЖВзаимоблокировок();
			ОписательТрассировки = Контекст.MSSQLТрассировкаВзаимоблокировок();
			АнализВзаимоблокировок.ОтключитьСборВзаимоблокировок(ИБ, Контекст.Показатели(), ОписательТЖ, ОписательТрассировки, Контекст.АнализНеобходим());
			Контекст.УстановитьПервыеЗначенияПоказателейПолучены(Ложь);
			Контекст.УстановитьСборВзаимоблокировокВключен(Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьТактАнализаВзаимоблокировок()

// Выполнить один такт анализа взаимоблокировок 1С
//
Процедура ВыполнитьТактАнализаВзаимоблокировок1С()
	
	Если Контекст.АнализВзаимоблокировок1СВключен() Тогда
		
		// Если сбор информации о взаимоблокировках еще не включен
		Если Не Контекст.СборВзаимоблокировок1СВключен() Тогда
			
			// Включить сбор информации для анализа взаимоблокировок
			ИБ = Контекст.ИнформационнаяБаза();
			Показатели = Контекст.Показатели();
			ОписательТЖ = АнализВзаимоблокировок1С.ВключитьСборВзаимоблокировок(ИБ, Показатели);
			глКонтекст.Показатели = Показатели;
			Контекст.УстановитьОписательТЖВзаимоблокировок1С(ОписательТЖ);
			Контекст.УстановитьСборВзаимоблокировок1СВключен(Истина);
			Контекст.УстановитьАнализВключен(Истина);
			
		КонецЕсли;
	Иначе
		Если Контекст.СборВзаимоблокировок1СВключен() Тогда
			
			// Отключить сбор информации
			ИБ = Контекст.ИнформационнаяБаза();
			Показатели = Контекст.Показатели();
			ОписательТЖ = Контекст.ОписательТЖВзаимоблокировок1С();
			АнализНеобходим = Контекст.АнализНеобходим();
			АнализВзаимоблокировок1С.ОтключитьСборВзаимоблокировок(ИБ, Показатели, ОписательТЖ, АнализНеобходим);
			Контекст.УстановитьПервыеЗначенияПоказателейПолучены(Ложь);
			Контекст.УстановитьСборВзаимоблокировок1СВключен(Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьТактАнализаВзаимоблокировок()

// Выполнить один такт анализа запросов
//
Процедура ВыполнитьТактАнализаЗапросов()
	
	Если Контекст.АнализЗапросовВключен() Тогда
		
		// Если сбор информации о запросах еще не включен
		Если Не Контекст.СборЗапросовВключен() Тогда
			
			Если Контекст.ОписательТЖЗапросов() <> Неопределено Тогда
				АнализЗапросов.ОтключитьСборЗапросов(
					Контекст.ИнформационнаяБаза(),
					Контекст.Показатели(),
					Контекст.АнализНеобходим(),
					Контекст.ОписательТЖЗапросов()
				);
				Контекст.УстановитьОписательТЖЗапросов(Неопределено);
			КонецЕсли;
			
			// Включить сбор информации для анализа запросов
			Показатели = Контекст.Показатели();
			ОписательТЖЗапросов = АнализЗапросов.ВключитьСборЗапросов(Контекст.ИнформационнаяБаза(), Показатели);
			глКонтекст.Показатели = Показатели;
			Контекст.УстановитьОписательТЖЗапросов(ОписательТЖЗапросов);
			Контекст.УстановитьСборЗапросовВключен(Истина);
			Контекст.УстановитьАнализВключен(Истина);
			
		КонецЕсли;
	Иначе
		Если Контекст.СборЗапросовВключен() Тогда
			
			// Отключить сбор информации
			АнализЗапросов.ОтключитьСборЗапросов(
				Контекст.ИнформационнаяБаза(),
				Контекст.Показатели(),
				Контекст.АнализНеобходим(),
				Контекст.ОписательТЖЗапросов()
			);
			Контекст.УстановитьПервыеЗначенияПоказателейПолучены(Ложь);
			Контекст.УстановитьСборЗапросовВключен(Ложь);
			Контекст.УстановитьОписательТЖЗапросов(Неопределено);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьТактАнализаЗапросов()

// Выполнить один такт анализа серверных вызовов
//
Процедура ВыполнитьТактАнализаСерверныхВызовов()
	
	Если Контекст.АнализСерверныхВызововВключен() Тогда
		
		// Если сбор информации о серверных вызовах еще не включен
		Если Не Контекст.СборСерверныхВызововВключен() Тогда
			
			Если Контекст.ОписательТЖСерверныхВызовов() <> Неопределено Тогда
				АнализСерверныхВызовов.ОтключитьСборСерверныхВызовов(
					Контекст.ИнформационнаяБаза(),
					Контекст.Показатели(),
					Контекст.АнализНеобходим(),
					Контекст.ОписательТЖСерверныхВызовов()
				);
				Контекст.УстановитьОписательТЖСерверныхВызовов(Неопределено);
			КонецЕсли;
			
			// Включить сбор информации для анализа серверных вызовов
			Показатели = Контекст.Показатели();
			ОписательТЖЗапросов = АнализСерверныхВызовов.ВключитьСборСерверныхВызовов(Контекст.ИнформационнаяБаза(), Показатели);
			глКонтекст.Показатели = Показатели;
			Контекст.УстановитьОписательТЖСерверныхВызовов(ОписательТЖЗапросов);
			Контекст.УстановитьСборСерверныхВызововВключен(Истина);
			Контекст.УстановитьАнализВключен(Истина);
			
		КонецЕсли;
	Иначе
		Если Контекст.СборСерверныхВызововВключен() Тогда
			
			// Отключить сбор информации
			АнализСерверныхВызовов.ОтключитьСборСерверныхВызовов(
				Контекст.ИнформационнаяБаза(),
				Контекст.Показатели(),
				Контекст.АнализНеобходим(),
				Контекст.ОписательТЖСерверныхВызовов()
			);
			Контекст.УстановитьПервыеЗначенияПоказателейПолучены(Ложь);
			Контекст.УстановитьСборСерверныхВызововВключен(Ложь);
			Контекст.УстановитьОписательТЖСерверныхВызовов(Неопределено);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьТактАнализаЗапросов()


///////////////////////////////////////////////////////////////////////////////
// СОСТОЯНИЯ

// Сменить текущее состояние на следующее
//
// Параметры:
//  Контекст - Структура, см. СоздатьКонтекстВыполненияСценария()
//
Процедура СменитьСостояние()
	
	СледующееСостояние = Контекст.СледующееСостояние();
	Контекст.УстановитьТекущееСостояние(СледующееСостояние);
	ЗарегистрироватьСобытияСостояния(Контекст.СтрокаТекущегоСостояния());
	
	ОтладкаКлиентСервер.СостояниеСценария(Контекст.ТекущееСостояние());
	
КонецПроцедуры // СменитьСостояние()

// Зарегистрировать события состояния в реестре событий
//
// Параметры:
//  СтрокаТекущегоСостояния - СтрокаДереваЗначений
//
Процедура ЗарегистрироватьСобытияСостояния(СтрокаТекущегоСостояния)
	
	РеестрСобытий = Контекст.РеестрСобытий();
	СобытияКлиент.ОчиститьРеестрСобытий(РеестрСобытий);
	СтрокиСобытий = СтрокаТекущегоСостояния.Строки;
	
	Для Каждого СтрокаСобытия Из СтрокиСобытий Цикл
		СобытияКлиент.ЗарегистрироватьСобытие(
			СтрокаСобытия.Событие,
			СтрокаСобытия.Параметры,
			РеестрСобытий);
	КонецЦикла;
	
КонецПроцедуры // ЗарегистрироватьСобытияСостояния()


///////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ

// Проверить наличие обработчика ошибки события
//
// Параметры:
//  Команда - Перечисление.Команда, при выполнении которой произошла ошибка
//
// Возвращаемое значение:
//  Булево - Истина, ошибка будет обработана
//
Функция ЗарегистрированОбработчикОшибки(Команда)
	
	СтрокаСобытия = СценарийКлиент.НайтиСтрокуСобытия(
		ПредопределенноеЗначение("Справочник.События.Ошибка"),
		Команда,
		Контекст.СтрокаТекущегоСостояния());
	
	Возврат СтрокаСобытия <> Неопределено;
	
КонецФункции // ЗарегистрированОбработчикОшибки()

// Обработать указанное событие
//
// Параметры:
//  Событие - СправочникСсылка.Событие, обрабатываемое событие
//  Параметры - Произвольный, параметры обрабатываемого события
//
Функция ОбработатьСобытие(глКонтекст, Событие, Параметры) Экспорт
	
	СтрокаСобытия = СценарийКлиент.НайтиСтрокуСобытия(
		Событие,
		Параметры,
		Контекст.СтрокаТекущегоСостояния());
	
	Если СтрокаСобытия = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыполняемыеКоманды = СтрокаСобытия.Строки;
	ТекущийСценарий = Контекст.Сценарий();
	
	// Выполнить команды
	Для Каждого СтрокаКоманды Из ВыполняемыеКоманды Цикл
		
		СледующееСостояние = СтрокаКоманды.СледующееСостояние;
		Контекст.УстановитьСледующееСостояние(СледующееСостояние);
		Контекст.УстановитьПараметрыКоманды(КомандыВызовСервера.РаспаковатьПараметрыКоманды(СтрокаКоманды.ПараметрыКоманды));
		
		// Выполнить команду
		Попытка
			Результат = КомандыКлиент.ВыполнитьКоманду(СтрокаКоманды.Команда);
			Если (СтрокаКоманды.Команда = ПредопределенноеЗначение("Справочник.Команды.ВыбратьИБ")
					Или СтрокаКоманды.Команда = ПредопределенноеЗначение("Справочник.Команды.ПодключитьсяКИБ"))
				И Результат = Неопределено Тогда
				Приостановить();
				ВыполняемыеКоманды.Удалить(ВыполняемыеКоманды.Найти(СтрокаКоманды));
				Возврат Неопределено;
			КонецЕсли;
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеОшибки = ОписаниеОшибки();
			ОшибкаОбрабатывается = ЗарегистрированОбработчикОшибки(СтрокаКоманды.Команда);
			
			Если ОшибкаОбрабатывается Тогда
				
				Если Не ПустаяСтрока(ИнформацияОбОшибке.Описание) Тогда
					Если ПустаяСтрока(ОписаниеОшибки()) Тогда
						ОтладкаКлиентСервер.Ошибка(ОписаниеОшибки, Истина);
					Иначе
						ОтладкаКлиентСервер.Ошибка(ИнформацияОбОшибке, Истина);
					КонецЕсли;
				КонецЕсли;
				
				СгенерироватьСобытие(глКонтекст, ПредопределенноеЗначение("Справочник.События.Ошибка"), СтрокаКоманды.Команда, Истина);
			Иначе
				Если ПустаяСтрока(ОписаниеОшибки()) Тогда
					ВызватьИсключение ОписаниеОшибки;
				Иначе
					ВызватьИсключение
				КонецЕсли;
			КонецЕсли;
			
		КонецПопытки;
			
		Если ТекущийСценарий <> Контекст.Сценарий() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОбработатьСобытие()

// Обработать очередь событий
//
Функция ОбработатьСобытия(глКонтекст) Экспорт
	
	ТекущийСценарий = Контекст.Сценарий();
	ОчередьСобытий = Контекст.ОчередьСобытий();
	
	// Обработать события
	Результат = Истина;
	Для Каждого СтрокаСобытия Из ОчередьСобытий Цикл
		
		Результат = ОбработатьСобытие(глКонтекст, СтрокаСобытия.Событие, СтрокаСобытия.Параметры);
		
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		// Изменить состояние
		Если Контекст.ТекущееСостояние() <> Контекст.СледующееСостояние() Тогда
			СменитьСостояние();
			Прервать;
		КонецЕсли;
		
		Если ТекущийСценарий <> Контекст.Сценарий() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Контекст.ОчередьСобытий().Очистить();
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ОбработатьСобытия()

// Зарегистрировать событие в очереди событий
//
// Параметры:
//  Событие - СправочникСсылка.Событие, описание события
//  Параметры - Произвольный, параметры события
//  ОбработатьСразу - Булево, Истина - обработать событие сразу, не дожидаясь
//                 очереди, Ложь - поместить событие в очередь для
//                 своевременной обработки
//
Процедура СгенерироватьСобытие(глКонтекст, Событие, Параметры, ОбработатьСразу) Экспорт
	
	ОтладкаКлиентСервер.Событие(Событие, СобытияКлиентСервер.ПредставлениеПараметровСобытия(Событие, Параметры));
	
	Если ОбработатьСразу Тогда
		
		ОбработатьСобытие(глКонтекст, Событие, Параметры);
		
		Если Контекст.ТекущееСостояние() <> Контекст.СледующееСостояние() Тогда
			СменитьСостояние();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// Определение необходимости регистрации события	
	ОчередьСобытий = Контекст.ОчередьСобытий();
	
	Для Каждого СтрокаСобытия Из ОчередьСобытий Цикл
		
		// Если событие такого же типа уже зарегистрировано
		Если СтрокаСобытия.Событие = Событие Тогда
			
			// Если событие с такими же параметрами уже зарегистрировано
			РезультатСравненияПараметров = СобытияКлиентСервер.СравнитьПараметрыСобытия(
				Событие,
				СтрокаСобытия.Параметры,
				Параметры);
			
			Если РезультатСравненияПараметров Тогда
				
				// Пропустить регистрацию события
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Зарегистрировать событие
	НовоеСобытие = Контекст.ПолучитьШаблонСобытия();
	ОчередьСобытий.Добавить(НовоеСобытие);
	НовоеСобытие.Событие = Событие;
	НовоеСобытие.Параметры = Параметры;
	
КонецПроцедуры // СгенерироватьСобытие()

// Выполнить генераторы событий
//
Процедура СгенерироватьСобытия()
	
	СобытияКлиент.СгенерироватьСобытия(Контекст.РеестрСобытий());
	
КонецПроцедуры // СгенерироватьСобытия()
