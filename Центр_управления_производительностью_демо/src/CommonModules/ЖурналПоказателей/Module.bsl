///////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОКАЗАТЕЛЯМИ АНАЛИЗА

// Записать значение показателя анализа
//
// Параметры:
//  Документ - ДокументОбъект, документ для которого фиксируется значение показателя
//  ЭтоНовый - Булево, признак нового документа
//  Показатель - Справочник.Показатели, значение которого записывается
//  Значение - Число, записываемое значение для показателя
//
Процедура ЗаписатьЗначениеПоказателяАнализа(Документ,
                                            ЭтоНовый,
                                            Показатель,
                                            Значение) Экспорт
	
	// Если документ уже записан в базе, пропустить запись движений
	Если НЕ ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Дата = Документ.Дата;
	Год = Год(Дата);
	Месяц = Месяц(Дата);
	День = День(Дата);
	Час = Час(Дата);
	Минута = Минута(Дата);
	
	// Прочитать набор записей регистра сведений ЖурналПоказателей
	Набор = РегистрыСведений.ЖурналПоказателей.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(Документ.Дата);
	Набор.Отбор.ИнформационнаяБаза.Установить(Документ.ИнформационнаяБаза);
	Набор.Отбор.Показатель.Установить(Показатель);
	Набор.Отбор.Год.Установить(Год);
	Набор.Отбор.Месяц.Установить(Месяц);
	Набор.Отбор.День.Установить(День);
	Набор.Отбор.Час.Установить(Час);
	Набор.Отбор.Минута.Установить(Минута);
	Набор.Прочитать();
	
	// Вычислить время ожидания на блокировке
	Ожидание = ?(Набор.Количество() = 0, 0, Набор[0].Значение);
	
	// Записать ожидание в регистр
	Если Набор.Количество() = 0 Тогда
		
		// Добавить строку в набор записей
		СтрокаНабора = Набор.Добавить();
		
		СтрокаНабора.Период             = Документ.Дата;
		СтрокаНабора.ИнформационнаяБаза = Документ.ИнформационнаяБаза;
		СтрокаНабора.Год                = Год;
		СтрокаНабора.Месяц              = Месяц;
		СтрокаНабора.День               = День;
		СтрокаНабора.Час                = Час;
		СтрокаНабора.Минута             = Минута;
		СтрокаНабора.Показатель         = Показатель;
		СтрокаНабора.НомерЗаписи        = 1;
		СтрокаНабора.Шаг                = 1;
		СтрокаНабора.ГраницаЗЖ          = Показатель.ГраницаЗЖ;
		СтрокаНабора.ГраницаЖК          = Показатель.ГраницаЖК;
		СтрокаНабора.Значение           = Значение;
		
	Иначе
		Набор[0].Период = Документ.Дата;
		Набор[0].ИнформационнаяБаза = Документ.ИнформационнаяБаза;
		Набор[0].Показатель = Показатель;
		Набор[0].Год = Год;
		Набор[0].Месяц = Месяц;
		Набор[0].День = День;
		Набор[0].Час = Час;
		Набор[0].Минута = Минута;
		
		Набор[0].Значение = Набор[0].Значение + Значение;
	КонецЕсли;
	
	// Записать набор записей
	Набор.Записать(Истина);
	
КонецПроцедуры // ЗаписатьЗначениеПоказателяАнализа()

// Удалить значение показателя анализа
//
// Параметры:
//  Документ - ДокументОбъект, документ для которого удаляется значение
//             показателя
//  ЭтоНовый - Булево, признак нового документа
//  Показатель - Справочник.Показатели, значение которого удаляется
//  Значение - Число, удаляемое значение для показателя
//
Процедура УдалитьЗначениеПоказателяАнализа(Документ,
                                           ЭтоНовый,
                                           Показатель,
                                           Значение) Экспорт
	
	// Прочитать набор записей регистра сведений ЖурналПоказателей
	Набор = РегистрыСведений.ЖурналПоказателей.СоздатьНаборЗаписей();
	Набор.Отбор.Период.Установить(Документ.Дата);
	Набор.Отбор.ИнформационнаяБаза.Установить(Документ.ИнформационнаяБаза);
	Набор.Отбор.Год.Установить(Год(Документ.Дата));
	Набор.Отбор.Месяц.Установить(Месяц(Документ.Дата));
	Набор.Отбор.День.Установить(День(Документ.Дата));
	Набор.Отбор.Час.Установить(Час(Документ.Дата));
	Набор.Отбор.Минута.Установить(Минута(Документ.Дата));
	Набор.Отбор.Показатель.Установить(Показатель);
	
	Набор.Прочитать();
	
	// Удалить движение документа (вычесть значение ВремяОжидания из
	// РегистрыСведений.ЖурналПоказателей.Значение.
	// В случае если остаток <= 0, удалить строку из регистра.
	Если Набор.Количество() > 0 Тогда
		
		Ожидание = Набор[0].Значение;
		Ожидание = Ожидание - Значение;
		
		Если Ожидание <= 0 Тогда 
			Набор.Очистить();
		Иначе
			Набор[0].Значение = Ожидание;
		КонецЕсли;
		
		Набор.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьЗначениеПоказателяАнализа()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЖУРНАЛОМ ПОКАЗАТЕЛЕЙ ПРОИЗВОДИТЕЛЬНОСТИ

// Удалить значения показателей производительности  на заданном интервале и
// информационной базе
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//  НачалоИнтервала - Дата, начало интервала
//  КонецИнтервала - Дата, конец интервала
//
Процедура ОчиститьИнтервал(ИБ, НачалоИнтервала, КонецИнтервала) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЖурналПоказателей.Период	
		|ИЗ
		|	РегистрСведений.ЖурналПоказателей КАК ЖурналПоказателей
		|ГДЕ
		|	ЖурналПоказателей.ИнформационнаяБаза = &ИнформационнаяБаза
		|	И ЖурналПоказателей.Период >= &НачалоИнтервала
		|	И ЖурналПоказателей.Период <= &КонецИнтервала
		|
		|ДЛЯ ИЗМЕНЕНИЯ";
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИБ);
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала", КонецИнтервала);
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЖурналПоказателей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИнформационнаяБаза.Установить(ИБ);
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОчиститьИнтервал()

// Получить доступные временные границы просмотра значений показателей
// производительности в указанной информационной базе
//
// Параметры:
//  НачалоГраницы - Дата, начало границы просмотра (выходной параметр)
//  КонецГраницы - Дата, конец границы просмотра (выходной параметр)
//  ИнформационнаяБаза - СправочникСсылка.ИнформационнаяБаза
//
Процедура ПолучитьГраницыИнтервала(НачалоГраницы,
                                   КонецГраницы,
                                   ИнформационнаяБаза) Экспорт
	
	ИгнорируемыеСостояния = Новый Массив;
	ИгнорируемыеСостояния.Добавить(Перечисления.СостоянияЗамеров.Замер);
	ИгнорируемыеСостояния.Добавить(Перечисления.СостоянияЗамеров.АнализЗавершен);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	Запрос.УстановитьПараметр("ИгнорируемыеСостояния", ИгнорируемыеСостояния);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	МИНИМУМ(Границы.НачалоГраницы) КАК НачалоГраницы,
		|	МАКСИМУМ(Границы.КонецГраницы) КАК КонецГраницы
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(ЖурналПоказателей.Период) КАК НачалоГраницы,
		|		МАКСИМУМ(ЖурналПоказателей.Период) КАК КонецГраницы
		|	ИЗ
		|		РегистрСведений.ЖурналПоказателей КАК ЖурналПоказателей
		|	ГДЕ
		|		ЖурналПоказателей.ИнформационнаяБаза = &ИнформационнаяБаза
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		МИНИМУМ(Замеры.Начало),
		|		МАКСИМУМ(Замеры.Конец)
		|	ИЗ
		|		Документ.Замер КАК Замеры
		|	ГДЕ
		|		Замеры.ИнформационнаяБаза = &ИнформационнаяБаза
		|		И Замеры.ЕстьОшибка = Ложь
		|		И НЕ Замеры.Состояние В (&ИгнорируемыеСостояния)) КАК Границы";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		НачалоГраницы = Результат.НачалоГраницы;
		КонецГраницы = Результат.КонецГраницы;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьГраницыИнтервала()

// Получить номер записи на странице
//
// Параметры:
//  МоментВремени - Дата, время, для которого определеятся номер страницы
//  НачалоГраницы - Дата, начало границы просмотра
//  Масштаб - Число, количество записей в группе записей
//
// Возвращаемое значение:
//  Число - Номер страницы на которой расположена запись
//
Функция ПолучитьНомерНаСтранице(МоментВремени, НачалоГраницы, Масштаб, КоличествоЗаписейНаСтранице) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.ОкрВверх(
		(МоментВремени - НачалоГраницы) % Масштаб /
		(Масштаб / КоличествоЗаписейНаСтранице));
	
КонецФункции // ПолучитьНомерНаСтранице()

// Функция возвращает количество записей показателей производительности
// указанного замера
//
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационнаяБаза
//  НачалоИнтервала - Дата, начало интервала на котором необходимо
//                 получить количество записей
//  КонецИнтервала - Дата, конец интервала на котором необходимо получить
//                 количество записей
//
// Возвращаемое значение:
//  Число - количество записей
//
Функция ПолучитьКоличествоЗаписейВЖурнале(ИнформационнаяБаза,
                                          НачалоИнтервала,
                                          КонецИнтервала) Экспорт
	
	Возврат КонецИнтервала - НачалоИнтервала + 1;
	
КонецФункции // ПолучитьКоличествоЗаписейВЖурнале()

// Функция получает количество страниц в журнале показателей производительности
// для указанного замера
//
// Параметры:
//  ИнформационнаяБаза - СправочникСсылка.ИнформационнаяБаза
//  НачалоИнтервала - Дата, начало интервала на котором необходимо получить
//                 количество страниц
//  КонецИнтервала - Дата, конец интервала на котором необходимо получить
//                 количество страниц
//  Масштаб - Число, количество записей в группе записей
//
// Возвращаемое значение:
//  Число - количество страниц для выбранного замера
//
Функция ПолучитьКоличествоСтраниц(ИнформационнаяБаза,
                                  НачалоИнтервала,
                                  КонецИнтервала,
                                  Масштаб) Экспорт
	
	КоличествоЗаписейВЖурнале = ПолучитьКоличествоЗаписейВЖурнале(
		ИнформационнаяБаза,
		НачалоИнтервала,
		КонецИнтервала);
		
	Возврат ОбщегоНазначенияКлиентСервер.ОкрВверх(КоличествоЗаписейВЖурнале / Масштаб);
	
КонецФункции // ПолучитьКоличествоСтраниц()

// Подготовить временные таблицы для получения страницы значений ПП
//
// Возвращаемое значение:
//  МенеджерВТ - менеджер созданных таблиц
//
Функция ПодготовитьВТДляПолученияСтраницы(МенеджерВТ, НомерСтраницы, КоличествоЗаписейНаСтранице, НачалоГраницы, КонецГраницы, Масштаб)
	
	ТипНомера = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ТипДаты = Новый ОписаниеТипов("Дата");
	НачалоГраницыСтраницы = НачалоГраницы + НомерСтраницы * Масштаб;
	КонецГраницыСтраницы = НачалоГраницыСтраницы + Масштаб - 1;
	РазмерТочки = Масштаб / КоличествоЗаписейНаСтранице;
	ПоловинаРазмераТочки = Цел(РазмерТочки / 2);
	НомераЗаписей = Новый ТаблицаЗначений;
	НомераЗаписей.Колонки.Добавить("НачалоГраницыЗаписи", ТипДаты);
	НомераЗаписей.Колонки.Добавить("КонецГраницыЗаписи", ТипДаты);
	НомераЗаписей.Колонки.Добавить("НомерЗаписи", ТипНомера);
	НомераЗаписей.Колонки.Добавить("МоментВремени", ТипДаты);
	
	Для Сч = 0 По 59 Цикл
		СтрокаНомеровЗаписей = НомераЗаписей.Добавить();
		СтрокаНомеровЗаписей.НомерЗаписи = Сч;
		СтрокаНомеровЗаписей.НачалоГраницыЗаписи = НачалоГраницыСтраницы + ОбщегоНазначенияКлиентСервер.ОкрВверх(Сч * РазмерТочки);
		СтрокаНомеровЗаписей.КонецГраницыЗаписи = НачалоГраницыСтраницы + ОбщегоНазначенияКлиентСервер.ОкрВверх((Сч + 1) * РазмерТочки - 1);
		СтрокаНомеровЗаписей.МоментВремени = СтрокаНомеровЗаписей.НачалоГраницыЗаписи + ПоловинаРазмераТочки;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Таблица", НомераЗаписей);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	НачалоГраницыЗаписи,
		|	КонецГраницыЗаписи,
		|	НомерЗаписи,
		|	МоментВремени
		|
		|ПОМЕСТИТЬ
		|	НомераЗаписей
		|
		|ИЗ
		|	&Таблица КАК Таблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НачалоГраницыЗаписи,
		|	КонецГраницыЗаписи,
		|	НомерЗаписи,
		|	МоментВремени";
	Запрос.Выполнить();
	
КонецФункции // ПодготовитьВТДляПолученияСтраницы()

// Уничтожить временные таблицы, необходимые для получения значений ПП для
// указанной страницы
//
// МенеджерВТ - МенеджерВременныхТаблиц
//
Процедура УничтожитьВТДляПолученнойСтраницы(МенеджерВТ)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "
		|УНИЧТОЖИТЬ НомераЗаписей;
		|УНИЧТОЖИТЬ ЗначенияПоУмолчанию";
	Запрос.Выполнить();
	
КонецПроцедуры // УничтожитьВТДляПолученнойСтраницы()

// Функция получает страницу записей показателей производительности
// указанного замера.
//
// Предполагается, что страница с указанным номером существует, т.е.
// заранее было определено максимальное количество страниц
//
// Масштабирование позволяет просматривать большие интервалы значений
// показателей производительности не выбирая при этом много данных.
// При масштабировании интервал получаемых значений разбивается на группы
// значений. В результате возвращаются средние значения групп значений.
//
// Параметры:
//  МенеджерВТ - менеджер созданных таблиц
//  НомерСтраницы - Число, номер получаемой страницы
//  ИнформационнаяБаза - СправочникСсылка.ИнформационнаяБаза
//  НачалоГраницы - Дата, начало интервала
//  КонецГраницы - Дата, конец интервала
//  Масштаб - Число, количество записей в группе записей
//  Показатели - ТаблицаЗначений, показатели для которых нужно получить
//               значения
//  Кэш - Структура, подробное описание в функции СоздатьКэш()
//
// Возвращаемое значение:
//  ТаблицаЗначений - показатели производительности и их значения
//
Функция ПолучитьСтраницу(МенеджерВТ,
                         НомерСтраницы,
						 КоличествоЗаписейНаСтранице,
                         ИнформационнаяБаза,
                         НачалоГраницы,
                         КонецГраницы,
                         Масштаб,
                         Показатели,
                         Кэш) Экспорт
	
	// Проверить наличие страницы в кэше
	ОписаниеСтраницы = ПолучитьСтраницуИзКэша(Кэш, НомерСтраницы);
	
	// Если страница найдена, вернуть ее
	Если ОписаниеСтраницы <> Неопределено Тогда
		Возврат ОписаниеСтраницы;
	КонецЕсли;
	
	// Подготовка временных таблиц
	ПодготовитьВТДляПолученияСтраницы(
		МенеджерВТ,
		НомерСтраницы,
		КоличествоЗаписейНаСтранице,
		НачалоГраницы,
		КонецГраницы,
		Масштаб);
	
	// Получить значения показателей производительности на странице
	Страница = ПолучитьЗначенияПоказателейНаСтранице(
		МенеджерВТ,
		НачалоГраницы,
		КонецГраницы);
		
	// Получить значения показателей производительности на странице
	Границы = ПолучитьЗначенияГраницНаСтранице(
		МенеджерВТ,
		НачалоГраницы,
		КонецГраницы);
	
	// Добавить страницу в кэш
	ОписаниеСтраницы = СоздатьОписаниеСтраницы();
	ОписаниеСтраницы.Страница = Страница;
	ОписаниеСтраницы.Границы = Границы;
	ДобавитьСтраницуВКэш(Кэш, НомерСтраницы, ОписаниеСтраницы);
	
	// Очистить временные данные
	УничтожитьВТДляПолученнойСтраницы(МенеджерВТ);
	
	Возврат ОписаниеСтраницы;
	
КонецФункции // ПолучитьСтраницу()

// Функция получает значения указанного показателя производительности
//
// Параметры:
//  МенеджерВТ - менеджер созданных таблиц
//  НачалоГраницы - Дата, начало интервала
//  КонецГраницы - Дата, конец интервала
//
// ВозвращаемоеЗначение:
//  ТаблицаЗначений - значения показателя производительности
//
Функция ПолучитьЗначенияПоказателейНаСтранице(МенеджерВТ, НачалоГраницы, КонецГраницы)
	
	ЗначенияПоказателей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("НачалоГраницы", НачалоГраницы);
	Запрос.УстановитьПараметр("КонецГраницы", КонецГраницы);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	НомераЗаписей.НомерЗаписи,
		|	НомераЗаписей.МоментВремени,
		|	ЖурналПоказателей.Показатель КАК Показатель,
		|	ЖурналПоказателей.Показатель.Код КАК Код,
		|	МАКСИМУМ(ЖурналПоказателей.Значение) КАК Значение,
		|	МАКСИМУМ(ЖурналПоказателей.ГраницаЖК) КАК ГраницаЖК,
		|	МАКСИМУМ(ЖурналПоказателей.ГраницаЗЖ) КАК ГраницаЗЖ,
		|	МАКСИМУМ(ЖурналПоказателей.Шаг) КАК Шаг
		|ИЗ
		|	НомераЗаписей
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЖурналПоказателей
		|	ПО ЖурналПоказателей.Период >= НомераЗаписей.НачалоГраницыЗаписи И
		|	   ЖурналПоказателей.Период <= НомераЗаписей.КонецГраницыЗаписи
		|СГРУППИРОВАТЬ ПО
		|	НомераЗаписей.НомерЗаписи,
		|	НомераЗаписей.МоментВремени,
		|	ЖурналПоказателей.Показатель,
		|	ЖурналПоказателей.Показатель.Код
		|УПОРЯДОЧИТЬ ПО
		|	НомераЗаписей.НомерЗаписи";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЗначений = ПолучитьШаблонЗначенийПоказателя();
		ЗаполнитьЗначенияСвойств(СтрокаЗначений, Выборка);
		ЗначенияПоказателей.Добавить(СтрокаЗначений);
	КонецЦикла;
	
	Возврат ЗначенияПоказателей;
	
КонецФункции // ПолучитьЗначенияПоказателяНаСтранице()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьШаблонЗначенийПоказателя()
	
	ШаблонЗначенийПоказателя = Новый Структура(
		"НомерЗаписи,
		|МоментВремени,
		|Показатель,
		|Код,
		|Значение,
		|ГраницаЖК,
		|ГраницаЗЖ,
		|Шаг");
	
	Возврат ШаблонЗначенийПоказателя;
	
КонецФункции // ПолучитьШаблонЗначенийПоказателя()

// Получить граничные значения показателей производительности на странице
// Если слева от страницы есть значение ПП, тогда оно используется, как граничное,
// иначе граничным значением считается 0 с временем начала страницы - 1.
// Для правой границы все аналогично.
//
// Параметры:
//  МенеджерВТ - менеджер созданных таблиц
//  НачалоГраницы - Дата, начало интервала
//  КонецГраницы - Дата, конец интервала
//
// ВозвращаемоеЗначение:
//  Структура - начальная и конечная границы
//
Функция ПолучитьЗначенияГраницНаСтранице(МенеджерВТ,
                                         НачалоГраницы,
                                         КонецГраницы)
	ГраницыНачала = Новый Массив;
	ГраницыКонца = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("НачалоГраницы", НачалоГраницы);
	Запрос.УстановитьПараметр("КонецГраницы", КонецГраницы);
	Запрос.УстановитьПараметр("НачалоПоУмолчанию", НачалоГраницы - 1);
	Запрос.УстановитьПараметр("КонецПоУмолчанию", КонецГраницы + 1);
	Запрос.Текст = "
		|// Установить значения по-умолчанию
		|ВЫБРАТЬ
		|	Показатели.Показатель,
		|	0 КАК Значение,
		|	1 КАК Шаг,
		|	&НачалоПоУмолчанию КАК Начало,
		|	&КонецПоУмолчанию КАК Конец,
		|	ВЫБОР
		|		КОГДА НачалоЛевое.ГраницаЖК ЕСТЬ NULL ТОГДА НачалоПравое.ГраницаЖК
		|		ИНАЧЕ НачалоЛевое.ГраницаЖК
		|	КОНЕЦ КАК ГраницаЖКНачало,
		|	ВЫБОР
		|		КОГДА НачалоЛевое.ГраницаЗЖ ЕСТЬ NULL ТОГДА НачалоПравое.ГраницаЗЖ
		|		ИНАЧЕ НачалоЛевое.ГраницаЗЖ
		|	КОНЕЦ КАК ГраницаЗЖНачало,
		|	ВЫБОР
		|		КОГДА КонецПравый.ГраницаЖК ЕСТЬ NULL ТОГДА КонецЛевый.ГраницаЖК
		|		ИНАЧЕ КонецПравый.ГраницаЖК
		|	КОНЕЦ КАК ГраницаЖККонец,
		|	ВЫБОР
		|		КОГДА КонецПравый.ГраницаЗЖ ЕСТЬ NULL ТОГДА КонецЛевый.ГраницаЗЖ
		|		ИНАЧЕ КонецПравый.ГраницаЗЖ
		|	КОНЕЦ КАК ГраницаЗЖКонец
		|ПОМЕСТИТЬ
		|	ЗначенияПоУмолчанию
		|ИЗ
		|	Показатели
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЖурналПоказателей КАК НачалоЛевое
		|	ПО
		|		Показатели.Показатель = НачалоЛевое.Показатель И
		|		НачалоЛевое.Период В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				Период
		|			ИЗ
		|				ЖурналПоказателей
		|			ГДЕ
		|				Период < &НачалоГраницы И
		|				Показатели.Показатель = ЖурналПоказателей.Показатель
		|			УПОРЯДОЧИТЬ ПО
		|				ЖурналПоказателей.Период
		|		)
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЖурналПоказателей КАК НачалоПравое
		|	ПО
		|		Показатели.Показатель = НачалоПравое.Показатель И
		|		НачалоПравое.Период В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				Период
		|			ИЗ
		|				ЖурналПоказателей
		|			ГДЕ
		|				Период >= &НачалоГраницы И
		|				Показатели.Показатель = ЖурналПоказателей.Показатель
		|			УПОРЯДОЧИТЬ ПО
		|				ЖурналПоказателей.Период
		|		)
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЖурналПоказателей КАК КонецЛевый
		|	ПО
		|		Показатели.Показатель = КонецЛевый.Показатель И
		|		КонецЛевый.Период В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				Период
		|			ИЗ
		|				ЖурналПоказателей
		|			ГДЕ
		|				Период <= &КонецГраницы И
		|				Показатели.Показатель = ЖурналПоказателей.Показатель
		|			УПОРЯДОЧИТЬ ПО
		|				ЖурналПоказателей.Период
		|		)
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЖурналПоказателей КАК КонецПравый
		|	ПО
		|		Показатели.Показатель = КонецПравый.Показатель И
		|		КонецПравый.Период В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				Период
		|			ИЗ
		|				ЖурналПоказателей
		|			ГДЕ
		|				Период > &КонецГраницы И
		|				Показатели.Показатель = ЖурналПоказателей.Показатель
		|			УПОРЯДОЧИТЬ ПО
		|				ЖурналПоказателей.Период
		|		)
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатели.Показатель";
	Запрос.Выполнить();
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗначенияПоУмолчанию.Показатель КАК Показатель,
		|	ЗначенияПоУмолчанию.Показатель.Код КАК Код,
		|	ВЫБОР
		|		КОГДА НачалоГраницы.Период ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.Начало
		|		ИНАЧЕ НачалоГраницы.Период
		|	КОНЕЦ КАК МоментВремени,
		|	ВЫБОР
		|		КОГДА НачалоГраницы.Значение ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.Значение
		|		ИНАЧЕ НачалоГраницы.Значение
		|	КОНЕЦ КАК Значение,
		|	ВЫБОР
		|		КОГДА НачалоГраницы.Шаг ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.Шаг
		|		ИНАЧЕ НачалоГраницы.Шаг
		|	КОНЕЦ КАК Шаг,
		|	ВЫБОР
		|		КОГДА НачалоГраницы.ГраницаЖК ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.ГраницаЖККонец
		|		ИНАЧЕ НачалоГраницы.ГраницаЖК
		|	КОНЕЦ КАК ГраницаЖК,
		|	ВЫБОР
		|		КОГДА НачалоГраницы.ГраницаЗЖ ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.ГраницаЗЖКонец
		|		ИНАЧЕ НачалоГраницы.ГраницаЗЖ
		|	КОНЕЦ КАК ГраницаЗЖ
		|ИЗ
		|	ЗначенияПоУмолчанию
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЖурналПоказателей КАК НачалоГраницы
		|	ПО ЗначенияПоУмолчанию.Показатель = НачалоГраницы.Показатель И
		|		НачалоГраницы.Период В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				Период
		|			ИЗ
		|				ЖурналПоказателей
		|			ГДЕ
		|				Период < &НачалоГраницы И
		|				Показатель = ЗначенияПоУмолчанию.Показатель
		|			УПОРЯДОЧИТЬ ПО
		|				Период УБЫВ
		|		)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЗначений = ПолучитьШаблонЗначенийПоказателя();
		ЗаполнитьЗначенияСвойств(СтрокаЗначений, Выборка);
		ГраницыНачала.Добавить(СтрокаЗначений);
	КонецЦикла;
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КонецГраницы.Период ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.Конец
		|		ИНАЧЕ КонецГраницы.Период
		|	КОНЕЦ КАК МоментВремени,
		|	ЗначенияПоУмолчанию.Показатель КАК Показатель,
		|	ЗначенияПоУмолчанию.Показатель.Код КАК Код,
		|	ВЫБОР
		|		КОГДА КонецГраницы.Значение ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.Значение
		|		ИНАЧЕ КонецГраницы.Значение
		|	КОНЕЦ КАК Значение,
		|	ВЫБОР
		|		КОГДА КонецГраницы.Шаг ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.Шаг
		|		ИНАЧЕ КонецГраницы.Шаг
		|	КОНЕЦ КАК Шаг,
		|	ВЫБОР
		|		КОГДА КонецГраницы.ГраницаЖК ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.ГраницаЖККонец
		|		ИНАЧЕ КонецГраницы.ГраницаЖК
		|	КОНЕЦ КАК ГраницаЖК,
		|	ВЫБОР
		|		КОГДА КонецГраницы.ГраницаЗЖ ЕСТЬ NULL ТОГДА ЗначенияПоУмолчанию.ГраницаЗЖКонец
		|		ИНАЧЕ КонецГраницы.ГраницаЗЖ
		|	КОНЕЦ КАК ГраницаЗЖ
		|ИЗ
		|	ЗначенияПоУмолчанию
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ЖурналПоказателей КАК КонецГраницы
		|	ПО ЗначенияПоУмолчанию.Показатель = КонецГраницы.Показатель И
		|		КонецГраницы.Период В (
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				Период
		|			ИЗ
		|				ЖурналПоказателей
		|			ГДЕ
		|				Период > &КонецГраницы И
		|				Показатель = ЗначенияПоУмолчанию.Показатель
		|			УПОРЯДОЧИТЬ ПО
		|				Период
		|		)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаЗначений = ПолучитьШаблонЗначенийПоказателя();
		ЗаполнитьЗначенияСвойств(СтрокаЗначений, Выборка);
		ГраницыКонца.Добавить(СтрокаЗначений);
	КонецЦикла;
	
	Границы = СоздатьСтруктуруХраненияГраницСтраницы();
	Границы.Начало = ГраницыНачала;
	Границы.Конец = ГраницыКонца;
	
	Возврат Границы;
	
КонецФункции // ПолучитьЗначенияГраницНаСтранице()

// Подготовить исходные данные для просмотра значений ПП
// В подготовку входит создание временных таблиц, необходимых для
// оптимизации механизма просмотра
//
// Параметры:
//  МенеджерВТ - менеджер созданных таблиц
//  ИБ - Справочник.ИнформационныеБазы. база с которой сейчас работаем
//
Процедура ПодготовитьДанныеДляПросмотра(МенеджерВТ, ИБ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Параметры.Вставить("ИнформационнаяБаза", ИБ);
	Запрос.Текст = "
		|// Выбрать часть журнала для указанной ИБ
		|ВЫБРАТЬ
		|	*
		|ПОМЕСТИТЬ
		|	ЖурналПоказателей
		|ИЗ
		|	РегистрСведений.ЖурналПоказателей
		|ГДЕ
		|	ИнформационнаяБаза = &ИнформационнаяБаза
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Показатель,
		|	НомерЗаписи
		|;
		|
		|// Определить показатели, участвующие в просмотре
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Показатель
		|ПОМЕСТИТЬ
		|	Показатели
		|ИЗ
		|	ЖурналПоказателей
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|;";
	Запрос.Выполнить();
	
КонецПроцедуры // ПодготовитьДанныеДляПросмотра()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСтраницыДляОтображения(ИнформационнаяБаза, Показатели, Масштаб, НачалоИнтервала,
		НачалоГраницыПросмотра, КонецГраницыПросмотра, НомерПервойСтраницы, НомерВторойСтраницы, 
		КоличествоЗаписейНаСтранице, КэшСтраниц) Экспорт
	
	СтраницыДляОтображения = Новый Структура;
	
	МенеджерВТПросмотра = МенеджерВТПросмотра(ИнформационнаяБаза);
	
	ОписаниеСтраницы = ПолучитьСтраницу(
		МенеджерВТПросмотра,
		НомерПервойСтраницы,
		КоличествоЗаписейНаСтранице,
		ИнформационнаяБаза, //Контекст.ИнформационнаяБаза(),
		НачалоГраницыПросмотра, //Контекст.НачалоГраницыПросмотра(),
		КонецГраницыПросмотра, //Контекст.КонецГраницыПросмотра(),
		Масштаб,
		Показатели,
		КэшСтраниц); //Контекст.КэшСтраниц());
	СтраницыДляОтображения.Вставить("ПерваяСтраница", ОписаниеСтраницы);
	
	НачалоНаСтранице = ПолучитьНомерНаСтранице(
		НачалоИнтервала, //Контекст.НачалоИнтервала(),
		НачалоГраницыПросмотра, //Контекст.НачалоГраницыПросмотра(),
		Масштаб,
		КоличествоЗаписейНаСтранице);
	СтраницыДляОтображения.Вставить("НачалоНаСтранице", НачалоНаСтранице);
	
	Если НомерВторойСтраницы > НомерПервойСтраницы Тогда
		ОписаниеСтраницы = ПолучитьСтраницу(
			МенеджерВТПросмотра,
			НомерВторойСтраницы,
			КоличествоЗаписейНаСтранице,
			ИнформационнаяБаза, //Контекст.ИнформационнаяБаза(),
			НачалоГраницыПросмотра, //Контекст.НачалоГраницыПросмотра(),
			КонецГраницыПросмотра, //Контекст.КонецГраницыПросмотра(),
			Масштаб,
			Показатели,
			КэшСтраниц); //Контекст.КэшСтраниц());
		СтраницыДляОтображения.Вставить("ВтораяСтраница", ОписаниеСтраницы);
	КонецЕсли;
	
	Возврат СтраницыДляОтображения;
	
КонецФункции // ПолучитьСтраницыДляОтображения()

// Получить кэш страниц показателей
//
// Возвращаемое значение:
//  Булево - Структура (см. ЖурналПоказателей.СоздатьКэш())
//
Функция МенеджерВТПросмотра(ИнформационнаяБаза) Экспорт
	
	МенеджерВТПросмотра = Новый МенеджерВременныхТаблиц;
	ПодготовитьДанныеДляПросмотра(МенеджерВТПросмотра, ИнформационнаяБаза);
	
	Возврат МенеджерВТПросмотра;
	
КонецФункции // МенеджерВТПросмотра()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КЭША СТРАНИЦ

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьШаблонЭлементаКэша() Экспорт
	
	ШаблонЭлемента = Новый Структура;
	ШаблонЭлемента.Вставить("Номер");
	ШаблонЭлемента.Вставить("ОписаниеСтраницы");
	
	Возврат ШаблонЭлемента;
	
КонецФункции // ПолучитьШаблонЭлементаКэша()

// Получить максимальный размер кэша в страницах
//
// Возвращаемое значение:
//  Число - максимальное количество страниц в кэше
//
Функция ПолучитьМаксимальныйРазмерКэша()
	
	Возврат 100;
	
КонецФункции // ПолучитьМаксимальныйРазмерКэша()

// Добавить страницу в кэш
//
// Параметры:
//  Кэш - Структура, подробное описание в функции СоздатьКэш()
//  НомерСтраницы - Число, номер добавляемой страницы
//  ОписаниеСтраницы - Структура, описание страницы и граничных значений
//
Процедура ДобавитьСтраницуВКэш(Кэш, НомерСтраницы, ОписаниеСтраницы)
	
	МаксимальныйРазмерКэша = ПолучитьМаксимальныйРазмерКэша();
	Страницы = Кэш.Страницы;
	
	// Если кэш полон
	Если Страницы.Количество() = МаксимальныйРазмерКэша Тогда
		
		// Удалить самую старую страницу
		Страницы.Удалить(МаксимальныйРазмерКэша - 1);
	КонецЕсли;
	
	// Добавить новую страницу в кэш
	СтрокаСтраницы = ПолучитьШаблонЭлементаКэша();
	СтрокаСтраницы.Номер = НомерСтраницы;
	СтрокаСтраницы.ОписаниеСтраницы = ОписаниеСтраницы;
	Страницы.Вставить(0, СтрокаСтраницы);
	
КонецПроцедуры // ДобавитьСтраницуВКэш()

// Получить страницу из кэша
//
// Параметры:
//  Кэш - Структура, подробное описание в функции СоздатьКэш()
//  НомерСтраницы - Число, номер получаемой страницы
//
// Возвращаемое значение:
//  Структура - описание страницы состоящее из полей
//            - Страница - ТаблицаЗначений, значения ПП
//            - Границы - Структура, граничные значения ПП для страницы
//
Функция ПолучитьСтраницуИзКэша(Кэш, НомерСтраницы)
	
	Страницы = Кэш.Страницы;
	
	// Обработка кэша страниц
	Для Каждого СтрокаСтраницы Из Страницы Цикл
		
		// Если страница присутствует в кэше
		Если СтрокаСтраницы.Номер = НомерСтраницы Тогда
			
			// Вернуть прокэшированную страницу
			Возврат СтрокаСтраницы.ОписаниеСтраницы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСтраницуИзКэша()

// Создать описание страницы
//
// Возвращаемое значение:
//  Структура - описание страницы, состоящее из
//            - Страница - ТаблицаЗначений, значения ПП на странице
//            - Границы - Структура, граничные значения ПП для страницы
//
Функция СоздатьОписаниеСтраницы()
	
	Возврат Новый Структура("Страница,Границы");
	
КонецФункции // СоздатьОписаниеСтраницы()

// Создать структуру для хранения граничных значений ПП для страницы
//
// Возвращаемое значение:
//  Структура - граничные значения ПП для страницы
//            - Начало - ТаблицаЗначений, левая граница страницы
//            - Конец - ТаблицаЗначений, правая граница страницы
//
Функция СоздатьСтруктуруХраненияГраницСтраницы()
	
	Возврат Новый Структура("Начало,Конец");
	
КонецФункции // СоздатьСтруктуруХраненияГраницСтраницы()
