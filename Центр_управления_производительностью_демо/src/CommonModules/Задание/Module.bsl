///////////////////////////////////////////////////////////////////////////////
// ЗАДАНИЯ ЗАМЕРА

// Определить необходимость обработки замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого получаются данные
//  НеобходимоеСостояние - Перечисление.СостояниеЗамера
//  Модификатор - Строка, действие выполняемое для установки нового состояния
//                замера. Действию передается, как первый параметр сам замер
//
// Возвращаемое значение:
//  Булево - Истина, обработка требуется
//
Функция ОбрабатыватьЗамер(ДокументЗамер, НеобходимоеСостояние, Модификатор)
	
	НачатьТранзакцию();
	
	Попытка
		Блокировки.ЗаблокироватьСсылку(ДокументЗамер);
		
		Если ДокументЗамер.Состояние = НеобходимоеСостояние Тогда
			Выполнить Модификатор + "(ДокументЗамер)";
			ЗафиксироватьТранзакцию();
			Возврат Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ОтменитьТранзакцию();
	Возврат Ложь;
	
КонецФункции // ОбрабатыватьЗамер()

// Определить обработан ли замер, если обработан, то успешно или нет
//
// Возвращаемое значение:
//  Булево - Истина, замер успешно обработан, Ложь - обработан с ошибками или
//           отменен, Неопределено, если замер еще обрабатывается
//
Функция ЗамерОбработан(ДокументЗамер)
	
	ЗаданиеОбъект = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(
		Замер.ПолучитьИдентификаторЗадания(ДокументЗамер));
		
	Если ЗаданиеОбъект <> Неопределено Тогда
		Если ЗаданиеОбъект.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Возврат Истина;
		ИначеЕсли ЗаданиеОбъект.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОписаниеОшибки = ?(
				ЗаданиеОбъект.ИнформацияОбОшибке <> Неопределено,
					ЗаданиеОбъект.ИнформацияОбОшибке.Описание,
					"Задание выполнено с ошибками. Описание ошибки не известно. Возможно, сервер 1С:Предприятия аварийно завершил работу.");
			Замер.ЗаданиеНеВыполнено(ДокументЗамер, ОписаниеОшибки);
			Возврат Ложь;
		ИначеЕсли ЗаданиеОбъект.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			Замер.ЗаданиеНеВыполнено(ДокументЗамер, "Обработка замера отменена. Обработку можно возобновить, нажав кнопку ""Повтор"".");
			Возврат Ложь;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Замер.ЗаданиеНеВыполнено(ДокументЗамер, "Обработка замера завершена аварийно. Такое могло произойти, например, при аварийном завершении работы рабочего процесса ЦУП, который его выполнял. Нажмите кнопку ""Повтор"" для повторной попытки обработки замера.");
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЗамерОбработан()

// Проверить, продолжают ли работать фоновые задения над замерами
//
Процедура ПроверитьРаботоспособностьФоновыхЗаданий() Экспорт
	
	Замеры = Замер.ПолучитьЗамерыПолучающиеДанные();
	
	Пока Замеры.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ЗамерОбработан(Замеры.Замер);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьРаботоспособностьФоновыхЗаданий()

// Прочитать исходные данные замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого получаются данные
//
Функция ПолучитьИсходныеДанные(ДокументЗамер) Экспорт
	
	Замер.ПолучитьИсходныеДанные(ДокументЗамер);
	
	Параметры = Новый Массив;
	Параметры.Добавить(ДокументЗамер);
	ЗаданиеОбъект = ФоновыеЗадания.Выполнить("Анализ.ЗаданиеПолучитьИсходныеДанные", Параметры);
	Замер.УстановитьИдентификаторЗадания(ДокументЗамер, ЗаданиеОбъект.УникальныйИдентификатор);
	
КонецФункции // ПолучитьИсходныеДанные()

// Определить результат получения исходных данных
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого определяется результат
//
Функция РезультатПолученияИсходныхДанных(ДокументЗамер)
	
	Возврат ЗамерОбработан(ДокументЗамер);
	
	Возврат Истина;
	
КонецФункции // РезультатПолученияИсходныхДанных()

// Подтвердить завершение получения исходных данных для анализа замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого определяется результат
//
Процедура ЗавершитьПолучениеДанных(ДокументЗамер)
	
	
	
КонецПроцедуры // ЗавершитьПолучениеДанных()

// Отменить получение исходных данных для анализа замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого отменяется получение
//
Процедура ОтменитьПолучениеДанных(ДокументЗамер)
	
	
	
КонецПроцедуры // ОтменитьПолучениеДанных()

// Подготовить исходные данные для анализа замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого готовятся данные
//
Функция ПодготовитьИсходныеДанные(ДокументЗамер)
	
	// Проверить необходимость подготовки исходных данных
	ПодходящийЗамер = ОбрабатыватьЗамер(
		ДокументЗамер,
		Перечисления.СостоянияЗамеров.ИсходныеДанныеПолучены,
		"Замер.ПодготовитьИсходныеДанные");
		
	Если Не ПодходящийЗамер Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		// Выгрузка исходных данных
		ПутиТЖ = Анализ.ВыгрузитьТЖ(ДокументЗамер);
		
		// Разбор исходных данных
		НеУдалятьСлужебныеДанные = Константы.НеУдалятьСлужебныеДанные.Получить();
		ТехнологическийЖурнал.ОчиститьРегистрТехнологическийЖурнал(ДокументЗамер, НеУдалятьСлужебныеДанные);
		ТехнологическийЖурнал.ЗагрузитьТехнологическийЖурнал(ПутиТЖ, ДокументЗамер);
		
		// Удаление временных данных
		Если ПутиТЖ.Количество() > 0 Тогда
			УдалитьФайлы(ОбщегоНазначенияКлиентСервер.ИмяКаталога(ПутиТЖ[0]));
		КонецЕсли;
		
		Замер.ИсходныеДанныеПодготовлены(ДокументЗамер);
	Исключение
		Замер.ЗаданиеНеВыполнено(ДокументЗамер, ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции // ПодготовитьИсходныеДанные()

// Определить результат подготовки исходных данных
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого готовятся данные
//
Функция РезультатПодготовкиИсходныхДанных(ДокументЗамер)
	
	НачатьТранзакцию();
	Резульат = ДокументЗамер.ВыполнятьЗадание;
	ЗафиксироватьТранзакцию();
	
	Возврат Резульат;
	
КонецФункции // РезультатПодготовкиИсходныхДанных()

// Подтвердить завершение подготовки исходных данных для анализа замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого готовятся данные
//
Процедура ЗавершитьПодготовкуДанных(ДокументЗамер)
	
	Замер.ИсходныеДанныеПодготовлены(ДокументЗамер);
	
КонецПроцедуры // ЗавершитьПодготовкуДанных()

// Отменить подготовку исходных данных для анализа замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого отменяется подготовка
//
Процедура ОтменитьПодготовкуДанных(ДокументЗамер)
	
	
КонецПроцедуры // ОтменитьПодготовкуДанных()

// Проанализировать данные замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого анализируются данные
//
Функция ПроанализироватьЗамер(ДокументЗамер)
	
	// Проверить необходимость подготовки исходных данных
	ПодходящийЗамер = ОбрабатыватьЗамер(
		ДокументЗамер,
		Перечисления.СостоянияЗамеров.ИсходныеДанныеПодготовлены,
		"Замер.ПроанализироватьЗамер");
		
	Если Не ПодходящийЗамер Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Результат = Истина;
		Если ДокументЗамер.Показатель = Справочники.Показатели.АнализЗапросов Тогда
			АнализЗапросов.ПроанализироватьЗапросы(Анализ.СоздатьКонтекстАнализа(ДокументЗамер));
		ИначеЕсли ДокументЗамер.Показатель = Справочники.Показатели.АнализОжиданийНаБлокировках Тогда
			КонтекстАнализа = Анализ.СоздатьКонтекстАнализа(ДокументЗамер);
			Если КонтекстАнализа.Замер.ТипБлокировки = Перечисления.ТипыБлокировок.Блокировка1СПредприятия Тогда
				АнализБлокировок1С.ПроанализироватьБлокировки(КонтекстАнализа);
			ИначеЕсли КонтекстАнализа.Замер.ТипБлокировки = Перечисления.ТипыБлокировок.БлокировкаСУБД Тогда
				АнализБлокировокСУБД.ПроанализироватьБлокировки(КонтекстАнализа);
			КонецЕсли;
		ИначеЕсли ДокументЗамер.Показатель = Справочники.Показатели.АнализВзаимоблокировок Тогда
			КонтекстАнализа = Анализ.СоздатьКонтекстАнализа(ДокументЗамер);
			АнализВзаимоблокировок.ПроанализироватьВзаимоблокировки(КонтекстАнализа);
		ИначеЕсли ДокументЗамер.Показатель = Справочники.Показатели.АнализВзаимоблокировок1С Тогда
			КонтекстАнализа = Анализ.СоздатьКонтекстАнализа(ДокументЗамер);
			АнализВзаимоблокировок1С.ПроанализироватьВзаимоблокировки(КонтекстАнализа);
		ИначеЕсли ДокументЗамер.Показатель = Справочники.Показатели.АнализСерверныхВызовов Тогда
			КонтекстАнализа = Анализ.СоздатьКонтекстАнализа(ДокументЗамер);
			АнализСерверныхВызовов.ПроанализироватьСерверныеВызовы(КонтекстАнализа);
		КонецЕсли;
		Замер.ЗамерПроанализирован(ДокументЗамер);
	Исключение
		Замер.ЗаданиеНеВыполнено(ДокументЗамер, ОписаниеОшибки());
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ПроанализироватьЗамер()

// Определить результат анализа замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, анализируемый замер
//
Функция РезультатАнализаЗамера(ДокументЗамер)
	
	НачатьТранзакцию();
	Результат = ДокументЗамер.ВыполнятьЗадание;
	ЗафиксироватьТранзакцию();
	
	Возврат Результат;
	
КонецФункции // РезультатАнализаЗамера()

// Подтвердить завершение анализа замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, замер для которого готовятся данные
//
Функция ЗавершитьАнализЗамера(ДокументЗамер)
	
	Попытка
		НеУдалятьСлужебныеДанные = Константы.НеУдалятьСлужебныеДанные.Получить();
		Если Не НеУдалятьСлужебныеДанные Тогда
			Замер.Удалить(ДокументЗамер);
		КонецЕсли;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ЗавершитьАнализЗамера()

// Отменить анализ замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, отменяемый замер
//
Процедура ОтменитьАнализЗамера(ДокументЗамер)
	
	
КонецПроцедуры // ОтменитьПодготовкуДанных()


///////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТНЫЕ ЗАДАНИЯ

// Получить таблицу для конечного автомата обработки замеров
//
// Возвращаемое значение:
//  ТаблицаЗначений - состоящая из колонок:
//    - Состояние - Перечисление.СостояниеЗамера
//    - Действие - Строка, имя функции выполняемой в указанном состоянии
//                 при условии, что установлен флаг ВыполнятьЗадание
//    - ПриУспешномВыполнении - Строка, имя функции выполняемой при
//                 успешном выполнении Действия
//    - ПриВыполненииСОшибкой - Строка, имя функции выполняемой при
//                 выполнении Действия с ошибкой
//
Функция ПолучитьТаблицуКАОбработкиЗамеров() Экспорт
	
	Возврат ЗначениеИзСтрокиВнутр(Константы.КАОбработкиЗамеров.Получить());
	
КонецФункции // ПолучитьТаблицуКАОбработкиЗамеров()

// Получить список замеров для которых необходимо провести анализ
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание замеров
//
Функция ВыбратьЗамерыДляАнализа(Состояния)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбрабатываемыеСостояния", Состояния);
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Замер.Ссылка КАК Замер,
		|	Замер.Состояние КАК Состояние
		|ИЗ
		|	Документ.Замер КАК Замер
		|ГДЕ
		|	Замер.Состояние В (&ОбрабатываемыеСостояния) И
		|	Замер.ВыполнятьЗадание = Истина И
		|	Замер.ЕстьОшибка = Ложь И
		|	Замер.ПометкаУдаления = Ложь
		|ДЛЯ ИЗМЕНЕНИЯ
		|	Документ.Замер";
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ВыбратьЗамерыДляАнализа()

// Обработчик регламентного задания ОбработкаЗамеров
// в задачи которого входит поиск неразобранных замеров и
// Выдача указаний фоновым заданиям для их разбора
//
Процедура ОбработкаЗамеров(Состояния, Исключения, ИнформационнаяБаза, НачалоИнтервала, КонецИнтервала, ОбрабатыватьЗамерыТолькоНаИнтервале, ИдентификаторЗадания) Экспорт
	
	Перем Успешно;
	
	ПроверитьРаботоспособностьФоновыхЗаданий();
	
	Если ОбрабатыватьЗамерыТолькоНаИнтервале Тогда
		ВыборкаЗамеров = Замер.ПолучитьНеразобранныеЗамеры(
			ИнформационнаяБаза, //Контекст.ИнформационнаяБаза(),
			НачалоИнтервала, //Контекст.НачалоИнтервала(),
			КонецИнтервала, //Контекст.КонецИнтервала(),
			Исключения);
	Иначе
		ВыборкаЗамеров = ВыбратьЗамерыДляАнализа(Состояния);
	КонецЕсли;
	
	// Обработать замеры
	ТаблицаКАЗамера = ПолучитьТаблицуКАОбработкиЗамеров();
	Пока ВыборкаЗамеров.Следующий() Цикл
		
		ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ВыборкаЗамеров.Замер);
		Если ЗамерОбъект <> Неопределено И ЗамерОбъект.ВыполнятьЗадание Тогда
			ЗамерОбъект.ВыполнятьЗадание = Ложь;
			ЗамерОбъект.ИдентификаторЗадания = ИдентификаторЗадания;
			Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
		Иначе
			Блокировки.ОтменитьИзменениеОбъекта(ЗамерОбъект);
			Продолжить;
		КонецЕсли;
		
		// Определить набор действий по состоянию замера
		СтрокаТаблицыКАЗамера = ТаблицаКАЗамера.Найти(ВыборкаЗамеров.Состояние, "Состояние");
		
		// Выполнить действие
		Выполнить "Успешно = " + СтрокаТаблицыКАЗамера.Действие + "(ВыборкаЗамеров.Замер)";
		
		Если СтрокаТаблицыКАЗамера.ПриУспешномВыполнении <> Неопределено И Успешно = Истина Тогда
			
			// Выполнить обработчик успешного выполнения действия
			Выполнить СтрокаТаблицыКАЗамера.ПриУспешномВыполнении + "(ВыборкаЗамеров.Замер)";
		ИначеЕсли СтрокаТаблицыКАЗамера.ПриВыполненииСОшибкой <> Неопределено И Успешно = Ложь Тогда
			
			// Выполнить обработчик выполнения действия с ошибкой
			Выполнить СтрокаТаблицыКАЗамера.ПриВыполненииСОшибкой + "(ВыборкаЗамеров.Замер)";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаЗамеров()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработчикЗаданияОбработкиЗамеров(НомерРодительскогоСеанса, ИдентификаторРодительскогоСеанса,
	ОбрабатыватьЗамерыТолькоНаИнтервале, ИБ, НачалоИнтервала, КонецИнтервала) Экспорт
	
	ИдентификаторЗадания = Задание.ПолучитьИдентификаторЗадания("АнализПоказателейПроизводительности");
	
	ПрерватьОбработку = Ложь;
	ВремяПоследнегоСообщения = '00010101';
	ОбрабатыватьЗамеры = Константы.ОбрабатыватьЗамеры.Получить();
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	Пока ОбрабатыватьЗамеры И Не ПрерватьОбработку Цикл
		ОбрабатываемыеСостояния = Новый Массив;
		ОбрабатываемыеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.ИсходныеДанныеПолучены"));
		ОбрабатываемыеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.ИсходныеДанныеПодготовлены"));
		ОбрабатываемыеСостояния.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.АнализЗавершен"));
		
		Исключения = Новый Массив;
		Исключения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.Замер"));
		Исключения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.ПолучениеИсходныхДанных"));
		Исключения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.ПодготовкаИсходныхДанных"));
		Исключения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.Анализ"));
		
		Задание.ОбработкаЗамеров(ОбрабатываемыеСостояния, Исключения,
			ИБ, НачалоИнтервала, КонецИнтервала, ОбрабатыватьЗамерыТолькоНаИнтервале,
			ИдентификаторЗадания
		);
		
		Если ОбрабатыватьЗамерыТолькоНаИнтервале Тогда
			Исключения = Новый Массив;
			Исключения.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияЗамеров.Замер"));
			ЕстьНеразобранныеЗамеры = Замер.ПроверитьНаличиеНеразобранныхЗамеров(
				ИБ,
				НачалоИнтервала,
				КонецИнтервала,
				Исключения
			);
			
			Если ЕстьНеразобранныеЗамеры = Ложь Тогда
				ПоказателиПроизводительности.ОтправитьСообщение(ИдентификаторЗадания,
					Перечисления.НаправленияСообщенийОбмена.СерверКлиент,
					Справочники.Команды.ОбновитьПросмотрПослеЗавершенияАнализа,
					Истина
				);
				ОбрабатыватьЗамерыТолькоНаИнтервале = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		КипВнешнийКомпонент.Пауза(Инструменты, 1000);
		ОбрабатыватьЗамеры = Константы.ОбрабатыватьЗамеры.Получить();
		
		ОбработатьСообщенияКлиентскогоПриложения(ИдентификаторЗадания, ПрерватьОбработку, ВремяПоследнегоСообщения);
		Если ЗначениеЗаполнено(ВремяПоследнегоСообщения)
			И (ТекущаяДата() - ВремяПоследнегоСообщения) > 300 Тогда
			ПрерватьОбработку = Истина;
		КонецЕсли;
		
		Если Не ПрерватьОбработку Тогда
			РодительскийСеансАктивен = Служебный.ПроверитьИдентификаторСеанса(НомерРодительскогоСеанса, ИдентификаторРодительскогоСеанса);
			ПрерватьОбработку = Не РодительскийСеансАктивен;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработчикЗаданияОбработкиЗамеров()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ЗапуститьЗаданиеОбработкиЗамеров(ОбрабатыватьЗамерыТолькоНаИнтервале, ИБ, НачалоИнтервала, КонецИнтервала) Экспорт
	
	ИдентификаторЗадания = Неопределено;
	
	// Если необходимо обрабатывать замеры автоматически
	ОбрабатыватьЗамеры = Константы.ОбрабатыватьЗамеры.Получить();
	Если ОбрабатыватьЗамеры Тогда
		
		НомерСеанса = НомерСеансаИнформационнойБазы();
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(НомерСеанса);
		ПараметрыЗадания.Добавить(ПараметрыСеанса.ИдентификаторСеанса);
		ПараметрыЗадания.Добавить(ОбрабатыватьЗамерыТолькоНаИнтервале);
		ПараметрыЗадания.Добавить(ИБ);
		ПараметрыЗадания.Добавить(НачалоИнтервала);
		ПараметрыЗадания.Добавить(КонецИнтервала);
		
		НовоеЗадание = ФоновыеЗадания.Выполнить("Задание.ОбработчикЗаданияОбработкиЗамеров", 
			ПараметрыЗадания, 
			"АнализПоказателейПроизводительности",
			"Анализ показателей производительности"
		);
		
		ИдентификаторЗадания = НовоеЗадание.УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат ИдентификаторЗадания;
	
КонецФункции // ЗапуститьЗаданиеОбработкиЗамеров()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбработатьСообщенияКлиентскогоПриложения(ИдентификаторЗадания, ПрерватьСбор, ВремяПоследнегоСообщения)
	
	Сообщения = ПоказателиПроизводительности.ПолучитьСообщения(ИдентификаторЗадания, Перечисления.НаправленияСообщенийОбмена.КлиентСервер);
	Для Каждого ТекСообщение Из Сообщения Цикл
		Если ТекСообщение.ТелоСообщения.Команда = Справочники.Команды.ВыключитьМониторинг Тогда
			ПрерватьСбор = Истина;
		КонецЕсли;
		ВремяПоследнегоСообщения = ?(
			ВремяПоследнегоСообщения < ТекСообщение.ДатаСообщения,
			ТекСообщение.ДатаСообщения,
			ВремяПоследнегоСообщения
		);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьСообщенияКлиентскогоПриложения()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьИдентификаторЗадания(Ключ, НомерРодительскогоСеанса = Неопределено) Экспорт
	
	ИдентификаторЗадания = Неопределено;
	
	Если НомерРодительскогоСеанса <> Неопределено Тогда
		КлючЗадания = Ключ + Формат(НомерРодительскогоСеанса, "ЧГ=0");
	Иначе
		КлючЗадания = Ключ;
	КонецЕсли;
	Отбор = Новый Структура("Ключ,Состояние", КлючЗадания, СостояниеФоновогоЗадания.Активно);
	ЗаданияПоКлючу = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если ЗаданияПоКлючу.Количество() > 0 Тогда
		ИдентификаторЗадания = ЗаданияПоКлючу[0].УникальныйИдентификатор;
	КонецЕсли;
	
	Возврат ИдентификаторЗадания;
	
КонецФункции // ПолучитьИдентификаторЗадания()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЗаданиеАнализаЗамеровАктивно() Экспорт
	
	Возврат ЗаданиеАктивно(ПараметрыСеанса.ИдентификаторЗаданияАнализаЗамеров);
	
КонецФункции // ЗаданиеАнализаЗамеровАктивно()

Функция ЗаданиеАктивно(ИдентификаторЗадания) Экспорт
	
	Результат = Ложь;
	СостояниеЗадания = ПоказателиПроизводительности.ПроверитьСостояниеЗадания(ИдентификаторЗадания);
	Если СостояниеЗадания = СостояниеФоновогоЗадания.Активно Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ЗаданиеАктивно()

// Включить обработку замеров
//
Процедура ВключитьОбработкуЗамеров(ПараметрыМонитора, ОбрабатыватьЗамерыТолькоНаИнтервале) Экспорт
	
	ИдентификаторЗадания = ПараметрыСеанса.ИдентификаторЗаданияАнализаЗамеров;
	Если ПараметрыМонитора <> Неопределено Тогда
		ИБ                   = ПараметрыМонитора.ИБ;
		НачалоИнтервала      = ПараметрыМонитора.НачалоИнтервала;
		КонецИнтервала       = ПараметрыМонитора.КонецИнтервала;
	КонецЕсли;
	
	ОбрабатыватьЗамеры = Константы.ОбрабатыватьЗамеры.Получить();
	Если Не ОбрабатыватьЗамеры Тогда
		Константы.ОбрабатыватьЗамеры.Установить(Истина);
	КонецЕсли;
	
	ПустойУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ОбновитьПараметрСеанса = Ложь;
	Если ИдентификаторЗадания = ПустойУИД Тогда
		ИдентификаторЗадания = Задание.ПолучитьИдентификаторЗадания("АнализПоказателейПроизводительности");
		ОбновитьПараметрСеанса = Истина;
	КонецЕсли;
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
			ИдентификаторЗадания = Неопределено;
		ИначеЕсли ОбновитьПараметрСеанса Тогда
			ПараметрыСеанса.ИдентификаторЗаданияАнализаЗамеров = ИдентификаторЗадания;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторЗадания = Неопределено Тогда
		ИдентификаторЗадания = Задание.ЗапуститьЗаданиеОбработкиЗамеров(ОбрабатыватьЗамерыТолькоНаИнтервале, ИБ, НачалоИнтервала, КонецИнтервала);
		ПараметрыСеанса.ИдентификаторЗаданияАнализаЗамеров = ИдентификаторЗадания;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура("ОбрабатыватьЗамерыТолькоНаИнтервале,ИБ,НачалоИнтервала,КонецИнтервала",
		ОбрабатыватьЗамерыТолькоНаИнтервале, ИБ, НачалоИнтервала, КонецИнтервала
	);
	ПоказателиПроизводительности.ОтправитьСообщение(
		ИдентификаторЗадания, 
		Перечисления.НаправленияСообщенийОбмена.КлиентСервер,
		Справочники.Команды.ИзменитьПериодАнализа,
		ПараметрыКоманды
	);

	
КонецПроцедуры // ВключитьОбработкуЗамеров()

// Отключить обработку замеров
//
Процедура ОтключитьОбработкуЗамеров() Экспорт
	
	ОбрабатыватьЗамеры = Константы.ОбрабатыватьЗамеры.Получить();
	Если ОбрабатыватьЗамеры Тогда
		Константы.ОбрабатыватьЗамеры.Установить(Ложь);
	КонецЕсли;
	
	ИдентификаторЗадания = ПараметрыСеанса.ИдентификаторЗаданияАнализаЗамеров;
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПоказателиПроизводительности.ОтправитьСообщение(
			ИдентификаторЗадания,
			ПредопределенноеЗначение("Перечисление.НаправленияСообщенийОбмена.КлиентСервер"),
			ПредопределенноеЗначение("Справочник.Команды.ВыключитьМониторинг"),
			Неопределено
		);
	КонецЕсли;
	
	ПустойУИД = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	ПараметрыСеанса.ИдентификаторЗаданияАнализаЗамеров = ПустойУИД;
	
КонецПроцедуры // ОтключитьОбработкуЗамеров()


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ

// Служебная процедура, необходимая для корректного прохождения
// проверки "Поиск неиспользуемых процедур и функций"
//
// Параметры:
//  Нет
//
Процедура ВызовыНеявноИспользуемыхПроцедурИФункций()
	
	Если Ложь Тогда
		
		ЗавершитьАнализЗамера(Неопределено);
		ЗавершитьПодготовкуДанных(Неопределено);
		ЗавершитьПолучениеДанных(Неопределено);
		ОтменитьАнализЗамера(Неопределено);
		ОтменитьПодготовкуДанных(Неопределено);
		ОтменитьПолучениеДанных(Неопределено);
		ПодготовитьИсходныеДанные(Неопределено);
		ПроанализироватьЗамер(Неопределено);
		РезультатАнализаЗамера(Неопределено);
		РезультатПодготовкиИсходныхДанных(Неопределено);
		РезультатПолученияИсходныхДанных(Неопределено);

		
		ВызовыНеявноИспользуемыхПроцедурИФункций();
		
	КонецЕсли;
	
КонецПроцедуры // ВызовыНеявноИспользуемыхПроцедурИФункций()
