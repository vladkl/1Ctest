///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ЗАМЕРОВ

// Создать документ Замер, установить начальные параметры для него и записать
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза, исследуемая база
//  Показатель - СправочникСсылка.Показатель, текущиц аналитический показатель
//  Экземпляр - Строка, идентификатор экземпляра показателя
//  ТипСУБД - Перечисление.ТипСУБД
//  ТипБлокировки - Перечисление.ТипБлокировки, для разделения анализа ожиданий
//                 на блокировках 1С и СУБД показателя АнализОжиданийНаБлокировках
//
// Возвращаемое значение:
//  ДокументСсылка.Замер - документ замера
//
Функция СоздатьЗамер(ИБ, Показатель, Экземпляр, ТипСУБД, СерверСУБД = "", ТипБлокировки = Неопределено, ИмяБазыДанных = Неопределено) Экспорт
	
	Если Показатель = Справочники.Показатели.АнализВзаимоблокировок
			Или (Показатель = Справочники.Показатели.АнализОжиданийНаБлокировках И ИБ.ИспользоватьППАнализГранулярностиБлокировок) Тогда
		ДатаНаСервереСУБД = MSSQL.ВремяНаСервере(ИБ);
	Иначе
		ДатаНаСервереСУБД = '00010101';
	КонецЕсли;

	Дата = ТекущаяДата();
		
	// Создать левый буфер
	ЛевыйБуфер = Документы.Замер.СоздатьДокумент();
	ЛевыйБуфер.Дата = Дата;
	ЛевыйБуфер.Буферный = Истина;
	ЛевыйБуфер.Записать(РежимЗаписиДокумента.Проведение);
	
	// Создание замера
	ДокументЗамер = Документы.Замер.СоздатьДокумент();
	ДокументЗамер.Дата = Дата;
	ДокументЗамер.ДатаНаСервереСУБД = ДатаНаСервереСУБД;
	ДокументЗамер.ИнформационнаяБаза = ИБ;
	ДокументЗамер.Начало = ДокументЗамер.Дата;
	ДокументЗамер.Показатель = Показатель;
	ДокументЗамер.Состояние = Перечисления.СостоянияЗамеров.Замер;
	ДокументЗамер.ТипСУБД = ТипСУБД;
	ДокументЗамер.СерверСУБД = СерверСУБД;
	ДокументЗамер.ТипБлокировки = ТипБлокировки;
	ДокументЗамер.ИмяБазыДанных = ИмяБазыДанных;
	ДокументЗамер.Экземпляр = Экземпляр;
	ДокументЗамер.Записать();
	
	// Создать правый буфер
	ПравыйБуфер = Документы.Замер.СоздатьДокумент();
	ПравыйБуфер.Дата = Дата;
	ПравыйБуфер.Буферный = Истина;
	ПравыйБуфер.Записать(РежимЗаписиДокумента.Проведение);
	
	// Запись Замера
	СтрокаБуфернойЗаписи = ДокументЗамер.БуферныеЗамеры.Добавить();
	СтрокаБуфернойЗаписи.БуферныйЗамер = ЛевыйБуфер.Ссылка;
	СтрокаБуфернойЗаписи = ДокументЗамер.БуферныеЗамеры.Добавить();
	СтрокаБуфернойЗаписи.БуферныйЗамер = ПравыйБуфер.Ссылка;
	ДокументЗамер.Записать();
	
	Возврат ДокументЗамер.Ссылка;
	
КонецФункции // СоздатьЗамер()

// Установить каталоги технологического журнала для замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.ДокументЗамер, документ замера
//  КаталогиТЖ - Массив, содержащий каталоги технологического журнала
//
Процедура УстановитьКаталогиТЖ(ДокументЗамер, КаталогиТЖ) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	МестоположениеТЖ = ЗамерОбъект.МестоположениеТЖ;
	
	Для Каждого КаталогТЖ Из КаталогиТЖ Цикл
		СтрокаМестоположения = МестоположениеТЖ.Добавить();
		СтрокаМестоположения.Путь = КаталогТЖ;
	КонецЦикла;

	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // УстановитьКаталогиТЖ()

// Установить файлы трассировок для замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.ДокументЗамер, документ замера
//  ФайлыТрассировок - Массив, содержащий файлы трассировок
//
Процедура УстановитьФайлыТрассировок(ДокументЗамер, ФайлыТрассировок) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	МестоположениеТрассировки = ЗамерОбъект.МестоположениеТрассировки;
	Всего = ФайлыТрассировок.Количество() - 1;
	
	Для Сч = 0 По Всего Цикл
		СтрокаМестоположения = МестоположениеТрассировки.Добавить();
		СтрокаМестоположения.Путь = ФайлыТрассировок[Сч].Локальный;
	КонецЦикла;

	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // УстановитьФайлыТрассировок()

// Отметить в документе ДокументЗамер завршение сбора аналитических данных
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.ДокументЗамер, документ замера
//
Процедура ЗавершитьЗамер(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.Конец = ТекущаяДата();
	ЗамерОбъект.Состояние = Перечисления.СостоянияЗамеров.ЗамерЗавершен;
	ЗамерОбъект.ВыполнятьЗадание = Истина;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
	Задание.ПолучитьИсходныеДанные(ДокументЗамер);
	
КонецПроцедуры // ЗавершитьЗамер()

// Установить идентификатор задания для замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.ДокументЗамер, документ замера
//  ИдентификаторЗадания - УникальныйИдентификатор
//
Процедура УстановитьИдентификаторЗадания(ДокументЗамер, ИдентификаторЗадания) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ИдентификаторЗадания = Строка(ИдентификаторЗадания);
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // УстановитьИдентификаторЗадания()

// Получить исходные данные для замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер
//
Процедура ПолучитьИсходныеДанные(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ВыполнятьЗадание = Ложь;
	ЗамерОбъект.Состояние = Перечисления.СостоянияЗамеров.ПолучениеИсходныхДанных;
	ЗамерОбъект.ОписаниеОшибки = Неопределено;
	ЗамерОбъект.ЕстьОшибка = Ложь;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // ПолучитьИсходныеДанные()

// Завершить получение исходных данных для замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер
//
Процедура ИсходныеДанныеПолучены(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ИдентификаторЗадания = Неопределено;
	ЗамерОбъект.ВыполнятьЗадание = Истина;
	ЗамерОбъект.Состояние = Перечисления.СостоянияЗамеров.ИсходныеДанныеПолучены;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // ИсходныеДанныеПолучены()

// Подготовить исходные данные для замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер
//
Процедура ПодготовитьИсходныеДанные(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ИдентификаторЗадания = "";
	ЗамерОбъект.ВыполнятьЗадание = Ложь;
	ЗамерОбъект.Состояние = Перечисления.СостоянияЗамеров.ПодготовкаИсходныхДанных;
	ЗамерОбъект.ОписаниеОшибки = Неопределено;
	ЗамерОбъект.ЕстьОшибка = Ложь;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // ПодготовитьИсходныеДанные()

// Завершить подготовку исходных данных для замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер
//
Процедура ИсходныеДанныеПодготовлены(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ИдентификаторЗадания = Неопределено;
	ЗамерОбъект.ВыполнятьЗадание = Истина;
	ЗамерОбъект.Состояние = Перечисления.СостоянияЗамеров.ИсходныеДанныеПодготовлены;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // ИсходныеДанныеПодготовлены()

// Проанализировать данные замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер
//
Процедура ПроанализироватьЗамер(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ВыполнятьЗадание = Ложь;
	ЗамерОбъект.Состояние = Перечисления.СостоянияЗамеров.Анализ;
	ЗамерОбъект.ОписаниеОшибки = Неопределено;
	ЗамерОбъект.ЕстьОшибка = Ложь;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // ПроанализироватьЗамер()

// Завершить анализ замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер
//
Процедура ЗамерПроанализирован(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ВыполнятьЗадание = Истина;
	ЗамерОбъект.Состояние = Перечисления.СостоянияЗамеров.АнализЗавершен;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // ЗамерПроанализирован()

// Установка паремтров замера для которого не выполнено задание
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.ДокументЗамер, документ замера
//  ОписаниеОшибки - Строка, описание ошибки по причине которой задание
//                 не было выполнено
//
Процедура ЗаданиеНеВыполнено(ДокументЗамер, ОписаниеОшибки) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ВыполнятьЗадание = Ложь;
	ЗамерОбъект.ИдентификаторЗадания = Неопределено;
	ЗамерОбъект.ОписаниеОшибки = ОписаниеОшибки;
	ЗамерОбъект.ЕстьОшибка = Истина;
	ЗамерОбъект.Состояние = ПолучитьСтабильноеСостояние(ЗамерОбъект.Состояние);
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // ЗаданиеНеВыполнено()

// Очистить информацию об ошибке при выполнении задания для замера
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.ДокументЗамер, документ замера
Процедура ОчиститьОшибкуЗадания(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ОписаниеОшибки = Неопределено;
	ЗамерОбъект.ЕстьОшибка = Ложь;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // ОчиститьОшибкуЗадания()

// Удалить документ замер и все связанные с ним данные
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.ДокументЗамер, документ замера
//
Процедура Удалить(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	Попытка
		Если ЗамерОбъект.ПометкаУдаления Тогда
			Блокировки.ОтменитьИзменениеОбъекта(ДокументЗамер);
			Возврат;
		КонецЕсли;
	Исключение
		Блокировки.ОтменитьИзменениеОбъекта(ДокументЗамер);
		Возврат;
	КонецПопытки;
	ЗамерОбъект.ПометкаУдаления = Истина;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
	// Удалить замер
	НачатьТранзакцию();
	Блокировки.ЗаблокироватьСсылку(ДокументЗамер);
	ЗамерОбъект = ДокументЗамер.ПолучитьОбъект();
	БуферныеЗамеры = Новый Массив;
	
	Для Каждого СтрокаБуферногоЗамера Из БуферныеЗамеры Цикл
		БуферныйЗамер = СтрокаБуферногоЗамера.БуферныйЗамер;
		БуферныеЗамеры.Добавить(БуферныйЗамер);
	КонецЦикла;
	
	ЗамерОбъект.Удалить();
	ЗафиксироватьТранзакцию();
	
	// Удалить буферные замеры
	Для Каждого БуферныйЗамер Из БуферныеЗамеры Цикл
		
		Блокировки.ЗаблокироватьСсылку(БуферныйЗамер);
		БуферныйЗамерОбъект = БуферныйЗамер.ПолучитьОбъект();
		
		// Если буферный замер уже не существует, то пропустить его
		Если БуферныйЗамерОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//Попытка
			БуферныйЗамерОбъект.Удалить();
		//Исключение
		//КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // Удалить()

// Отменить замер и все связанные с ним данные
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.ДокументЗамер, документ замера
//
Процедура Отменить(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.Отменен = Истина;
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
КонецПроцедуры // Отменить()

// Повторить задание, если при его выполнении возникла ошибка
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.ДокументЗамер, документ замера
//
Процедура ПовторитьЗадание(ДокументЗамер) Экспорт
	
	ЗамерОбъект = Блокировки.НачатьИзменениеОбъекта(ДокументЗамер);
	ЗамерОбъект.ВыполнятьЗадание = Истина;
	ЗамерОбъект.ИдентификаторЗадания = Неопределено;
	ЗамерОбъект.ОписаниеОшибки = Неопределено;
	ЗамерОбъект.ЕстьОшибка = Ложь;
	ЗамерОбъект.Состояние = ПолучитьСтабильноеСостояние(ЗамерОбъект.Состояние);
	Блокировки.ЗавершитьИзменениеОбъекта(ЗамерОбъект);
	
	Если ЗамерОбъект.Состояние = Перечисления.СостоянияЗамеров.ЗамерЗавершен Тогда
		Задание.ПолучитьИсходныеДанные(ДокументЗамер);
	КонецЕсли;
	
КонецПроцедуры // ПовторитьЗадание()

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Получить уникальный идентификатор задания, обрабатывающего замер
//
// Возвращаемое значение:
//  УникальныйИдентификатор
//
Функция ПолучитьИдентификаторЗадания(ДокументЗамер) Экспорт
	
	Возврат Новый УникальныйИдентификатор(ДокументЗамер.ИдентификаторЗадания);
	
КонецФункции // ПолучитьИдентификаторЗадания()

// Получить стабильное состояние замера по сравнению с текущим
//
// Параметры:
//  ТекущееСостояние - Перечисление.СостояниеЗамера
//
// Возвращаемое значение:
//  Перечисление.СостояниеЗамера - стабильное состояние
//
Функция ПолучитьСтабильноеСостояние(ТекущееСостояние)
	
	Если ТекущееСостояние = Перечисления.СостоянияЗамеров.Замер Тогда
		Возврат Перечисления.СостоянияЗамеров.ЗамерЗавершен;
	ИначеЕсли ТекущееСостояние = Перечисления.СостоянияЗамеров.ПолучениеИсходныхДанных Тогда
		Возврат Перечисления.СостоянияЗамеров.ЗамерЗавершен;
	ИначеЕсли ТекущееСостояние = Перечисления.СостоянияЗамеров.ПодготовкаИсходныхДанных Тогда
		Возврат Перечисления.СостоянияЗамеров.ИсходныеДанныеПолучены;
	ИначеЕсли ТекущееСостояние = Перечисления.СостоянияЗамеров.Анализ Тогда
		Возврат Перечисления.СостоянияЗамеров.ИсходныеДанныеПодготовлены;
	КонецЕсли;
	
	Возврат ТекущееСостояние;
	
КонецФункции // ПолучитьСтабильноеСостояние()

// Получить состояния замеров в виде дерева
//
// Возвращаемое значение:
//  Дерево значений - структурированная информация о замерах
//
Функция ПолучитьСостоянияЗамеров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Замер.ИнформационнаяБаза КАК ИнформационнаяБаза,
	               |	Замер.Показатель КАК Показатель,
	               |	Замер.Состояние КАК Состояние,
	               |	Замер.Начало КАК Начало,
	               |	Замер.Конец КАК Конец,
	               |	Замер.Экземпляр КАК Экземпляр,
	               |	Замер.Ссылка КАК Замер,
	               |	Замер.ВыполнятьЗадание КАК ВыполнятьЗадание,
	               |	Замер.ОписаниеОшибки КАК ОписаниеОшибки,
	               |	Замер.ЕстьОшибка КАК ЕстьОшибка,
	               |	Замер.ИдентификаторЗадания КАК ИдентификаторЗадания,
	               |	0 КАК ИндексКартинки,
	               |	0 КАК Уровень
	               |ИЗ
	               |	Документ.Замер КАК Замер
	               |ГДЕ
	               |	Замер.Буферный = ЛОЖЬ
	               |	И Замер.Наполнитель = ЛОЖЬ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Замер.ИнформационнаяБаза.Наименование,
	               |	Замер.Показатель.Код,
	               |	Замер.Состояние,
	               |	Замер.Дата
	               |ИТОГИ ПО
	               |	ИнформационнаяБаза,
	               |	Показатель,
	               |	Состояние";
	Результат = Запрос.Выполнить();
	Выгрузка = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат Выгрузка;
	
КонецФункции // ПолучитьСостоянияЗамеров()

// Получить хеш замеров
//
// Параметры:
//  СостоянияЗамеров - ДеревоЗначений, состояния полученные при помощи
//                 ПолучитьСостоянияЗамеров()
//
Функция ПолучитьХешЗамеров(СостоянияЗамеров) Экспорт
	
	Хеш = "";
	
	Для Каждого СтрокаСостояния Из СостоянияЗамеров.Строки Цикл
		Если СтрокаСостояния.Строки.Количество() > 0 Тогда
			Хеш = Хеш + ПолучитьХешЗамеров(СтрокаСостояния);
		КонецЕсли;
		
		Хеш = Хеш +
			СтрокаСостояния.ИнформационнаяБаза +
			СтрокаСостояния.Показатель +
			СтрокаСостояния.Состояние +
			СтрокаСостояния.Замер + 
			СтрокаСостояния.ВыполнятьЗадание +
			СтрокаСостояния.ОписаниеОшибки +
			СтрокаСостояния.ЕстьОшибка;
	КонецЦикла;
	
	Возврат Хеш;
	
КонецФункции // ПолучитьХешЗамеров()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьНаличиеНеразобранныхЗамеров(ИБ, НачалоИнтервала, КонецИнтервала, Исключения) Экспорт 
	
	НеразобранныеЗамеры = ПолучитьНеразобранныеЗамеры(ИБ, НачалоИнтервала, КонецИнтервала, Исключения);
	ЕстьНеразобранныеЗамеры = (НеразобранныеЗамеры.Количество() > 0);
	
	Возврат ЕстьНеразобранныеЗамеры;
	
КонецФункции // ПроверитьНаличиеНеразобранныхЗамеров()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьНаличиеАктивныхЗамеров(ИБ, НачалоИнтервала, КонецИнтервала) Экспорт
	
	АктивныеЗамеры = ПолучитьАктивныеЗамеры(ИБ, НачалоИнтервала, КонецИнтервала);
	ЕстьАктивныеЗамеры = (АктивныеЗамеры.Количество() > 0);
	
	Возврат ЕстьАктивныеЗамеры;
	
КонецФункции // ПроверитьНаличиеАктивныхЗамеров()


// Получить все документы замер в указанном интервале и ИБ, которые требуют
// обработки
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//  НачалоИнтервала - Дата, начало интервала в котором ищутся замеры
//  КонецИнтервала - Дата, конец интервала в котором ищутся замеры
//
// Возвращаемое значение:
//  Массив - содержащий искомые замеры
//
Функция ПолучитьНеразобранныеЗамеры(ИБ, НачалоИнтервала, КонецИнтервала, Исключения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИБ);
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала", КонецИнтервала);
	Запрос.УстановитьПараметр("Исключения", Исключения);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Замер.Ссылка КАК Замер,
		|	Замер.Состояние КАК Состояние
		|ИЗ
		|	Документ.Замер КАК Замер
		|ГДЕ
		|	(Замер.Конец >= &НачалоИнтервала
		|	ИЛИ Замер.Начало <= &КонецИнтервала)
		|	И НЕ Замер.Состояние В (&Исключения)
		|	И Замер.ЕстьОшибка = Ложь
		|	И Замер.ИнформационнаяБаза = &ИнформационнаяБаза
		|	И Замер.ПометкаУдаления = Ложь";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьНеразобранныеЗамеры()

// Получить все документы замер в указанном интервале и ИБ, которые
// в данный момент обрабатываются
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//  НачалоИнтервала - Дата, начало интервала в котором ищутся замеры
//  КонецИнтервала - Дата, конец интервала в котором ищутся замеры
//
// Возвращаемое значение:
//  Массив - содержащий искомые замеры
//
Функция ПолучитьАктивныеЗамеры(ИБ, НачалоИнтервала, КонецИнтервала) Экспорт
	
	АктивныеСостояния = Новый Массив;
	АктивныеСостояния.Добавить(Перечисления.СостоянияЗамеров.ПолучениеИсходныхДанных);
	АктивныеСостояния.Добавить(Перечисления.СостоянияЗамеров.ПодготовкаИсходныхДанных);
	АктивныеСостояния.Добавить(Перечисления.СостоянияЗамеров.Анализ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИБ);
	Запрос.УстановитьПараметр("НачалоИнтервала", НачалоИнтервала);
	Запрос.УстановитьПараметр("КонецИнтервала", КонецИнтервала);
	Запрос.УстановитьПараметр("АктивныеСостояния", АктивныеСостояния);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Замер.Ссылка КАК Замер,
		|	Замер.Состояние КАК Состояние
		|ИЗ
		|	Документ.Замер КАК Замер
		|ГДЕ
		|	(Замер.Конец >= &НачалоИнтервала
		|	ИЛИ Замер.Начало <= &КонецИнтервала)
		|	И Замер.ВыполнятьЗадание = ЛОЖЬ
		|	И Замер.ИнформационнаяБаза = &ИнформационнаяБаза
		|	И Замер.Состояние В (&АктивныеСостояния)
		|	И Замер.ПометкаУдаления = Ложь";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьАктивныеЗамеры()

// Получить все документы замер, которые
// в данный момент получают данные для анализа
//
// Возвращаемое значение:
//  Массив - содержащий искомые замеры
//
Функция ПолучитьЗамерыПолучающиеДанные() Экспорт
	
	Состояние = Новый Массив;
	Состояние.Добавить(Перечисления.СостоянияЗамеров.ПолучениеИсходныхДанных);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Состояние", Состояние);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Замер.Ссылка КАК Замер,
		|	Замер.Состояние КАК Состояние
		|ИЗ
		|	Документ.Замер КАК Замер
		|ГДЕ
		|	Замер.Состояние В (&Состояние) И
		|	Замер.ПометкаУдаления = Ложь";
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции // ПолучитьЗамерыПолучающиеДанные()

