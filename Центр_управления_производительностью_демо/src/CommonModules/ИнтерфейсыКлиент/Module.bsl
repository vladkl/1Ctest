// Процедура открывает общую форму ВыполнениеЗапроса.
//
// Параметры:
//  ДокументВыполнения - ДокументСсылка.Выполнение, ДокументСсылка.ВыполнениеЗапроса.
//
Процедура ОткрытьВыполнениеЗапроса(ДокументВыполнения) Экспорт
	
	ПараметрыФормы = Новый Структура("ДокументВыполнения", ДокументВыполнения);
	Форма = ПолучитьФорму("ОбщаяФорма.АнализВыполнений", ПараметрыФормы);
	
	Если Форма <> Неопределено Тогда
		Если Форма.Открыта() Тогда
			Форма.Закрыть();
		КонецЕсли;
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры // ОткрытьВыполнениеЗапроса()

// Аналогично процедуре Предупреждение(), только перед отображением
// окна, при необходимости, приостанавливается выполнение сценария и
// при завершении отображения предупреждения, при необходимости,
// возобновляется выполнение сценария
//
// Параметры:
//  Текст - Строка, сообщение
//  Таймаут - Число, длительность отображения сообщения
//  Заголовок - Строка, текст заголовка окна сообщения
//
Процедура Предупредить(Текст, Таймаут = 0, Заголовок = "") Экспорт
	
	СценарийВыполняется = Контекст.СценарийВыполняется();
	
	Если СценарийВыполняется Тогда
		ВыполнениеСценарияКлиент.Приостановить();
	КонецЕсли;
	
	ТекстЗаголовка = ?(ПустаяСтрока(Заголовок), СловарьКлиентСервер.Получить("ЗаголовокЦУП"), Заголовок);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПредупредитьЗавершение", ИнтерфейсыКлиент, СценарийВыполняется);
	ПоказатьПредупреждение(ОповещениеОЗакрытии, Текст, Таймаут, ТекстЗаголовка);
	
КонецПроцедуры // Предупредить()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПредупредитьЗавершение(СценарийВыполняется) Экспорт
	
	Если СценарийВыполняется Тогда
		ВыполнениеСценарияКлиент.Возобновить();
	КонецЕсли;
	
КонецПроцедуры // ПредупредитьЗавершение()

// Аналогично функции Вопрос(), только перед отображением
// окна, при необходимости, приостанавливается выполнение сценария и
// при завершении отображения предупреждения, при необходимости,
// возобновляется выполнение сценария
//
// Параметры:
//  ИмяПроцедурыЗавершение - Строка, имя процедуры, которая будет вызвана после завершения выбора пользователя
//  Текст - Строка, сообщение
//  Режим - РежимДиалогаВопрос, какие кнопки отображать
//  Таймаут - Число, длительность отображения сообщения
//  Заголовок - Строка, текст заголовка окна сообщения
//
Процедура Спросить(Текст, Режим, Таймаут = 0, КнопкаПоУмолчанию, Заголовок = "", ИмяПроцедурыЗавершение, ДопПараметры) Экспорт
	
	СценарийВыполняется = Контекст.СценарийВыполняется();
	
	Если СценарийВыполняется Тогда
		ВыполнениеСценарияКлиент.Приостановить();
	КонецЕсли;
	
	ДопПараметры.Вставить("СценарийВыполняется", СценарийВыполняется);
	ДопПараметры.Вставить("ИмяПроцедурыЗавершение", ИмяПроцедурыЗавершение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СпроситьЗавершение", ИнтерфейсыКлиент, ДопПараметры);
	ТекстЗаголовка = ?(ПустаяСтрока(Заголовок), СловарьКлиентСервер.Получить("ЗаголовокЦУП"), Заголовок);
	ПоказатьВопрос(ОписаниеОповещения, Текст, Режим, Таймаут, КнопкаПоУмолчанию, ТекстЗаголовка);
	
КонецПроцедуры // Спросить()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СпроситьЗавершение(Результат, ДопПараметры) Экспорт
	
	ИмяПроцедурыЗавершение = ДопПараметры.ИмяПроцедурыЗавершение;
	Если ДопПараметры.СценарийВыполняется Тогда
		ВыполнениеСценарияКлиент.Возобновить();
	КонецЕсли;
	
	Выполнить(ИмяПроцедурыЗавершение + "(Результат, ДопПараметры)");
	
КонецПроцедуры // СпроситьЗавершение()
