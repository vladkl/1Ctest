///////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧЕНИЕ

// Получить объект инструментов (см. раздел ИНСТРУМЕНТЫ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция ПолучитьИнструменты() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьИнструменты();
	
КонецФункции // ПолучитьИнструменты()

// Получить объект обработки сообщений (см. раздел СООБЩЕНИЯ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Messenger"
//
Функция ПолучитьОбработчикСообщений() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьОбработчикСообщений();
	
КонецФункции // ПолучитьОбработчикСообщений()

// Получить инструмент работы с SQL Server (см. раздел MICROSOFT SQL SERVER)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.MSSQL"
//
Функция ПолучитьMSSQL() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьMSSQL();
	
КонецФункции // ПолучитьMSSQL()

// Получить инструмент чтения технологического журнала
// (см. раздел ТЕХНОЛОГИЧЕСКИЙ ЖУРНАЛ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.TechLog"
//
Функция ПолучитьТЖ() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьТЖ();
	
КонецФункции // ПолучитьТЖ()

// Получить инструмент работы со счетчиками производительности
// (см. раздел СЧЕТЧИКИ ПРОИЗВОДИТЕЛЬНОСТИ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Counters"
//
Функция ПолучитьСчетчики() Экспорт
	
	ПодключитьВнешнийКомпонент();
	Возврат СоздатьСчетчики();
	
КонецФункции // ПолучитьСчетчики()

// Создать объект инструментов (см. раздел ИНСТРУМЕНТЫ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Tools"
//
Функция СоздатьИнструменты()
	
	Возврат Новый("Addin.ETP.Tools");
	
КонецФункции // СоздатьИнструменты()

// Создать объект обработки сообщений (см. раздел СООБЩЕНИЯ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Messenger"
//
Функция СоздатьОбработчикСообщений()
	
	Возврат Новый("Addin.ETP.Messenger");
	
КонецФункции // СоздатьОбработчикСообщений()

// Создать инструмент работы с SQL Server (см. раздел MICROSOFT SQL SERVER)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.MSSQL"
//
Функция СоздатьMSSQL()
	
	Возврат Новый("Addin.ETP.MSSQL");
	
КонецФункции // СоздатьMSSQL()

// Создать инструмент чтения технологического журнала
// (см. раздел ТЕХНОЛОГИЧЕСКИЙ ЖУРНАЛ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.TechLog"
//
Функция СоздатьТЖ()
	
	Возврат Новый("Addin.ETP.TechLog");
	
КонецФункции // СоздатьТЖ()

// Создать инструмент работы со счетчиками производительности
// (см. раздел СЧЕТЧИКИ ПРОИЗВОДИТЕЛЬНОСТИ)
//
// Возвращаемое значение:
//  Объект "Addin.ETP.Counters"
//
Функция СоздатьСчетчики()
	
	Возврат Новый("Addin.ETP.Counters");
	
КонецФункции // СоздатьСчетчики()

// Подключить внешнюю компоненту КИП
//
Процедура ПодключитьВнешнийКомпонент()
	
	ОтладкаРазрешена = Ложь;
	
	Если Не ОтладкаРазрешена Тогда
		ИмяКомпонента = "ОбщийМакет.КипВнешнийКомпонент";
	
		Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
			#Если Клиент Тогда
				НачатьУстановкуВнешнейКомпоненты(, ИмяКомпонента);
			#КонецЕсли
			
			Если Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP") Тогда
				ВызватьИсключение "Ошибка подключения внешнего компонента.";
			КонецЕсли;
		КонецЕсли;
	Иначе
		УспешноПодключено = ПодключитьВнешнююКомпоненту(
		#Если Клиент Тогда
			"C:\Projects\ETPAddin\trunk\Bin\Debug-Win32\AddInNative\AddInNative.dll",
		#Иначе
			"C:\Projects\ETPAddin\trunk\Bin\Debug-x64\AddInNative\AddInNative.dll",
		#КонецЕсли
			"ETP",
			ТипВнешнейКомпоненты.Native);
		
		Если Не УспешноПодключено Тогда
			ВызватьИсключение "Ошибка подключения внешнего компонента.";
		КонецЕсли;
	КонецЕсли;
	
	Инструменты = СоздатьИнструменты();
	ПодключеннаяВерсия = ВерсияКомпонента(Инструменты);
	ТребуемаяВерсия = "2.0.5.43";
	
	Если ПодключеннаяВерсия <> ТребуемаяВерсия Тогда
		//ВызватьИсключение
		//	"Версия подключенного внешнего компонента ("
		//	+ ПодключеннаяВерсия
		//	+ ") не совпадает с требуемой версией ("
		//	+ ТребуемаяВерсия
		//	+ "). Для устранения несоответствия версий, выгрузите всех клиентов"
		//	" и перезагрузите сервер 1С:Предприятия этой информационной базы.";
	КонецЕсли;
	
КонецПроцедуры // ПодключитьВнешнийКомпонент()

// Выполнить метод внешнего компонента
//
// Параметры:
//  Объект - "Addin.ETP.*", экземпляр класса внешнего компонента
//  Имя - Строка, имя выполняемого метода
//  Параметры - Структура, содержит имена и значения параметров
//
// Возвращаемое значение:
//   Произвольный - результат, возвращаемый методом
//
Функция ВыполнитьМетод(Объект, Имя, Параметры = Неопределено)
	
	ИменаПараметров = "";
	
	Если Параметры <> Неопределено Тогда
		Для каждого Параметр Из Параметры Цикл
			Если Не ПустаяСтрока(ИменаПараметров) Тогда
				ИменаПараметров = ИменаПараметров + ", ";
			КонецЕсли;
			
			ИменаПараметров = ИменаПараметров + "Параметры." + Параметр.Ключ;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		Возврат Вычислить("Объект." + Имя + "(" + ИменаПараметров + ")");
	Исключение
		Если Объект <> Неопределено И Объект.ЕстьОшибка() Тогда
			ВызватьИсключение Объект.ОписаниеОшибки();
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецФункции // ВыполнитьМетод()


///////////////////////////////////////////////////////////////////////////////
// ИНСТРУМЕНТЫ

// Получить значение таймера для замера интервала времени
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//
// Возвращаемое значение:
//  Число - текущее значение таймара в миллисекундах
//
Функция ЗначениеТаймера(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ЗначениеТаймера");
	
КонецФункции // ЗначениеТаймера()

// Приостановить текущий поток на указанное количество миллисекунд
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Длительность - Число, количество миллисекунд, на которое приостановить поток
//
Процедура Пауза(Инструменты, Длительность) Экспорт
	
	Параметры = Новый Структура("Длительность", Длительность);
	ВыполнитьМетод(Инструменты, "Пауза", Параметры);
	
КонецПроцедуры // Пауза()

// Получить хеш строки данных
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//
Функция ПолучитьХеш(Инструменты, Данные) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьХеш",
		Новый Структура("Данные", Данные));
	
КонецФункции // ПолучитьХеш()

// Получить хеш строки Sql
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//
Функция ПолучитьХешSql(Инструменты, Данные) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьХешSql",
		Новый Структура("Данные", Данные));
	
КонецФункции // ПолучитьХешSql()

// Получить хеш строки Sdbl
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//
Функция ПолучитьХешSdbl(Инструменты, Данные) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьХешSdbl",
		Новый Структура("Данные", Данные));
	
КонецФункции // ПолучитьХешSdbl()

// Получить полный хеш строки Sql
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//  Sql - Строка, по которой расчитан хеш (возвращаемая)
//
Функция ПолучитьПолныйХешSql(Инструменты, Данные, Sql) Экспорт
	
	Параметры = Новый Структура("Данные, Sql", Данные, Sql);
	Результат = ВыполнитьМетод(Инструменты, "ПолучитьПолныйХешSql", Параметры);
	Sql = Параметры.Sql;
	Возврат Результат;
	
КонецФункции // ПолучитьПолныйХешSql()

// Получить полный хеш строки Sdbl
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Данные - Строка, данные, хеш которых необходимо вычислить
//  Sdbl - Строка, по которой расчитан хеш (возвращаемая)
//
Функция ПолучитьПолныйХешSdbl(Инструменты, Данные, Sdbl) Экспорт
	
	Параметры = Новый Структура("Данные, Sdbl", Данные, Sdbl);
	Результат = ВыполнитьМетод(Инструменты, "ПолучитьПолныйХешSdbl", Параметры);
	Sdbl = Параметры.Sdbl;
	Возврат Результат;
	
КонецФункции // ПолучитьПолныйХешSdbl()

// Объединить два хеша
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  Хеш1 - Число, значение первого хеша
//  Хеш2 - Число, значение второго хеша
//
Функция ОбъединитьХеш(Инструменты, Хеш1, Хеш2) Экспорт
	
	Параметры = Новый Структура("Хеш1, Хеш2", Хеш1, Хеш2);
	Возврат ВыполнитьМетод(Инструменты, "ОбъединитьХеш", Параметры);
	
КонецФункции // ОбъединитьХеш()

// Запустить указанную программу от имени указанного пользователя, при
// необходимости
//
// Параметры:
//  Инструменты - Объект внешнего компонента (см. ПолучитьИнструменты())
//  СтрокаЗапуска - Строка, путь и параметры запускаемого приложения
//  Имя - Строка, имя пользователя, от имени которого запускать приложение
//  Домен - Строка, домен пользователя, от имени которого запускать приложение
//  Пароль - Строка, пароль пользователя, от имени которого запускать приложение
//
Процедура ЗапуститьПрограмму(Инструменты,
                    СтрокаЗапуска,
                    Имя = "",
                    Домен = "",
                    Пароль = "") Экспорт
	
	Параметры = Новый Структура("СтрокаЗапуска, Имя, Домен, Пароль",
		СтрокаЗапуска, Имя, Домен, Пароль);
	ВыполнитьМетод(Инструменты, "Запустить", Параметры);
	
КонецПроцедуры // ЗапуститьПрограмму()

// Получить имя текущего компьютера.
// Реализована из-за невозможности получения имени компьютера стандартным
// способом на веб-клиенте
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ИмяЭтогоКомпьютера(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ИмяКомпьютера");
	
КонецФункции // ИмяЭтогоКомпьютера()

// Получить версию текущего компонента.
// Реализована из-за невозможности получения имени компьютера стандартным
// способом на веб-клиенте
//
// Возвращаемое значение:
//  Строка - имя текущего компьютера
//
Функция ВерсияКомпонента(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьВерсию");
	
КонецФункции // ВерсияКомпонента()

// Отметить начало выполнения работы ВП.
//
Процедура НачатьВыполнение(Инструменты) Экспорт
	
	ВыполнитьМетод(Инструменты, "НачатьВыполнение");
	
КонецПроцедуры // НачатьВыполнение()

// Отметить завершение выполнения работы ВП.
//
Процедура ЗавершитьВыполнение(Инструменты, Адрес) Экспорт
	
	Параметры = Новый Структура("Адрес", Адрес);
	ВыполнитьМетод(Инструменты, "ЗавершитьВыполнение", Параметры);
	
КонецПроцедуры // ЗавершитьВыполнение()

// Получить состояние выполнения ВП.
//
// Возвращаемое значение:
//  Булево - Истина, работа ВП выполняется, иначе завершена
//
Функция Выполняется(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "Выполняется");
	
КонецФункции // Выполняется()

// Отметить завершение выполнения работы ВП.
//
Функция КоличествоИсключений(Инструменты, Путь, Начало, Конец) Экспорт
	
	Параметры = Новый Структура("Путь, Начало, Конец", Путь, Начало, Конец);
	Возврат ВыполнитьМетод(Инструменты, "КоличествоИсключений", Параметры);
	
КонецФункции // КоличествоИсключений()

// Получить имя текущего пользователя
//
// Возвращаемое значение:
//  Строка, имя пользователя
//
Функция ИмяТекущегоПользователя(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ИмяТекущегоПользователя");
	
КонецФункции // ИмяТекущегоПользователя()

// Получить домен текущего пользователя
//
// Возвращаемое значение:
//  Строка, домен пользователя
//
Функция ДоменТекущегоПользователя(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ДоменТекущегоПользователя");
	
КонецФункции // ДоменТекущегоПользователя()

// Получить номер сессии
//
// Возвращаемое значение:
//  Число, номер текущей сессии
//
Функция НомерСессии(Инструменты) Экспорт
	
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьНомерСессии");
	
КонецФункции // НомерСессии()

// Получить путь по которому располагается зарегистрированный comcntr.dll
//
// Возвращаемое значение:
//  Строка
//
Функция ПутьCOMСоединителя(Инструменты) Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	ПерваяТочка = СтрНайти(ВерсияПриложения, ".");
	ВтораяТочка = СтрНайти(Сред(ВерсияПриложения, ПерваяТочка), ".");
	ВерсияПлатформы = Лев(ВерсияПриложения, ПерваяТочка + ВтораяТочка);
	
	Если ВерсияПлатформы = "8.2" Тогда
		ИмяМетода = "ПолучитьПутьCOMСоединителя82";
	ИначеЕсли ВерсияПлатформы = "8.3" Тогда
		ИмяМетода = "ПолучитьПутьCOMСоединителя83";
	Иначе
		ВызватьИсключение "Недопустимая версия платформы: " + Строка(ВерсияПлатформы) + Символы.ПС + 
						  "Допустимые значения: 8.2, 8.3";
	КонецЕсли;
	
	Возврат ВыполнитьМетод(Инструменты, ИмяМетода);
	
КонецФункции // ПутьCOMСоединителя()

// Получить номер версии указанного файла
//
// Возвращаемое значение:
//  Строка в формате X.X.X.X
//
Функция ВерсияФайла(Инструменты, Путь) Экспорт
	
	Параметры = Новый Структура("Путь", Путь);
	Возврат ВыполнитьМетод(Инструменты, "ПолучитьНомерВерсииФайла", Параметры);
	
КонецФункции // ВерсияФайла()

// Определяет, заблокирован ли файл каким-либо процессом
// Параметры:
//   ПутьКФайлу - Строка
//
// Возвращаемое значение:
//   Булево
//
Функция ФайлЗаблокирован(ПутьКФайлу) Экспорт
	
	Инструменты = ПолучитьИнструменты();
	Параметры = Новый Структура("ПутьКФайлу", ПутьКФайлу);
	Возврат ВыполнитьМетод(Инструменты, "ФайлЗаблокирован", Параметры);
	
КонецФункции

// Определяет, заблокированы ли файлы в каталоге каким-либо процессом
// Параметры:
//   ПутьККаталогу - Строка
//
// Возвращаемое значение:
//   Булево
//
Функция КаталогЗаблокирован(ПутьККаталогу) Экспорт
	
	Файл = Новый Файл(ПутьККаталогу);
	Если Не Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатПроверки = Ложь;
	Инструменты = ПолучитьИнструменты();
	ФайлыВКаталоге = НайтиФайлы(ПутьККаталогу, "*", Истина);
	
	Для Каждого ТекФайл Из ФайлыВКаталоге Цикл
		Если Не ТекФайл.ЭтоКаталог() Тогда
			Параметры = Новый Структура("ПутьКФайлу", ТекФайл.ПолноеИмя);
			ФайлЗаблокирован = ВыполнитьМетод(Инструменты, "ФайлЗаблокирован", Параметры);
			Если ФайлЗаблокирован Тогда
				РезультатПроверки = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ОЧЕРЕДЬ СООБЩЕНИЙ

// Подключить обработчик сообщений
//
// Параметры:
//  Сообщения - Объект внешнего компонента (см. ПолучитьОбработчикСообщений())
//  ИмяКанала - Строка, имя канала, по которому будут приниматься сообщения
//
Процедура ПодключитьСообщения(Сообщения, ИмяКанала) Экспорт
	
	Параметры = Новый Структура("ИмяКанала", ИмяКанала);
	ВыполнитьМетод(Сообщения, "Подключить", Параметры);
	
КонецПроцедуры // ПодключитьСообщения()

// Отключить обработчик сообщений
//
// Параметры:
//  Сообщения - Объект внешнего компонента (см. ПолучитьОбработчикСообщений())
//
Процедура ОтключитьСообщения(Сообщения) Экспорт
	
	ВыполнитьМетод(Сообщения, "Отключить");
	
КонецПроцедуры // ОтключитьСообщения()

// Отправить сообщение адресату
//
// Параметры:
//  Сообщения - Объект внешнего компонента (см. ПолучитьОбработчикСообщений())
//  Адрес - Строка
//  Сообщение - Строка
//
Процедура ОтправитьСообщение(Сообщения, Адрес, Сообщение) Экспорт
	
	Параметры = Новый Структура("Адрес, Сообщение", Адрес, Сообщение);
	ВыполнитьМетод(Сообщения, "Отправить", Параметры);
	
КонецПроцедуры // ОтправитьСообщение()


///////////////////////////////////////////////////////////////////////////////
// MICROSOFT SQL SERVER

// Подключиться к указанному SQL Server'у
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//  ИмяСервера - Строка, имя SQL Server
//  ИмяБазы - Строка, имя базы к которой подключиться
//
Процедура ПодключитьMSSQL(ОбъектВК, ИмяСервераСУБД, СпособАутентификации, Логин, Пароль, ИмяБД = "") Экспорт
	
	Если СпособАутентификации = Перечисления.СпособыАутентификации.Windows Тогда
		ПараметрыПодключения = Новый Структура("ИмяСервера, ИмяБазы", ИмяСервераСУБД, ИмяБД);
	Иначе
		ПараметрыПодключения = Новый Структура("ИмяСервера, ИмяБазы, ИмяПользователя, ПарольПользователя", ИмяСервераСУБД, ИмяБД, Логин, Пароль);
	КонецЕсли;
	
	ВыполнитьМетод(ОбъектВК, "Подключить", ПараметрыПодключения);
	
КонецПроцедуры // ПодключитьMSSQL()

// Разорвать текущее соединение с SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
Процедура ОтключитьMSSQL(СерверMSSQL) Экспорт
	
	ВыполнитьМетод(СерверMSSQL, "Отключить");
	
КонецПроцедуры // ОтключитьMSSQL()

// Выполнить запрос к SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//  ТекстЗапроса - Строка, текст запроса
//
Процедура ВыполнитьЗапросMSSQL(СерверMSSQL, ТекстЗапроса) Экспорт
	
	Параметры = Новый Структура("ТекстЗапроса", ТекстЗапроса);
	ВыполнитьМетод(СерверMSSQL, "Выполнить", Параметры);
	
КонецПроцедуры // ВыполнитьЗапросMSSQL()

// Узнать, есть ли записи в результате запроса
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
// Возвращаемое значение:
//  Булево - Истина, следующая запись получена;
//           Ложь, достигнут конец результата
//
Функция ЕстьЗаписьMSSQL(СерверMSSQL) Экспорт
	
	Возврат ВыполнитьМетод(СерверMSSQL, "ЕстьЗапись");
	
КонецФункции // ЕстьЗаписьMSSQL()

// Перейти к следующей записи результата запроса SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
// Возвращаемое значение:
//  Булево - Истина, следующая запись получена;
//           Ложь, достигнут конец результата
//
Функция СледующаяЗаписьMSSQL(СерверMSSQL) Экспорт
	
	Возврат ВыполнитьМетод(СерверMSSQL, "СледующаяЗапись");
	
КонецФункции // СледующаяЗаписьMSSQL()

// Перейти к следующему результату запроса SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
// Возвращаемое значение:
//  Булево - Истина, следующая запись получена;
//           Ложь, достигнут конец результата
//
Функция СледующийРезультатMSSQL(СерверMSSQL) Экспорт
	
	Возврат ВыполнитьМетод(СерверMSSQL, "СледующийРезультат");
	
КонецФункции // СледующийРезультатMSSQL()

// Узнать, есть ли результат запроса
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//
// Возвращаемое значение:
//  Булево - Истина, следующая запись получена;
//           Ложь, достигнут конец результата
//
Функция ЕстьРезультатMSSQL(СерверMSSQL) Экспорт
	
	Возврат ВыполнитьМетод(СерверMSSQL, "ЕстьРезультат");
	
КонецФункции // ЕстьРезультатMSSQL()

// Получить значение поля записи результата запроса к SQL Server
//
// Параметры:
//  СерверMSSQL - Объект MSSQL (см. ПолучитьMSSQL())
//  ИмяПоля - Строка, имя поля записи
//
// Возвращаемое значение:
//  Строка - значение поля записи результата запроса
//
Функция ЗначениеПоляMSSQL(СерверMSSQL, ИмяПоля) Экспорт
	
	Параметры = Новый Структура("ИмяПоля", ИмяПоля);
	Возврат ВыполнитьМетод(СерверMSSQL, "ЗначениеПоля", Параметры);
	
КонецФункции // ЗначениеПоляMSSQL()


///////////////////////////////////////////////////////////////////////////////
// ТЕХНОЛОГИЧЕСКИЙ ЖУРНАЛ

// Открыть исходые каталоги технологического журнала
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//  Каталоги - Строка, каталоги технологического журнала, перечисленные через
//             разделитель (; - для Windows, : - для Linux)
//  МаскаПроцессов - Число, младшие биты которого определяют набор
//                   процессов, журналы которых будут прочитаны.
//                   Биты (числа) и их значения:
//                     0 (1) - 1cv8, клиент 1С:Предприятия
//                     1 (2) - rmngr, сервер
//                     2 (4) - ragent, агент сервера
//                     3 (8) - rphost, рабочий процесс
//  Компактно - Булево, Ложь - выходной формат удобный для чтения
//              человеком с переносами строк, Истина - компактный
//              формат для машшинного разбора без переноса строк
//
Процедура ОткрытьТЖ(ТЖ, Каталоги, МаскаПроцессов, Компактно = Истина) Экспорт
	
	КаталогиТЖ = "";
	
	Для каждого Каталог Из Каталоги Цикл
		Если Не ПустаяСтрока(КаталогиТЖ) Тогда
			КаталогиТЖ = КаталогиТЖ + КипОбщийКлиентСервер.РазделительПути();
		КонецЕсли;
		
		КаталогиТЖ = КаталогиТЖ + Каталог;
	КонецЦикла;
	
	Параметры = Новый Структура("КаталогиТЖ, МаскаПроцессов, Компактно",
		КаталогиТЖ, МаскаПроцессов, Компактно);
	ВыполнитьМетод(ТЖ, "Открыть", Параметры);
	
КонецПроцедуры // ОткрытьТЖ()

// Прочитать 
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//  КоличествоСобытий - Число, количество читаемых событий
//
// Возвращаемое значение:
//  
//
Функция ПрочитатьТЖ(ТЖ, КоличествоСобытий = 5000) Экспорт
	
	Параметры = Новый Структура("КоличествоСобытий", КоличествоСобытий);
	Возврат ВыполнитьМетод(ТЖ, "Прочитать", Параметры);
	
КонецФункции // ПрочитатьТЖ()

// Опредлить, достигнут ли конец технологического журнала
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//
// Возвращаемое значение:
//  Булево - Истина, конец достигнут, Ложь - конец не достигнут
//
Функция КонецТЖ(ТЖ) Экспорт
	
	Возврат ВыполнитьМетод(ТЖ, "ЭтоКонец");
	
КонецФункции // КонецТЖ()

// Открыть исходые каталоги технологического журнала
//
// Параметры:
//  ТЖ - Объект внешнего компонента (см. ПолучитьТЖ())
//
Процедура ЗакрытьТЖ(ТЖ) Экспорт
	
	ВыполнитьМетод(ТЖ, "Закрыть");
	
КонецПроцедуры // ЗакрытьТЖ()


///////////////////////////////////////////////////////////////////////////////
// СЧЕТЧИКИ ПРОИЗВОДИТЕЛЬНОСТИ

// Подключить счетчики производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//
Процедура ПодключитьСчетчики(Счетчики) Экспорт
	
	ВыполнитьМетод(Счетчики, "Подключить");
	
КонецПроцедуры // ПодключитьСчетчики()

// Отключить счетчики производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//
Процедура ОтключитьСчетчики(Счетчики) Экспорт
	
	ВыполнитьМетод(Счетчики, "Отключить");
	
КонецПроцедуры // ОтключитьСчетчики()

// Добавить счетчик производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//  ПолноеИмяСчетчика - Строка, полное имя счетчика
//
// Возвращаемое значение:
//  Число - индекс счетчика, который необходим для получения его значения
//
Функция ДобавитьСчетчик(Счетчики, ПолноеИмяСчетчика) Экспорт
	
	Параметры = Новый Структура("ПолноеИмяСчетчика", ПолноеИмяСчетчика);
	Возврат ВыполнитьМетод(Счетчики, "ДобавитьСчетчик", Параметры);
	
КонецФункции // ДобавитьСчетчик()

// Удалить счетчик производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//  Индекс - Число, индес счетчика, полученный при его добавлении
//
Процедура УдалитьСчетчик(Счетчики, ИндексСчетчика) Экспорт
	
	Параметры = Новый Структура("ИндексСчетчика", ИндексСчетчика);
	ВыполнитьМетод(Счетчики, "УдалитьСчетчик", Параметры);
	
КонецПроцедуры // УдалитьСчетчик()

// Собрать значения показателей производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//
Процедура СобратьЗначенияСчетчиков(Счетчики) Экспорт
	
	ВыполнитьМетод(Счетчики, "СобратьЗначенияПоказателей");
	
КонецПроцедуры // СобратьЗначенияСчетчиков()

// Получить значение счетчика производительности
//
// Параметры:
//  Счетчики - Объект работы со счетчиками производительности (см. ПолучитьСчетчики())
//  ИндексСчетчика - Число, индекс счетчика, полученный при его добавлении
//
// Возвращаемое значение:
//  Число - индекс счетчика, который необходим для получения его значения
//
Функция ЗначениеСчетчика(Счетчики, ИндексСчетчика) Экспорт
	
	Параметры = Новый Структура("ИндексСчетчика", ИндексСчетчика);
	Возврат ВыполнитьМетод(Счетчики, "ПолучитьЗначение", Параметры);
	
КонецФункции // ЗначениеСчетчика()
