

///////////////////////////////////////////////////////////////////////////////
// ФАБРИКИ ОБЪЕКТОВ

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВыполнитьСценарий()
	
	Возврат ПредопределенноеЗначение("Справочник.Сценарии.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыВыполнитьСценарий()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыПрерватьВыполнениеСценария()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыПрерватьВыполнениеСценария()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыПодключитьсяКИБ()
	
	Возврат ПредопределенноеЗначение("Справочник.ИнформационныеБазы.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыПодключитьсяКИБ()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВыбратьИБ()
	
	Возврат ПредопределенноеЗначение("Справочник.ИнформационныеБазы.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыВыбратьИБ()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВключитьМонитор()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыВключитьМонитор()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВыключитьМонитор()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыВыключитьМонитор()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВключитьМониторинг()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыВключитьМониторинг()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВыключитьМониторинг()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыВыключитьМониторинг()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВключитьПросмотр()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыВключитьПросмотр()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВыключитьПросмотр()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыВыключитьПросмотр()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыОбновитьПросмотрПоказателей()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыОбновитьПросмотрПоказателей()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыУстановитьМасштаб()
	
	Возврат ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыУстановитьМасштаб()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыИзменитьМасштаб()
	
	Возврат ПредопределенноеЗначение("Перечисление.ОперацииМасштабирования.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыИзменитьМасштаб()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыИзменитьПозицию()
	
	Возврат ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыИзменитьПозицию()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыУстановитьПозицию()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыУстановитьПозицию()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыУстановитьЧастотуМониторинга()
	
	Возврат 1;
	
КонецФункции // СоздатьПараметрыКомандыУстановитьЧастотуМониторинга()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыОбновитьИнтерфейсПользователя()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыОбновитьИнтерфейсПользователя()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВключитьЗаписьЗначенийПП()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Показатель", ПредопределенноеЗначение("Справочник.Показатели.ПустаяСсылка"));
	Параметры.Вставить("ДлительностьЗаписи", 0);
	Параметры.Вставить("НеЗаписывать", Ложь);
	Параметры.Вставить("ДополнительныйПоказатель", ПредопределенноеЗначение("Справочник.Показатели.ПустаяСсылка"));
	Параметры.Вставить("ЗонаДополнительногоПоказателя", ПредопределенноеЗначение("Перечисление.ЗоныЗначенийПоказателей.ПустаяСсылка"));
	Параметры.Вставить("МаксимальнаяДлительностьВЗоне", 0);
	
	Возврат Параметры;
	
КонецФункции // СоздатьПараметрыКомандыВключитьЗаписьЗначенийПП()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВыключитьЗаписьЗначенийПП()
	
	Возврат ПредопределенноеЗначение("Справочник.Показатели.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыВыключитьЗаписьЗначенийПП()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыДобавитьВсеПП()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыДобавитьВсеПП()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыДобавитьПП()
	
	Возврат ПредопределенноеЗначение("Справочник.Показатели.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыДобавитьПП()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыИзменитьПП()
	
	Возврат ПредопределенноеЗначение("Справочник.Показатели.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыИзменитьПП()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыУдалитьПП()
	
	Возврат ПредопределенноеЗначение("Справочник.Показатели.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыУдалитьПП()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыОчиститьИнтервал()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыОчиститьИнтервал()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыСтоп()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыСтоп()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыДобавитьЗакладку()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыДобавитьЗакладку()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыСписокЗакладок()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыСписокЗакладок()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВыделитьПоказатель()
	
	Возврат ПредопределенноеЗначение("Справочник.Показатели.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыКомандыВыделитьПоказатель()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыВыделятьПоказатель()
	
	Возврат Ложь;
	
КонецФункции // СоздатьПараметрыКомандыВыделятьПоказатель()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыИмпортировать()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыИмпортировать()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыЭкспортировать()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыЭкспортировать()

// Создать параметры команды выполнения сценария
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыУстановитьТаймер()
	
	ПараметрыТаймера = Новый Структура;
	ПараметрыТаймера.Вставить("Имя", "Таймер 1");
	ПараметрыТаймера.Вставить("Длительность", 1);
	
	Возврат ПараметрыТаймера;
	
КонецФункции // СоздатьПараметрыКомандыУстановитьТаймер()

// Создать параметры команды возобновления мониторинга
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыПодтвердитьВозобновлениеМониторинга()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыПодтвердитьВозобновлениеМониторинга()

// Создать параметры команды "Изменить период анализа"
//
//  Команда - Перечисление.Команда
//  ПараметрКоманды - Произвольный
//
// Возвращаемое значение:
//  Строка - представление команды
//
Функция СоздатьПараметрыКомандыИзменитьПериодАнализа()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыКомандыИзменитьПериодАнализа()

// Создать параметры команды
//
// Параметры:
//  Команда - Перечисления.Команда
//
// Возвращаемое значение:
//  Произвольный - параметры команды
//
Функция СоздатьПараметрыКоманды(Команда) Экспорт
	
	Перем Результат;
	
	КодКоманды = ПолучитьКодКоманды(Команда);
	Выполнить "Результат = СоздатьПараметрыКоманды" + КодКоманды + "();";
	
	Возврат Результат;
	
КонецФункции // СоздатьПараметрыКоманды()


///////////////////////////////////////////////////////////////////////////////
// ВЫПОЛНЕНИЕ КОМАНД

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьКодКоманды(Команда)
	
	КодКоманды = глКоманды.Получить(Команда);
	
	Возврат КодКоманды;
	
КонецФункции // ПолучитьКодКоманды()

// Включить запись значений показателей производительности
//
Функция ВключитьЗаписьЗначенийПП()
	
	Параметры = Контекст.ПараметрыКоманды();
	
	Если Параметры = Неопределено Тогда
		Параметры = СоздатьПараметрыКоманды(ПредопределенноеЗначение("Справочник.Команды.ВключитьЗаписьЗначенийПП"));
		Параметры.Показатель = ФормаМонитора().ТекущаяСтрокаПоказателей().Показатель;
		Контекст.УстановитьПараметрыКоманды(Параметры);
	КонецЕсли;
	
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Контекст.Показатели(), "Показатель", Параметры.Показатель);
	
	Если СтрокаПоказателя.Запись = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Параметры.НеЗаписывать = Истина Тогда
		СтрокаПоказателя.МаксимальнаяДлительностьВЗоне = Параметры.МаксимальнаяДлительностьВЗоне;
		СтрокаПоказателя.ДополнительныйПоказатель = Параметры.ДополнительныйПоказатель;
		СтрокаПоказателя.ЗонаДополнительногоПоказателя = Параметры.ЗонаДополнительногоПоказателя;
		СтрокаПоказателя.НеЗаписывать = Параметры.НеЗаписывать;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("СтрокаПоказателя,Параметры", СтрокаПоказателя, Параметры);
	Если СтрокаПоказателя.НакопленнаяДлительность <> Неопределено
	   И СтрокаПоказателя.МаксимальнаяДлительностьВЗоне <> Неопределено
	   И СтрокаПоказателя.НакопленнаяДлительность > СтрокаПоказателя.МаксимальнаяДлительностьВЗоне Тогда
		Если Параметры.НеЗаписывать = Ложь Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ВключитьЗаписьЗначенийППДанныеПолученыПодтверждение", КомандыКлиент, ДопПараметры);
			ПоказатьВопрос(
				ОписаниеОповещения,
				"Достаточное количество аналитических данных уже получено. Все равно выполнить замер?",
				РежимДиалогаВопрос.ДаНет,,
				КодВозвратаДиалога.Нет,
				СловарьКлиентСервер.Получить("ЦУП")
			);
			Возврат Неопределено;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВключитьЗаписьЗначенийППДанныеПолученыПодтверждение(Неопределено, ДопПараметры);
	
	Возврат Истина;
	
КонецФункции // ВключитьЗаписьЗначенийПП()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ВключитьЗаписьЗначенийППДанныеПолученыПодтверждение(Результат, ДопПараметры) Экспорт
	
	СтрокаПоказателя = ДопПараметры.СтрокаПоказателя;
	Параметры = ДопПараметры.Параметры;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтрокаПоказателя.НакопленнаяДлительность = 0;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Причина = МониторингКлиент.ПоказательНастроен(СтрокаПоказателя.Показатель);
	Если Причина <> Неопределено Тогда
		ИнтерфейсыКлиент.Предупредить(Причина);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("СтрокаПоказателя,Параметры", СтрокаПоказателя, Параметры);
	
	РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(СтрокаПоказателя.Показатель);
	Если Не РеквизитыПоказателя.Интерактивный И ПараметрыПриложения["ПоказыватьПредупреждения"] Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВключитьЗаписьЗначенийППАналитическиеПоказатели", КомандыКлиент, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("ТекстПредупреждения", СловарьКлиентСервер.Получить("ПодтверждениеВключенияАналитическогоПоказателя"));
		ОткрытьФорму("ОбщаяФорма.Предупреждение", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	Иначе
		ВключитьЗаписьЗначенийППАналитическиеПоказатели(Истина, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры // ВключитьЗаписьЗначенийППДанныеПолученыПодтверждение()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ВключитьЗаписьЗначенийППАналитическиеПоказатели(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	СтрокаПоказателя = ДополнительныеПараметры.СтрокаПоказателя;
	Параметры        = ДополнительныеПараметры.Параметры;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализОжиданийНаБлокировках") Тогда
		Контекст.УстановитьАнализБлокировок1СВключен(Истина);
		Контекст.УстановитьСборБлокировок1СВключен(Ложь);
		Контекст.УстановитьАнализБлокировокСУБДВключен(Истина);
		Контекст.УстановитьСборБлокировокСУБДВключен(Ложь);
	КонецЕсли;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализВзаимоблокировок") Тогда
		Контекст.УстановитьАнализВзаимоблокировокВключен(Истина);
		Контекст.УстановитьСборВзаимоблокировокВключен(Ложь);
	КонецЕсли;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализВзаимоблокировок1С") Тогда
		Контекст.УстановитьАнализВзаимоблокировок1СВключен(Истина);
		Контекст.УстановитьСборВзаимоблокировок1СВключен(Ложь);
	КонецЕсли;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализЗапросов") Тогда
		Контекст.УстановитьАнализЗапросовВключен(Истина);
		Контекст.УстановитьСборЗапросовВключен(Ложь);
	КонецЕсли;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализСерверныхВызовов") Тогда
		Контекст.УстановитьАнализСерверныхВызововВключен(Истина);
		Контекст.УстановитьСборСерверныхВызововВключен(Ложь);
	КонецЕсли;
	
	СтрокаПоказателя.Запись = Истина;
	СтрокаПоказателя.ВремяВключенияЗаписи = ТекущаяДата();
	СтрокаПоказателя.ДлительностьЗаписи = Параметры.ДлительностьЗаписи;
	
КонецПроцедуры // ВключитьЗаписьЗначенийППЗавершение()

// Включить монитор производительности
//
Функция ВключитьМонитор()
	
	Контекст.УстановитьМониторВключен(Истина);
	ФормаМонитора().ПриВключенииМонитора();
	
	Возврат Истина;
	
КонецФункции // ВключитьМонитор()

// Прервать выполнение сценария, т.е. перейти к выполнению сценария "Базовый"
//
Функция ПрерватьВыполнениеСценария()
	
	Возврат ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыполнитьСценарий"),
	                         ПредопределенноеЗначение("Справочник.Сценарии.Базовый"));
	
КонецФункции // ПрерватьВыполнениеСценария()

// Подключиться к указанной информационной базе
//
Функция ПодключитьсяКИБ()
	
	Возврат ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыбратьИБ"));
	
КонецФункции // ПодключитьсяКИБ()

// Выбрать информационную базу
//
Функция ВыбратьИБ()
	
	Если Не ЗначениеЗаполнено(Контекст.ПараметрыКоманды()) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьИБЗавершение", КомандыКлиент);
		ОткрытьФорму("ОбщаяФорма.ВыборИБ",,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		Возврат Неопределено;
	Иначе
		Контекст.УстановитьИнформационнаяБаза(Контекст.ПараметрыКоманды());
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ВыбратьИБ()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ВыбратьИБЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Контекст.УстановитьИнформационнаяБаза(Результат);
		ПриВыполненииСценария();
	Иначе
		Контекст.ОчередьСобытий().Очистить();
	КонецЕсли;
	
	ВыполнениеСценарияКлиент.Возобновить();
	
КонецПроцедуры // ВыбратьИБЗавершение()

// Выключить монитор производительности
//
Функция ВыключитьМонитор()
	
	Контекст.УстановитьМониторВключен(Ложь);
	ФормаМонитора().ПриВыключенииМонитора();
	
	Возврат Истина;
	
КонецФункции // ВыключитьМонитор()

// Включить мониторинг значений показателей производительности
//
Функция ВключитьМониторинг()
	
	Контекст.УстановитьМониторингВключен(Истина);
	ФормаМонитора().ПереключитьВРежимМониторинга();
	
	Возврат Истина;
	
КонецФункции // ВключитьМониторинг()

// Выключить мониторинг значений показателей производительности
//
Функция ВыключитьМониторинг()
	
	Контекст.УстановитьМониторингВключен(Ложь);
	ФормаМонитора().ПереключитьВРежимОжидания();
	
	Направление = ПредопределенноеЗначение("Перечисление.НаправленияСообщенийОбмена.КлиентСервер");
	КомандаВыключитьМониторинг = ПредопределенноеЗначение("Справочник.Команды.ВыключитьМониторинг");
	ИдентификаторЗадания = Контекст.ИдентификаторЗаданияСбораПоказателей();
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПоказателиПроизводительности.ОтправитьСообщение(ИдентификаторЗадания, Направление, КомандаВыключитьМониторинг, Неопределено);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВыключитьМониторинг()

// Включить просмотр ранее записанных значений показателей производительности
//
Функция ВключитьПросмотр()
	
	// Вычисление начальных параметров
	Контекст.ОбновитьГраницыПросмотра();
	НачалоГраницыПросмотра = Контекст.НачалоГраницыПросмотра();
	КонецГраницыПросмотра = Контекст.КонецГраницыПросмотра();
	
	Если Не ЗначениеЗаполнено(НачалоГраницыПросмотра)
		 Или Не ЗначениеЗаполнено(КонецГраницыПросмотра) Тогда
		ИнтерфейсыКлиент.Предупредить(СловарьКлиентСервер.Получить("ПредупреждениеЗначенияПоказателейНеНайдены"));
		КомандыКлиент.ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ПрерватьВыполнениеСценария"));
		Возврат Ложь;
	КонецЕсли;
	
	Контекст.УстановитьПросмотрВключен(Истина);
	
	РеальныйМасштаб = Просмотр.ПолучитьПредопределенныйМасштаб(
		глКонстанты.МасштабПоУмолчанию,
		НачалоГраницыПросмотра,
		КонецГраницыПросмотра,
		НачалоГраницыПросмотра,
		КонецГраницыПросмотра);
		
	Просмотр.УстановитьИнтервал(РеальныйМасштаб,
	                            Контекст.КонецГраницыПросмотра());
	
	ФормаМонитора().ПереключитьВРежимПросмотра();
	
	Возврат Истина;
	
КонецФункции // ВключитьПросмотр()

// Выключить просмотр ранее записанных значений показателей производительности
//
Функция ВыключитьПросмотр()
	
	Контекст.УстановитьПросмотрВключен(Ложь);
	ФормаМонитора().ПереключитьВРежимОжидания();
	
	Возврат Истина;
	
КонецФункции // ВыключитьПросмотр()

// Обновить просмотр ранее записанных значений показателей производительности
//
Функция ОбновитьПросмотрПоказателей()
	
	МониторингКлиент.ОбновитьЗначенияПоказателей();
	
	Возврат Истина;
	
КонецФункции // ВыключитьПросмотр()

// Установить новый масштаб
//
Функция УстановитьМасштаб()
	
	Масштаб = Просмотр.ПолучитьПредопределенныйМасштаб(
		Контекст.ПараметрыКоманды(),
		Контекст.НачалоИнтервала(),
		Контекст.КонецИнтервала(),
		Контекст.НачалоГраницыПросмотра(),
		Контекст.КонецГраницыПросмотра());
	
	Если Масштаб = Неопределено Тогда
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ОбновитьПросмотрПоказателей"));
		Возврат Ложь;
	КонецЕсли;
	
	Просмотр.УстановитьМасштаб(Масштаб);
	ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ОбновитьПросмотрПоказателей"));
	
	Возврат Истина;
	
КонецФункции // УстановитьМасштаб()

// Изменить установленный масштаб
//
Функция ИзменитьМасштаб()
	
	Масштаб = Просмотр.ПолучитьМасштабПоОперации(
		МониторингКлиент.ПолучитьМасштаб(
			Контекст.НачалоИнтервала(),
			Контекст.КонецИнтервала()),
		Контекст.ПараметрыКоманды());
	
	Просмотр.УстановитьМасштаб(Масштаб);
	Возврат ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ОбновитьПросмотрПоказателей"));
	
КонецФункции // УстановитьМасштаб()

// Изменить позицию просмотра
//
Функция ИзменитьПозицию()
	
	Просмотр.СместитьПозицию(Контекст.ПараметрыКоманды());
	Результат = ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ОбновитьПросмотрПоказателей"));
	
	Возврат Результат;
	
КонецФункции // ИзменитьПозицию()

// Установить позицию просмотра
//
Функция УстановитьПозицию()
	
	Перем РеальнаяПозиция;
	
	Если Контекст.ПараметрыКоманды() = Неопределено Тогда
		
		ШиринаГраницыПросмотра = Контекст.ШиринаГраницыПросмотра();
		ПозицияИнтервала = ФормаМонитора().ПолучитьПозициюИнтервала();
		
		РеальнаяПозиция = Контекст.НачалоГраницыПросмотра()
		                + Окр(ШиринаГраницыПросмотра * ПозицияИнтервала);
	КонецЕсли;
	
	Просмотр.УстановитьПозицию(РеальнаяПозиция);
	
	Возврат ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ОбновитьПросмотрПоказателей"));
	
КонецФункции // УстановитьПозицию()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УстановитьИнтервалПросмотра()
	
	Результат = Ложь;
	Если Контекст.ПараметрыКоманды() <> Неопределено Тогда
		НачалоИнтервала = Контекст.ПараметрыКоманды().НачалоИнтервала;
		КонецИнтервала = Контекст.ПараметрыКоманды().КонецИнтервала;
		
		Просмотр.УстановитьИнтервалПросмотра(НачалоИнтервала, КонецИнтервала);
		
		Результат = ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ОбновитьПросмотрПоказателей"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // УстановитьИнтервалПросмотра()

// Задать частоту мониторинга показателей производительности
//
Функция УстановитьЧастотуМониторинга()
	
	Если Контекст.ПараметрыКоманды() = Неопределено Тогда
		//ФормаМониторинга = Контекст.ПараметрыКоманды().ФормаМониторинга;
		ПараметрыФормы = Новый Структура("ЧастотаМониторинга", Контекст.ЧастотаМониторинга());
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьЧастотуМониторингаЗавершение", КомандыКлиент);
		ОткрытьФорму("ОбщаяФорма.НастройкаПараметров", ПараметрыФормы,,,,, 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
		);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // УстановитьЧастотуМониторинга()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УстановитьЧастотуМониторингаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Контекст.УстановитьЧастотаМониторинга(Результат);
		ФормаМонитора().УстановитьДоступностьЭлементовУправления();
	КонецЕсли;
	
КонецФункции // УстановитьЧастотуМониторингаЗавершение()

// Обновить пользовательский интерфейс
//
Функция ОбновитьИнтерфейсПользователя()
	
	ФормаМонитора().УстановитьДоступностьЭлементовУправления();
	Возврат Истина;
	
КонецФункции // ОбновитьИнтерфейсПользователя()

// Выключить запись значений показателей производительности
//
Функция ВыключитьЗаписьЗначенийПП()
	
	Если Контекст.ПараметрыКоманды() = Неопределено Тогда
	
		ТекущаяСтрока = ФормаМонитора().ТекущаяСтрокаПоказателей();
		
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Контекст.УстановитьПараметрыКоманды(ТекущаяСтрока.Показатель);
		
	КонецЕсли;
	
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Контекст.Показатели(), "Показатель", Контекст.ПараметрыКоманды());
	
	Если СтрокаПоказателя.Запись = Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПоказателя.Запись = Ложь;
	СтрокаПоказателя.ДлительностьЗаписи = 0;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализОжиданийНаБлокировках") Тогда
		Контекст.УстановитьАнализБлокировок1СВключен(Ложь);
		Контекст.УстановитьАнализБлокировокСУБДВключен(Ложь);
	КонецЕсли;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализВзаимоблокировок") Тогда
		Контекст.УстановитьАнализВзаимоблокировокВключен(Ложь);
	КонецЕсли;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализВзаимоблокировок1С") Тогда
		Контекст.УстановитьАнализВзаимоблокировок1СВключен(Ложь);
	КонецЕсли;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализЗапросов") Тогда
		Контекст.УстановитьАнализЗапросовВключен(Ложь);
	КонецЕсли;
	
	Если СтрокаПоказателя.Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализСерверныхВызовов") Тогда
		Контекст.УстановитьАнализСерверныхВызововВключен(Ложь);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ВыключитьЗаписьЗначенийПП()

// Добавить показатель производительности
//
Функция ДобавитьВсеПП()
	
	// Получить список доступных ПП
	ДоступныеПП = ОбщегоНазначения.ПолучитьПоказателиИнформационнойБазы(
		Контекст.ИнформационнаяБаза(),
		Контекст.НачалоГраницыПросмотра(),
		Контекст.КонецГраницыПросмотра());
	
	// Исключить уже добавленные показатели
	Показатели = Контекст.Показатели();
	Для Каждого СтрокаПоказателей Из Показатели Цикл
		
		ИсключаемыйПоказатель = ДоступныеПП.НайтиПоЗначению(
			СтрокаПоказателей.Показатель);
		
		Если ИсключаемыйПоказатель <> Неопределено Тогда
			ДоступныеПП.Удалить(ИсключаемыйПоказатель);
		КонецЕсли;
		
	КонецЦикла;
	
	ТолькоАналитические = ?(Контекст.ПараметрыКоманды() = Неопределено, Ложь, Контекст.ПараметрыКоманды());
	
	// Добавить показатели из полученного списка
	Для Каждого СтрокаСпискаПоказателей Из ДоступныеПП Цикл
		
		Если ТолькоАналитические Тогда
			Если Не ПоказателиПроизводительности.ЭтоАналитическийПП(СтрокаСпискаПоказателей.Значение) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Контекст.УстановитьПараметрыКоманды(СтрокаСпискаПоказателей.Значение);
		МониторингКлиент.ДобавитьПоказатель(Ложь);
		
	КонецЦикла;
	Контекст.УстановитьПараметрыКоманды(Неопределено);
	
	ФормаМонитора().СинхронизироватьЦветаПоказателейНаГрафике();
	ФормаМонитора().ОбновитьЦветаПоказателейНаСервере();
	
	Возврат Истина;
	
КонецФункции // ДобавитьВсеПП()

// Добавить показатель производительности.
// Интерактивное добавление обновляет значения поепзптелей, а не интерактивное нет.
// При не интерактивном добавлении обновление нужно выполнять дополнительной командой.
// Это сделано для повышения скорости добавления показателей при выполнении сценария.
//
Функция ДобавитьПП()
	
	// Если показатель не указан, то его нужно выбрать интерактивно
	Если Контекст.ПараметрыКоманды() = Неопределено Тогда
		МониторингКлиент.ВыбратьПоказатель();
	Иначе
		ОписаниеПоказателя = Новый Структура("Показатель", Контекст.ПараметрыКоманды());
		МониторингКлиент.ВыборПоказателяЗавершение(ОписаниеПоказателя, Неопределено);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ДобавитьПП()

// Изменить показатель производительности
//
Функция ИзменитьПП()
	
	// Если показатель не указан, то его нужно выбрать интерактивно
	Если Контекст.ПараметрыКоманды() = Неопределено Тогда
		
		СтрокаПоказателя = ФормаМонитора().ТекущаяСтрокаПоказателей();
		Контекст.УстановитьПараметрыКоманды(СтрокаПоказателя.Показатель);
		
		Если Не МониторингКлиент.НастроитьПоказатель() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ИзменитьПП()

// Удалить показатель производительности
//
Функция УдалитьПП()
	
	// Если показатель не указан, то его нужно выбрать интерактивно
	Если Контекст.ПараметрыКоманды() = Неопределено Тогда
		
		СтрокаПоказателя = ФормаМонитора().ТекущаяСтрокаПоказателей();
		Если СтрокаПоказателя = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Контекст.УстановитьПараметрыКоманды(СтрокаПоказателя.Показатель);
		
	КонецЕсли;
	
	Если СтрокаПоказателя.Запись И ПоказателиПроизводительности.ЭтоАналитическийПП(Контекст.ПараметрыКоманды()) Тогда
		ИнтерфейсыКлиент.Предупредить("Перед удалением аналитического показателя, отключите его запись.");
		Возврат Истина;
	КонецЕсли;
	
	МониторингКлиент.УдалитьПоказатель();
	
	Возврат Истина;
	
КонецФункции // УдалитьПП()

// Очистить видимую область значений показателей производительности
//
Функция ОчиститьИнтервал()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИнформационнаяБаза", Контекст.ИнформационнаяБаза());
	ПараметрыФормы.Вставить("НачалоИнтервала", Контекст.НачалоИнтервала());
	ПараметрыФормы.Вставить("КонецИнтервала", Контекст.КонецИнтервала());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОчиститьИнтервалЗавершение", КомандыКлиент);
	ОткрытьФорму("ОбщаяФорма.Удаление", ПараметрыФормы,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	Возврат Истина;
	
КонецФункции // ОчиститьИнтервал()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОчиститьИнтервалЗавершение(ДанныеУдалены, ДополнительныеПараметры) Экспорт
	
	Если ДанныеУдалены = Истина Тогда
		Контекст.ОчиститьКэшСтраниц();
		Контекст.ОбновитьГраницыПросмотра();
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ОбновитьПросмотрПоказателей"));
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.УстановитьМасштаб"), ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.Минимальный"));
	КонецЕсли;
	
КонецПроцедуры // ОчиститьИнтервалЗавершение()

// Завершить выполняемые действия
//
// Параметры команды:
//  Булево - Истина, форсировать остановку без дополнительных вопросов
//
Функция Стоп()
	
	// Определить список показателей
	Показатели = Контекст.Показатели();
	АналитическиеПоказатели = Новый Массив;
	АналитическиеПоказателиСтрока = "";
		
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(СтрокаПоказателя.Показатель);
		
		Если Не РеквизитыПоказателя.Интерактивный
		      И СтрокаПоказателя.Запись Тогда
			АналитическиеПоказатели.Добавить(СтрокаПоказателя.Показатель);
			АналитическиеПоказателиСтрока = АналитическиеПоказателиСтрока
				+ ?(ПустаяСтрока(АналитическиеПоказателиСтрока), "", ", ")
				+ СтрокаПоказателя.Показатель;
		КонецЕсли;
	КонецЦикла;
	
	ЗадатьВопрос = Ложь;
	Если АналитическиеПоказатели.Количество() > 0 Тогда
		
		Форсировать = Контекст.ПараметрыКоманды() = Истина;
		
		Если Не Форсировать Тогда
			ЗадатьВопрос = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопПараметры = Новый Структура("АналитическиеПоказатели", АналитическиеПоказатели);
	Если ЗадатьВопрос Тогда
		ТекстВопроса = СловарьКлиентСервер.Получить("ВопросСохранитьДанныеДляАнализа", АналитическиеПоказателиСтрока);
		ОписаниеОповещения = Новый ОписаниеОповещения("СтопЗавершение", КомандыКлиент, ДопПараметры);
			ПоказатьВопрос(ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНетОтмена,,
			КодВозвратаДиалога.Да,
			СловарьКлиентСервер.Получить("ЦУП")
		);
	Иначе
		СтопЗавершение(Неопределено, ДопПараметры);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // Стоп()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура СтопЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Контекст.УстановитьАнализНеобходим(Ложь);
	КонецЕсли;
	
	Если ДопПараметры.АналитическиеПоказатели.Количество() > 0 Тогда
		АналитическиеПоказатели = ДопПараметры.АналитическиеПоказатели;
		Для Каждого Показатель Из АналитическиеПоказатели Цикл
			ВыполнитьКоманду(
				ПредопределенноеЗначение("Справочник.Команды.ВыключитьЗаписьЗначенийПП"),
				Показатель);
		КонецЦикла;
			
		ВыполнениеСценарияКлиент.ВыполнитьТактАнализа();
	КонецЕсли;
	
	Если Контекст.МониторингВключен() Тогда
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыключитьМониторинг"));
	КонецЕсли;
	
	Если Контекст.ПросмотрВключен() Тогда
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыключитьПросмотр"));
	КонецЕсли;
	
	Если Контекст.МониторВключен() Тогда
		ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ВыключитьМонитор"));
	КонецЕсли;
	
	Контекст.Удалить();
	
КонецПроцедуры // СтопЗавершение()

// Добавить новую закладку
//
Функция ДобавитьЗакладку()
	
	ФормаЗакладки = ПолучитьФорму("РегистрСведений.Закладки.ФормаЗаписи");
	
	Если Контекст.МониторингВключен() Тогда
		Период = Контекст.ПараметрыКоманды();
		ФормаЗакладки.Запись.Период = Период;
	ИначеЕсли Контекст.ПросмотрВключен() Тогда
		ФормаЗакладки.Запись.Период = Контекст.НачалоИнтервала();
	КонецЕсли;
	
	ФормаЗакладки.Открыть();
	
	Возврат Истина;
	
КонецФункции // ДобавитьЗакладку()

// Установить полный интервал просмотра
//
Функция СписокЗакладок()
	
	ВидГраницыПросмотра = Контекст.ПараметрыКоманды().ВидГраницы;
	Владелец = Контекст.ПараметрыКоманды().Владелец;
	ПараметрыФормы = Новый Структура("ИнформационнаяБаза,ВидГраницы",
		Контекст.ИнформационнаяБаза(), ВидГраницыПросмотра
	);
	ФормаСпискаЗакладок = ПолучитьФорму("РегистрСведений.Закладки.ФормаСписка", ПараметрыФормы, Владелец);
	ФормаСпискаЗакладок.Открыть();
	
	Возврат Истина;
	
КонецФункции // СписокЗакладок()

// Выделить показатель производительности
//
Функция ВыделитьПоказатель()
	
	Если Контекст.ПараметрыКоманды() = Неопределено Тогда
		ТекущаяСтрока = ФормаМонитора().ТекущаяСтрокаПоказателей();
		
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Контекст.УстановитьПараметрыКоманды(ТекущаяСтрока.Показатель);
	КонецЕсли;
	
	Контекст.УстановитьВыделенныйПоказатель(Контекст.ПараметрыКоманды());
	МониторингКлиент.ОбновитьГраницыПП();
	ФормаМонитора().СинхронизироватьЦветаПоказателейНаГрафике();
	
	Возврат Истина;
	
КонецФункции // ВыделитьПоказатель()

// Установить признак выделения показателя
//
Функция ВыделятьПоказатель()
	
	Контекст.УстановитьВыделятьПоказатель(Не Контекст.ВыделятьПоказатель());
	ФормаМонитора().СинхронизироватьЦветаПоказателейНаГрафике();
	
	Возврат Истина;
	
КонецФункции // ВыделятьПоказатель()

// Импортировать данные
//
Функция Импортировать()
	
	ПолучитьФорму("ОбщаяФорма.Импорт").Открыть();
	
	Возврат Истина;
	
КонецФункции // Импортировать()

// Экспортировать данные
//
Функция Экспортировать()
	
	ПолучитьФорму("ОбщаяФорма.Экспорт").Открыть();
	
	Возврат Истина;
	
КонецФункции // Экспортировать()

// Подтвердить возобновление мониторинга
//
Функция ПодтвердитьВозобновлениеМониторинга()
	
	ПолучитьФорму("ОбщаяФорма.ВозобновитьМониторинг").Открыть();
	
	Возврат Истина;
	
КонецФункции // ПодтвердитьВозобновлениеМониторинга()

// Выполнить указанную команду
//
// Параметры:
//  Команда - Перечисления.Команда, выполняемая команда
//
// Выполнить указанную команду
//
// Параметры:
//  Команда - Перечисление.Команда, выполняемая команда
//  Параметры - Произвольный, если этот параметр указан, то его значение
//              помещается в Контекст.ПараметрыКоманды
//
Функция ВыполнитьКоманду(Команда, Параметры = Неопределено) Экспорт
	
	Перем Результат;
	
	Если Параметры <> Неопределено Тогда
		Контекст.УстановитьПараметрыКоманды(Параметры);
	КонецЕсли;
	
	ОтладкаКлиентСервер.Команда(Команда, КомандыКлиентСервер.ПредставлениеПараметровКоманды(Команда, Контекст.ПараметрыКоманды()));
	
	ИмяИсполняемойФункции = ПолучитьКодКоманды(Команда);
	Выполнить "Результат = " + ИмяИсполняемойФункции + "();";
	
	Контекст.УстановитьПараметрыКоманды(Неопределено);
	
	Возврат Результат;
	
КонецФункции // ВыполнитьКоманду()

// Перейти к выполненеию указанного сценария
//
Функция ВыполнитьСценарий()
	
	ВыполнениеСценарияКлиент.Выключить();
	
	ПараметрыКоманды = Контекст.ПараметрыКоманды();
	Если ТипЗнч(ПараметрыКоманды) = Тип("Структура")
			И ПараметрыКоманды.Свойство("Владелец")
			И ПараметрыКоманды.Количество() = 1 Тогда
		
		ОткрытьФорму("ОбщаяФорма.ВыборСценария",, ПараметрыКоманды.Владелец,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		РезультатВключения = Неопределено;
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыКоманды)
		И ТипЗнч(ПараметрыКоманды) = Тип("Структура")
		И ПараметрыКоманды.Свойство("Сценарий")
		И ПараметрыКоманды.Количество() = 1 Тогда
		
		Контекст.УстановитьПараметрыКоманды(ПараметрыКоманды.Сценарий);
		РезультатВключения = ВыполнитьСценарийПродолжение();
		
	Иначе
		РезультатВключения = ВыполнитьСценарийПродолжение();
	КонецЕсли;
	
	Возврат РезультатВключения;
	
КонецФункции // ВыполнитьСценарий()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьСценарийПродолжение()
	
	НовыйСценарий = Контекст.ПараметрыКоманды();
	
	Если Контекст.Сценарий() <> ПредопределенноеЗначение("Справочник.Сценарии.Базовый") Тогда
		Контекст.УстановитьПараметрыКоманды(Неопределено);
		Если Не ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.Стоп")) Тогда
			ВыполнениеСценарияКлиент.Включить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Контекст.Создать(НовыйСценарий);
	Если НовыйСценарий <> ПредопределенноеЗначение("Справочник.Сценарии.Базовый") Тогда
		ВыполнениеСценарияКлиент.Включить();
	КонецЕсли;
	ПриВыполненииСценария();
	
	Возврат Истина;
	
КонецФункции // ВыполнитьСценарийПродолжение()


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ

// Служебная процедура, необходимая для корректного прохождения
// проверки "Поиск неиспользуемых процедур и функций"
//
// Параметры:
//  Нет
//
Процедура ВызовыНеявноИспользуемыхПроцедурИФункций()
	
	Если Ложь Тогда
		
		ВключитьЗаписьЗначенийПП();
		ВключитьМонитор();
		ВключитьМониторинг();
		ВключитьПросмотр();
		ВыбратьИБ();
		ВыделитьПоказатель();
		ВыделятьПоказатель();
		ВыключитьЗаписьЗначенийПП();
		ВыключитьМонитор();
		ВыключитьМониторинг();
		ВыключитьПросмотр();
		ВыполнитьСценарий();
		ДобавитьВсеПП();
		ДобавитьЗакладку();
		ДобавитьПП();
		ИзменитьМасштаб();
		ИзменитьПозицию();
		УстановитьИнтервалПросмотра();
		ИзменитьПП();
		Импортировать();
		ОбновитьИнтерфейсПользователя();
		ОбновитьПросмотрПоказателей();
		ОчиститьИнтервал();
		ПодключитьсяКИБ();
		ПодтвердитьВозобновлениеМониторинга();
		ПрерватьВыполнениеСценария();
		СоздатьПараметрыКомандыВключитьЗаписьЗначенийПП();
		СоздатьПараметрыКомандыВключитьМонитор();
		СоздатьПараметрыКомандыВключитьМониторинг();
		СоздатьПараметрыКомандыВключитьПросмотр();
		СоздатьПараметрыКомандыВыбратьИБ();
		СоздатьПараметрыКомандыВыделитьПоказатель();
		СоздатьПараметрыКомандыВыделятьПоказатель();
		СоздатьПараметрыКомандыВыключитьЗаписьЗначенийПП();
		СоздатьПараметрыКомандыВыключитьМонитор();
		СоздатьПараметрыКомандыВыключитьМониторинг();
		СоздатьПараметрыКомандыВыключитьПросмотр();
		СоздатьПараметрыКомандыВыполнитьСценарий();
		СоздатьПараметрыКомандыДобавитьВсеПП();
		СоздатьПараметрыКомандыДобавитьЗакладку();
		СоздатьПараметрыКомандыДобавитьПП();
		СоздатьПараметрыКомандыИзменитьМасштаб();
		СоздатьПараметрыКомандыИзменитьПозицию();
		СоздатьПараметрыКомандыИзменитьПП();
		СоздатьПараметрыКомандыИмпортировать();
		СоздатьПараметрыКомандыОбновитьИнтерфейсПользователя();
		СоздатьПараметрыКомандыОбновитьПросмотрПоказателей();
		СоздатьПараметрыКомандыОчиститьИнтервал();
		СоздатьПараметрыКомандыПодключитьсяКИБ();
		СоздатьПараметрыКомандыПодтвердитьВозобновлениеМониторинга();
		СоздатьПараметрыКомандыПрерватьВыполнениеСценария();
		СоздатьПараметрыКомандыСписокЗакладок();
		СоздатьПараметрыКомандыСтоп();
		СоздатьПараметрыКомандыУдалитьПП();
		СоздатьПараметрыКомандыУстановитьМасштаб();
		СоздатьПараметрыКомандыУстановитьПозицию();
		СоздатьПараметрыКомандыУстановитьТаймер();
		СоздатьПараметрыКомандыУстановитьЧастотуМониторинга();
		СоздатьПараметрыКомандыЭкспортировать();
		СоздатьПараметрыКомандыИзменитьПериодАнализа();
		СписокЗакладок();
		Стоп();
		УдалитьПП();
		УстановитьМасштаб();
		УстановитьПозицию();
		УстановитьЧастотуМониторинга();
		Экспортировать();
		
		ВызовыНеявноИспользуемыхПроцедурИФункций();
		
	КонецЕсли;
	
КонецПроцедуры // ВызовыНеявноИспользуемыхПроцедурИФункций()
