///////////////////////////////////////////////////////////////////////////////
// СОЗДАНИЕ КОНТЕКСТА СЦЕНАРИЯ

// Создать контекст сценария и поместить его в глобальную переменную
// глКонтекст
//
// Параметры:
//  СоздаваемыйСценарий - СправочникСсылка.Сценарий
//
Процедура Создать(СоздаваемыйСценарий) Экспорт
	
	СоздатьСтруктуруКонтекста();
	
	глКонтекст.Сценарий = СоздаваемыйСценарий;
	РеквизитыСценария = КонтекстВызовСервера.ПолучитьРеквизитыСценария(СоздаваемыйСценарий);
	глКонтекст.СледующееСостояние = РеквизитыСценария.НачальноеСостояние;
	глКонтекст.ТекущееСостояние = РеквизитыСценария.НачальноеСостояние;
	
	СтруктураСценарияИсточник = СценарийВызовСервера.ПолучитьСтруктуруСценария(Сценарий());
	СценарийКлиентСервер.ЗагрузитьСценарий(СтруктураСценарияИсточник, СтруктураСценария());
	ОтладкаКлиентСервер.Действие("СоздатьКонтекст", СоздаваемыйСценарий);
	
	ВыполнениеСценарияКлиент.СгенерироватьСобытие(глКонтекст,
		ПредопределенноеЗначение("Справочник.События.НачалоРаботы"),
		Неопределено,
		Ложь);
	
	ОтладкаКлиентСервер.Результат("СоздатьКонтекст", СоздаваемыйСценарий);
	
КонецПроцедуры // Создать()

// Создать структуру контекста
//
Процедура СоздатьСтруктуруКонтекста()
	
	глКонтекст = Новый Структура;
	
	// Анализ
	глКонтекст.Вставить("АнализВключен", Ложь);
	глКонтекст.Вставить("АнализБлокировок1СВключен", Ложь);
	глКонтекст.Вставить("АнализБлокировокСУБДВключен", Ложь);
	глКонтекст.Вставить("АнализВзаимоблокировокВключен", Ложь);
	глКонтекст.Вставить("АнализВзаимоблокировок1СВключен", Ложь);
	глКонтекст.Вставить("АнализЗапросовВключен", Ложь);
	глКонтекст.Вставить("АнализСерверныхВызововВключен", Ложь);
	глКонтекст.Вставить("АнализНеобходим", Истина);
	глКонтекст.Вставить("ОписательСбораДанныхОжиданийНаБлокировкахСУБД");
	глКонтекст.Вставить("ОписательТЖОжиданийНаБлокировках1С");
	глКонтекст.Вставить("ОписательТЖВзаимоблокировок");
	глКонтекст.Вставить("ОписательТЖВзаимоблокировок1С");
	глКонтекст.Вставить("ОписательТЖЗапросов");
	глКонтекст.Вставить("ОписательТЖСерверныхВызовов");
	глКонтекст.Вставить("СборБлокировок1СВключен", Ложь);
	глКонтекст.Вставить("СборБлокировокСУБДВключен", Ложь);
	глКонтекст.Вставить("СборВзаимоблокировокВключен", Ложь);
	глКонтекст.Вставить("СборВзаимоблокировок1СВключен", Ложь);
	глКонтекст.Вставить("СборЗапросовВключен", Ложь);
	глКонтекст.Вставить("СборСерверныхВызововВключен", Ложь);
	
	// Монитор
	глКонтекст.Вставить("ВнешнийИсточникПП", Неопределено);
	глКонтекст.Вставить("ВыделенныйПоказатель");
	глКонтекст.Вставить("ВыделятьПоказатель", Ложь);
	глКонтекст.Вставить("КэшСтраниц");
	глКонтекст.Вставить("МенеджерВТПросмотра");
	глКонтекст.Вставить("МониторВключен", Ложь);
	глКонтекст.Вставить("МониторингВключен", Ложь);
	глКонтекст.Вставить("НачалоГраницыПросмотра");
	глКонтекст.Вставить("КонецГраницыПросмотра");
	глКонтекст.Вставить("НачалоИнтервала");
	глКонтекст.Вставить("КонецИнтервала");
	глКонтекст.Вставить("НомерЗаписиВЖурналеПоказателей", 1);
	глКонтекст.Вставить("ПервыеЗначенияПоказателейПолучены", Ложь);
	глКонтекст.Вставить("Показатели");
	глКонтекст.Вставить("ПоказательГраниц");
	глКонтекст.Вставить("ЗначенияПоказателей");
	глКонтекст.Вставить("ГраницыЗонПоказателей");
	глКонтекст.Вставить("ГраницыДополнены", Ложь);
	глКонтекст.Вставить("ПросмотрВключен", Ложь);
	глКонтекст.Вставить("РежимМонитора");
	глКонтекст.Вставить("ЧастотаМониторинга", 1);
	глКонтекст.Вставить("СчетчикиОС");
	глКонтекст.Вставить("ИдентификаторЗаданияСбораПоказателей", Неопределено);
	глКонтекст.Вставить("ИдентификаторЗаданияАнализаПоказателей", Неопределено);
	
	// Параметры
	глКонтекст.Вставить("ПараметрыКоманды");
	глКонтекст.Вставить("ПараметрыСобытия");
	
	// Подключения
	глКонтекст.Вставить("ИнформационнаяБаза");
	глКонтекст.Вставить("ПодключениеИБ");
	глКонтекст.Вставить("СловарьШаблонов");
	глКонтекст.Вставить("Соединитель");
	глКонтекст.Вставить("СоединениеИБ");
	глКонтекст.Вставить("СоединенияРП");
	глКонтекст.Вставить("НачалоСоединенияРП", '00010101');
	глКонтекст.Вставить("СтруктураХраненияБазы");
	глКонтекст.Вставить("СтруктураХраненияБазыSDBL");
	глКонтекст.Вставить("ТипСУБД");
	глКонтекст.Вставить("ВерсияСУБД");
	глКонтекст.Вставить("РежимУправленияБлокировкойДанных");
	глКонтекст.Вставить("MSSQLТрассировкаВзаимоблокировок");
	
	// Сценарий
	глКонтекст.Вставить("ВремяПоследнегоТакта", ТекущаяДата());
	глКонтекст.Вставить("ВремяПоследнегоТактаЗаписи", ТекущаяДата());
	глКонтекст.Вставить("ВремяНачалаТакта", ТекущаяДата());
	глКонтекст.Вставить("СценарийВыполняется", Ложь);
	глКонтекст.Вставить("Действия");
	глКонтекст.Вставить("ОчередьСобытий");
	глКонтекст.Вставить("РеестрСобытий");
	глКонтекст.Вставить("СтруктураСценария");
	глКонтекст.Вставить("Сценарий");
	глКонтекст.Вставить("СледующееСостояние");
	глКонтекст.Вставить("СтрокаТекущегоСостояния");
	глКонтекст.Вставить("ТекущееСостояние");
	
КонецПроцедуры // СоздатьСтруктуруКонтекста()

// Удаление контекста
// Аналог деструктора
//
Процедура Удалить() Экспорт
	
	СоздатьСтруктуруКонтекста();
	КлиентскоеПриложение.УстановитьЗаголовок(глКонстанты.СинонимКонфигурации);
	ФормаМонитора().Заголовок = "Монитор";
	
КонецПроцедуры // Удалить()

// Создать стек действий
//
// Возвращаемое значение:
//  Массив - стек действий
Функция СоздатьДействия()
	
	Возврат Новый СписокЗначений;
	
КонецФункции // СоздатьДействия()

// Создать таблицу показателей производительности
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание показателей состоящее из:
//   - Показатель - СправочникСсылка.Показатель
//   - ЕдиницаИзмерения - Перечисления.ЕдиницаИзмерения
//   - Запись - Булево, признак записи значений показателя
//   - ПредставлениеМасштаба - Строка, удобочитаемое представление масштаба
//   - Масштаб - Число, значение масштаба
//   - Значение - Число, значение показателя производительности
//   - Цвет - Цвет, цвет значений показателя
//   - Линия - Линия, стиль линии значений показателя
//   - Данные - Произвольный, дополнительные данные показателя
//   - Минимальное - Число, минимальное значение показателя данного интервала
//   - Среднее - Число, среднее значение показателя данного интервала
//   - Максимальное - Число, максимальное значение показателя данного интервала
//   - Сумма - Число, суммарное значение показателя данного интервала
//   - КоличествоНеактуальныхДанных - Число, количество значений показателя
//                 для которых не определено значение на данном интервале
//   - КодПоказателя - Строка, код показателя (кэш кода)
//
Функция СоздатьПоказатели()
	
	Показатели = Новый Массив();
	
	Возврат Показатели;
	
КонецФункции // СоздатьПоказатели()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьШаблонПоказателей() Экспорт

	СтруктураПоказателей = Новый Структура;
	СтруктураПоказателей.Вставить("Показатель");
	СтруктураПоказателей.Вставить("ЕдиницаИзмерения");
	СтруктураПоказателей.Вставить("Запись");
	СтруктураПоказателей.Вставить("ПредставлениеМасштаба");
	СтруктураПоказателей.Вставить("ПредыдущийМасштаб");
	СтруктураПоказателей.Вставить("Масштаб");
	СтруктураПоказателей.Вставить("Значение");
	СтруктураПоказателей.Вставить("ГраницаЖК");
	СтруктураПоказателей.Вставить("ГраницаЗЖ");
	СтруктураПоказателей.Вставить("Цвет");
	СтруктураПоказателей.Вставить("Линия");
	СтруктураПоказателей.Вставить("Данные");
	СтруктураПоказателей.Вставить("Минимальное");
	СтруктураПоказателей.Вставить("Среднее");
	СтруктураПоказателей.Вставить("Максимальное");
	СтруктураПоказателей.Вставить("Сумма");
	СтруктураПоказателей.Вставить("КоличествоНеактуальныхДанных");
	СтруктураПоказателей.Вставить("КодПоказателя");
	СтруктураПоказателей.Вставить("ВремяВключенияЗаписи");
	СтруктураПоказателей.Вставить("ДлительностьЗаписи", Новый ОписаниеТипов("Число"));
	СтруктураПоказателей.Вставить("ЗамерАнализЗапросов");
	СтруктураПоказателей.Вставить("ЗамерАнализБлокировок1С");
	СтруктураПоказателей.Вставить("ЗамерАнализСерверныхВызовов");
	СтруктураПоказателей.Вставить("Экземпляр");
	СтруктураПоказателей.Вставить("НеЗаписывать");
	СтруктураПоказателей.Вставить("ДополнительныйПоказатель");
	СтруктураПоказателей.Вставить("ЗонаДополнительногоПоказателя");
	СтруктураПоказателей.Вставить("МаксимальнаяДлительностьВЗоне");
	СтруктураПоказателей.Вставить("НакопленнаяДлительность");
	СтруктураПоказателей.Вставить("ИндексПоказателя");
	
	Возврат СтруктураПоказателей;

КонецФункции // ПолучитьСтруктуруПоказателей()

// Создать таблицу значений показателей производительности
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание значений показателей состоящее из:
//   - Время - ДатаВремя, время получения значения показателя
//   - <КодПоказателя> - Строка, имя колонки - код показателя, в ячейках -
//                 значения показателей в указанный момент времени
//
Функция СоздатьЗначенияПоказателей()
	
	ЗначенияПоказателей = СоздатьМассивЗначенийПоказателей();
	
	Возврат ЗначенияПоказателей;
	
КонецФункции // СоздатьЗначенияПоказателей()

// Создать таблицу значений показателей производительности
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание значений показателей состоящее из:
//   - Время - ДатаВремя, время получения значения показателя
//   - <КодПоказателя> - Строка, имя колонки - код показателя, в ячейках -
//                 значения показателей в указанный момент времени
//
Функция СоздатьГраницыЗонПоказателей()
	
	Возврат СоздатьМассивЗначенийПоказателей();
	
КонецФункции // СоздатьГраницыЗонПоказателей()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СоздатьМассивЗначенийПоказателей()
	
	ЗначенияПоказателей = Новый Массив;
	
	// Добавить необходимое количество строк в таблицу значений показателей
	КоличествоСтрок = МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице();
	Для Сч = 1 По КоличествоСтрок Цикл
		НовоеЗначение = ПолучитьШаблонЗначенийПП();
		НовоеЗначение.Время = '00010101 000000';
		ЗначенияПоказателей.Добавить(НовоеЗначение);
	КонецЦикла;
	
	Возврат ЗначенияПоказателей;
	
КонецФункции // СоздатьМассивЗначенийПоказателей()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьШаблонЗначенийПП() Экспорт
	
	ШаблонЗначенийПоказателей = Новый Структура;
	ШаблонЗначенийПоказателей.Вставить("Время");
	ШаблонЗначенийПоказателей.Вставить("ГраницаЖК");
	ШаблонЗначенийПоказателей.Вставить("ГраницаЗЖ");
	
	Возврат ШаблонЗначенийПоказателей;
	
КонецФункции // СоздатьШаблонЗначенийПП()

// Создать очередь событий
//
// Возвращаемое значение:
//  ТаблицаЗначений - новая очередь событий состоящая из:
//   - Событие - СправочникСсылка.Событие
//   - Параметры - Произвольный, параметры события
//
Функция СоздатьОчередьСобытий()
	
	ОчередьСобытий = Новый Массив;
	
	Возврат ОчередьСобытий;
	
КонецФункции // СоздатьОчередьСобытий()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьШаблонСобытия() Экспорт
	
	СтруктураСобытия = Новый Структура;
	СтруктураСобытия.Вставить("Событие");
	СтруктураСобытия.Вставить("Параметры");
	
	Возврат СтруктураСобытия;
	
КонецФункции // ПолучитьШаблонСобытия()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ИнициализироватьОписаниеКоманд() Экспорт
	
	глКоманды = КонтекстВызовСервера.ПолучитьОписаниеКоманд();
	
КонецПроцедуры // ИнициализироватьТаблицуКоманд()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ИнициализироватьОписаниеПоказателей() Экспорт
	
	глПоказатели = КонтекстВызовСервера.ПолучитьОписаниеПоказателей();
	
КонецПроцедуры // ИнициализироватьОписаниеПоказателей()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ИнициализироватьКэшКонстант() Экспорт
	
	глКонстанты = КонтекстВызовСервера.ИнициализироватьКэшКонстант();
	
КонецПроцедуры // ИнициализироватьКэшКонстант()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьЗначенияРеквизитовПоказателя(Показатель) Экспорт
	
	РеквизитыПоказателя = глПоказатели.Получить(Показатель);
	
	Возврат РеквизитыПоказателя;
	
КонецФункции // ПолучитьЗначенияРеквизитовПоказателя()

// Получить информационную базу
//
// Возвращаемое значение:
//  СправочникСсылка.ИнформационнаяБаза
//
Функция ИнформационнаяБаза() Экспорт
	
	Если глКонтекст = Неопределено Тогда
		ВызватьИсключение "Контекст не инициализирован";
	ИначеЕсли глКонтекст.ИнформационнаяБаза = Неопределено Тогда
		Возврат ПредопределенноеЗначение("Справочник.ИнформационныеБазы.ПустаяСсылка");
	КонецЕсли;
	
	Возврат глКонтекст.ИнформационнаяБаза;
	
КонецФункции // ИнформационнаяБаза()


///////////////////////////////////////////////////////////////////////////////
// АНАЛИЗ

// Получить признак активности анализа
//
// Возвращаемое значение:
//  Булево
//
Функция АнализВключен() Экспорт
	
	Возврат глКонтекст.АнализВключен;
	
КонецФункции // АнализВключен()

// Получить признак анализа блокировок 1С
//
// Возвращаемое значение:
//  Булево
//
Функция АнализБлокировок1СВключен() Экспорт
	
	Возврат глКонтекст.АнализБлокировок1СВключен;
	
КонецФункции // АнализБлокировок1СВключен()

// Получить признак анализа блокировок СУБД
//
// Возвращаемое значение:
//  Булево
//
Функция АнализБлокировокСУБДВключен() Экспорт
	
	Возврат глКонтекст.АнализБлокировокСУБДВключен;
	
КонецФункции // АнализБлокировокСУБДВключен()

// Получить признак анализа взаимоблокировок
//
// Возвращаемое значение:
//  Булево
//
Функция АнализВзаимоблокировокВключен() Экспорт
	
	Возврат глКонтекст.АнализВзаимоблокировокВключен;
	
КонецФункции // АнализВзаимоблокировокВключен()

// Получить признак анализа взаимоблокировок 1С
//
// Возвращаемое значение:
//  Булево
//
Функция АнализВзаимоблокировок1СВключен() Экспорт
	
	Возврат глКонтекст.АнализВзаимоблокировок1СВключен;
	
КонецФункции // АнализВзаимоблокировокВключен()

// Получить признак анализа запросов
//
// Возвращаемое значение:
//  Булево
//
Функция АнализЗапросовВключен() Экспорт
	
	Возврат глКонтекст.АнализЗапросовВключен;
	
КонецФункции // АнализЗапросовВключен()

// Получить признак анализа серверных вызовов
//
// Возвращаемое значение:
//  Булево
//
Функция АнализСерверныхВызововВключен() Экспорт
	
	Возврат глКонтекст.АнализСерверныхВызововВключен;
	
КонецФункции // АнализСерверныхВызововВключен()

// Получить признак необходимости анализа
//
// Возвращаемое значение:
//  Булево
//
Функция АнализНеобходим() Экспорт
	
	Возврат глКонтекст.АнализНеобходим;
	
КонецФункции // АнализНеобходим()

// Получить структуру описания работы с технологическим журналом для анализа
// ожиданий на блокировках 1С
//
// Возвращаемое значение:
//  Структура (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Функция ОписательТЖОжиданийНаБлокировках1С() Экспорт
	
	Возврат глКонтекст.ОписательТЖОжиданийНаБлокировках1С;
	
КонецФункции // ОписательТЖОжиданийНаБлокировках1С()

// Получить структуру описания работы с технологическим журналом для анализа
// ожиданий на блокировках СУБД
//
// Возвращаемое значение:
//  Структура (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Функция ОписательСбораДанныхОжиданийНаБлокировкахСУБД() Экспорт
	
	Возврат глКонтекст.ОписательСбораДанныхОжиданийНаБлокировкахСУБД;
	
КонецФункции // ОписательСбораДанныхОжиданийНаБлокировкахСУБД()

// Получить структуру описания работы с технологическим журналом для анализа
// взаимоблокировок
//
// Возвращаемое значение:
//  Структура (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Функция ОписательТЖВзаимоблокировок() Экспорт
	
	Возврат глКонтекст.ОписательТЖВзаимоблокировок;
	
КонецФункции // ОписательТЖВзаимоблокировок()

// Получить структуру описания работы с технологическим журналом для анализа
// взаимоблокировок 1С
//
// Возвращаемое значение:
//  Структура (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Функция ОписательТЖВзаимоблокировок1С() Экспорт
	
	Возврат глКонтекст.ОписательТЖВзаимоблокировок1С;
	
КонецФункции // ОписательТЖВзаимоблокировок()

// Получить структуру описания работы с технологическим журналом для анализа
// запросов
//
// Возвращаемое значение:
//  Структура (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Функция ОписательТЖЗапросов() Экспорт
	
	Возврат глКонтекст.ОписательТЖЗапросов;
	
КонецФункции // ОписательТЖЗапросов()

// Получить структуру описания работы с технологическим журналом для анализа
// серверных вызовов
//
// Возвращаемое значение:
//  Структура (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Функция ОписательТЖСерверныхВызовов() Экспорт
	
	Возврат глКонтекст.ОписательТЖСерверныхВызовов;
	
КонецФункции // ОписательТЖЗапросов()

// Получить признак сбора информации о блокировках 1С
//
// Возвращаемое значение:
//  Булево
//
Функция СборБлокировок1СВключен() Экспорт
	
	Возврат глКонтекст.СборБлокировок1СВключен;
	
КонецФункции // СборБлокировок1СВключен()

// Получить признак сбора информации о блокировках СУБД
//
// Возвращаемое значение:
//  Булево
//
Функция СборБлокировокСУБДВключен() Экспорт
	
	Возврат глКонтекст.СборБлокировокСУБДВключен;
	
КонецФункции // СборБлокировокСУБДВключен()

// Получить признак сбора информации о взаимоблокировках
//
// Возвращаемое значение:
//  Булево
//
Функция СборВзаимоблокировокВключен() Экспорт
	
	Возврат глКонтекст.СборВзаимоблокировокВключен;
	
КонецФункции // СборВзаимоблокировокВключен()

// Получить признак сбора информации о взаимоблокировках 1С
//
// Возвращаемое значение:
//  Булево
//
Функция СборВзаимоблокировок1СВключен() Экспорт
	
	Возврат глКонтекст.СборВзаимоблокировок1СВключен;
	
КонецФункции // СборВзаимоблокировокВключен()

// Получить признак сбора информации о запросах
//
// Возвращаемое значение:
//  Булево
//
Функция СборЗапросовВключен() Экспорт
	
	Возврат глКонтекст.СборЗапросовВключен;
	
КонецФункции // СборЗапросовВключен()

// Получить признак сбора информации о серверных вызовах
//
// Возвращаемое значение:
//  Булево
//
Функция СборСерверныхВызововВключен() Экспорт
	
	Возврат глКонтекст.СборСерверныхВызововВключен;
	
КонецФункции // СборСерверныхВызововВключен()

// Установить признак активности анализа
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьАнализВключен(Значение) Экспорт
	
	глКонтекст.АнализВключен = Значение;
	
КонецПроцедуры // УстановитьАнализВключен()

// Установить признак анализа блокировок 1С
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьАнализБлокировок1СВключен(Значение) Экспорт
	
	глКонтекст.АнализБлокировок1СВключен = Значение;
	
КонецПроцедуры // УстановитьАнализБлокировок1СВключен()

// Установить признак анализа блокировок СУБД
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьАнализБлокировокСУБДВключен(Значение) Экспорт
	
	глКонтекст.АнализБлокировокСУБДВключен = Значение;
	
КонецПроцедуры // УстановитьАнализБлокировокСУБДВключен()

// Установить признак анализа взаимоблокировок
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьАнализВзаимоблокировокВключен(Значение) Экспорт
	
	глКонтекст.АнализВзаимоблокировокВключен = Значение;
	
КонецПроцедуры // УстановитьАнализВзаимоблокировокВключен()

// Установить признак анализа взаимоблокировок 1С
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьАнализВзаимоблокировок1СВключен(Значение) Экспорт
	
	глКонтекст.АнализВзаимоблокировок1СВключен = Значение;
	
КонецПроцедуры // УстановитьАнализВзаимоблокировокВключен()

// Установить признак анализа запросов
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьАнализЗапросовВключен(Значение) Экспорт
	
	глКонтекст.АнализЗапросовВключен = Значение;
	
КонецПроцедуры // УстановитьАнализЗапросовВключен()

// Установить признак анализа серверных вызовов
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьАнализСерверныхВызововВключен(Значение) Экспорт
	
	глКонтекст.АнализСерверныхВызововВключен = Значение;
	
КонецПроцедуры // УстановитьАнализСерверныхВызововВключен()

// Установить признак необходимости анализа
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьАнализНеобходим(Значение) Экспорт
	
	глКонтекст.АнализНеобходим = Значение;
	
КонецПроцедуры // УстановитьАнализНеобходим()

// Установить структуру описания работы с технологическим журналом для анализа
// ожиданий на блокировках 1С
//
// Параметры:
//  Значение - Структура
//             (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Процедура УстановитьОписательТЖОжиданийНаБлокировках1С(Значение) Экспорт
	
	глКонтекст.ОписательТЖОжиданийНаБлокировках1С = Значение;
	
КонецПроцедуры // УстановитьОписательТЖОжиданийНаБлокировках1С()

// Установить структуру описания работы с технологическим журналом для анализа
// ожиданий на блокировках СУБД
//
// Параметры:
//  Значение - Структура
//             (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Процедура УстановитьОписательСбораДанныхОжиданийНаБлокировкахСУБД(Значение) Экспорт
	
	глКонтекст.ОписательСбораДанныхОжиданийНаБлокировкахСУБД = Значение;
	
КонецПроцедуры // УстановитьОписательСбораДанныхОжиданийНаБлокировкахСУБД()

// Установить структуру описания работы с технологическим журналом для анализа
// взаимоблокировок
//
// Параметры:
//  Значение - Структура
//             (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Процедура УстановитьОписательТЖВзаимоблокировок(Значение) Экспорт
	
	глКонтекст.ОписательТЖВзаимоблокировок = Значение;
	
КонецПроцедуры // УстановитьОписательТЖВзаимоблокировок()

// Установить структуру описания работы с технологическим журналом для анализа
// взаимоблокировок 1С
//
// Параметры:
//  Значение - Структура
//             (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Процедура УстановитьОписательТЖВзаимоблокировок1С(Значение) Экспорт
	
	глКонтекст.ОписательТЖВзаимоблокировок1С = Значение;
	
КонецПроцедуры // УстановитьОписательТЖВзаимоблокировок()

// Установить структуру описания работы с технологическим журналом для анализа
// запросов
//
// Параметры:
//  Значение - Структура
//             (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Процедура УстановитьОписательТЖЗапросов(Значение) Экспорт
	
	глКонтекст.ОписательТЖЗапросов = Значение;
	
КонецПроцедуры // УстановитьОписательТЖЗапросов()

// Установить структуру описания работы с технологическим журналом для анализа
// серверных вызовов
//
// Параметры:
//  Значение - Структура
//             (см. ТехнологическийЖурнал.ВключитьТехнологическийЖурнал())
//
Процедура УстановитьОписательТЖСерверныхВызовов(Значение) Экспорт
	
	глКонтекст.ОписательТЖСерверныхВызовов = Значение;
	
КонецПроцедуры // УстановитьОписательТЖСерверныхВызовов()

// Установить признак сбора информации о блокировках 1С
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьСборБлокировок1СВключен(Значение) Экспорт
	
	глКонтекст.СборБлокировок1СВключен = Значение;
	
КонецПроцедуры // УстановитьСборБлокировок1СВключен()

// Установить признак сбора информации о блокировках СУБД
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьСборБлокировокСУБДВключен(Значение) Экспорт
	
	глКонтекст.СборБлокировокСУБДВключен = Значение;
	
КонецПроцедуры // УстановитьСборБлокировокСУБДВключен()

// Получить/установить признак сбора информации о взаимоблокировках
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьСборВзаимоблокировокВключен(Значение) Экспорт
	
	глКонтекст.СборВзаимоблокировокВключен = Значение;
	
КонецПроцедуры // УстановитьСборВзаимоблокировокВключен()

// Получить/установить признак сбора информации о взаимоблокировках 1С
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьСборВзаимоблокировок1СВключен(Значение) Экспорт
	
	глКонтекст.СборВзаимоблокировок1СВключен = Значение;
	
КонецПроцедуры // УстановитьСборВзаимоблокировокВключен()

// Установить признак сбора информации о запросах
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьСборЗапросовВключен(Значение) Экспорт
	
	глКонтекст.СборЗапросовВключен = Значение;
	
КонецПроцедуры // УстановитьСборЗапросовВключен()

// Установить признак сбора информации о серверных вызовах
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьСборСерверныхВызововВключен(Значение) Экспорт
	
	глКонтекст.СборСерверныхВызововВключен = Значение;
	
КонецПроцедуры // УстановитьСборСерверныхВызововВключен()

// Получить подключение к трассировке Microsoft SQL
//
// Возвращаемое значение:
//  COMОбъект
//
Функция MSSQLТрассировкаВзаимоблокировок() Экспорт
	
	Возврат глКонтекст.MSSQLТрассировкаВзаимоблокировок;
	
КонецФункции // MSSQLТрассировкаВзаимоблокировок()

// Получить подключение к трассировке Microsoft SQL
//
// Параметры:
//  Значение - COMОбъект, новое значение
//
Процедура УстановитьMSSQLТрассировкаВзаимоблокировок(Значение) Экспорт
	
	глКонтекст.MSSQLТрассировкаВзаимоблокировок = Значение;
	
КонецПроцедуры // УстановитьMSSQLТрассировкаВзаимоблокировок()


///////////////////////////////////////////////////////////////////////////////
// МОНИТОР

// Получить внешний источник значений показателей производительности
//
Функция ВнешнийИсточникПП() Экспорт
	
	Возврат глКонтекст.ВнешнийИсточникПП;
	
КонецФункции // ВнешнийИсточникПП()

// Выделенный показатель
//
Функция ВыделенныйПоказатель() Экспорт
	
	Возврат глКонтекст.ВыделенныйПоказатель;
	
КонецФункции // ВыделенныйПоказатель()

// Признак выделения показателя
//
Функция ВыделятьПоказатель() Экспорт
	
	Возврат глКонтекст.ВыделятьПоказатель;
	
КонецФункции // ВыделятьПоказатель()

// Получить кэш страниц показателей
//
// Возвращаемое значение:
//  Булево - Структура (см. ЖурналПоказателей.СоздатьКэш())
//
Функция КэшСтраниц() Экспорт
	
	Если глКонтекст.КэшСтраниц = Неопределено Тогда
		глКонтекст.КэшСтраниц = СоздатьКэш();
	КонецЕсли;
	
	Возврат глКонтекст.КэшСтраниц;
	
КонецФункции // КэшСтраниц()

// Создать кэш страниц.
//
// Кэш представляет собой структуру из двух полей: Масштаб и страницы. Поле
// Масштаб описыват масштаб страниц. Поле Страницы содержит таблицу значений,
// состоящую из двух колонок: Номер и Показатели. Колонка номер содержит
// номер страницы для указанного масштаба. Колонка Показатели содержит
// таблицу значений кэшируемых показателей производительности.
//
// Возвращаемое значение:
//  Структура - состоящая из полей:
//              Масштаб - Число, количество записей в группе записей
//              Страницы - ТаблицаЗначений, кэшированные страницы
//              - Номер - Число, номер страницы
//              - Страница - ТаблицаЗначений, значения ПП на странице
//              - Границы - Структура, граничные значения страницы
//
Функция СоздатьКэш(Масштаб = 0)
	
	// Создать типы для значений колонок
	ТипНомера = Новый ОписаниеТипов(
		"Число",
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
		
	ТипСтруктура = Новый ОписаниеТипов("Структура");
	
	// Создать список кэшируемых страниц
	Страницы = Новый Массив;
	//Страницы = Новый ТаблицаЗначений;
	//Страницы.Колонки.Добавить("Номер", ТипНомера);
	//Страницы.Колонки.Добавить("ОписаниеСтраницы", ТипСтруктура);
	
	// Создать структуру кэширования
	Кэш = Новый Структура("Масштаб, Страницы", Масштаб, Страницы);
	
	Возврат Кэш;
	
КонецФункции // СоздатьКэш()

// Очистить кэш страниц
//
// Параметры:
//  Кэш - Структура (см. СоздатьКэш())
//  Масштаб - Число, новый масштаб кэша
//
Процедура ОчиститьКэш(Кэш, Масштаб = 0) Экспорт
	
	Кэш.Масштаб = Масштаб;
	Кэш.Страницы.Очистить();
	
КонецПроцедуры // ОчиститьКэш()

// Получить признак активности монитора
//
// Возвращаемое значение:
//  Булево
//
Функция МониторВключен() Экспорт
	
	Возврат глКонтекст.МониторВключен;
	
КонецФункции // МониторВключен()

// Получить признак активности мониторинга
//
// Возвращаемое значение:
//  Булево
//
Функция МониторингВключен() Экспорт
	
	Возврат глКонтекст.МониторингВключен;
	
КонецФункции // МониторингВключен()

// Получить начало границы просмотра
//
// Возвращаемое значение:
//  Число
//
Функция НачалоГраницыПросмотра() Экспорт
	
	Возврат глКонтекст.НачалоГраницыПросмотра;
	
КонецФункции // НачалоГраницыПросмотра()

// Получить конец границы просмотра
//
// Возвращаемое значение:
//  Число
//
Функция КонецГраницыПросмотра() Экспорт
	
	Возврат глКонтекст.КонецГраницыПросмотра;
	
КонецФункции // КонецГраницыПросмотра()

// Получить начало границы интервала
//
// Возвращаемое значение:
//  Число
//
Функция НачалоИнтервала() Экспорт
	
	Возврат глКонтекст.НачалоИнтервала;
	
КонецФункции // НачалоИнтервала()

// Получить конец границы интервала
//
// Возвращаемое значение:
//  Число
//
Функция КонецИнтервала() Экспорт
	
	Возврат глКонтекст.КонецИнтервала;
	
КонецФункции // КонецИнтервала()

// Получить текущий номер записи в журнале показателей
//
// Возвращаемое значение:
//  Число
//
Функция НомерЗаписиВЖурналеПоказателей() Экспорт
	
	Возврат глКонтекст.НомерЗаписиВЖурналеПоказателей;
	
КонецФункции // НомерЗаписиВЖурналеПоказателей()

// Получить признак получения первых значений показателей
//
// Возвращаемое значение:
//  Булево
//
Функция ПервыеЗначенияПоказателейПолучены() Экспорт
	
	Возврат глКонтекст.ПервыеЗначенияПоказателейПолучены;
	
КонецФункции // ПервыеЗначенияПоказателейПолучены()

// Получить признак активности просмотра
//
// Возвращаемое значение:
//  Булево
//
Функция ПросмотрВключен() Экспорт
	
	Возврат глКонтекст.ПросмотрВключен;
	
КонецФункции // ПросмотрВключен()

// Получить таблицу показателей производительности
//
// Возвращаемое значение:
//  ТаблицаЗначений - активные показатели (см. СоздатьПоказатели())
//
Функция Показатели() Экспорт
	
	Если глКонтекст.Показатели = Неопределено Тогда
		глКонтекст.Показатели = СоздатьПоказатели();
	КонецЕсли;
	
	Возврат глКонтекст.Показатели;
	
КонецФункции // Показатели()

// Получить показатель для которого отображаются границы зон
//
// Возвращаемое значение:
//  СправочникСсылка.ПоказательПроизводительности
//
Функция ПоказательГраниц() Экспорт
	
	Возврат глКонтекст.ПоказательГраниц;
	
КонецФункции // ПоказательГраниц()

// Получить таблицу значений показателей производительности
//
// Возвращаемое значение:
//  ТаблицаЗначений - значения активных показателей
//                 (см. СоздатьЗначенияПоказателей())
//
Функция ЗначенияПоказателей() Экспорт
	
	Если глКонтекст.ЗначенияПоказателей = Неопределено Тогда
		глКонтекст.ЗначенияПоказателей = СоздатьЗначенияПоказателей();
	КонецЕсли;
	
	Возврат глКонтекст.ЗначенияПоказателей;
	
КонецФункции // ЗначенияПоказателей()

// Получить таблицу значений границ показателей производительности
//
// Возвращаемое значение:
//  ТаблицаЗначений - значения границ активных показателей
//                 (см. СоздатьГраницыЗонПоказателей())
//
Функция ГраницыЗонПоказателей() Экспорт
	
	Если глКонтекст.ГраницыЗонПоказателей = Неопределено Тогда
		глКонтекст.ГраницыЗонПоказателей = СоздатьГраницыЗонПоказателей();
	КонецЕсли;
	
	Возврат глКонтекст.ГраницыЗонПоказателей;
	
КонецФункции // ГраницыЗонПоказателей()

// Узнать состояние дополненности границ ПП
//
// Возвращаемое значение:
//  ТаблицаЗначений - значения границ активных показателей
//                 (см. СоздатьГраницыЗонПоказателей())
//
Функция ГраницыДополнены() Экспорт
	
	Возврат глКонтекст.ГраницыДополнены;
	
КонецФункции // ГраницыДополнены()

// Получить режим монитора
//
// Возвращаемое значение:
//  Перечисления.РежимМонитора
//
Функция РежимМонитора() Экспорт
	
	Возврат глКонтекст.РежимМонитора;
	
КонецФункции // РежимМонитора()

// Получить частоту мониторинга
//
// Возвращаемое значение:
//  Число
//
Функция ЧастотаМониторинга() Экспорт
	
	Возврат глКонтекст.ЧастотаМониторинга;
	
КонецФункции // ЧастотаМониторинга()

// Установить внешний источник значений показателей производительности
//
// Параметры:
//  Значение - Булево, Истина - выделять показатель
//
Процедура УстановитьВнешнийИсточникПП(Значение) Экспорт
	
	глКонтекст.ВнешнийИсточникПП = Значение;
	
КонецПроцедуры // УстановитьВнешнийИсточникПП()

// Установить выделенный показатель
//
// Параметры:
//  Значение - СправочникСсылка, выделенный показатель
//
Процедура УстановитьВыделенныйПоказатель(Значение) Экспорт
	
	глКонтекст.ВыделенныйПоказатель = Значение;
	
КонецПроцедуры // УстановитьВыделенныйПоказатель()

// Установить признак выделения показателя
//
// Параметры:
//  Значение - Булево, Истина - выделять показатель
//
Процедура УстановитьВыделятьПоказатель(Значение) Экспорт
	
	глКонтекст.ВыделятьПоказатель = Значение;
	
КонецПроцедуры // УстановитьВыделятьПоказатель()

// Установить актуальные значения границ просмотра
//
Процедура ОбновитьГраницыПросмотра() Экспорт
	
	НачалоГраницыПросмотра = Неопределено;
	КонецГраницыПросмотра = Неопределено;
	
	ЖурналПоказателей.ПолучитьГраницыИнтервала(
		НачалоГраницыПросмотра,
		КонецГраницыПросмотра,
		Контекст.ИнформационнаяБаза());
	
	глКонтекст.НачалоГраницыПросмотра = НачалоГраницыПросмотра;
	глКонтекст.КонецГраницыПросмотра = КонецГраницыПросмотра;
	
	Если глКонтекст.НачалоГраницыПросмотра = Null Тогда
		глКонтекст.НачалоГраницыПросмотра = Неопределено;
	КонецЕсли;
	
	Если глКонтекст.КонецГраницыПросмотра = Null Тогда
		глКонтекст.КонецГраницыПросмотра = Неопределено;
	КонецЕсли;
	
	УстановитьНачалоИнтервала(глКонтекст.НачалоГраницыПросмотра);
	УстановитьКонецИнтервала(глКонтекст.КонецГраницыПросмотра);
	
КонецПроцедуры // ОбновитьГраницыПросмотра()

// Очистить кэш страниц показателей
//
Процедура ОчиститьКэшСтраниц() Экспорт
	
	ОчиститьКешЗначенийПоказателей();
	ОчиститьКэш(КэшСтраниц());
	Контекст.УстановитьГраницыДополнены(Ложь);
	
КонецПроцедуры // УстановитьКэшСтраниц()

// Очистить кеш значений показателей путем
// удаления менеджера временных таблиц просмотра,
// чтобы значения ПП заново перечитались из базы
//
Процедура ОчиститьКешЗначенийПоказателей() Экспорт
	
	глКонтекст.МенеджерВТПросмотра = Неопределено;
	
КонецПроцедуры // ОчиститьКешЗначенийПоказателей()

// Установить признак активности монитора
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьМониторВключен(Значение) Экспорт
	
	глКонтекст.МониторВключен = Значение;
	
КонецПроцедуры // УстановитьМониторВключен()

// Установить признак активности мониторинга
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьМониторингВключен(Значение) Экспорт
	
	глКонтекст.МониторингВключен = Значение;
	
КонецПроцедуры // УстановитьМониторингВключен()

// Установить начало границы просмотра
//
// Параметры:
//  Значение - Число, новое значение
//
Процедура УстановитьНачалоГраницыПросмотра(Значение) Экспорт
	
	глКонтекст.НачалоГраницыПросмотра = Значение;
	
КонецПроцедуры // УстановитьНачалоГраницыПросмотра()

// Установить конец границы просмотра
//
// Параметры:
//  Значение - Число, новое значение
//
Процедура УстановитьКонецГраницыПросмотра(Значение) Экспорт
	
	глКонтекст.КонецГраницыПросмотра = Значение;
	
КонецПроцедуры // УстановитьКонецГраницыПросмотра()

// Установить начало границы интервала
//
// Параметры:
//  Значение - Число, новое значение
//
Процедура УстановитьНачалоИнтервала(Значение) Экспорт
	
	глКонтекст.НачалоИнтервала = Значение;
	
КонецПроцедуры // УстановитьНачалоИнтервала()

// Установить конец границы интервала
//
// Параметры:
//  Значение - Число, новое значение
//
Процедура УстановитьКонецИнтервала(Значение) Экспорт
	
	глКонтекст.КонецИнтервала = Значение;
	
КонецПроцедуры // УстановитьКонецИнтервала()

// Установить текущий номер записи в журнале показателей
//
// Параметры:
//  Значение - Число, новое значение
//
Процедура УстановитьНомерЗаписиВЖурналеПоказателей(Значение) Экспорт
	
	глКонтекст.НомерЗаписиВЖурналеПоказателей = Значение;
	
КонецПроцедуры // УстановитьНомерЗаписиВЖурналеПоказателей()

// Установить признак получения первых значений показателей
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьПервыеЗначенияПоказателейПолучены(Значение) Экспорт
	
	глКонтекст.ПервыеЗначенияПоказателейПолучены = Значение;
	
КонецПроцедуры // УстановитьПервыеЗначенияПоказателейПолучены()

// Установить признак дополненности границ ПП
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьГраницыДополнены(Значение) Экспорт
	
	глКонтекст.ГраницыДополнены = Значение;
	
КонецПроцедуры // УстановитьГраницыДополнены()

// Установить показатель для которого отображаются границы зон
//
// Параметры:
//  Значение - СправочникСсылка.ПоказательПроизводительности
//
Процедура УстановитьПоказательГраниц(Значение) Экспорт
	
	глКонтекст.ПоказательГраниц = Значение;
	
КонецПроцедуры // УстановитьПоказательГраниц()

// Установить признак активности просмотра
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьПросмотрВключен(Значение) Экспорт
	
	глКонтекст.ПросмотрВключен = Значение;
	
КонецПроцедуры // УстановитьПросмотрВключен()

// Установить режим монитора
//
// Параметры:
//  Значение - Перечисления.РежимМонитора, новое значение
//
Процедура УстановитьРежимМонитора(Значение) Экспорт
	
	глКонтекст.РежимМонитора = Значение;
	
КонецПроцедуры // УстановитьРежимМонитора()

// Установить частоту мониторинга
//
// Параметры:
//  Значение - Число, новое значение
//
Процедура УстановитьЧастотаМониторинга(Значение) Экспорт
	
	глКонтекст.ЧастотаМониторинга = Значение;
	
КонецПроцедуры // УстановитьЧастотаМонитора()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УстановитьИдентификаторЗаданияСбораПоказателей(Значение) Экспорт
	
	глКонтекст.ИдентификаторЗаданияСбораПоказателей = Значение;
	
КонецПроцедуры // УстановитьИдентификаторЗаданияСбораПоказателей()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИдентификаторЗаданияСбораПоказателей() Экспорт
	
	Возврат глКонтекст.ИдентификаторЗаданияСбораПоказателей;
	
КонецФункции // ИдентификаторЗаданияСбораПоказателей()


///////////////////////////////////////////////////////////////////////////////
// ПАРАМЕТРЫ

// Получить параметры команды
//
// Возвращаемое значение:
//  Произвольный
//
Функция ПараметрыКоманды() Экспорт
	
	Возврат глКонтекст.ПараметрыКоманды;
	
КонецФункции // ПараметрыКоманды()

// Получить параметры события
//
// Возвращаемое значение:
//  Произвольный
//
Функция ПараметрыСобытия() Экспорт
	
	Возврат глКонтекст.ПараметрыСобытия;
	
КонецФункции // ПараметрыСобытия()

// Установить параметры команды
//
// Параметры:
//  Значение - Произвольный, новое значение
//
Процедура УстановитьПараметрыКоманды(Значение) Экспорт
	
	глКонтекст.ПараметрыКоманды = Значение;
	
КонецПроцедуры // УстановитьПараметрыКоманды()

// Установить параметры события
//
// Параметры:
//  Значение - Произвольный, новое значение
//
//
Процедура УстановитьПараметрыСобытия(Значение) Экспорт
	
	глКонтекст.ПараметрыСобытия = Значение;
	
КонецПроцедуры // УстановитьПараметрыСобытия()


///////////////////////////////////////////////////////////////////////////////
// СЦЕНАРИЙ

// Получить время последнего такта
//
// Возвращаемое значение:
//  ДатаВремя
//
Функция ВремяПоследнегоТакта(Значение = Неопределено) Экспорт
	
	Возврат глКонтекст.ВремяПоследнегоТакта;
	
КонецФункции // ВремяПоследнегоТакта()

// Получить время последнего такта записи
//
// Возвращаемое значение:
//  ДатаВремя
//
Функция ВремяПоследнегоТактаЗаписи(Значение = Неопределено) Экспорт
	
	Возврат глКонтекст.ВремяПоследнегоТактаЗаписи;
	
КонецФункции // ВремяПоследнегоТактаЗаписи()

// Получить время начала текущего такта
//
// Возвращаемое значение:
//  ДатаВремя
//
Функция ВремяНачалаТакта(Значение = Неопределено) Экспорт
	
	Возврат глКонтекст.ВремяНачалаТакта;
	
КонецФункции // ВремяНачалаТакта()

// Получить признак выполнения сценария
//
// Возвращаемое значение:
//  Булево - Истина, если сценарий выполняется, иначе - Ложь
//
Функция СценарийВыполняется() Экспорт
	
	Если глКонтекст <> Неопределено Тогда
		Результат = глКонтекст.СценарийВыполняется;
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СценарийВыполняется()

// Получить стек действий
//
// Возвращаемое значение:
//  Массив (см. СоздатьДействия())
//
Функция Действия() Экспорт
	
	Если глКонтекст.Действия = Неопределено Тогда
		глКонтекст.Действия = СоздатьДействия();
	КонецЕсли;
	
	Возврат глКонтекст.Действия;
	
КонецФункции // Действия()

// Получить очередь событий
//
// Возвращаемое значение:
//  ТаблицаЗначений - события, которые необходимо обработать
//                 (см. СоздатьОчередьСобытий())
//
Функция ОчередьСобытий() Экспорт
	
	Если глКонтекст.ОчередьСобытий = Неопределено Тогда
		глКонтекст.ОчередьСобытий = СоздатьОчередьСобытий();
	КонецЕсли;
	
	Возврат глКонтекст.ОчередьСобытий;
	
КонецФункции // ОчередьСобытий()

// Получить структуру сценария
//
// Возвращаемое значение:
//  ДеревоЗначений (см. Сценарий.СоздатьСтруктуруСценария())
//
Функция СтруктураСценария() Экспорт
	
	Если глКонтекст.СтруктураСценария = Неопределено Тогда
		глКонтекст.СтруктураСценария = СценарийКлиентСервер.СоздатьСтруктуруСценария();
	КонецЕсли;
	
	Возврат глКонтекст.СтруктураСценария;
	
КонецФункции // СтруктураСценария()

// Получить сценарий
//
// Возвращаемое значение:
//  СправочникСсылка.Сценарий
//
Функция Сценарий() Экспорт
	
	Возврат глКонтекст.Сценарий;
	
КонецФункции // Сценарий()

// Получить следующее состояние
//
// Возвращаемое значение:
//  Строка
//
Функция СледующееСостояние() Экспорт
	
	Возврат глКонтекст.СледующееСостояние;
	
КонецФункции // СледующееСостояние()

// Получить строку текущего состояния
//
// Возвращаемое значение:
//  СтрокаДереваЗначений - строка текущего состояния в структуре сценария
//
Функция СтрокаТекущегоСостояния() Экспорт
	
	Если глКонтекст.СтрокаТекущегоСостояния = Неопределено
	 Или глКонтекст.СтрокаТекущегоСостояния.ТекущееСостояние <> ТекущееСостояние() Тогда
		глКонтекст.СтрокаТекущегоСостояния = СценарийКлиент.НайтиСтрокуСостояния(
			ТекущееСостояние(),
			СтруктураСценария());
	КонецЕсли;
	
	Возврат глКонтекст.СтрокаТекущегоСостояния;
	
КонецФункции // СтрокаТекущегоСостояния()

// Получить текущее состояние
//
// Возвращаемое значение:
//  Строка
//
Функция ТекущееСостояние() Экспорт
	
	Возврат глКонтекст.ТекущееСостояние;
	
КонецФункции // ТекущееСостояние()

// Получить реестр событий
//
// Возвращаемое значение:
//  ТаблицаЗначений (см. События.СоздатьРеестрСобытий())
Функция РеестрСобытий() Экспорт
	
	Если глКонтекст.РеестрСобытий = Неопределено Тогда
		глКонтекст.РеестрСобытий = СобытияКлиент.СоздатьРеестрСобытий();
	КонецЕсли;
	
	Возврат глКонтекст.РеестрСобытий;
	
КонецФункции // РеестрСобытий()

// Установить время последнего такта
//
// Параметры:
//  Значение - ДатаВремя, новое значение
//
Процедура УстановитьВремяПоследнегоТакта(Значение) Экспорт
	
	глКонтекст.ВремяПоследнегоТакта = Значение;
	
КонецПроцедуры // УстановитьВремяПоследнегоТакта()

// Установить время последнего такта записи
//
// Параметры:
//  Значение - ДатаВремя, новое значение
//
Процедура УстановитьВремяПоследнегоТактаЗаписи(Значение) Экспорт
	
	глКонтекст.ВремяПоследнегоТактаЗаписи = Значение;
	
КонецПроцедуры // УстановитьВремяПоследнегоТактаЗаписи()

// Установить время начала такта
//
// Параметры:
//  Значение - ДатаВремя, новое значение
//
Процедура УстановитьВремяНачалаТакта(Значение) Экспорт
	
	глКонтекст.ВремяНачалаТакта = Значение;
	
КонецПроцедуры // УстановитьВремяНачалаТакта()

// Установить признак выполнения сценария
//
// Параметры:
//  Значение - Булево, новое значение
//
Процедура УстановитьСценарийВыполняется(Значение) Экспорт
	
	глКонтекст.СценарийВыполняется = Значение;
	
КонецПроцедуры // УстановитьСценарийВыполняется()

// Установить следующее состояние
//
// Параметры:
//  Значение - Строка, новое значение
//
Процедура УстановитьСледующееСостояние(Значение) Экспорт
	
	глКонтекст.СледующееСостояние = Значение;
	
КонецПроцедуры // УстановитьСледующееСостояние()

// Установить текущее состояние
//
// Параметры:
//  Значение - Строка, новое значение
//
Процедура УстановитьТекущееСостояние(Значение) Экспорт
	
	глКонтекст.ТекущееСостояние = Значение;
	
КонецПроцедуры // УстановитьТекущееСостояние()


///////////////////////////////////////////////////////////////////////////////
// ВЫЧИСЛЯЕМЫЕ

// Получить масштаб просмотра
//
// Возвращаемое значение:
//  Число - масштаб просмотра, т.е. количество записей в видимой области
//
Функция МасштабПросмотра() Экспорт
	
	Возврат КонецИнтервала() - НачалоИнтервала() + 1;
	
КонецФункции // МасштабПросмотра()

// Получить позицию просмотра
//
// Возвращаемое значение:
//  Число - позиция просмотра, т.е. запись начала видимой области
//
Функция ПозицияПросмотра() Экспорт
	
	Возврат НачалоИнтервала() + Окр(МасштабПросмотра() / 2);
	
КонецФункции // ПозицияПросмотра()

// Получить ширину границы просмотра
//
// Возвращаемое значение:
//  Число - ширина границы просмотра
//
Функция ШиринаГраницыПросмотра() Экспорт
	
	Возврат КонецГраницыПросмотра() - НачалоГраницыПросмотра() + 1;
	
КонецФункции // ШиринаГраницыПросмотра()

// Получить ширину интервала
//
// Возвращаемое значение:
//  Число - ширина интервала просмотра
//
Функция ШиринаИнтервала(Контекст) Экспорт
	
	Возврат КонецИнтервала() - НачалоИнтервала() + 1;
	
КонецФункции // ШиринаИнтервала()

// Установить информационную базу
//
// Параметры:
//  Значение - СправочникСсылка.ИнформационнаяБаза, новое значение
//
Процедура УстановитьИнформационнаяБаза(Значение) Экспорт
	
	глКонтекст.ИнформационнаяБаза = Значение;
	
	КлиентскоеПриложение.УстановитьЗаголовок(
		глКонстанты.СинонимКонфигурации + " - [" + Строка(Значение) + "]");
	ФормаМонитора().Автозаголовок = Ложь;
	ФормаМонитора().Заголовок = "Монитор: " + Строка(Значение);
	
КонецПроцедуры // УстановитьИнформационнаяБаза()
