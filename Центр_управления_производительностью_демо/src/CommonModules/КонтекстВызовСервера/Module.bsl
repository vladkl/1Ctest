
///////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧЕНИЯ

// Получить подключение к информационной базе
//
// Возвращаемое значение:
//  Структура - (см. ИнформационнаяБаза.ПодключениеИБ())
//
Функция ПодключениеИБ(ИБ) Экспорт
	
	ПодключениеИБ = ИнформационнаяБаза.ПодключениеИБ(
		ИБ);
	
	Возврат ПодключениеИБ;
	
КонецФункции // ПодключениеИБ()

// Получить словарь метаданных состоящий из шаблонов имен таблиц
// При первом обращении, подключается к ИБ, получает структуру базы, получает
// словарь и сохраняет в контексте.
//
// Возвращаемое значение:
//  Соответствие, Названия таблиц в терминах метаданных 1С, возвращаемое значение.
//
Функция СловарьШаблонов(ПодключениеИБ) Экспорт
	
	СловарьШаблонов =
		СтруктураМетаданных.ПолучитьСловарьШаблоновМетаданных(
			СтруктураХраненияБазы(ПодключениеИБ));
		
	Возврат СловарьШаблонов;
	
КонецФункции // СловарьШаблонов()

// Получить COM-соедиение с информационной базой
//
// Возвращаемое значение:
//  COM-Соедиение - (см. ИнформационнаяБаза.СоединениеИБ())
//
Функция Соединитель(глКонтекст) Экспорт
	
	Если глКонтекст.Соединитель = Неопределено Тогда
		глКонтекст.Соединитель = ОбщегоНазначения.ПолучитьComСоединитель();
	КонецЕсли;
		
	Возврат глКонтекст.Соединитель;
	
КонецФункции // Соединитель()

// Получить COM-соедиение с информационной базой
//
// Возвращаемое значение:
//  COM-Соедиение - (см. ИнформационнаяБаза.СоединениеИБ())
//
Функция СоединениеИБ(ПодключениеИБ) Экспорт
	
	СоединениеИБ = ИнформационнаяБаза.СоединениеИБ(ПодключениеИБ);
	
	Возврат СоединениеИБ;
	
КонецФункции // СоединениеИБ()

// Получить список соединений с рабочими процессами
//
// Возвращаемое значение:
//  Массив - подключения к рабочим процессам
//
Функция СоединенияРП(Соединитель, ПодключениеИБ, СоединенияРП, НачалоСоединенияРП, ИнтервалОбновленияПодключенийРП) Экспорт
	
	Если ТекущаяДата() - НачалоСоединенияРП > ИнтервалОбновленияПодключенийРП Тогда
		Если СоединенияРП = Неопределено Тогда
			СоединенияРП = ИнформационнаяБаза.СоздатьСоединенияРП();
		КонецЕсли;
		
		//ПодключениеИБ = глКонтекст.ПодключениеИБ;
		ИнформационнаяБаза.ОбновитьСоединенияРП(
			СоединенияРП,
			Соединитель, //Соединитель(глКонтекст),
			ПодключениеИБ.АгентСервера,
			ПодключениеИБ.ПараметрыИБ.ПортКластера,
			ПодключениеИБ.ИнформационнаяБаза.ИмяПользователяИБ,
			ПодключениеИБ.ИнформационнаяБаза.ПарольПользователяИБ);
		НачалоСоединенияРП = ТекущаяДата();
	КонецЕсли;
		
	Возврат СоединенияРП;
	
КонецФункции // СоединенияРП()

// Функция возвращает структуру хранения базы данных в виде ТаблицыЗначений.
// При первом обращении к структуре, подключется к ИБ, получает структуру базы
// и сохраняет в контексте.
//
// Возвращаемое значение:
//  ТаблицаЗначений, Структура хранения базы данных
//
Функция СтруктураХраненияБазы(ПодключениеИБ) Экспорт
	
	Com = СтруктураМетаданных.ПолучитьСтруктуруХранения(СоединениеИБ(ПодключениеИБ));
	ТЗ = СтруктураМетаданных.СтруктураБазыИзComВТаблицуЗначений(Com);
	
	Возврат ТЗ;
	
КонецФункции // СтруктураХраненияБазы()

// Функция возвращает структуру хранения базы данных в виде ТаблицыЗначений.
// При первом обращении к структуре, подключется к ИБ, получает структуру базы
// и сохраняет в контексте. Структура в терминах SDBL
//
// Возвращаемое значение:
//  ТаблицаЗначений, Структура хранения базы данных
//
Функция СтруктураХраненияБазыSDBL(ПодключениеИБ) Экспорт
	
	Com = СтруктураМетаданных.ПолучитьСтруктуруХранения(СоединениеИБ(ПодключениеИБ), Ложь);
	ТЗ = СтруктураМетаданных.СтруктураБазыИзComВТаблицуЗначений(Com);
	
	Возврат ТЗ;
	
КонецФункции // СтруктураХраненияБазыSDBL()

// Получить тип СУБД
//
// Возвращаемое значение:
//  Перечисление.ТипСУБД - тип исследуемой СУБД
//
Функция ТипСУБД(ПодключениеИБ) Экспорт
	
	ТипСУБД = СУБД.ПолучитьТипСУБД(ПодключениеИБ.ИБ.DBMS);
	
	Возврат ТипСУБД;
	
КонецФункции // ТипСУБД()

// Получить версию СУБД
//
// Возвращаемое значение:
//  Число, версия СУБД
//
Функция ВерсияСУБД(ПодключениеИБ, ИмяСервераСУБД, ИмяСервераИБ, СпособАутентификации, Логин, Пароль) Экспорт
	
	ТипСУБД = ТипСУБД(ПодключениеИБ);
	
	Если ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer") Тогда
		ОбъектВК = КипВнешнийКомпонент.ПолучитьMSSQL();
		MSSQL.ПодключитьMSSQLПоИмениСервера(ОбъектВК, ИмяСервераСУБД, ИмяСервераИБ, СпособАутентификации, Логин, Пароль);
	Иначе
		ОбъектВК = Неопределено;
	КонецЕсли;
	
	ВерсияСУБД = СУБД.ПолучитьВерсиюСУБД(ТипСУБД, ОбъектВК);
	
	Возврат ВерсияСУБД;
	
КонецФункции // ВерсияСУБД()

// Получить тип ОС сервера СУБД
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипОС
//
Функция ТипОССервераСУБД(ОписаниеИБ) Экспорт
	
	Если ОписаниеИБ.ТипСУБД = ПредопределенноеЗначение("Перечисление.ТипыСУБД.MSSQLServer") Тогда
		ТипОС = MSSQL.ТипОССервераСУБД(ОписаниеИБ);
	Иначе
		ТипОС = Перечисления.ТипыОС.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТипОС;
	
КонецФункции // ТипОССервераСУБД()

// Получить режим управления блокировкой данных
//
// Возвращаемое значение:
//  РежимУправленияБлокировкойДанныхПоУмолчанию - режим управления блокировками
//
Функция РежимУправленияБлокировкойДанных(ПодключениеИБ) Экспорт
	
	СоединениеИБ = СоединениеИБ(ПодключениеИБ);
	Режим = ИнформационнаяБаза.РежимУправленияБлокировкойДанных(СоединениеИБ);
	ТипРежима = СоединениеИБ.Метаданные.СвойстваОбъектов.РежимУправленияБлокировкойДанныхПоУмолчанию;
	
	Если Режим = ТипРежима.Автоматический Тогда
		Режим = Перечисления.РежимыУправленияБлокировкойДанных.Автоматический;
	ИначеЕсли Режим = ТипРежима.АвтоматическийИУправляемый Тогда
		Режим = Перечисления.РежимыУправленияБлокировкойДанных.АвтоматическийИУправляемый;
	ИначеЕсли Режим = ТипРежима.Управляемый Тогда
		Режим = Перечисления.РежимыУправленияБлокировкойДанных.Управляемый;
	КонецЕсли;
		
	
	Возврат Режим;
	
КонецФункции // РежимУправленияБлокировкойДанных()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьРеквизитыСценария(Сценарий) Экспорт
	
	РеквизитыСценария = Новый Структура("НачальноеСостояние,Интерактивный");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сценарии.НачальноеСостояние КАК НачальноеСостояние,
	               |	Сценарии.Интерактивный КАК Интерактивный
	               |ИЗ
	               |	Справочник.Сценарии КАК Сценарии
	               |ГДЕ
	               |	Сценарии.Ссылка = &Сценарий";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСценария, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыСценария;
	
КонецФункции // ПолучитьРеквизитыСценария()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьОписаниеКоманд() Экспорт
	
	ОписаниеКоманд = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Команда.Ссылка КАК Ссылка,
	|	Команда.Код КАК Код
	|ИЗ
	|	Справочник.Команды КАК Команда";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеКоманд.Вставить(Выборка.Ссылка, СокрЛП(Выборка.Код));
	КонецЦикла;
	
	Возврат ОписаниеКоманд;
	
КонецФункции // ПолучитьТаблицуКоманд()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьОписаниеПоказателей() Экспорт
	
	ОписаниеПоказателей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Показатель.Код КАК Код,
	               |	Показатель.Наименование КАК Наименование,
	               |	Показатель.ГраницаЗЖ КАК ГраницаЗЖ,
	               |	Показатель.ГраницаЖК КАК ГраницаЖК,
	               |	Показатель.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Показатель.Интерактивный КАК Интерактивный,
	               |	Показатель.Линия КАК ЛинияХранилищеЗначения,
	               |	Показатель.Масштаб КАК Масштаб,
	               |	Показатель.Цвет КАК ЦветХранилищеЗначения,
	               |	Показатель.Тип КАК Тип,
	               |	Показатель.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Показатели КАК Показатель
	               |ГДЕ
	               |	НЕ Показатель.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияРеквизитов = Новый Структура("Код,Наименование,ГраницаЗЖ,ГраницаЖК,ЕдиницаИзмерения,
			|Интерактивный,Линия,Масштаб,Цвет,Тип");
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
		ЗначенияРеквизитов.Цвет = Выборка.ЦветХранилищеЗначения.Получить();
		ЗначенияРеквизитов.Линия = Выборка.ЛинияХранилищеЗначения.Получить();
		
		ОписаниеПоказателей.Вставить(Выборка.Ссылка, ЗначенияРеквизитов);
	КонецЦикла;
	
	Возврат ОписаниеПоказателей;
	
КонецФункции // ПолучитьОписаниеПоказателей()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнициализироватьКэшКонстант() Экспорт
	
	КэшКонстант = Новый Структура;
	КэшКонстант.Вставить("СинонимКонфигурации", ОбщегоНазначенияВызовСервера.ПолучитьСиноним());
	КэшКонстант.Вставить("МасштабПоУмолчанию", ОбщегоНазначенияВызовСервера.ПолучитьМасштабПоУмолчанию());
	
	Возврат КэшКонстант;

КонецФункции // ИнициализироватьКэшКонстант()

