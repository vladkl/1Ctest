
// Записать текущие значения показателей производительности
//
Процедура ЗаписатьЗначенияПП(ИБ, Показатели, ЧастотаМониторинга, НомерЗаписи) Экспорт
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ЖурналПоказателей.СоздатьНаборЗаписей();
	Дата = ТекущаяДата();
	
	// Добавить в набор значения всех показателей
	НачатьТранзакцию();
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		
		Блокировка = Новый БлокировкаДанных;
		СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналПоказателей");
		СтрокаБлокировки.УстановитьЗначение("ИнформационнаяБаза", ИБ);
		СтрокаБлокировки.УстановитьЗначение("Показатель", СтрокаПоказателя.Показатель);
		СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//Блокировка.Заблокировать();
		
		Если Не СтрокаПоказателя.Запись
		 Или Не СтрокаПоказателя.Показатель.Интерактивный Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьНабораЗаписей = НаборЗаписей.Добавить();
		ЗаписьНабораЗаписей.ИнформационнаяБаза = ИБ;
		ЗаписьНабораЗаписей.Период = Дата;
		ЗаписьНабораЗаписей.Год = Год(Дата);
		ЗаписьНабораЗаписей.Месяц = Месяц(Дата);
		ЗаписьНабораЗаписей.День = День(Дата);
		ЗаписьНабораЗаписей.Час = Час(Дата);
		ЗаписьНабораЗаписей.Минута = Минута(Дата);
		ЗаписьНабораЗаписей.Показатель = СтрокаПоказателя.Показатель;
		ЗаписьНабораЗаписей.НомерЗаписи = НомерЗаписи;
		ЗаписьНабораЗаписей.Значение = СтрокаПоказателя.Значение;
		ЗаписьНабораЗаписей.ГраницаЖК = СтрокаПоказателя.ГраницаЖК;
		ЗаписьНабораЗаписей.ГраницаЗЖ = СтрокаПоказателя.ГраницаЗЖ;
		ЗаписьНабораЗаписей.Шаг = ЧастотаМониторинга;
	КонецЦикла;
	
	// Записать показатели производительности в журнал
	НаборЗаписей.Записать(Ложь);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ЗаписатьЗначенияПП()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьКаталогиТЖ(ИБ) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационнаяБазаИменаКаталоговТЖ.НомерСтроки КАК НомерСтроки,
	               |	ИнформационнаяБазаИменаКаталоговТЖ.СерверКластера КАК СерверКластера,
	               |	ИнформационнаяБазаИменаКаталоговТЖ.Конфигурация КАК Конфигурация,
	               |	ИнформационнаяБазаИменаКаталоговТЖ.Локальный КАК Локальный,
	               |	ИнформационнаяБазаИменаКаталоговТЖ.Сетевой КАК Сетевой
	               |ИЗ
	               |	Справочник.ИнформационныеБазы.ИменаКаталоговТЖ КАК ИнформационнаяБазаИменаКаталоговТЖ
	               |ГДЕ
	               |	ИнформационнаяБазаИменаКаталоговТЖ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ИБ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТЖ = Новый Структура("НомерСтроки,СерверКластера,Конфигурация,Локальный,Сетевой");
		ЗаполнитьЗначенияСвойств(СтрокаТЖ, Выборка);
		Результат.Добавить(СтрокаТЖ);
	КонецЦикла;
	
	Возврат Результат;
	
	
КонецФункции // ПолучитьКаталогиТЖ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьПравильностьЗаполненияКаталоговТЖ(ИБ) Экспорт
	
	Расположения = МониторингВызовСервера.ПолучитьКаталогиТЖ(ИБ);
	
	Если Расположения.Количество() = 0 Тогда
		Возврат СловарьКлиентСервер.Получить("ОшибкаНеУказаноРасположениеТЖ");
	КонецЕсли;
	
	Для Каждого СтрокаРасположения Из Расположения Цикл
		Незаполненный = ОбщегоНазначенияКлиентСервер.НайтиНезаполненныйРеквизит(
			СтрокаРасположения, "Конфигурация, Локальный, Сетевой");
		
		Если Незаполненный <> Неопределено Тогда
			Синоним = ОбщегоНазначенияКлиентСервер.СинонимРеквизита(
				ИБ.Метаданные().ТабличныеЧасти.ИменаКаталоговТЖ.Реквизиты,
				Незаполненный);
			Возврат СловарьКлиентСервер.Получить("ЗначениеНеЗаполнено", Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПроверитьПравильностьЗаполненияКаталоговТЖ()

// Проверить настройки трассировки
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//
// Возвращаеоме значение:
//  Строка - Описание того, что не настроено, Неопределено - все настроено
//
Функция ТрассировкаНастроена(ИБ) Экспорт
	
	Незаполненный = ОбщегоНазначенияКлиентСервер.НайтиНезаполненныйРеквизит(
		ИБ, "КаталогТрассировкиЛокальный");
	
	Если Незаполненный <> Неопределено Тогда
		Синоним = ОбщегоНазначенияКлиентСервер.СинонимРеквизита(ИБ.Метаданные().Реквизиты, Незаполненный);
		Возврат СловарьКлиентСервер.Получить("ЗначениеНеЗаполнено", Синоним);
	КонецЕсли;
	
КонецФункции // ТрассировкаНастроена()
