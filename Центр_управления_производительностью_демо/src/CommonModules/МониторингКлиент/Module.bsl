///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОКАЗАТЕЛЯМИ ПРОИЗВОДИТЕЛЬНОСТИ

// Функция возвращает количество записей показателей производительности
// на логической странице
//
// Возвращаемое значение:
//  Число - количество записей на странице
//
Функция ПолучитьКоличествоЗаписейНаСтранице() Экспорт
	
	Возврат 60;
	
КонецФункции // ПолучитьКоличествоЗаписейНаСтранице()

// Получить масштаб по первой и последней записи просматриваемого интервала
//
// Параметры:
//  НачалоИнтервала - Дата, начало просматриваемого интервала
//  КонецИнтервала - Дата, конец просматриваемого интервала
//
// Возвращаемое значение:
//  Число - количество записей на странице
//
Функция ПолучитьМасштаб(НачалоИнтервала, КонецИнтервала) Экспорт
	
	Возврат КонецИнтервала - НачалоИнтервала + 1;
	
КонецФункции // ПолучитьМасштаб()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьКолонкуПоказателя(Показатели, ИмяКолонки, Значение)
	
	Для Каждого ТекСтр Из Показатели Цикл
		ТекСтр.Вставить(ИмяКолонки, Значение);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьКолонкуПоказателя()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЖУРНАЛОМ ПОКАЗАТЕЛЕЙ ПРОИЗВОДИТЕЛЬНОСТИ

// Получить номер страницы на которой расположена запись
//
// Параметры:
//  МоментВремени - Дата, время, для которого определеятся номер страницы
//  НачалоГраницы - Дата, начало границы просмотра
//  Масштаб - Число, количество записей в группе записей
//
// Возвращаемое значение:
//  Число - Номер страницы на которой расположена запись
//
Функция ПолучитьНомерСтраницы(МоментВремени, НачалоГраницы, Масштаб)
	
	Возврат Цел((МоментВремени - НачалоГраницы) / Масштаб);
	
КонецФункции // ПолучитьНомерСтраницы()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПОКАЗАТЕЛЕЙ ПРОИЗВОДИТЕЛЬНОСТИ

// Получить текущие значения показателей производительности
//
// Параметры:
//  СлужебныйТакт - Булево, Истина - обработка накопительных показателей
//
Процедура ПолучитьЗначенияПП(СлужебныйТакт = Ложь) Экспорт
	
	Показатели = Контекст.Показатели();
	
	Если Показатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаданияСбораПоказателей = Контекст.ИдентификаторЗаданияСбораПоказателей();
	Если Не ЗначениеЗаполнено(ИдентификаторЗаданияСбораПоказателей) Тогда
		ИдентификаторЗаданияСбораПоказателей = 
			ПоказателиПроизводительности.ЗапуститьСборПоказателей(Контекст.ИнформационнаяБаза(), Показатели);
		Контекст.УстановитьИдентификаторЗаданияСбораПоказателей(ИдентификаторЗаданияСбораПоказателей);
	КонецЕсли;
	
	СообщенияОбмена = ПоказателиПроизводительности.ПолучитьСообщения(
		ИдентификаторЗаданияСбораПоказателей,
		ПредопределенноеЗначение("Перечисление.НаправленияСообщенийОбмена.СерверКлиент")
	);
	
	Для Каждого ТекСообщение Из СообщенияОбмена Цикл
		НовыеЗначенияПоказателей = ТекСообщение.ТелоСообщения.Параметры;
		ДобавитьПолученныеЗначенияПоказателей(глКонтекст.Показатели, НовыеЗначенияПоказателей);
	КонецЦикла;
	
	Если СлужебныйТакт Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьНовыеЗначенияПоказателей();
	ПересчитатьАгрегатныеЗначения();
	ДобавитьНовыеГраницыПП();
	
	ФормаМонитора().ПриОбновленииЗначенийПоказателей();
	РассчитатьЗначенияПоказателей();
	
КонецПроцедуры // ПолучитьЗначенияПП()

// Записать текущие значения показателей производительности
//
Процедура ЗаписатьЗначенияПП() Экспорт
	
	// Проверка необходимости записи
	ЗаписьНеобходима = Ложь;
	Показатели = Контекст.Показатели();
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если Не СтрокаПоказателя.Запись Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьНеобходима = Истина;
		
		Прервать;
	КонецЦикла;
	
	Если Не ЗаписьНеобходима Тогда
		Возврат;
	КонецЕсли;
	
	ИБ = Контекст.ИнформационнаяБаза();
	Показатели = Контекст.Показатели();
	ЧастотаМониторинга = Контекст.ЧастотаМониторинга();
	НомерЗаписи = Контекст.НомерЗаписиВЖурналеПоказателей();
	МониторингВызовСервера.ЗаписатьЗначенияПП(ИБ, Показатели, ЧастотаМониторинга, НомерЗаписи);
	
	Контекст.УстановитьНомерЗаписиВЖурналеПоказателей(
		Контекст.НомерЗаписиВЖурналеПоказателей() + 1);
	
КонецПроцедуры // ЗаписатьЗначенияПП()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ДобавитьПолученныеЗначенияПоказателей(Показатели, НовыеЗначения)
	
	Для Каждого ТекСтр Из Показатели Цикл
		СтрокаЗначений = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(НовыеЗначения, "Показатель", ТекСтр.Показатель);
		Если СтрокаЗначений <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекСтр, СтрокаЗначений, "Данные,Значение,Максимальное,Минимальное,НакопленнаяДлительность,Среднее,Сумма");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПолученныеЗначенияПоказателей()

// Обновить текущие значения показателей производительности
//
Процедура ОбновитьЗначенияПоказателей() Экспорт
	
	Если Контекст.ПросмотрВключен() Тогда
	
		ФормаМонитора().ПередОбновлениемЗначенийПоказателей();
		
		// Подготовка
		Если Не ЗначениеЗаполнено(Контекст.НачалоГраницыПросмотра())
		 Или Не ЗначениеЗаполнено(Контекст.КонецГраницыПросмотра()) Тогда
			ИнтерфейсыКлиент.Предупредить(СловарьКлиентСервер.Получить("ПредупреждениеЗначенияПоказателейНеНайдены"));
			КомандыКлиент.ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ПрерватьВыполнениеСценария"));
			Возврат;
		КонецЕсли;
		
		КоличествоЗаписейНаСтранице = МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице();
		
		Масштаб = ПолучитьМасштаб(
			Контекст.НачалоИнтервала(),
			Контекст.КонецИнтервала());
			
		РазмерТочки = Масштаб / КоличествоЗаписейНаСтранице;
		ПоловинаРазмераТочки = Цел(РазмерТочки / 2);
		
		НомерПервойСтраницы = ПолучитьНомерСтраницы(
			Контекст.НачалоИнтервала(),
			Контекст.НачалоГраницыПросмотра(),
			Масштаб);
			
		НомерВторойСтраницы = ПолучитьНомерСтраницы(
			Контекст.КонецИнтервала(),
			Контекст.НачалоГраницыПросмотра(),
			Масштаб);
			
		Показатели = ВыгрузитьКолонку(Контекст.Показатели(), "Показатель");
		
		// Очистить значения показателей
		ЗаполнитьЗначения(Контекст.ЗначенияПоказателей(), Неопределено);
		ЗаполнитьЗначения(Контекст.ГраницыЗонПоказателей(), Неопределено);
		Контекст.УстановитьГраницыДополнены(Ложь);
		
		// Создать кэш при необходимости
		Кэш = Контекст.КэшСтраниц();
		Если Кэш.Масштаб <> Масштаб Тогда
			Контекст.ОчиститьКэш(Кэш, Масштаб);
		КонецЕсли;
		
		СтраницыДляОтображения = ЖурналПоказателей.ПолучитьСтраницыДляОтображения(
			Контекст.ИнформационнаяБаза(),
			Показатели, Масштаб, Контекст.НачалоИнтервала(),
			Контекст.НачалоГраницыПросмотра(), Контекст.КонецГраницыПросмотра(),
			НомерПервойСтраницы, НомерВторойСтраницы,
			КоличествоЗаписейНаСтранице,
			Кэш);
		
		// Обработка первой страницы
		ОписаниеСтраницы = СтраницыДляОтображения.ПерваяСтраница;
		НачалоНаСтранице = СтраницыДляОтображения.НачалоНаСтранице;
		КонецНаСтранице = КоличествоЗаписейНаСтранице - 1;
		КоличествоОбновленных = КонецНаСтранице - НачалоНаСтранице + 1;
		
		ОбновитьЗначенияПоказателейСоСтраницы(
			ОписаниеСтраницы,
			НачалоНаСтранице,
			КонецНаСтранице,
			0);
		
		// Обработка второй страницы
		Если СтраницыДляОтображения.Свойство("ВтораяСтраница") Тогда
			ОписаниеСтраницы = СтраницыДляОтображения.ВтораяСтраница;
			КонецНаСтранице = НачалоНаСтранице - 1;
			НачалоНаСтранице = 0;
			
			ОбновитьЗначенияПоказателейСоСтраницы(ОписаниеСтраницы, НачалоНаСтранице, КонецНаСтранице, КоличествоОбновленных);
			КоличествоОбновленных = КоличествоОбновленных + КонецНаСтранице - НачалоНаСтранице + 1;
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьАгрегатныеЗначения();
	
	Если Контекст.ПросмотрВключен() Тогда
		ФормаМонитора().ПриОбновленииЗначенийПоказателей();
		ФормаМонитора().ПослеОбновленияЗначенийПоказателей();
		ОбновитьГраницыПП();
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗначенияПоказателей()

// Отключить запись ПП, для которых закончилось время записи
//
Процедура ОтключитьВременнуюЗаписьПП() Экспорт
	
	Показатели = Контекст.Показатели();
	ТекущаяДата = ТекущаяДата();
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если Не СтрокаПоказателя.Запись Или СтрокаПоказателя.ДлительностьЗаписи = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДлительностьЗаписи = ТекущаяДата - СтрокаПоказателя.ВремяВключенияЗаписи;
		
		Если ДлительностьЗаписи > СтрокаПоказателя.ДлительностьЗаписи
		 Или СтрокаПоказателя.НакопленнаяДлительность > СтрокаПоказателя.МаксимальнаяДлительностьВЗоне Тогда
			КомандыКлиент.ВыполнитьКоманду(
				ПредопределенноеЗначение("Справочник.Команды.ВыключитьЗаписьЗначенийПП"),
				СтрокаПоказателя.Показатель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОтключитьВременнуюЗаписьПП()

// Выполнить дополнительные расчеты над значениями показателей
// производительности
//
Процедура РассчитатьЗначенияПоказателей()
	
	Показатели = Контекст.Показатели();
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		
		// Если у показателя установлено отслеживание момента отключения записи
		Если СтрокаПоказателя.НеЗаписывать = Истина Тогда
			СтрокаДопПоказателя = Показатели.Найти(
				СтрокаПоказателя.ДополнительныйПоказатель,
				"Показатель");
			
			// Вычислить количество секунд прошедших с начала записи показателя
			ВремяЗаписи = Контекст.ВремяНачалаТакта() - СтрокаПоказателя.ВремяВключенияЗаписи;
			
			// Если технологический журнал уже точно включен
			Если ВремяЗаписи > 60 Тогда
				Зона = СтрокаПоказателя.ЗонаДополнительногоПоказателя;
				ВЗоне = Ложь;
				
				// Определить, находится ли доп. показатель в отслеживаемой зоне
				Если Зона = ПредопределенноеЗначение("Перечисление.ЗоныЗначенийПоказателей.Зеленая") Тогда
					ВЗоне = СтрокаДопПоказателя.Значение <= СтрокаДопПоказателя.ГраницаЗЖ;
				ИначеЕсли Зона = ПредопределенноеЗначение("Перечисление.ЗоныЗначенийПоказателей.Желтая") Тогда
					ВЗоне =
						СтрокаДопПоказателя.Значение <= СтрокаДопПоказателя.ГраницаЖК И
						СтрокаДопПоказателя.Значение > СтрокаДопПоказателя.ГраницаЗЖ;
				ИначеЕсли Зона = ПредопределенноеЗначение("Перечисление.ЗоныЗначенийПоказателей.Красная") Тогда
					ВЗоне = СтрокаДопПоказателя.Значение > СтрокаДопПоказателя.ГраницаЖК;
				КонецЕсли;
				
				// Если в зоне, но увеличить накапливаемую длительность
				Если ВЗоне Тогда
					СтрокаПоказателя.НакопленнаяДлительность =
						СтрокаПоказателя.НакопленнаяДлительность +
						(Контекст.ВремяНачалаТакта() - Контекст.ВремяПоследнегоТакта());
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // РассчитатьЗначенияПоказателей()


///////////////////////////////////////////////////////////////////////////////
// ПОКАЗАТЕЛИ ПРОИЗВОДИТЕЛЬНОСТИ

// Добавить показатель производительности
//
Процедура ДобавитьПоказатель(ОбновлятьЦвета = Истина) Экспорт
	
	Показатель = Контекст.ПараметрыКоманды();
	
	Если Не Контекст.ПросмотрВключен()
	   И Не ПоказателиПроизводительности.ВозможноИспользовать(Показатель, Контекст.ИнформационнаяБаза()) Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление показателя на клиенте
	ЗначенияРеквизитовПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(Показатель);
	
	СтрокаПоказателя = Контекст.ПолучитьШаблонПоказателей();
	СтрокаПоказателя.Показатель = Показатель;
	СтрокаПоказателя.Запись = Ложь;
	СтрокаПоказателя.ЕдиницаИзмерения = ЗначенияРеквизитовПоказателя.ЕдиницаИзмерения;
	СтрокаПоказателя.Цвет = ЗначенияРеквизитовПоказателя.Цвет;
	СтрокаПоказателя.Линия = ЗначенияРеквизитовПоказателя.Линия;
	СтрокаПоказателя.ПредыдущийМасштаб = ЗначенияРеквизитовПоказателя.Масштаб;
	СтрокаПоказателя.Масштаб = ЗначенияРеквизитовПоказателя.Масштаб;
	СтрокаПоказателя.КодПоказателя = ЗначенияРеквизитовПоказателя.Код;
	СтрокаПоказателя.ГраницаЖК = ЗначенияРеквизитовПоказателя.ГраницаЖК;
	СтрокаПоказателя.ГраницаЗЖ = ЗначенияРеквизитовПоказателя.ГраницаЗЖ;
	СтрокаПоказателя.Экземпляр = Строка(Новый УникальныйИдентификатор);
	СтрокаПоказателя.НеЗаписывать = Ложь;
	СтрокаПоказателя.НакопленнаяДлительность = 0;
	СтрокаПоказателя.МаксимальнаяДлительностьВЗоне = 0;
	
	ДобавитьПоказательСУпорядочиванием(Контекст.Показатели(), СтрокаПоказателя);
	
	// Настройка отображения показателя в мониторе
	УстановитьПредставлениеМасштаба(СтрокаПоказателя);
	ДобавитьКолонкуПоказателяВЗначенияПоказателей(Контекст.ПараметрыКоманды());
	ДобавитьГраницуПоказателя(Показатель);
	
	Если ОбновлятьЦвета Тогда
		ФормаМонитора().СинхронизироватьЦветаПоказателейНаГрафике();
		ФормаМонитора().ОбновитьЦветаПоказателейНаСервере();
	КонецЕсли;
	
	// Добавление сбора показателя на сервере (в фоновом задании)
	ИдентификаторЗадания = Контекст.ИдентификаторЗаданияСбораПоказателей();
	Если ИдентификаторЗадания <> Неопределено Тогда
		ОписаниеПоказателя = Контекст.ПолучитьШаблонПоказателей();
		ОписаниеПоказателя.Показатель = Показатель;
		ПоказателиПроизводительности.ДобавитьСборПоказателя(ИдентификаторЗадания, ОписаниеПоказателя);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПоказатель()

// Изменить показатель производительности
//
Процедура ИзменитьПоказатель() Экспорт
	
	Показатель = Контекст.ПараметрыКоманды();
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Контекст.Показатели(), 
		"Показатель", Показатель
	);
	
	РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(Показатель);
	СтрокаПоказателя.Цвет = РеквизитыПоказателя.Цвет;
	СтрокаПоказателя.Линия = РеквизитыПоказателя.Линия;
	СтрокаПоказателя.ПредыдущийМасштаб = СтрокаПоказателя.Масштаб;
	СтрокаПоказателя.Масштаб = РеквизитыПоказателя.Масштаб;
	
	УстановитьПредставлениеМасштаба(СтрокаПоказателя);
	
	Если СтрокаПоказателя.ПредыдущийМасштаб <> СтрокаПоказателя.Масштаб Тогда
		ПересчитатьМасштабПоказателя(Контекст.ПараметрыКоманды());
	КонецЕсли;
	
	СтрокаПоказателя.ГраницаЖК = РеквизитыПоказателя.ГраницаЖК;
	СтрокаПоказателя.ГраницаЗЖ = РеквизитыПоказателя.ГраницаЗЖ;
	МониторингКлиент.ОбновитьГраницыПП();
	
	ФормаМонитора().СинхронизироватьЦветаПоказателейНаГрафике();
	ФормаМонитора().ОбновитьЦветаПоказателейНаСервере();
	
КонецПроцедуры // ИзменитьПоказатель()

// Удалить показатель производительности
//
Процедура УдалитьПоказатель() Экспорт
	
	Показатель = Контекст.ПараметрыКоманды();
	Показатели = Контекст.Показатели();
	УдаляемыйПоказатель = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Показатель);
	
	Если Показатель = ПредопределенноеЗначение("Справочник.Показатели.КоличествоВзаимоблокировок")
		Или Показатель = ПредопределенноеЗначение("Справочник.Показатели.КоличествоТаймаутов") Тогда
		
		// Отключение сбора показателя на сервере (в фоновом задании)
		ИдентификаторЗадания = Контекст.ИдентификаторЗаданияСбораПоказателей();
		Если ИдентификаторЗадания <> Неопределено Тогда
			ОписаниеПоказателя = Контекст.ПолучитьШаблонПоказателей();
			ПоказателиПроизводительности.ОтменитьСборПоказателя(ИдентификаторЗадания, Показатель);
		КонецЕсли;
	КонецЕсли;
	
	ИндексПоказателя = Показатели.Найти(УдаляемыйПоказатель);
	Контекст.Показатели().Удалить(ИндексПоказателя);
	УдалитьКолонкуПоказателяИзЗначенийПоказателей(Контекст.ПараметрыКоманды());
	УдалитьГраницуПоказателя(Показатель);
	
	ФормаМонитора().СинхронизироватьЦветаПоказателейНаГрафике();
	
	Если Контекст.Показатели().Количество() = 0 Тогда
		Контекст.УстановитьПервыеЗначенияПоказателейПолучены(Ложь);
	КонецЕсли;
	
	Если Контекст.ПросмотрВключен() Тогда
		Контекст.ОчиститьКэшСтраниц();
	КонецЕсли;
	
КонецПроцедуры // УдалитьПоказатель()

// Выбрать показатель производительности интерактивно
//
Процедура ВыбратьПоказатель() Экспорт
	
	Перем Исключения;
	
	Если Контекст.ПросмотрВключен() Тогда
		
		ВсеПП = ОбщегоНазначения.ПолучитьСписокПоказателей();
		
		ДоступныеПП = ОбщегоНазначения.ПолучитьПоказателиИнформационнойБазы(
			Контекст.ИнформационнаяБаза(),
			Контекст.НачалоГраницыПросмотра(),
			Контекст.КонецГраницыПросмотра());
			
		Исключения = Новый Массив;
		
		Для Каждого Показатель Из ВсеПП Цикл
			
			Если ДоступныеПП.НайтиПоЗначению(Показатель) <> Неопределено Тогда
				СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Контекст.Показатели(), "Показатель", Показатель);
				Если СтрокаПоказателя = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Исключения.Добавить(Показатель);
			
		КонецЦикла;
		
	Иначе
		Исключения = ВыгрузитьКолонку(Контекст.Показатели(), "Показатель");
	КонецЕсли;
	
	// Получить и настроить форму выбора показателя производительности
	ПараметрыОткрытия = Новый Структура("Исключения,ПросмотрВключен", Исключения, Контекст.ПросмотрВключен());
	
	Если Контекст.МониторингВключен()
			Или Контекст.ПросмотрВключен() Тогда
		ИБ = Контекст.ИнформационнаяБаза();
		ПараметрыОткрытия.Вставить("ИБ", ИБ);
	КонецЕсли;
	
	// Открыть, выбрать и настроить показатель производительности
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПоказателяЗавершение", МониторингКлиент);
	ОткрытьФорму("ОбщаяФорма.ВыборПоказателя", ПараметрыОткрытия,,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ВыбратьПоказатель()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ВыборПоказателяЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("Показатели") Или Результат.Показатели = Неопределено Тогда
		Контекст.УстановитьПараметрыКоманды(Результат.Показатель);
		Контекст.ОчиститьКэшСтраниц();
		МониторингКлиент.ДобавитьПоказатель();
	Иначе
		Для Каждого ТекСтр Из Результат.Показатели Цикл
			Контекст.УстановитьПараметрыКоманды(ТекСтр);
			МониторингКлиент.ДобавитьПоказатель();
		КонецЦикла;
		Контекст.ОчиститьКэшСтраниц();
	КонецЕсли;
	
	// Холостой такт для избежания скачков
	Контекст.УстановитьПервыеЗначенияПоказателейПолучены(Ложь);
	КомандыКлиент.ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.ОбновитьПросмотрПоказателей"));
	
	Если Результат.Свойство("НастроитьПоказатель") И Результат.НастроитьПоказатель Тогда
		Контекст.УстановитьПараметрыКоманды(Результат.Показатель);
		НастроитьПоказатель();
	КонецЕсли;
	
КонецПроцедуры // ВыборПоказателяЗавершение()

// Настроить показатель производительности интерактивно
//
// Возвращаемое значение:
//  Булево - Истина, если показатель настроен
//
Функция НастроитьПоказатель() Экспорт
	
	Показатель = Контекст.ПараметрыКоманды();
	Если ТипЗнч(Показатель) = Тип("СправочникСсылка.Показатели") Тогда
		ДополнительныеПараметры = Новый Структура("Показатель", Показатель);
		ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьПоказательЗавершение", МониторингКлиент, ДополнительныеПараметры);
		ПараметрыФормы = Новый Структура("Ключ", Показатель);
		ОткрытьФорму("Справочник.Показатели.ФормаОбъекта", ПараметрыФормы,,,,, 
			ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс
		);
	Иначе
		ВызватьИсключение "Неправильный тип показателя";
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // НастроитьПоказатель()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура НастроитьПоказательЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Контекст.ИнициализироватьОписаниеПоказателей();
		Контекст.УстановитьПараметрыКоманды(ДополнительныеПараметры.Показатель);
		МониторингКлиент.ИзменитьПоказатель();
		Контекст.УстановитьПараметрыКоманды(Неопределено);
	КонецЕсли;
	
КонецПроцедуры // НастроитьПоказательЗавершение()

// Установить удобочитаемое представление масштаба
//
// Параметры:
//  СтрокаПоказателя - СтрокаТаблицыЗначений, строка показателя
//
Процедура УстановитьПредставлениеМасштаба(СтрокаПоказателя)
	
	СтрокаПоказателя.ПредставлениеМасштаба = "1 : "
	                                       + 1
	                                       / СтрокаПоказателя.Масштаб;
	
КонецПроцедуры // УстановитьПредставлениеМасштаба()

// Пересчитать масштаб указанного показателя производительности
//
// Параметры:
//  Показатель - СправочникСсылка.Показатель, обрабатываемый показатель
//
Процедура ПересчитатьМасштабПоказателя(Показатель)
	
	СтрокаПоказателя = ПолучитьСтрокуПоказателя(Показатель);
	
	РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(Показатель);
	
	КоэффициентМасштабирования = СтрокаПоказателя.Масштаб
	                           / СтрокаПоказателя.ПредыдущийМасштаб;
	
	КоличествоЗначений =
		МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице() - 1;
	
	Для Сч = 0 По КоличествоЗначений Цикл
		
		СтрокаЗначенийПоказателей = Контекст.ЗначенияПоказателей()[Сч];
		
		Если СтрокаЗначенийПоказателей[РеквизитыПоказателя.Код] <> Неопределено Тогда
			СтрокаЗначенийПоказателей[РеквизитыПоказателя.Код] =
				СтрокаЗначенийПоказателей[РеквизитыПоказателя.Код] *
				КоэффициентМасштабирования;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьМасштабПоказателя()

// Получить строку указанного показателя из таблицы показателей
//
// Параметры:
//  Показатель - СправочникСсылка.Показатель, обрабатываемый показатель
//
Функция ПолучитьСтрокуПоказателя(Показатель)
	
	СтрокаПоказателя = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Контекст.Показатели(), "Показатель", Показатель);
	
	Возврат СтрокаПоказателя;
	
КонецФункции // ПолучитьСтрокуПоказателя()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыгрузитьКолонку(Показатели, ИмяКолонки)
	
	КолонкаПоказателей = Новый Массив;
	Для Каждого ТекСтр Из Показатели Цикл
		КолонкаПоказателей.Добавить(ТекСтр[ИмяКолонки]);
	КонецЦикла;
	
	Возврат КолонкаПоказателей;
	
КонецФункции // ВыгрузитьКолонку()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗагрузитьКолонку(МассивСтруктур, ИмяРеквизита, МассивЗначений)
	
	Если МассивСтруктур.Количество() <> МассивЗначений.Количество() Тогда
		ВызватьИсключение "МассивСтруктур.Количество() <> МассивЗначений.Количество()";
	КонецЕсли;
	
	Сч = 0;
	Для Каждого СтрокаКоллекции Из МассивСтруктур Цикл
		СтрокаКоллекции[ИмяРеквизита] = МассивЗначений[Сч];
		Сч = Сч + 1;
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьКолонку()


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗаполнитьЗначения(Показатели, Значение)
	
	Для Каждого ТекСтр Из Показатели Цикл
		Для Каждого ТекКолонка Из ТекСтр Цикл
			ТекСтр[ТекКолонка.Ключ] = Значение;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначения()


///////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКА ПОКАЗАТЕЛЕЙ ПРОИЗВОДИТЕЛЬНОСТИ

// Проверить настройки показателя производительности
//
// Параметры:
//  Показатель - СправочникСсылка.Показатель
//
// Возвращаемое значение:
//  Строка - Описание того, что не настроено, Неопределено - все настроено
//
Функция ПоказательНастроен(Показатель) Экспорт
	
	Если Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализОжиданийНаБлокировках") Тогда
		Причина = ТЖНастроен(Контекст.ИнформационнаяБаза());
		Если Причина <> Неопределено Тогда
			Возврат Причина;
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализВзаимоблокировок") Тогда
		Причина = ТЖНастроен(Контекст.ИнформационнаяБаза());
		Если Причина <> Неопределено Тогда
			Возврат Причина;
		КонецЕсли;
		Причина = МониторингВызовСервера.ТрассировкаНастроена(Контекст.ИнформационнаяБаза());
		Если Причина <> Неопределено Тогда
			Возврат Причина;
		КонецЕсли;
	КонецЕсли;
	
	Если Показатель = ПредопределенноеЗначение("Справочник.Показатели.АнализЗапросов") Тогда
		Причина = ТЖНастроен(Контекст.ИнформационнаяБаза());
		Если Причина <> Неопределено Тогда
			Возврат Причина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПоказательНастроен()

// Проверить настройки технологического журнала
//
// Параметры:
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//
// Возвращаеоме значение:
//  Строка - Описание того, что не настроено, Неопределено - все настроено
//
Функция ТЖНастроен(ИБ)
	
	Результат = МониторингВызовСервера.ПроверитьПравильностьЗаполненияКаталоговТЖ(ИБ);
	
	Возврат Результат;
	
КонецФункции // ТЖНастроен()


///////////////////////////////////////////////////////////////////////////////
// ЗНАЧЕНИЯ ПОКАЗАТЕЛЕЙ ПРОИЗВОДИТЕЛЬНОСТИ

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьПоказательСУпорядочиванием(Показатели, НовыйПоказатель)
	
	Для Индекс = 0 По Показатели.Количество()-1 Цикл
		ТекПоказатель = Показатели[Индекс];
		Если ТекПоказатель.КодПоказателя > НовыйПоказатель.КодПоказателя Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Показатели.Вставить(Индекс, НовыйПоказатель);
	
КонецПроцедуры // ДобавитьПоказательСУпорядочиванием()


// Добавить колонку в таблицу значений показателей производительности
//
// Параметры:
//  Показатель - СправочникСсылка, показатель производительности
//
Процедура ДобавитьКолонкуПоказателяВЗначенияПоказателей(Показатель)
	
	РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(Показатель);
	Для Каждого ТекЭлемент Из Контекст.ЗначенияПоказателей() Цикл
		ТекЭлемент.Вставить(РеквизитыПоказателя.Код);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьКолонкуПоказателяВЗначенияПоказателей()

// Удалить колонку из таблицы значений показателей производительности
//
// Параметры:
//  Показатель - СправочникСсылка, показатель производительности
//
Процедура УдалитьКолонкуПоказателяИзЗначенийПоказателей(Показатель)
	
	РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(Показатель);
	Для Каждого ТекЭлемент Из Контекст.ЗначенияПоказателей() Цикл
		ТекЭлемент.Удалить(РеквизитыПоказателя.Код);
	КонецЦикла;
	
КонецПроцедуры // УдалитьКолонкуПоказателяИзЗначенийПоказателей()

// Добавить новые значения показателей производительности в таблицу
// значений показателей производительности
//
Процедура ДобавитьНовыеЗначенияПоказателей()
	
	ФормаМонитора().ПередОбновлениемЗначенийПоказателей();
	
	// Определить количество показателей производительности
	КоличествоПоказателей = Контекст.Показатели().Количество() - 1;
	
	// Сдвиг значений в источнике данных графиков
	Контекст.ЗначенияПоказателей().Удалить(0);
	СтрокаЗначенийПоказателя = Контекст.ПолучитьШаблонЗначенийПП();
	
	СтрокаЗначенийПоказателя.Время = Контекст.ВремяПоследнегоТакта();
	
	Для Сч = 0 По КоличествоПоказателей Цикл
		
		Показатель = Контекст.Показатели()[Сч];
		СтрокаЗначенийПоказателя.Вставить(Показатель.КодПоказателя, 0);
		Если Показатель.Значение <> Неопределено Тогда
			СтрокаЗначенийПоказателя[Показатель.КодПоказателя] = Показатель.Значение * Показатель.Масштаб;
		КонецЕсли;
		
	КонецЦикла;
	
	Контекст.ЗначенияПоказателей().Добавить(СтрокаЗначенийПоказателя);
	
	ФормаМонитора().ПослеОбновленияЗначенийПоказателей();
	
КонецПроцедуры // ДобавитьНовыеЗначенияПоказателей()

// Пересчитать агрегатные значения показателей производительности
//
// Параметры:
//  Контекст - Структура, см. СоздатьКонтекстВыполненияСценария()
//
Процедура ПересчитатьАгрегатныеЗначения()
	
	ИменаПоказателей = Новый Соответствие;
	
	// Установить начальные значения
	Для Каждого СтрокаПоказателя Из Контекст.Показатели() Цикл
		СтрокаПоказателя.Минимальное = 9999999999999.999;
		СтрокаПоказателя.Максимальное = 0;
		СтрокаПоказателя.Среднее = 0;
		СтрокаПоказателя.Сумма = 0;
		
		СтрокаПоказателя.КоличествоНеактуальныхДанных = 0;
		
		Показатель = СтрокаПоказателя.Показатель;
		РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(Показатель);
		КодПоказателя = РеквизитыПоказателя.Код;
		ИменаПоказателей.Вставить(Показатель, КодПоказателя);
	КонецЦикла;
	
	ТекущаяСтрокаЗначенийПоказателей = 0;
	
	// Обработать таблицу значений показателей производительности
	Для Каждого СтрокаЗначенийПоказателя Из Контекст.ЗначенияПоказателей() Цикл
		
		ТекущаяСтрокаЗначенийПоказателей = ТекущаяСтрокаЗначенийПоказателей + 1;
		
		Для Каждого СтрокаПоказателя Из Контекст.Показатели() Цикл
			
			ЗначениеБезМасштаба = СтрокаЗначенийПоказателя[ИменаПоказателей[СтрокаПоказателя.Показатель]];
			
			Если ЗначениеБезМасштаба = Неопределено Тогда
				СтрокаПоказателя.КоличествоНеактуальныхДанных = СтрокаПоказателя.КоличествоНеактуальныхДанных + 1;
				Продолжить;
			КонецЕсли;
			
			Значение = ЗначениеБезМасштаба / СтрокаПоказателя.Масштаб;
			СтрокаПоказателя.Сумма = СтрокаПоказателя.Сумма + Значение;
			
			Если Значение < СтрокаПоказателя.Минимальное Тогда
				СтрокаПоказателя.Минимальное = Значение;
			КонецЕсли;
			
			Если Значение > СтрокаПоказателя.Максимальное Тогда
				СтрокаПоказателя.Максимальное = Значение;
			КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;
	
	КоличествоЗаписейНаСтранице = МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице();
	
	// Посчитать средние значения
	Для Каждого СтрокаПоказателя Из Контекст.Показатели() Цикл
		Если СтрокаПоказателя.КоличествоНеактуальныхДанных < КоличествоЗаписейНаСтранице Тогда
			СтрокаПоказателя.Среднее = СтрокаПоказателя.Сумма / (КоличествоЗаписейНаСтранице - СтрокаПоказателя.КоличествоНеактуальныхДанных);
		Иначе
			СтрокаПоказателя.Минимальное = Неопределено;
			СтрокаПоказателя.Среднее = Неопределено;
			СтрокаПоказателя.Максимальное = Неопределено;
			СтрокаПоказателя.Сумма = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПересчитатьАгрегатныеЗначения()

// Получить описание показателей в виде соответствия с ключем по показателю
//
// Возвращаемое значение:
//  Соответствие - описание показателей
//
Функция ПолучитьОписанияПоказателей()
	
	ОписаниеПоказателей = Новый Соответствие;
	Показатели = Контекст.Показатели();
	ЗначенияПоказателей = Контекст.ЗначенияПоказателей();
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		ОписаниеПоказателя = Новый Структура;
		ОписаниеПоказателя.Вставить("Масштаб", СтрокаПоказателя.Масштаб);
		РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(СтрокаПоказателя.Показатель);
		КодПоказателя = РеквизитыПоказателя.Код;
		ОписаниеПоказателя.Вставить("КолонкаЗначений", КодПоказателя); //ЗначенияПоказателей.Колонки.Индекс(ЗначенияПоказателей.Колонки.Найти(СтрокаПоказателя.Показатель.Код)));
		ОписаниеПоказателей.Вставить(СтрокаПоказателя.Показатель, ОписаниеПоказателя);
	КонецЦикла;
	
	Возврат ОписаниеПоказателей;
	
КонецФункции // ПолучитьОписанияПоказателей()

// Обновить значения показателей производительности со страницы журнала
// показателей
//
// Параметры:
//  ОписаниеСтраницы - Структруа, описание страницы и граничных значений ПП
//  НачалоНаСтранице - Число, первая видимая запись на странице
//  НачалоНаСтранице - Число, последняя видимая запись на странице
//  НачалоВТаблице - Число, номер записи в таблице знечений показателей с
//                 которой необходимо начать запись
//  ВремяНачалаСтраницы - ДатаВремя, дата начала страницы
//
// Возвращаемое значение:
//  Число - количество записанных значений показателей производительности
//
Процедура ОбновитьЗначенияПоказателейСоСтраницы(ОписаниеСтраницы,
                                                НачалоНаСтранице,
                                                КонецНаСтранице,
                                                НачалоВТаблице)
	
	// Получение исходных данных
	Страница = ОписаниеСтраницы.Страница;
	ГраницыНачала = ОписаниеСтраницы.Границы.Начало;
	ПредыдущиеЗначения = СкопироватьМассив(ГраницыНачала);
	ДобавитьКолонкуПоказателя(ПредыдущиеЗначения, "ПоследняяПозиция", 0);

	// Заполнение основных значений
	ОписаниеПоказателей = ПолучитьОписанияПоказателей();
	ЗначенияПоказателей = Контекст.ЗначенияПоказателей();
	ГраницыЗонПоказателей  = Контекст.ГраницыЗонПоказателей();
	
	// Обработка страницы
	Для Каждого СтрокаСтраницы Из Страница Цикл
		
		// Определение используемой области страницы
		НомерЗаписи = СтрокаСтраницы.НомерЗаписи;
		
		Если НомерЗаписи > КонецНаСтранице Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаПредыдущегоЗначения = ОбщегоНазначенияКлиентСервер.НайтиСтрокуВМассивеСтруктур(ПредыдущиеЗначения, "Показатель", СтрокаСтраницы.Показатель);
		ИндексЗаписи = НачалоВТаблице + НомерЗаписи - НачалоНаСтранице;
		
		Если НомерЗаписи >= НачалоНаСтранице Тогда
			
			СтрокаЗначенийПоказателей = ЗначенияПоказателей[ИндексЗаписи];
			СтрокаЗначенийПоказателей.Время = СтрокаСтраницы.МоментВремени;
			ОписаниеПоказателя = ОписаниеПоказателей[СтрокаСтраницы.Показатель];
			
			Если Не ЗначениеЗаполнено(ОписаниеПоказателя) Тогда
				Продолжить;
			КонецЕсли;
			
			// Установка значений показателей
			СтрокаЗначенийПоказателей[ОписаниеПоказателя.КолонкаЗначений] = СтрокаСтраницы.Значение * ОписаниеПоказателя.Масштаб;
			
			// Установка границ показателей
			СтрокаГраниц = ГраницыЗонПоказателей[ИндексЗаписи];
			СтрокаГраниц[СтрокаСтраницы.Код + "ЖК"] = СтрокаСтраницы.ГраницаЖК;
			СтрокаГраниц[СтрокаСтраницы.Код + "ЗЖ"] = СтрокаСтраницы.ГраницаЗЖ;
			
			// Интерполяция значений показателей производительности
			ИнтервалРазрыва = СтрокаСтраницы.МоментВремени - СтрокаПредыдущегоЗначения.МоментВремени;
			
			ИнтерполироватьНедостающиеЗначения(
				ЗначенияПоказателей,
				ОписаниеПоказателя,
				ИнтервалРазрыва,
				СтрокаСтраницы.Шаг,
				ИндексЗаписи - 1,
				СтрокаПредыдущегоЗначения.ПоследняяПозиция,
				СтрокаПредыдущегоЗначения.МоментВремени,
				СтрокаЗначенийПоказателей.Время,
				СтрокаПредыдущегоЗначения.Значение,
				СтрокаЗначенийПоказателей[ОписаниеПоказателя.КолонкаЗначений],
				СтрокаПредыдущегоЗначения.ПоследняяПозиция,
				ИндексЗаписи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПредыдущегоЗначения) Тогда
			СтрокаПредыдущегоЗначения.МоментВремени    = СтрокаСтраницы.МоментВремени;
			СтрокаПредыдущегоЗначения.Значение         = СтрокаСтраницы.Значение;
			СтрокаПредыдущегоЗначения.ГраницаЖК        = СтрокаСтраницы.ГраницаЖК;
			СтрокаПредыдущегоЗначения.ГраницаЗЖ        = СтрокаСтраницы.ГраницаЗЖ;
			СтрокаПредыдущегоЗначения.Шаг              = СтрокаСтраницы.Шаг;
			СтрокаПредыдущегоЗначения.ПоследняяПозиция = ИндексЗаписи;
		КонецЕсли;
	КонецЦикла;
	
	// Интерполяция последних значений показателей производительности
	ГраницыКонца = ОписаниеСтраницы.Границы.Конец;
	ПоследующиеЗначения = СкопироватьМассив(ГраницыКонца);
	ДобавитьКолонкуПоказателя(ПоследующиеЗначения, "ПоследняяПозиция", 0);
	Позиция = Страница.Количество() - 1;
	
	Пока Позиция >= 0 Цикл
		СтрокаСтраницы = Страница[Позиция];
		НомерЗаписи = СтрокаСтраницы.НомерЗаписи;
		
		Если НомерЗаписи <= КонецНаСтранице Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаСледующегоЗначения = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(ПоследующиеЗначения, "Показатель", СтрокаСтраницы.Показатель);
		
		Если ЗначениеЗаполнено(СтрокаСледующегоЗначения) Тогда
			СтрокаСледующегоЗначения.МоментВремени    = СтрокаСтраницы.МоментВремени;
			СтрокаСледующегоЗначения.Значение         = СтрокаСтраницы.Значение;
			СтрокаСледующегоЗначения.ГраницаЖК        = СтрокаСтраницы.ГраницаЖК;
			СтрокаСледующегоЗначения.ГраницаЗЖ        = СтрокаСтраницы.ГраницаЗЖ;
			СтрокаСледующегоЗначения.Шаг              = СтрокаСтраницы.Шаг;
			СтрокаСледующегоЗначения.ПоследняяПозиция = НомерЗаписи;
		КонецЕсли;
		
		Позиция = Позиция - 1;
	КонецЦикла;
	
	Показатели = Контекст.Показатели();
	УдаленныеПоказатели = Новый Массив;
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		СтрокаПредыдущегоЗначения = ОбщегоНазначенияКлиентСервер.НайтиСтрокуВМассивеСтруктур(ПредыдущиеЗначения, "Показатель", СтрокаПоказателя.Показатель);
		СтрокаСледующегоЗначения = ОбщегоНазначенияКлиентСервер.НайтиСтрокуВМассивеСтруктур(ПоследующиеЗначения, "Показатель", СтрокаПоказателя.Показатель);
		
		Если СтрокаПредыдущегоЗначения = Неопределено 
			Или СтрокаСледующегоЗначения = Неопределено Тогда
			УдаленныеПоказатели.Добавить(СтрокаПоказателя);
			Продолжить;
		КонецЕсли;
		
		ИнтервалРазрыва = СтрокаСледующегоЗначения.МоментВремени - СтрокаПредыдущегоЗначения.МоментВремени;
		РазмерСтраницы = МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице() - 1;
		ИндексЗаписи = РазмерСтраницы + СтрокаСледующегоЗначения.ПоследняяПозиция - КонецНаСтранице;
		
		ИнтерполироватьНедостающиеЗначения(
			ЗначенияПоказателей,
			ОписаниеПоказателей[СтрокаПоказателя.Показатель],
			ИнтервалРазрыва,
			СтрокаСледующегоЗначения.Шаг,
			РазмерСтраницы,
			СтрокаПредыдущегоЗначения.ПоследняяПозиция,
			СтрокаПредыдущегоЗначения.МоментВремени,
			СтрокаСледующегоЗначения.МоментВремени,
			СтрокаПредыдущегоЗначения.Значение,
			СтрокаСледующегоЗначения.Значение,
			СтрокаПредыдущегоЗначения.ПоследняяПозиция,
			ИндексЗаписи);
	КонецЦикла;
	
	Для Каждого Показатель Из УдаленныеПоказатели Цикл
		ИндексПоказателя = Показатели.Найти(Показатель);
		Показатели.Удалить(ИндексПоказателя);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьЗначенияПоказателейСоСтраницы()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СкопироватьМассив(ИсходныйМассив)
	
	ФиксМассив = Новый ФиксированныйМассив(ИсходныйМассив);
	КопияМассива = Новый Массив(ФиксМассив);
	
	Возврат КопияМассива;
	
КонецФункции // СкопироватьМассив()


///////////////////////////////////////////////////////////////////////////////
// ИНТЕРПОЛЯЦИЯ

// Получить промежуточное значение времени между двумя соседними
// интерполируемыми точками графика
//
// Параметры:
//  ПредыдущееВремя - ДатаВремя, время предыдущей точки
//  СледующееВремя - ДатаВремя, время следующей точки
//  ПредыдущаяПозиция - Число, номер предыдущей точки
//  СледующаяПозиция - Число, номер следующей точки
//  ТекущаяПозиция - Число, номер текущей точки
//
// Возвращаемое значение:
//  ДатаВремя - время текущей точки
//
Функция ПромежуточноеВремя(ПредыдущееВремя,
                           СледующееВремя,
                           ПредыдущаяПозиция,
                           СледующаяПозиция,
                           ТекущаяПозиция)
	
	РазницаПозиций = СледующаяПозиция - ПредыдущаяПозиция;
	
	Если РазницаПозиций = 0 Тогда
		Возврат ПредыдущееВремя;
	Иначе
		Возврат ПредыдущееВремя + 
			(СледующееВремя - ПредыдущееВремя) *
			(ТекущаяПозиция - ПредыдущаяПозиция) /
			РазницаПозиций;
	КонецЕсли;
	
КонецФункции // ПромежуточноеВремя()

// Получить промежуточное значение ПП между двумя соседними
// интерполируемыми точками графика
//
// Параметры:
//  ПредыдущееВремя - ДатаВремя, время предыдущей точки
//  СледующееВремя - ДатаВремя, время следующей точки
//  ПредыдущееЗначение - Число, значение ПП предыдущей точки
//  СледующееЗначение - Число, значение ПП следующей точки
//  ТекущееВремя - ДатаВремя, время интерполируемого значения ПП
//
// Возвращаемое значение:
//  ДатаВремя - время текущей точки
//
Функция ПромежуточноеЗначение(ПредыдущееВремя,
                              СледующееВремя,
                              ПредыдущееЗначение,
                              СледующееЗначение,
                              ТекущееВремя)
	
	Если (СледующееВремя - ПредыдущееВремя) > 0 Тогда
		Результат = СледующееЗначение + 
			(СледующееВремя - ТекущееВремя) *
			(ПредыдущееЗначение - СледующееЗначение) /
			(СледующееВремя - ПредыдущееВремя);
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПромежуточноеЗначение()

// Получить интерполированное значение показателя производительности
//
Функция ИнтерполироватьНедостающиеЗначения(ЗначенияПоказателей,
                                           ОписаниеПоказателя,
                                           Интервал,
                                           Шаг,
                                           НачальнаяПозиция,
                                           КонечнаяПозиция,
                                           ПредыдущееВремя,
                                           СледующееВремя,
                                           ПредыдущееЗначение,
                                           СледующееЗначение,
                                           ПредыдущаяПозиция,
                                           СледующаяПозиция)
	
	Если Интервал <= Шаг * 2 Тогда
		Позиция = НачальнаяПозиция;
		
		Пока Позиция >= 0 И Позиция > КонечнаяПозиция Цикл
			ТекущаяСтрока = ЗначенияПоказателей[Позиция];
			ТекущийМоментВремени = ПромежуточноеВремя(
				ПредыдущееВремя,
				СледующееВремя,
				ПредыдущаяПозиция,
				СледующаяПозиция,
				Позиция);
			ТекущаяСтрока[ОписаниеПоказателя.КолонкаЗначений] = ПромежуточноеЗначение(
				ПредыдущееВремя,
				СледующееВремя,
				ПредыдущееЗначение,
				СледующееЗначение,
				ТекущийМоментВремени);
			Позиция = Позиция - 1;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // ИнтерполироватьЗначениеПП()


///////////////////////////////////////////////////////////////////////////////
// ГРАНИЦЫ ПОКАЗАТЕЛЕЙ ПРОИЗВОДИТЕЛЬНОСТИ

// Добавить значения границ для показателя производительности
//
// Параметры:
//  Показатель - СправочникСсылка.ПоказательПроизводительности
//
Процедура ДобавитьГраницуПоказателя(Показатель)
	
	РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(Показатель);
	
	Границы = Контекст.ГраницыЗонПоказателей();
	Для Каждого ТекЭлемент Из Границы Цикл
		ТекЭлемент.Вставить(РеквизитыПоказателя.Код + "ЖК");
		ТекЭлемент.Вставить(РеквизитыПоказателя.Код + "ЗЖ");
	КонецЦикла;
	
КонецПроцедуры // ДобавитьГраницуПоказателя()

// Удалить значения границ для показателя производительности
//
// Параметры:
//  Показатель - СправочникСсылка.ПоказательПроизводительности
//
Процедура УдалитьГраницуПоказателя(Показатель)
	
	РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(Показатель);
	
	Границы = Контекст.ГраницыЗонПоказателей();
	Для Каждого ТекЭлемент Из Границы Цикл
		ТекЭлемент.Удалить(РеквизитыПоказателя.Код + "ЖК");
		ТекЭлемент.Удалить(РеквизитыПоказателя.Код + "ЗЖ");
	КонецЦикла;
	
КонецПроцедуры // УдалитьГраницуПоказателя()

// Добавить новые значения границ показателей производительности
//
Процедура ДобавитьНовыеГраницыПП()
	
	Показатели = Контекст.Показатели();
	Границы = Контекст.ГраницыЗонПоказателей();
	Границы.Удалить(0);
	СтрокаГраницы = Контекст.ПолучитьШаблонЗначенийПП();
	СтрокаГраницы.Время = Контекст.ВремяПоследнегоТакта();
	
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		СтрокаГраницы.Вставить(СтрокаПоказателя.КодПоказателя + "ЖК", СтрокаПоказателя.ГраницаЖК);
		СтрокаГраницы.Вставить(СтрокаПоказателя.КодПоказателя + "ЗЖ", СтрокаПоказателя.ГраницаЗЖ);
	КонецЦикла;
	
	Границы.Добавить(СтрокаГраницы);
	
	ОбновитьГраницыПП();
	
КонецПроцедуры // ДобавитьНовыеГраницыПП()

// Обновить значения для границ показателей производительности
//
Процедура ОбновитьГраницыПП() Экспорт
	
	Границы = Контекст.ГраницыЗонПоказателей();
	
	Если Не Контекст.ГраницыДополнены() Тогда
		ДополнитьГраницыПП();
		Контекст.УстановитьГраницыДополнены(Истина);
	КонецЕсли;
	
	ЗначенияПоказателей = Контекст.ЗначенияПоказателей();
	ТекущаяСтрокаПоказателей = ФормаМонитора().ТекущаяСтрокаПоказателей();
	
	Если ТекущаяСтрокаПоказателей <> Неопределено Тогда
		ТекущийПоказатель = ТекущаяСтрокаПоказателей.Показатель;
		
		Если Контекст.МониторингВключен() И ТекущийПоказатель = Контекст.ПоказательГраниц() Тогда
			Количество = МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице() - 1;
			СтрокаЗначений = ЗначенияПоказателей[Количество];
			СтрокаЗначений.ГраницаЖК = ТекущаяСтрокаПоказателей.ГраницаЖК;
			СтрокаЗначений.ГраницаЗЖ = ТекущаяСтрокаПоказателей.ГраницаЗЖ;
		Иначе
			РеквизитыПоказателя = Контекст.ПолучитьЗначенияРеквизитовПоказателя(ТекущийПоказатель);
			ГраницаЖК = ВыгрузитьКолонку(Границы, РеквизитыПоказателя.Код + "ЖК");
			ГраницаЗЖ = ВыгрузитьКолонку(Границы, РеквизитыПоказателя.Код + "ЗЖ");
			ЗагрузитьКолонку(ЗначенияПоказателей, "ГраницаЖК", ГраницаЖК);
			ЗагрузитьКолонку(ЗначенияПоказателей, "ГраницаЗЖ", ГраницаЗЖ);
			Контекст.УстановитьПоказательГраниц(ТекущийПоказатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьГраницыПП()

// Дополнить значения границ показателей производительности
// (дорисовать границы)
//
Процедура ДополнитьГраницыПП()
	
	Границы = Контекст.ГраницыЗонПоказателей();
	Количество = ?(Границы.Количество() = 0, 0, Границы[0].Количество());
	
	// Обход колонок
	Если Количество > 0 Тогда
		Для Каждого ТекКолонка Из Границы[0] Цикл
			Если ТекКолонка.Ключ = "Время" Тогда
				Продолжить;
			КонецЕсли;
			
			НачальноеЗначение = Неопределено;
			ТекущееЗначение = Неопределено;
			ПерваяПозиция = Неопределено;
			
			// Заполнение вперед
			Для Каждого СтрокаГраниц Из Границы Цикл
				Значение = СтрокаГраниц[ТекКолонка.Ключ];
				
				Если Значение <> Неопределено И Значение > 0 Тогда
					ТекущееЗначение = Значение;
					
					Если ПерваяПозиция = Неопределено Тогда
						ПерваяПозиция = СтрокаГраниц;
						НачальноеЗначение = ТекущееЗначение;
					КонецЕсли;
				Иначе
					Если ТекущееЗначение <> Неопределено Тогда
						СтрокаГраниц[ТекКолонка.Ключ] = ТекущееЗначение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Заполнение начала
			Если ПерваяПозиция <> Неопределено Тогда
				Для Каждого СтрокаГраниц Из Границы Цикл
					Если СтрокаГраниц = ПерваяПозиция Тогда
						Прервать;
					КонецЕсли;
					
					СтрокаГраниц[ТекКолонка.Ключ] = НачальноеЗначение;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДополнитьГраницыПП()
