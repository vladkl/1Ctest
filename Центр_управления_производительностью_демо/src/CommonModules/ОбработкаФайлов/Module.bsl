///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОПЕРАЦИИ

// Получить уникальный временный каталог, который будет автоматически создан
//
// Возвращаемое значеие:
//  Строка - временный каталог
//
Функция ВременныйКаталог()
	
	ВременныйКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "/";
	СоздатьКаталог(ВременныйКаталог);
	Возврат ВременныйКаталог;
	
КонецФункции // ВременныйКаталог()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ДВОИЧНОГО ФАЙЛА ПОРЦИЯМИ

// Открыть файл для чтения его порциями указанного размера
// При открытии создаются временные файлы
//
// Параметры:
//  Путь - Строка, путь к открываемому файлу
//  РазмерПорции - Число, размер читаемой порции, по-умолчанию 10Мб
//
// Возвращаемое значение:
//  Структура - описание открытого файла для последующего чтения:
//   - Путь - Строка, путь к открытому файлу
//   - ПутиПорций - Массив, имен файлов-порций
//   - ВременныйКаталог - Строка, имя временного каталога, где лежат файлы-порции
//
Функция ОткрытьЧтениеПорциями(Путь, РазмерПорции = 10485760)
	
	ВременныйКаталог = ВременныйКаталог();
	
	Описание = Новый Структура;
	Описание.Вставить("Путь", Путь);
	Описание.Вставить("ПутиПорций");
	Описание.Вставить("ВременныйКаталог", ВременныйКаталог);
	
	Описание.ПутиПорций = РазделитьФайл(Путь, РазмерПорции, ВременныйКаталог);
	
	Возврат Описание;
	
КонецФункции // ОткрытьЧтениеПорциями()

// Открыть файл для записи в него порциями указанного размера
// При открытии создаются временные файлы
//
// Параметры:
//  Путь - Строка, путь к открываемому файлу
//
// Возвращаемое значение:
//  Структура - описание открытого файла для последующего чтения:
//   - Путь - Строка, путь к открытому файлу
//   - ВременныйКаталог - Строка, имя временного каталога, где лежат файлы-порции
//
Функция ОткрытьЗаписьПорциями(Путь)
	
	ВременныйКаталог = ВременныйКаталог();
	УдалитьФайлы(Путь);
	
	Описание = Новый Структура;
	Описание.Вставить("Путь", Путь);
	Описание.Вставить("ПутиПорций", Новый Массив);
	Описание.Вставить("ВременныйКаталог", ВременныйКаталог);
	Описание.Вставить("СчетчикПорций", 0);
	
	Возврат Описание;

КонецФункции // ОткрытьЗаписьПорциями()

// Прочитать очередную порцию из файла
//
// Параметры:
//  Описание - Структура, описывающая открытый файл (см. ОткрытьЧтениеПорциями())
//
// Возвращаемое значение:
//  ХранилищеЗначения - если прочитанный блок не пустой, иначе Неопределено
//
Функция ПрочитатьПорцию(Описание)
	
	ПутиПорций = Описание.ПутиПорций;
	
	Если ПутиПорций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПорции = Новый ДвоичныеДанные(ПутиПорций[0]);
	Порция = Новый ХранилищеЗначения(ДанныеПорции, Новый СжатиеДанных(9));
	ПутиПорций.Удалить(0);
	
	Возврат Порция;
	
КонецФункции // ПрочитатьПорцию()

// Записать очередную порцию в файл
//
// Параметры:
//  Описание - описание записываемого файла (см. ОткрытьЗаписьПорциями())
//  Порция - ХранилищеЗначения, очередной записываемый блок
//
Процедура ЗаписатьПорцию(Описание, Порция)
	
	Счетчик = ОбщегоНазначенияКлиентСервер.ЧислоВСтроку(Описание.СчетчикПорций);
	Путь = Описание.ВременныйКаталог + ОбщегоНазначенияКлиентСервер.ДополнитьСтроку(Счетчик, "0", 20);
	ДанныеПорции = Порция.Получить();
	ДанныеПорции.Записать(Путь);
	Описание.СчетчикПорций = Описание.СчетчикПорций + 1;
	Описание.ПутиПорций.Добавить(Путь);
	
КонецПроцедуры // ЗаписатьПорцию()

// Прочитать файл порциями с передачей результата обработчику
//
// Параметры:
//  Путь - Строка, полное имя файла
//  Обработчик - Строка, полное имя процедуры получающей результаты чтения:
//   - ИмяОбработчика(Порция, НомерПорции, Путь, Данные), где
//      - Порция - Хранилище значения, прочитанное из файла
//      - НомерПорции - Число, порядковый номер порции для одного файла
//      - Путь - Строка, относительное имя файла
//      - Данные - Произвольный, служебные данные обработчика
//  Данные - Произвольный, служебные данные обработчика
//  БазовыйКаталоаг - Строка, если <> Неопределено, тогда имя файла,
//                 переданное обработчику, будет относительным
//
Процедура ПрочитатьФайлПорциями(Путь,
                                Обработчик,
                                Данные,
                                БазовыйКаталоаг = Неопределено)
	
	Описание = ОткрытьЧтениеПорциями(Путь);
	НомерПорции = 0;
	
	Пока Истина Цикл
		Порция = ПрочитатьПорцию(Описание);
		
		Если Порция = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ИмяФайла = СтрЗаменить(Путь, БазовыйКаталоаг, "");
		Выполнить Обработчик + "(Порция, НомерПорции, ИмяФайла, Данные)";
		НомерПорции = НомерПорции + 1;
	КонецЦикла;
	
	ЗакрытьЧтениеПорциями(Описание);
	
КонецПроцедуры // ПрочитатьФайлПорциями()

// Прочитать каталог порциями с передачей результата обработчику
//
// Параметры:
//  Путь - Строка, имя каталога для чтения
//  Маска - Строка, шаблон поиска файлов
//  Обработчик - Строка, полное имя процедуры получающей результаты чтения:
//   - ИмяОбработчика(Порция, НомерПорции, Путь, Данные), где
//      - Порция - Хранилище значения, прочитанное из файла
//      - НомерПорции - Число, порядковый номер порции для одного файла
//      - Путь - Строка, относительное имя файла
//      - Данные - Произвольный, служебные данные обработчика
//  Данные - Произвольный, служебные данные обработчика
//
Процедура ПрочитатьКаталогПорциями(Путь,
                                   Маска,
                                   Обработчик,
                                   Данные,
                                   БазовыйКаталог = Неопределено) Экспорт
	
	Файлы = НайтиФайлы(Путь, Маска);
	
	Для Каждого Файл Из Файлы Цикл
		ПолноеИмя = Файл.Путь + Файл.Имя;
		
		Если БазовыйКаталог = Неопределено Тогда
			БазовыйКаталог = Путь;
		КонецЕсли;
		
		Если Файл.ЭтоКаталог() Тогда
			ПрочитатьКаталогПорциями(ПолноеИмя, Маска, Обработчик, Данные, БазовыйКаталог);
		Иначе
			ПрочитатьФайлПорциями(ПолноеИмя, Обработчик, Данные, БазовыйКаталог);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПрочитатьКаталогПорциями()

// Записать файл порциями, беря данные из обработчика
//
// Параметры:
//  Путь - Строка, полное имя файла
//  Обработчик - Строка, полное имя функции, возвращающей данные для записи:
//   - ИмяОбработчика(НомерПорции, Путь, Данные), где
//      - НомерПорции - Число, порядковый номер порции, 0 - авто
//      - Путь - Строка, относительное имя файла
//      - Данные - Произвольный, служебные данные обработчика
//  Данные - Произвольный, данные обработчика
//
Процедура ЗаписатьФайлПорциями(Путь, Обработчик, Данные) Экспорт
	
	Перем Порция;
	
	Описание = ОткрытьЗаписьПорциями(Путь);
	НомерПорции = 0;
	
	Пока Истина Цикл
		Выполнить "Порция = " + Обработчик + "(НомерПорции, Путь, Данные)";
		
		Если Порция = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		ЗаписатьПорцию(Описание, Порция);
		НомерПорции = НомерПорции + 1;
	КонецЦикла;
	
	ЗакрытьЗаписьПорциями(Описание);
	
КонецПроцедуры // ЗаписатьФайлПорциями()

// Закрыть файл для чтения его порциями
// При закрытии удаляются временные файлы
//
// Параметры:
//  Описание - Структура, описывающая открытый файл (см. ОткрытьЧтениеПорциями())
//
Процедура ЗакрытьЧтениеПорциями(Описание)
	
	УдалитьФайлы(Описание.ВременныйКаталог);
	
КонецПроцедуры // ЗакрытьЧтениеПорциями()

// Закрыть файл для чтения его порциями
// При закрытии удаляются временные файлы
//
// Параметры:
//  Описание - Структура, описывающая открытый файл (см. ОткрытьЧтениеПорциями())
//
Процедура ЗакрытьЗаписьПорциями(Описание)
	
	ОбъединитьФайлы(Описание.ПутиПорций, Описание.Путь);
	УдалитьФайлы(Описание.ВременныйКаталог);
	
КонецПроцедуры // ЗакрытьЗаписьПорциями()
