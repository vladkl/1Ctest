////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры и функции общего назначения:
// - для работы со списками в формах;
// - для работы с журналом регистрации;
// - для обработки действий пользователя в процессе редактирования
//   многострочного текста, например комментария в документах;
// - прочее.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Установить предопределенный стиль для страницы HTML
//
// Параметры:
//  HTMLДокумент - ComОбъект, DOM представление страницы HTML
//
Процедура УстановитьСтильHTMLСтраницы(HTMLДокумент) Экспорт
	
	ЗаголовокСтиля = "Таблица стилей Web-страниц 1С";
	
	Для Каждого ТекущийСтиль Из HTMLДокумент.styleSheets Цикл
		Если ТекущийСтиль.title = ЗаголовокСтиля Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	МакетСтиля = ОбщегоНазначенияВызовСервера.ПолучитьМакетОформленияHTML();
	ТекстСтиля = МакетСтиля.ПолучитьТекст();
	НовыйСтиль = HTMLДокумент.createElement("style");
	НовыйСтиль.title = ЗаголовокСтиля;
	НовыйСтиль.type = "text/css";
	
	Если НовыйСтиль.styleSheet <> Неопределено Тогда
		НовыйСтиль.styleSheet.cssText = ТекстСтиля;
	Иначе
		НовыйСтиль.appendChild(HTMLДокумент.createTextNode(ТекстСтиля));
	КонецЕсли;
	
	HTMLДокумент.all.tags("HEAD").item(0).appendChild(НовыйСтиль);
	
КонецПроцедуры // УстановитьСтильHTMLСтраницы()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьУровеньСтрокиДерева(СтрокаДерева) Экспорт
	
	Сч = 1;
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Пока Родитель <> Неопределено Цикл
		Сч = Сч + 1;
		Родитель = Родитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Сч;
	
КонецФункции // ПолучитьУровеньСтрокиДерева()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция НайтиСтрокуДереваПоЗначению(КоллекцияЭлементовДерева, Колонка, Значение) Экспорт
	
	Результат = Неопределено;
	
	Для Каждого ТекСтр Из КоллекцияЭлементовДерева Цикл
		Если ТекСтр[Колонка] = Значение Тогда
			Результат = ТекСтр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // НайтиСтрокуДереваПоЗначению()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура РазвернутьСтрокиДерева(ЭлементФормы, СтрокиДерева, СПодчиненными = Истина) Экспорт
	
	Для Каждого ТекСтр Из СтрокиДерева Цикл
		ЭлементФормы.Развернуть(ТекСтр.ПолучитьИдентификатор(), СПодчиненными);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьСтрокиДерева()

// Выводит предупреждение или текст ошибки.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, для которой требуется вывод.
//   ПараметрыПредупреждения - Структура - Параметры предупреждения.
//       * Текст               - Строка - Текст предупреждения.
//       * Подробно            - Строка - Необязательный. Тексты ошибок, которые при желании может просмотреть пользователь.
//       * Заголовок           - Строка - Необязательный. Заголовок окна.
//       * ПутьКРеквизитуФормы - Строка - Необязательный. Путь к реквизиту формы, значение которого вызывало ошибку.
//   ОбработчикЗавершения - ОписаниеОповещения - Описание процедуры,
//       которая будет вызвана после завершения показа (со значением Неопределено).
//
Процедура ВывестиПредупреждение(Форма, ПараметрыПредупреждения, ОбработчикЗавершения = Неопределено) Экспорт
	Контекст = Новый Структура("Текст, Подробно, Заголовок, ПутьКРеквизитуФормы, Форма, ОбработчикЗавершения");
	ЗаполнитьЗначенияСвойств(Контекст, ПараметрыПредупреждения);
	Контекст.Форма = Форма;
	Контекст.ОбработчикЗавершения = ОбработчикЗавершения;
	
	Если Не ЗначениеЗаполнено(Контекст.Текст) Тогда
		ВывестиПредупреждениеЗавершение(Неопределено, Контекст);
		Возврат;
	КонецЕсли;
	Если Контекст.Заголовок = Неопределено Тогда
		Контекст.Заголовок = "";
	КонецЕсли;
	
	КнопкаПоУмолчанию = КодВозвратаДиалога.ОК;
	
	Кнопки = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Контекст.Подробно) И Контекст.Подробно <> Контекст.Текст Тогда
		Кнопки.Добавить(1, НСтр("ru = 'Подробнее...'"));
	КонецЕсли;
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") И ЗначениеЗаполнено(Контекст.ПутьКРеквизитуФормы) Тогда
		Кнопки.Добавить(2, НСтр("ru = 'Перейти к реквизиту'"));
	КонецЕсли;
	// Кнопка "Закрыть" должна быть крайней справа,
	// т.к. это ее стандартное место в диалогах, в которых команды размещаются внизу формы.
	Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Закрыть'"));
	
	Обработчик = Новый ОписаниеОповещения("ВывестиПредупреждениеПродолжение", ЭтотОбъект, Контекст);
	ПоказатьВопрос(Обработчик, Контекст.Текст, Кнопки, , КнопкаПоУмолчанию, Контекст.Заголовок);
КонецПроцедуры

// Продолжение процедуры ВывестиПредупреждение.
Процедура ВывестиПредупреждениеПродолжение(Ответ, Контекст) Экспорт
	Если Ответ = 1 Тогда
		
		Обработчик = Новый ОписаниеОповещения("ВывестиПредупреждениеЗавершение", ЭтотОбъект, Контекст);
		ПолныйТекст = Строка(Контекст.Текст) + Символы.ПС + Символы.ПС + Контекст.Подробно;
		ПоказатьПодробнуюИнформацию(Обработчик, ПолныйТекст, Контекст.Заголовок);
		
		Возврат;
		
	ИначеЕсли Ответ = 2 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ИдентификаторНазначения = Контекст.Форма.УникальныйИдентификатор;
		Сообщение.Текст = Контекст.Текст;
		Сообщение.Поле  = Контекст.ПутьКРеквизитуФормы;
		Сообщение.Сообщить();
		
	КонецЕсли;
	
	ВывестиПредупреждениеЗавершение(Неопределено, Контекст);
КонецПроцедуры

// Продолжение процедуры ВывестиПредупреждение.
Процедура ВывестиПредупреждениеЗавершение(Ответ, Контекст) Экспорт
	Если ТипЗнч(Контекст.ОбработчикЗавершения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(Контекст.ОбработчикЗавершения, Неопределено);
	КонецЕсли;
КонецПроцедуры

// Выводит текст, который пользователь может скопировать.
//
// Параметры:
//   Обработчик - ОписаниеОповещения - Описание процедуры, которая будет вызвана после завершения показа.
//       Возвращаемое значение аналогично ПоказатьВопросПользователю().
//   Текст     - Строка - Текст информации.
//   Заголовок - Строка - Необязательный. Заголовок окна. По умолчанию "Подробнее".
//
Процедура ПоказатьПодробнуюИнформацию(Обработчик, Текст, Заголовок = Неопределено) Экспорт
	НастройкиДиалога = Новый Структура;
	НастройкиДиалога.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	НастройкиДиалога.Вставить("Картинка", Неопределено);
	НастройкиДиалога.Вставить("ПоказыватьКартинку", Ложь);
	НастройкиДиалога.Вставить("МожноКопировать", Истина);
	НастройкиДиалога.Вставить("КнопкаПоУмолчанию", 0);
	НастройкиДиалога.Вставить("ВыделятьКнопкуПоУмолчанию", Ложь);
	НастройкиДиалога.Вставить("Заголовок", Заголовок);
	
	Если Не ЗначениеЗаполнено(НастройкиДиалога.Заголовок) Тогда
		НастройкиДиалога.Заголовок = НСтр("ru = 'Подробнее'");
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(0, НСтр("ru = 'Закрыть'"));
	
	ПоказатьВопросПользователю(Обработчик, Текст, Кнопки, НастройкиДиалога);
КонецПроцедуры

// Показать форму вопроса.
//
// Параметры:
//   ОписаниеОповещенияОЗавершении - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия окна
//                                                        вопроса
//                                                        со следующими параметрами: 
//                                                          РезультатВопроса - Структура - структура со свойствами:
//                                                            Значение - результат выбора пользователя: значение
//                                                                       системного перечисления или значение,
//                                                                       связанное с нажатой кнопкой. В случае закрытия
//                                                                       диалога по истечении времени - значение
//                                                                       Таймаут.
//                                                            БольшеНеЗадаватьЭтотВопрос - Булево - результат выбора
//                                                                                                  пользователя в
//                                                                                                  одноименном флажке.
//                                                          ДополнительныеПараметры - Структура 
//   ТекстВопроса                  - Строка             - текст задаваемого вопроса. 
//   Кнопки                        - РежимДиалогаВопрос, СписокЗначений - может быть задан список значений, в котором.
//                                       Значение - содержит значение, связанное с 
//                                                  кнопкой и возвращаемое при выборе кнопки. В качестве значения может
//                                                  использоваться значение
//                                                  перечисления КодВозвратаДиалога, а также другие значения,
//                                                  поддерживающее XDTO-сериализацию.
//                                       Представление - задает текст кнопки.
//
//   ДополнительныеПараметры       - Структура          - дополнительные параметры, см. описание к
//                                                        ПараметрыВопросаПользователю.
//
// Возвращаемое значение:
//   Результат выбора пользователя будет передан в метод, описанный параметром ОписаниеОповещенияОЗавершении. 
//
Процедура ПоказатьВопросПользователю(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Параметры = ДополнительныеПараметры;
	Иначе
		Параметры = Новый Структура;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыВопросаПользователю(), Ложь);
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаПоУмолчанию = КодВозвратаДиалогаВСтроку(Параметры.КнопкаПоУмолчанию);
	КонецЕсли;
	
	Если ТипЗнч(Параметры.КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		Параметры.КнопкаТаймаута = КодВозвратаДиалогаВСтроку(Параметры.КнопкаТаймаута);
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",         КнопкиПараметр);
	Параметры.Вставить("ТекстСообщения", ТекстВопроса);
	
	ОткрытьФорму("ОбщаяФорма.Вопрос", Параметры,,,,,ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

// Возвращает строковое представление значения типа КодВозвратаДиалога.
Функция КодВозвратаДиалогаВСтроку(Значение)
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает новую структуру дополнительных параметров для процедуры ПоказатьВопросПользователю.
//
// Возвращаемое значение:
//  Структура   - структура со свойствами:
//    * КнопкаПоУмолчанию             - Произвольный - определяет кнопку по умолчанию по типу кнопки или по связанному
//                                                     с ней значению.
//    * Таймаут                       - Число        - интервал времени в секундах до автоматического закрытия окна
//                                                     вопроса.
//    * КнопкаТаймаута                - Произвольный - кнопка (по типу кнопки или по связанному с ней значению), 
//                                                     на которой отображается количество секунд, оставшихся до
//                                                     истечения таймаута.
//    * Заголовок                     - Строка       - заголовок вопроса. 
//    * ПредлагатьБольшеНеЗадаватьЭтотВопрос - Булево- если Истина, то в окне вопроса будет доступен одноименный флажок.
//    * БольшеНеЗадаватьЭтотВопрос    - Булево       - принимает значение, выбранное пользователем в соответствующем
//                                                     флажке.
//    * БлокироватьВесьИнтерфейс      - Булево       - если Истина, форма вопроса открывается блокируя работу всех
//                                                     остальных открытых окон, включая главное окно.
//    * Картинка                      - Картинка     - картинка, выводимая в окне вопроса.
//
Функция ПараметрыВопросаПользователю() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КнопкаПоУмолчанию", Неопределено);
	Параметры.Вставить("Таймаут", 0);
	Параметры.Вставить("КнопкаТаймаута", Неопределено);
	Параметры.Вставить("Заголовок", КлиентскоеПриложение.ПолучитьЗаголовок());
	Параметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Истина);
	Параметры.Вставить("БольшеНеЗадаватьЭтотВопрос", Ложь);
	Параметры.Вставить("БлокироватьВесьИнтерфейс", Ложь);
	Параметры.Вставить("Картинка", БиблиотекаКартинок.Вопрос32);
	Возврат Параметры;
	
КонецФункции	

// См. ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS.
Функция ЭтоВебКлиентПодMacOS() Экспорт
	
#Если Не ВебКлиент Тогда
	Возврат Ложь;  // Только в веб клиенте этот код работает.
#КонецЕсли
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если СтрНайти(СистемнаяИнфо.ИнформацияПрограммыПросмотра, "Macintosh") <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры общего назначения.

// Предлагает пользователю установить расширение работы с файлами в веб-клиенте.
// Предназначена для использования в начале участков кода, в которых ведется работа с файлами.
//
// Параметры:
//   ОписаниеОповещенияОЗакрытии    - ОписаниеОповещения - описание процедуры,
//                                    которая будет вызвана после закрытия формы со следующими параметрами:
//                                      РасширениеПодключено    - Булево - Истина, если расширение было подключено.
//                                      ДополнительныеПараметры - Произвольный - параметры, заданные в
//                                                                               ОписаниеОповещенияОЗакрытии.
//   ТекстПредложения                - Строка - текст сообщения. Если не указан, то выводится текст по умолчанию.
//   ВозможноПродолжениеБезУстановки - Булево - если Истина, будет показана кнопка ПродолжитьБезУстановки,
//                                              если Ложь, будет показана кнопка Отмена.
//
// Пример:
//
//    Оповещение = Новый ОписаниеОповещения("ПечатьДокументаЗавершение", ЭтотОбъект);
//    ТекстСообщения = НСтр("ru = 'Для печати документа необходимо установить расширение работы с файлами.'");
//    ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстСообщения);
//
//    Процедура ПечатьДокументаЗавершение(РасширениеПодключено, ДополнительныеПараметры) Экспорт
//      Если РасширениеПодключено Тогда
//        // код печати документа, рассчитывающий на то, что расширение подключено.
//        // ...
//      Иначе
//        // код печати документа, который работает без подключенного расширения.
//        // ...
//      КонецЕсли;
Процедура ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещенияОЗакрытии, ТекстПредложения = "", 
	ВозможноПродолжениеБезУстановки = Истина) Экспорт
	
	ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиЗавершение",
		ОбщегоНазначенияСлужебныйКлиент, ОписаниеОповещенияОЗакрытии);
	
#Если Не ВебКлиент Тогда
	// В тонком и толстом клиентах расширение подключено всегда.
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияЗавершение, "ПодключениеНеТребуется");
	Возврат;
#КонецЕсли
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещенияЗавершение", ОписаниеОповещенияЗавершение);
	ДополнительныеПараметры.Вставить("ТекстПредложения", ТекстПредложения);
	ДополнительныеПараметры.Вставить("ВозможноПродолжениеБезУстановки", ВозможноПродолжениеБезУстановки);
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВопросОбУстановкеРасширенияРаботыСФайламиПриУстановкеРасширения",
		ОбщегоНазначенияСлужебныйКлиент, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
	
КонецПроцедуры

// Возвращает пользовательскую настройку "Предлагать установку расширения работы с файлами".
//
// Возвращаемое значение:
//  Булево - Истина, если предлагать.
//
Функция ПредлагатьУстановкуРасширенияРаботыСФайлами() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	Возврат ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы/ПредлагатьУстановкуРасширенияРаботыСФайлами", ИдентификаторКлиента, Истина);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для обработки событий и вызова необязательных подсистем.

// Возвращает Истина, если "функциональная" подсистема существует в конфигурации.
// Предназначена для реализации вызова необязательной подсистемы (условного вызова).
//
// У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка - полное имя объекта метаданных подсистема
//                        без слов "Подсистема." и с учетом регистра символов.
//                        Например: "СтандартныеПодсистемы.ВариантыОтчетов".
//
// Пример:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
//  	МодульВариантыОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВариантыОтчетовКлиент");
//  	МодульВариантыОтчетовКлиент.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево - Истина, если существует.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИмяПараметра = "СтандартныеПодсистемы.ПодсистемыКонфигурации";
	Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
		ИменаПодсистем = Служебный.ИменаПодсистем();
		ПараметрыПриложения.Вставить(ИмяПараметра, ИменаПодсистем);
	КонецЕсли;
	ИменаПодсистем = ПараметрыПриложения[ИмяПараметра];
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль - общий модуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Модуль = Вычислить(Имя);
	
#Если НЕ ВебКлиент Тогда
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

#Область ЗапускВнешнихПриложений

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с внешними приложениями.

// Открывает навигационную ссылку в программе, которая ассоциирована с протоколом навигационной ссылки.
//
// Допустимые протоколы: http, https, e1c, v8help, mailto, tel, skype.
//
// Для открытия проводника или файла в программе просмотра не следует формировать ссылку по протоколу file://
// - для открытия проводника см. ОткрытьПроводник.
// - для открытия файла по расширению см. ОткрытьФайлВПрограммеПросмотра.
//
// Параметры:
//  НавигационнаяСсылка - Строка - ссылка, которую требуется открыть.
//  Оповещение          - ОписаниеОповещения, Неопределено - оповещение о результате открытия.
//                            - если оповещение не задано - в случае ошибки будет показано предупреждение.
//      * ПриложениеЗапущено      - Булево    - Истина, если внешнее приложение не вызвало ошибок при открытии.
//      * ДополнительныеПараметры - Структура - значение, которое было указано при создании объекта ОписаниеОповещения.
//
// Пример:
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/startpage"); // начальная страница.
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("v8help://1cv8/QueryLanguageFullTextSearchInData");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("https://1c.ru");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("mailto:help@1c.ru");
//  ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку("skype:echo123?call");
//
Процедура ОткрытьНавигационнуюСсылку(НавигационнаяСсылка, Знач Оповещение = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("НавигационнаяСсылка", НавигационнаяСсылка);
	Контекст.Вставить("Оповещение", Оповещение);
	
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось перейти по ссылке ""%1"" по причине: 
			           |Неверно задана навигационная ссылка.'"),
			НавигационнаяСсылка);
	
	Если Не ОбщегоНазначенияСлужебныйКлиент.ЭтоДопустимаяСсылка(НавигационнаяСсылка) Тогда 
		ОбщегоНазначенияСлужебныйКлиент.ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияСлужебныйКлиент.ЭтоВебСсылка(НавигационнаяСсылка)
		Или ОбщегоНазначенияСлужебныйКлиент.ЭтоНавигационнаяСсылка(НавигационнаяСсылка) Тогда 
		
		Попытка
			ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
		Исключение
			ОбщегоНазначенияСлужебныйКлиент.ОткрытьНавигационнуюСсылкуОповеститьОбОшибке(ОписаниеОшибки, Контекст);
			Возврат;
		КонецПопытки;
		
		Если Оповещение <> Неопределено Тогда 
			ПриложениеЗапущено = Истина;
			ВыполнитьОбработкуОповещения(Оповещение, ПриложениеЗапущено);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияСлужебныйКлиент.ЭтоСсылкаНаСправку(НавигационнаяСсылка) Тогда 
		ОткрытьСправку(НавигационнаяСсылка);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНавигационнуюСсылкуПослеПроверкиРасширенияРаботыСФайлами",
		ОбщегоНазначенияСлужебныйКлиент, Контекст);
		
	ТекстПредложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для открытия ссылки ""%1"" необходимо установить расширение работы с файлами.'"),
		НавигационнаяСсылка);
	ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Оповещение, ТекстПредложения, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
