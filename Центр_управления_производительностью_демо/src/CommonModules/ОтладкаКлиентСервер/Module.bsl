///////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ СООБЩЕНИЙ

// Записать сообщение в протокол
//
// Параметры:
//  Идентификатор - Строка, идентификатор сообщения для протокола
//  Параметр0 - Произвольный, значение для Словарь.Получить()
//  Параметр1 - Произвольный, значение для Словарь.Получить()
//  Параметр2 - Произвольный, значение для Словарь.Получить()
//
Процедура Сообщение(Идентификатор,
                    Параметр0 = Неопределено,
                    Параметр1 = Неопределено,
                    Параметр2 = Неопределено) Экспорт
	
	Текст = СловарьКлиентСервер.Получить(Идентификатор,
	                         Параметр0,
	                         Параметр1,
	                         Параметр2);
	
	#Если Клиент Тогда
		Состояние(Текст);
	#КонецЕсли
	
	Протокол(Текст);
	
КонецПроцедуры // Сообщить()

// Записать действие в протокол
//
// Параметры:
//  Идентификатор - Строка, идентификатор сообщения для протокола
//  Параметр0 - Произвольный, значение для Словарь.Получить()
//  Параметр1 - Произвольный, значение для Словарь.Получить()
//  Параметр2 - Произвольный, значение для Словарь.Получить()
//
Процедура Действие(Идентификатор,
                   Параметр0 = Неопределено,
                   Параметр1 = Неопределено,
                   Параметр2 = Неопределено) Экспорт
	
	Текст = СловарьКлиентСервер.Получить("Действие" + Идентификатор,
	                         Параметр0,
	                         Параметр1,
	                         Параметр2);
	
	#Если Клиент Тогда
		Если глКонтекст <> Неопределено Тогда
			Контекст.Действия().Вставить(0, Текст);
		КонецЕсли;
		
		Состояние(Текст);
		Текст = СловарьКлиентСервер.Получить("ОтладкаДействие") + Текст;
	#КонецЕсли
	
	Протокол(Текст);
	
КонецПроцедуры // Действие()

// Записать команду в протокол
//
// Параметры:
//  Команда - Строка, выполняемая команда
//  Параметры - Произвольный, параметры команды
//
Процедура Команда(Команда, Параметры) Экспорт
	
	ЕстьПараметры = ЗначениеЗаполнено(Параметры);
	ПараметрыКоманды = ?(ЕстьПараметры, " (" + Параметры + ")", "");
	Протокол(СловарьКлиентСервер.Получить("ОтладкаКоманда") + Команда + ПараметрыКоманды);
	
КонецПроцедуры // Команда()

// Зарегистрировать сообщение об ошибке
//
// Параметры:
//  ИнформацияОбОшибке - ИнформацияОбОшибке, подробное описание ошибки
//  ОткрыватьМастерПодключения - Булево, предлагать ли и открывать
//                 мастер настройки подключения к исследуемой
//                 информационной базе
//
// Возвращаемое значение:
//  Строка - текстовое сообщение об ошибке для пользователя
//
Процедура Ошибка(ИнформацияОбОшибке, ОткрыватьМастерПодключения = Ложь) Экспорт
	
	Перем ПодробноеОписание;
	Перем Причина;
	
	ЭтоСтрока = ТипЗнч(ИнформацияОбОшибке) = Тип("Строка");
	
	Если ЭтоСтрока Тогда
		ПодробноеОписание = ИнформацияОбОшибке;
	Иначе
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			Причина = "(" + ИнформацияОбОшибке.Причина.Описание + ")";
		КонецЕсли;
	
		ПодробноеОписание = "{"
		                  + ИнформацияОбОшибке.ИмяМодуля
		                  + "("
		                  + ИнформацияОбОшибке.НомерСтроки
		                  + "):"
		                  + Символы.ПС
		                  + "["
		                  + СокрЛП(ИнформацияОбОшибке.ИсходнаяСтрока)
		                  + "]}:"
		                  + Символы.ПС
		                  + ИнформацияОбОшибке.Описание
		                  + Символы.ПС
		                  + Причина;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ЗаписатьВЖурнал(
		СловарьКлиентСервер.Получить("Ошибка"),
		"Ошибка",
		ПодробноеОписание);
		
	ТекстСообщения = ?(ЭтоСтрока, ИнформацияОбОшибке, ИнформацияОбОшибке.Описание);
	
	#Если Клиент Тогда
		ИБ = Контекст.ИнформационнаяБаза();
		ДопПараметры = Новый Структура("ОткрыватьМастерПодключения,ИБ", ОткрыватьМастерПодключения, ИБ);
		Если ОткрыватьМастерПодключения Тогда
			ТекстСообщения = ТекстСообщения + "
				|
				|Большинство проблем работы с ЦУП можно выявить и устранить при помощи мастера настройки подключения к исследуемой информационной базе. Запустить мастер настройки сейчас?";
			ИнтерфейсыКлиент.Спросить(
				ТекстСообщения,
				РежимДиалогаВопрос.ДаНет,,
				КодВозвратаДиалога.Да,,
				"ОтладкаКлиентСервер.ОшибкаЗавершение",
				ДопПараметры
			);
			Возврат;
		Иначе
			ИнтерфейсыКлиент.Предупредить(ТекстСообщения,, СловарьКлиентСервер.Получить("ЗаголовокЦУП"));
			ОшибкаЗавершение(Неопределено, ДопПараметры);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры // Ошибка()

#Если Клиент Тогда

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОшибкаЗавершение(Результат, ДопПараметры) Экспорт
	
	ОткрыватьМастерПодключения = ДопПараметры.ОткрыватьМастерПодключения;
	Если глПоказыватьОтладочныеСообщения() Тогда
		ТекстСообщения = СформироватьСообщение(ТекстСообщения);
		Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
	КонецЕсли;
	
	Если ОткрыватьМастерПодключения И Результат = КодВозвратаДиалога.Да Тогда
		Если ЗначениеЗаполнено(ДопПараметры.ИБ) Тогда
			ПараметрыФормы = Новый Структура("Ключ", ДопПараметры.ИБ);
			ОткрытьФорму("Справочник.ИнформационныеБазы.Форма.ФормаНастройки", ПараметрыФормы,
			,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры // ОшибкаЗавершение()

#КонецЕсли

// Записать результат в протокол
//
// Параметры:
//  Идентификатор - Строка, идентификатор сообщения для протокола
//  Параметр0 - Произвольный, значение для Словарь.Получить()
//  Параметр1 - Произвольный, значение для Словарь.Получить()
//  Параметр2 - Произвольный, значение для Словарь.Получить()
//
Процедура Результат(Идентификатор,
                    Параметр0 = Неопределено,
                    Параметр1 = Неопределено,
                    Параметр2 = Неопределено) Экспорт
	
	Текст = СловарьКлиентСервер.Получить("Результат" + Идентификатор,
	                         Параметр0,
	                         Параметр1,
	                         Параметр2);
	Протокол(СловарьКлиентСервер.Получить("ОтладкаРезультат") + Текст);
	
	#Если Клиент Тогда
		Если глКонтекст <> Неопределено Тогда
			Действия = Контекст.Действия();
			
			Если Действия.Количество() > 0 Тогда
				Действия.Удалить(0);
			КонецЕсли;
			
			Если Действия.Количество() > 0 Тогда
				Состояние(Действия[0]);
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры // Результат()

// Записать событие в протокол
//
// Параметры:
//  Событие - СправочникСсылка.Событие
//  Параметры - Произвольный, параметры события
//
Процедура Событие(Событие, Параметры) Экспорт
	
	ЕстьПараметры = ЗначениеЗаполнено(Параметры);
	ПараметрыСобытия = ?(ЕстьПараметры, " (" + Параметры + ")", "");
	Протокол(СловарьКлиентСервер.Получить("ОтладкаСобытие") + Событие + ПараметрыСобытия);
	
КонецПроцедуры // Событие()

// Записать событие в протокол
//
// Параметры:
//  Идентификатор - Строка, идентификатор сообщения для протокола
//  Параметр0 - Произвольный, значение для Словарь.Получить()
//  Параметр1 - Произвольный, значение для Словарь.Получить()
//  Параметр2 - Произвольный, значение для Словарь.Получить()
//
Процедура СостояниеСценария(Состояние) Экспорт
	
	Протокол(СловарьКлиентСервер.Получить("ОтладкаСостояние") + Состояние);
	
КонецПроцедуры // СобытиеСостояниеСценария()


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Записать в протокол сообщений о текущем состоянии выполнения
//
// Параметры:
//  Текст - Строка, текст сообщения
//
Процедура Протокол(Текст) Экспорт
	
	#Если Клиент Тогда
		Если Не РежимОтладкиЦУП() Тогда
			Возврат;
		КонецЕсли;
	#ИначеЕсли Сервер Тогда
		Если Не Константы.РежимОтладки.Получить() Тогда
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ОбщегоНазначенияВызовСервера.ЗаписатьВЖурнал(
		СловарьКлиентСервер.Получить("Протокол"),
		"Информация",
		Текст);
		
	#Если Клиент Тогда
		Если глПоказыватьОтладочныеСообщения() Тогда
			ТекстСообщения = СформироватьСообщение(Текст);
			Сообщить(ТекстСообщения, СтатусСообщения.Информация);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры // Протокол

// Сформировать полный текст сообщения с учетом даты и времени
//
// Параметры:
//  ТекстСообщения - Строка
//
// Возвращаемое значение:
//  Строка - сообщение с учетом даты и времени
//
Функция СформироватьСообщение(ТекстСообщения)
	
	Возврат Строка(ТекущаяДата())+ ", "+ ТекстСообщения;
	
КонецФункции // СформироватьСообщение()
