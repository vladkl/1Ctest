///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОКАЗАТЕЛЯМИ ПРОИЗВОДИТЕЛЬНОСТИ

// Процедура получает текущие значения показателей производительности для
// указанного подключения
//
// Параметры:
//  ПоказателиПроизводительности - ТаблицаЗначений, таблица показателей
//                 производительности и их значений
//  ВремяПоследнегоОбновления - Число, время последнего обновления значений
//                 показателей
//  СлужебныйТакт - Булево, Истина - обработка накопительных показателей
//  ВнешнийИсточник - Произвольный, внешний источник данных
//
Процедура ПолучитьЗначенияВсехПоказателей(ИБ, ПодключениеИБ, СоединенияИБ, ВнешнийИсточникПП, Показатели, ВремяНачалаТакта, ВремяПоследнегоОбновления, СлужебныйТакт, Счетчики, СоединенияРП, НачалоСоединенияРП, АгентыЦКК) Экспорт
	
	Если ВнешнийИсточникПП = Неопределено Тогда
		ПолучитьЗначенияПоказателей(ИБ, ПодключениеИБ, СоединенияИБ, Показатели, ВремяНачалаТакта, ВремяПоследнегоОбновления, СлужебныйТакт, СоединенияРП, НачалоСоединенияРП);
		
		Если Не СлужебныйТакт И Счетчики <> Неопределено Тогда
			ПолучитьЗначенияПоказателейОС(Счетчики, Показатели);
		КонецЕсли;
		
		Если Не СлужебныйТакт И АгентыЦКК.Количество() > 0 Тогда
			ПолучитьЗначенияПоказателейАгентаЦКК(АгентыЦКК, Показатели);
		КонецЕсли;
	Иначе
		Если Не СлужебныйТакт Тогда
			ВнешнийИсточникПП.ПолучитьЗначенияПоказателей(ИБ, Показатели, ВремяНачалаТакта, ВремяПоследнегоОбновления);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЗначенияВсехПоказателей()

// Получить значения показателей производительности ОС (Windows)
//
// Параметры:
//  Счетчики - "ETP.Addin.Counters"
//  Показатели - ТаблицаЗначений, значения показателей
//
Процедура ПолучитьЗначенияПоказателейОС(Счетчики, Показатели)
	
	КипВнешнийКомпонент.СобратьЗначенияСчетчиков(Счетчики);
	
	Для Каждого ТекСтр Из Показатели Цикл
		СпособСбора = ПолучитьСпособСбораПоказателя(ТекСтр.Показатель);
		Если СпособСбора = Перечисления.СпособыСбораСчетчиков.PDH Тогда
			Если ТекСтр.ИндексПоказателя <> Неопределено Тогда
				ТекСтр.Значение = КипВнешнийКомпонент.ЗначениеСчетчика(
					Счетчики,
					ТекСтр.ИндексПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗначенияПоказателейОС()

// Получить значения показателей агента ЦКК
//
// Параметры:
//  Показатели - ТаблицаЗначений, значения показателей
//
Процедура ПолучитьЗначенияПоказателейАгентаЦКК(АгентыЦКК, Показатели)
	
	ТекущиеЗначения = Новый Соответствие;
	Для Каждого ТекАгент Из АгентыЦКК Цикл
		ДанныеРегистра = РегистрыСведений.ТекущиеЗначенияПроизводительности.ПолучитьЗначения(ТекАгент);
		ТекущиеЗначения.Вставить(ТекАгент, ДанныеРегистра);
	КонецЦикла;
	
	Для Каждого ТекСтр Из Показатели Цикл
		СпособСбора = ПолучитьСпособСбораПоказателя(ТекСтр.Показатель);
		Если СпособСбора = Перечисления.СпособыСбораСчетчиков.АгентЦКК Тогда
			АгентЦКК = ПолучитьАгентЦККПоПоказателю(ТекСтр.Показатель);
			ДанныеРегистра = ТекущиеЗначения.Получить(АгентЦКК);
			СчетчикПроизводительности = ПолучитьСчетчикПроизводительностиПоказателя(ТекСтр.Показатель);
			ДанныеПоСчетчику = ДанныеРегистра.Получить(СчетчикПроизводительности);
			Если ДанныеПоСчетчику <> Неопределено Тогда
				ТекСтр.Значение = ДанныеПоСчетчику.Значение;
			Иначе
				ТекСтр.Значение = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗначенияПоказателейАгентаЦКК()

// Получить весовой коэффициент показателя производительности
//
// Параметры:
//  Показатель - Справочник.Ссылка, показатель производительности
//
// Возвращаемое значение:
//  Число - весовой коэффициент
//
Функция ПолучитьВесовойКоэффициент(Показатель) Экспорт
	
	Возврат Число(Показатель.Параметр.Найти("Весовой коэффициент", "Имя").Значение);
	
КонецФункции // ПолучитьВесовойКоэффициент()

// Процедура получает текущие значения показателей производительности
// на основе данных от сервера 1С:Предприятия
//
// Параметры:
//  ПоказателиПроизводительности - ТаблицаЗначений, таблица показателей
//                 производительности и их значений
//  ВремяПоследнегоОбновления - Число, время последнего обновления значений показателей
//  СлужебныйТакт - Булево, Истина - обработка накопительных показателей
//
Процедура ПолучитьЗначенияПоказателей(ИБ, ПодключениеИБ, СоединенияИБ, Показатели, ВремяНачалаТакта, ВремяПоследнегоОбновления, СлужебныйТакт, СоединенияРП, НачалоСоединенияРП) Экспорт
	
	// Список соединений с информационной базой
	Перем ОписанияСоединенийИБ;
	
	ИнтервалОбновления = ВремяНачалаТакта - ВремяПоследнегоОбновления;
	
	//Получение значений базовых показателей производительности
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		
		Показатель = СтрокаПоказателя.Показатель;
		
		// Максимальное время выполнения серверных вызовов
		Если Показатель = Справочники.Показатели.МаксимальноеВремяВыполненияСерверногоВызова Тогда
			Если Не СлужебныйТакт Тогда
				ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
				СтрокаПоказателя.Значение = ПолучитьМаксимальноеВремяВыполненияСерверногоВызова(СоединенияИБ);
			КонецЕсли;
			
		// Среднее время выполнения серверных вызовов
		ИначеЕсли Показатель = Справочники.Показатели.СреднееВремяВыполненияСерверногоВызова Тогда
			Если Не СлужебныйТакт Тогда
				ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
				СтрокаПоказателя.Значение = ПолучитьСреднееВремяВыполненияСерверногоВызова(СоединенияИБ);
			КонецЕсли;
			
		// Суммарное время выполнения серверных вызовов
		ИначеЕсли Показатель = Справочники.Показатели.СуммарноеВремяВыполненияСерверныхВызовов Тогда
			Если Не СлужебныйТакт Тогда
				ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
				СтрокаПоказателя.Значение = ПолучитьСуммарноеВремяВыполненияСерверныхВызовов(СоединенияИБ);
			КонецЕсли;
			
		// Количество выполняемых серверных вызовов
		ИначеЕсли Показатель = Справочники.Показатели.КоличествоВыполняемыхСерверныхВызовов Тогда
			Если Не СлужебныйТакт Тогда
				ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
				СтрокаПоказателя.Значение = ПолучитьКоличествоВыполняемыхСерверныхВызовов(СоединенияИБ);
			КонецЕсли;
			
		// Максимальное время выполнения запроса
		ИначеЕсли Показатель = Справочники.Показатели.МаксимальноеВремяВыполненияЗапроса Тогда
			Если Не СлужебныйТакт Тогда
				ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
				СтрокаПоказателя.Значение = ПолучитьМаксимальноеВремяВыполненияЗапроса(СоединенияИБ);
			КонецЕсли;
			
		// Среднее время выполнения запроса
		ИначеЕсли Показатель = Справочники.Показатели.СреднееВремяВыполненияЗапроса Тогда
			Если Не СлужебныйТакт Тогда
				ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
				СтрокаПоказателя.Значение = ПолучитьСреднееВремяВыполненияЗапроса(СоединенияИБ);
			КонецЕсли;
			
		// Суммарное время выполнения запроса
		ИначеЕсли Показатель = Справочники.Показатели.СуммарноеВремяВыполненияЗапросов Тогда
			Если Не СлужебныйТакт Тогда
				ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
				СтрокаПоказателя.Значение = ПолучитьСуммарноеВремяВыполненияЗапросов(СоединенияИБ);
			КонецЕсли;
			
		// Количество выполняемых запросов
		ИначеЕсли Показатель = Справочники.Показатели.КоличествоВыполняемыхЗапросов Тогда
			Если Не СлужебныйТакт Тогда
				ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
				СтрокаПоказателя.Значение = ПолучитьКоличествоВыполняемыхЗапросов(СоединенияИБ);
			КонецЕсли;
			
		// Максимальное время ожидания на блокировке СУБД (сек.)
		ИначеЕсли Показатель = Справочники.Показатели.МаксимальноеВремяОжиданияНаБлокировкеСУБД Тогда
			ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
			Значение = ПолучитьМаксимальноеВремяОжиданияНаБлокировкеСУБД(СоединенияИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Среднее время ожидания на блокировке СУБД (сек.)
		ИначеЕсли Показатель = Справочники.Показатели.СреднееВремяОжиданияНаБлокировкеСУБД Тогда
			ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
			Значение = ПолучитьСреднееВремяОжиданияНаБлокировкахСУБД(СоединенияИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Суммарное время ожидания на блокировке СУБД (сек.)
		ИначеЕсли Показатель = Справочники.Показатели.СуммарноеВремяОжиданияНаБлокировкахСУБД Тогда
			ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
			Значение = ПолучитьСуммарноеВремяОжиданияНаБлокировкахСУБД(СоединенияИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Количество текущих ожиданий на блокировках СУБД (шт.)
		ИначеЕсли Показатель = Справочники.Показатели.КоличествоТекущихОжиданийНаБлокировкахСУБД Тогда
			ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
			Значение = ПолучитьКоличествоОжиданийНаБлокировкахСУБД(СоединенияИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Максимальное время ожидания на блокировке 1С (сек.)
		ИначеЕсли Показатель = Справочники.Показатели.МаксимальноеВремяОжиданияНаБлокировке1С Тогда
			ПолучитьОписанияСоединенийИБ(ИБ, ПодключениеИБ, ОписанияСоединенийИБ);
			Значение = ПолучитьМаксимальноеВремяОжиданияНаБлокировке1С(ОписанияСоединенийИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Среднее время ожидания на блокировке 1С (сек.)
		ИначеЕсли Показатель = Справочники.Показатели.СреднееВремяОжиданияНаБлокировке1С Тогда
			ПолучитьОписанияСоединенийИБ(ИБ, ПодключениеИБ, ОписанияСоединенийИБ);
			Значение = ПолучитьСреднееВремяОжиданияНаБлокировках1С(ОписанияСоединенийИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Суммарное время ожидания на блокировке 1С (сек.)
		ИначеЕсли Показатель = Справочники.Показатели.СуммарноеВремяОжиданияНаБлокировках1С Тогда
			ПолучитьОписанияСоединенийИБ(ИБ, ПодключениеИБ, ОписанияСоединенийИБ);
			Значение = ПолучитьСуммарноеВремяОжиданияНаБлокировках1С(ОписанияСоединенийИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Количество текущих ожиданий на блокировках 1С (шт.)
		ИначеЕсли Показатель = Справочники.Показатели.КоличествоТекущихОжиданийНаБлокировках1С Тогда
			ПолучитьОписанияСоединенийИБ(ИБ, ПодключениеИБ, ОписанияСоединенийИБ);
			Значение = ПолучитьКоличествоОжиданийНаБлокировках1С(ОписанияСоединенийИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Максимальное время ожидания на блокировке СУБД и 1С (сек.)
		ИначеЕсли Показатель = Справочники.Показатели.МаксимальноеВремяОжиданияНаБлокировкеСУБДи1С Тогда
			ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
			ПолучитьОписанияСоединенийИБ(ИБ, ПодключениеИБ, ОписанияСоединенийИБ);
			Значение = ПолучитьМаксимальноеВремяОжиданияНаБлокировкеСУБДи1С(СоединенияИБ, ОписанияСоединенийИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Среднее время ожидания на блокировке СУБД и 1С (сек.)
		ИначеЕсли Показатель = Справочники.Показатели.СреднееВремяОжиданияНаБлокировкеСУБДи1С Тогда
			ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
			ПолучитьОписанияСоединенийИБ(ИБ, ПодключениеИБ, ОписанияСоединенийИБ);
			Значение = ПолучитьСреднееВремяОжиданияНаБлокировкахСУБДи1С(СоединенияИБ, ОписанияСоединенийИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Суммарное время ожидания на блокировке СУБД и 1С (сек.)
		ИначеЕсли Показатель = Справочники.Показатели.СуммарноеВремяОжиданияНаБлокировкахСУБДи1С Тогда
			ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
			ПолучитьОписанияСоединенийИБ(ИБ, ПодключениеИБ, ОписанияСоединенийИБ);
			Значение = ПолучитьСуммарноеВремяОжиданияНаБлокировкахСУБДи1С(СоединенияИБ, ОписанияСоединенийИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Количество текущих ожиданий на блокировках СУБД и 1С (шт.)
		ИначеЕсли Показатель = Справочники.Показатели.КоличествоТекущихОжиданийНаБлокировкахСУБДи1С Тогда
			ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
			ПолучитьОписанияСоединенийИБ(ИБ, ПодключениеИБ, ОписанияСоединенийИБ);
			Значение = ПолучитьКоличествоОжиданийНаБлокировкахСУБДи1С(СоединенияИБ, ОписанияСоединенийИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			Если Не СлужебныйТакт Тогда
				СтрокаПоказателя.Значение = Значение;
			КонецЕсли;
			
		// Проблемы с параллельностью работы запросов
		ИначеЕсли Показатель = Справочники.Показатели.ПроблемыСПараллельностьюРаботы Тогда
			ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
			СуммарноеВремяОжиданияНаБлокировкахСУБД = ПолучитьСуммарноеВремяОжиданияНаБлокировкахСУБД(СоединенияИБ, СтрокаПоказателя.Данные, ИнтервалОбновления, ВремяНачалаТакта);
			
			Если Не СлужебныйТакт Тогда
				СуммарноеВремяВыполненияЗапроса = ПолучитьСуммарноеВремяВыполненияЗапросов(СоединенияИБ);
				Значение = ?(СуммарноеВремяВыполненияЗапроса = 0, 0, 100.0 * СуммарноеВремяОжиданияНаБлокировкахСУБД / СуммарноеВремяВыполненияЗапроса);
				СтрокаПоказателя.Значение = ?(Значение > 100.0, 100.0, Значение);
			КонецЕсли;
			
		// Количество взаимоблокировок СУБД
		ИначеЕсли Показатель = Справочники.Показатели.КоличествоВзаимоблокировок Тогда
			НовоеЗначение = Число(MSSQL.ПолучитьЗначениеСчетчикаСУБД(ИБ, "Взаимоблокировки"));
			Дельта = НовоеЗначение - СтрокаПоказателя.ПредыдущееЗначение;
			Если Дельта < 0 Тогда
				СтрокаПоказателя.Значение = 0;
			Иначе
				ОбновитьТаблицуИзмененийПоказателя(СтрокаПоказателя.ТаблицаИзменений, Дельта);
				СтрокаПоказателя.Значение = ОбщегоНазначенияКлиентСервер.ИтогПоКолонкеВМассивеСтруктур(СтрокаПоказателя.ТаблицаИзменений, "Значение");
			КонецЕсли;
			СтрокаПоказателя.ПредыдущееЗначение = НовоеЗначение;
			
		// Количество таймаутов СУБД
		ИначеЕсли Показатель = Справочники.Показатели.КоличествоТаймаутов Тогда
			НовоеЗначение = Число(MSSQL.ПолучитьЗначениеСчетчикаСУБД(ИБ, "Таймауты"));
			Дельта = НовоеЗначение - СтрокаПоказателя.ПредыдущееЗначение;
			Если Дельта < 0 Тогда
				СтрокаПоказателя.Значение = 0;
			Иначе
				ОбновитьТаблицуИзмененийПоказателя(СтрокаПоказателя.ТаблицаИзменений, Дельта);
				СтрокаПоказателя.Значение = ОбщегоНазначенияКлиентСервер.ИтогПоКолонкеВМассивеСтруктур(СтрокаПоказателя.ТаблицаИзменений, "Значение");
			КонецЕсли;
			СтрокаПоказателя.ПредыдущееЗначение = НовоеЗначение;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПолучитьЗначенияПоказателей()

// Получить единицу измерения по имени
//
// Параметры:
//  Имя - Строка, имя единицы измерения
//
// Возвращаемое значение:
//  Перечисление.ЕдиницаИзмерения
//
Функция ПолучитьЕдиницуИзмеренияПоИмени(Имя) Экспорт
	
	Если Имя = "Штука" Тогда
		Возврат Перечисления.ЕдиницыИзмерения.Штука;
	ИначеЕсли Имя = "Секунда" Тогда
		Возврат Перечисления.ЕдиницыИзмерения.Секунда;
	ИначеЕсли Имя = "%" Тогда
		Возврат Перечисления.ЕдиницыИзмерения.Процент;
	ИначеЕсли Имя = "ШтукВСекунду" Тогда
		Возврат Перечисления.ЕдиницыИзмерения.ШтукВСекунду;
	КонецЕсли;
	
КонецФункции // ПолучитьЕдиницуИзмеренияПоИмени()

// Проверить возможность использоватьния показателя производительности
//
// Параметры:
//  Показатель - СправочникСсылка.ПоказательПроизводительности
//  ИБ
//
// Возвращаемое значение:
//  Булево - Истина, можно использовать
//
Функция ВозможноИспользовать(Показатель, ИБ) Экспорт
	
	Если Показатель.Тип = Перечисления.ТипыПоказателей.Предприятие1С Тогда
		Возврат ИБ.ИспользоватьПП1С;
	ИначеЕсли Показатель.Тип = Перечисления.ТипыПоказателей.ОСВзаимоблокировки Тогда
		Возврат ИБ.ИспользоватьППОСВзаимоблокировки;
	ИначеЕсли Показатель.Тип = Перечисления.ТипыПоказателей.ОСТаймауты Тогда
		Возврат ИБ.ИспользоватьППОСТаймауты;
	ИначеЕсли Показатель.Тип = Перечисления.ТипыПоказателей.АнализЗапросов Тогда
		Возврат ИБ.ИспользоватьППАнализЗапросов;
	ИначеЕсли Показатель.Тип = Перечисления.ТипыПоказателей.АнализОжиданий Тогда
		Возврат ИБ.ИспользоватьППАнализОжиданий;
	ИначеЕсли Показатель.Тип = Перечисления.ТипыПоказателей.АнализВзаимоблокировок Тогда
		Возврат ИБ.ИспользоватьППАнализВзаимоблокировок;
	ИначеЕсли Показатель.Тип = Перечисления.ТипыПоказателей.АнализСерверныхВызовов Тогда
		Возврат ИБ.ИспользоватьППАнализСерверныхВызовов;
	ИначеЕсли Показатель.Тип = Перечисления.ТипыПоказателей.ПроизвольныеСчетчикиОС Тогда
		Возврат ИБ.ИспользоватьПППроизвольныеСчетчикиОС;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ВозможноИспользовать()

// Возвращает массив типов показателей производительности, доступных для выбора
// в режиме мониторинга
//
// Параметры:
//  ИБ
//
// Возвращаемое значение:
//  Массив
//
Функция ДоступныеТипыПоказателей(ИБ) Экспорт
	
	Результат = Новый Массив;
	
	Если ИБ.ИспользоватьПП1С Тогда
		Результат.Добавить(Перечисления.ТипыПоказателей.Предприятие1С);
	КонецЕсли;
	
	Если ИБ.ИспользоватьППОСВзаимоблокировки Тогда
		Результат.Добавить(Перечисления.ТипыПоказателей.ОСВзаимоблокировки);
	КонецЕсли;
	
	Если ИБ.ИспользоватьППОСТаймауты Тогда
		Результат.Добавить(Перечисления.ТипыПоказателей.ОСТаймауты);
	КонецЕсли;
	
	Если ИБ.ИспользоватьППАнализЗапросов Тогда
		Результат.Добавить(Перечисления.ТипыПоказателей.АнализЗапросов);
	КонецЕсли;
	
	Если ИБ.ИспользоватьППАнализОжиданий Тогда
		Результат.Добавить(Перечисления.ТипыПоказателей.АнализОжиданий);
	КонецЕсли;
	
	Если ИБ.ИспользоватьППАнализВзаимоблокировок Тогда
		Результат.Добавить(Перечисления.ТипыПоказателей.АнализВзаимоблокировок);
	КонецЕсли;
	
	Если ИБ.ИспользоватьППАнализСерверныхВызовов Тогда
		Результат.Добавить(Перечисления.ТипыПоказателей.АнализСерверныхВызовов);
	КонецЕсли;
	
	Если ИБ.ИспользоватьПППроизвольныеСчетчикиОС Тогда
		Результат.Добавить(Перечисления.ТипыПоказателей.ПроизвольныеСчетчикиОС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДоступныеТипыПоказателей()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОКАЗАТЕЛЯМИ ПРОИЗВОДИТЕЛЬНОСТИ (ОБЩИЕ)

// Процедура получает массив соединений с информационной базой в том случае,
// если они еще не получены.
//
// Параметры:
//  СоединенияИБ - Массив, соединения с информационной базой
//
// Возвращаемое значение:
//  Массив, соединений информационной базы
//
Процедура ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП)
	
	// Если соединения еще не получены
	Если СоединенияИБ = Неопределено Тогда
		
		Если ПодключениеИБ = Неопределено Тогда
			ПодключениеИБ = ИнформационнаяБаза.ПодключениеИБ(ИБ);
		КонецЕсли;
		Соединитель = ОбщегоНазначения.ПолучитьComСоединитель();
		ИнтервалОбновленияПодключенийРП = ОбщегоНазначения.ИнтервалОбновленияПодключенийРП();
		СоединенияРП = КонтекстВызовСервера.СоединенияРП(Соединитель, ПодключениеИБ, СоединенияРП, НачалоСоединенияРП, ИнтервалОбновленияПодключенийРП);
		COMСоединения = ИнформационнаяБаза.ПолучитьСоединенияИБ(СоединенияРП, ПодключениеИБ.ИБ);
		
		СоединенияИБ = Новый ТаблицаЗначений;
		СоединенияИБ.Колонки.Добавить("durationCurrent", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		СоединенияИБ.Колонки.Добавить("durationCurrentDBMS", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		СоединенияИБ.Колонки.Добавить("ConnID", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		СоединенияИБ.Колонки.Добавить("BlockedByDBMS", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		СоединенияИБ.Колонки.Добавить("blockedByLM", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		
		Для Каждого Соединение Из COMСоединения Цикл
			
			СтрокаСоединенияИБ = СоединенияИБ.Добавить();
			СтрокаСоединенияИБ.durationCurrent = Соединение.durationCurrent;
			СтрокаСоединенияИБ.durationCurrentDBMS = Соединение.durationCurrentDBMS;
			СтрокаСоединенияИБ.ConnID = Соединение.ConnID;
			СтрокаСоединенияИБ.BlockedByDBMS = Соединение.BlockedByDBMS;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСоединенияИБ()

// Процедура получает массив описаний соединений с информационной базой в том случае,
// если они еще не получены.
//
// Параметры:
//  ОписанияСоединенийИБ - Массив, описаний соединений с информационной базой
//
// Возвращаемое значение:
//  Массив, соединений информационной базы
//
Процедура ПолучитьОписанияСоединенийИБ(ИБ, ПодключениеИБ, ОписанияСоединенийИБ)
	
	// Если соединения еще не получены
	Если ОписанияСоединенийИБ = Неопределено Тогда
		
		// Получить соединения агента сервера
		//ПодключениеИБ = КонтекстВызовСервера.ПодключениеИБ(ИБ);
		МассивСоединенийИБ = ИнформационнаяБаза.ПолучитьОписанияСоединенийИБ(ПодключениеИБ.АгентСервера, ПодключениеИБ.ПараметрыИБ.ПортКластера, ПодключениеИБ.ОписаниеИБ);
		
		ОписанияСоединенийИБ = Новый ТаблицаЗначений;
		ОписанияСоединенийИБ.Колонки.Добавить("ConnID", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		ОписанияСоединенийИБ.Колонки.Добавить("blockedByLM", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
		
		Для Каждого Соединение Из МассивСоединенийИБ Цикл
			
			СтрокаСоединенияИБ = ОписанияСоединенийИБ.Добавить();
			
			СтрокаСоединенияИБ.blockedByLM = Соединение.blockedByLM;
			СтрокаСоединенияИБ.ConnID = Соединение.ConnID;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьОписанияСоединенийИБ()

// Проверить, является ли показатель аналитическим
//
// Параметры:
//  Показатель - СтправочникСсылка.Показатель
//
// Возвращаемое значение:
//  Булево - Истина, показатель аналитический
//
Функция ЭтоАналитическийПП(Показатель) Экспорт
	
	ТипПоказателя = Показатель.Тип;
	
	Возврат ТипПоказателя = Перечисления.ТипыПоказателей.АнализЗапросов
	    Или ТипПоказателя = Перечисления.ТипыПоказателей.АнализОжиданий
	    Или ТипПоказателя = Перечисления.ТипыПоказателей.АнализВзаимоблокировок;
	
КонецФункции // ЭтоАналитическийПП()

// Проверяет, не изменились ли ключевые настройки ИБ с момента прохождения
// мастера настроек
//
// Параметры:
//  ИБ  - СправочникСсылка.ИнформационныеБазы - Информационная база
//  ПодключениеИБ  - Структура - Коллекция, содержащая параметры подключения к ИБ
//  ОписаниеОшибки - Строка - Используется для возврата текста исключения в случае ошибки проверки
//
// Возвращаемое значение:
//   Булево   - Результат проверки
//
Функция ПроверитьНастройкиИБ(ИБ, ПодключениеИБ, ОписаниеОшибки)
	
	НастройкиКорректны = Истина;
	
	Режим = КонтекстВызовСервера.РежимУправленияБлокировкойДанных(ПодключениеИБ);
	Если ИБ.РежимУправленияБлокировкойДанных <> Режим Тогда
		НастройкиКорректны = Ложь;
		ОписаниеОшибки = " * Изменился режим управления блокировкой данных. Старое значение: " 
			+ ИБ.РежимУправленияБлокировкойДанных + ", новое значение: " + Режим;
	КонецЕсли;
	
	ТипСУБД = СУБД.ПолучитьТипСУБД(ПодключениеИБ.ИБ.DBMS);
	Если ИБ.ТипСУБД <> ТипСУБД Тогда
		НастройкиКорректны = Ложь;
		ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), "", ОписаниеОшибки + Символы.ПС)
			+ " * Изменился тип сервера СУБД. Старое значение: " 
			+ ИБ.ТипСУБД + ", новое значение: " + ТипСУБД;
		КонецЕсли;
	
	Если ИБ.ИмяБД <> ПодключениеИБ.ИБ.DBName Тогда
		НастройкиКорректны = Ложь;
		ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), "", ОписаниеОшибки + Символы.ПС)
			+ " * Изменилось имя сервера СУБД. Старое значение: " 
			+ ИБ.ИмяБД + ", новое значение: " + ПодключениеИБ.ИБ.DBName;
	КонецЕсли;
	
	Возврат НастройкиКорректны;
	
КонецФункции // ПроверитьНастройкиИБ()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОКАЗАТЕЛЯМИ ПРОИЗВОДИТЕЛЬНОСТИ (СЧЕТЧИКИ ОС)

// Получить счетчики операционной системы
//
// Возвращаемое значение:
//  "ETP.Addin.Counters"
//
Функция ПолучитьСчетчикиОС()
	
	СчетчикиОС = КипВнешнийКомпонент.ПолучитьСчетчики();
	КипВнешнийКомпонент.ПодключитьСчетчики(СчетчикиОС);
	
	Возврат СчетчикиОС;
	
КонецФункции // ПолучитьСчетчикиОС()

// Проверяет, имеются ли в выбранных показателях такие, которые требуют сбора счетчиков ОС
//
// Параметры:
//  Показатели  - Массив - Коллекция, содержащая описание выбранных показателей
//
// Возвращаемое значение:
//   Булево   - Результат проверки
//
Функция ЕстьСчетчикиОС(Показатели)
	
	МассивПоказателей = Новый Массив;
	Для Каждого ТекЭлемент Из Показатели Цикл
		МассивПоказателей.Добавить(ТекЭлемент.Показатель);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Показатели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Ссылка В(&МассивПоказателей)
	|	И Показатели.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателей.ПроизвольныеСчетчикиОС)";
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	ЕстьСчетчикиОС = Не Запрос.Выполнить().Пустой();
	Возврат ЕстьСчетчикиОС;
	
КонецФункции // ЕстьСчетчикиОС()

// Проверяет, имеются ли в выбранных показателях такие, которые получают информацию от Агента ЦКК
//
// Параметры:
//  Показатели  - Массив - Коллекция, содержащая описание выбранных показателей
//
// Возвращаемое значение:
//   Булево   - Результат проверки
//
Функция ЕстьСчетчикиАгентаЦКК(Показатели)
	
	МассивПоказателей = Новый Массив;
	Для Каждого ТекЭлемент Из Показатели Цикл
		МассивПоказателей.Добавить(ТекЭлемент.Показатель);
	КонецЦикла;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Показатели.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Показатели КАК Показатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Показатели.Параметр КАК ПоказателиПараметр
	|		ПО Показатели.Ссылка = ПоказателиПараметр.Ссылка
	|ГДЕ
	|	Показатели.Ссылка В(&МассивПоказателей)
	|	И Показатели.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателей.ПроизвольныеСчетчикиОС)
	|	И ПоказателиПараметр.Имя = ""Способ сбора счетчика""
	|	И ПоказателиПараметр.Значение = ЗНАЧЕНИЕ(Перечисление.СпособыСбораСчетчиков.АгентЦКК)";
	
	Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
	
	Результат = Не Запрос.Выполнить().Пустой();
	Возврат Результат;
	
КонецФункции // ЕстьСчетчикиАгентаЦКК()

// Возвращает способ сбора произвольного показателя ОС
//
// Параметры:
//  Показатель  - СправочникСсылка.Показатели - Показатель
//
// Возвращаемое значение:
//   ПеречислениеСсылка.СпособыСбораСчетчиков   - Способ сбора
//
Функция ПолучитьСпособСбораПоказателя(Показатель) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиПараметр.Значение КАК Значение
	|ИЗ
	|	Справочник.Показатели.Параметр КАК ПоказателиПараметр
	|ГДЕ
	|	ПоказателиПараметр.Ссылка = &Ссылка
	|	И ПоказателиПараметр.Имя = ""Способ сбора счетчика""";
	
	Запрос.УстановитьПараметр("Ссылка", Показатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСпособСбораПоказателя()

// Возвращает агент, к которому относится текущий показатель
//
// Параметры:
//  Показатель  - СправочникСсылка.Показатели - Показатель
//
// Возвращаемое значение:
//   СправочникСсылка.АгентыЦКК   - Агент ЦКК
//
Функция ПолучитьАгентЦККПоПоказателю(Показатель) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиПараметр.Значение КАК Значение
	|ИЗ
	|	Справочник.Показатели.Параметр КАК ПоказателиПараметр
	|ГДЕ
	|	ПоказателиПараметр.Ссылка = &Ссылка
	|	И ПоказателиПараметр.Имя = ""Агент ЦКК""";
	
	Запрос.УстановитьПараметр("Ссылка", Показатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАгентЦККПоПоказателю()

// Возвращает счетчик производительности, к которому привязан текущий показатель
//
// Параметры:
//  Показатель  - СправочникСсылка.Показатели - Показатель
//
// Возвращаемое значение:
//   СправочникСсылка.СчетчикПроизводительности   - Счетчик производительности
//
Функция ПолучитьСчетчикПроизводительностиПоказателя(Показатель) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиПараметр.Значение КАК Значение
	|ИЗ
	|	Справочник.Показатели.Параметр КАК ПоказателиПараметр
	|ГДЕ
	|	ПоказателиПараметр.Ссылка = &Ссылка
	|	И ПоказателиПараметр.Имя = ""Счетчик производительности""";
	
	Запрос.УстановитьПараметр("Ссылка", Показатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Значение;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАгентЦККПоПоказателю()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОКАЗАТЕЛЯМИ ПРОИЗВОДИТЕЛЬНОСТИ (СЕРВЕРНЫЕ ВЫЗОВЫ)

// Функция получает максимальное время выполнения серверного вызова
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//
// Возвращаемое значение:
//  Число - максимальное время выполнения серверного вызова
//
Функция ПолучитьМаксимальноеВремяВыполненияСерверногоВызова(СоединенияИБ)
	
	МаксимальноеВремя = 0;
	
	// Найти максимальное время выполнения запроса
	Для Каждого Соединение Из СоединенияИБ Цикл
		Если Соединение.durationCurrent > МаксимальноеВремя Тогда
			МаксимальноеВремя = Соединение.durationCurrent;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальноеВремя / 1000;
	
КонецФункции // ПолучитьМаксимальноеВремяВыполненияСерверногоВызова()

// Функция получает среднее время выполнения серверного вызова
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//
// Возвращаемое значение:
//  Число - среднее время выполнения серверного вызова
//
Функция ПолучитьСреднееВремяВыполненияСерверногоВызова(СоединенияИБ)
	
	КоличествоСоединений = СоединенияИБ.Количество();
	СреднееВремя = 0;
	
	// Если есть соединения
	Если КоличествоСоединений > 0 Тогда
		
		КоличествоВызовов = 0;
		
		// Найти общее время выполнения серверных вызовов
		Для Каждого Соединение Из СоединенияИБ Цикл
			Если Соединение.durationCurrent > 0 Тогда
				КоличествоВызовов = КоличествоВызовов + 1;
				СреднееВремя = СреднееВремя + Соединение.durationCurrent;
			КонецЕсли;
		КонецЦикла;
		
		// Определить среднее время выполнения серверных вызовов
		Если КоличествоВызовов > 0 Тогда
			СреднееВремя = СреднееВремя / КоличествоВызовов / 1000;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СреднееВремя;
	
КонецФункции // ПолучитьСреднееВремяВыполненияСерверногоВызова()

// Функция получает суммарное время выполнения серверных вызовов
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//
// Возвращаемое значение:
//  Число - суммарное время выполнения серверных вызовов
//
Функция ПолучитьСуммарноеВремяВыполненияСерверныхВызовов(СоединенияИБ)
	
	СуммарноеВремя = 0;
	
	// Найти суммарное время выполнения запросов
	Для Каждого Соединение Из СоединенияИБ Цикл
		СуммарноеВремя = СуммарноеВремя + Соединение.durationCurrent;
	КонецЦикла;
	
	Возврат СуммарноеВремя / 1000;
	
КонецФункции // ПолучитьСуммарноеВремяВыполненияСерверныхВызовов()

// Функция получает количество выполняемых серверных вызовов
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//
// Возвращаемое значение:
//  Число - количество выполняемых серверных вызовов
//
Функция ПолучитьКоличествоВыполняемыхСерверныхВызовов(СоединенияИБ)
	
	КоличествоВызовов = 0;
	
	// Найти количество выполняемых серверных вызовов
	Для Каждого Соединение Из СоединенияИБ Цикл
		
		Если Соединение.durationCurrent > 0 Тогда
			КоличествоВызовов = КоличествоВызовов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоВызовов;
	
КонецФункции // ПолучитьКоличествоВыполняемыхСерверныхВызовов()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОКАЗАТЕЛЯМИ ПРОИЗВОДИТЕЛЬНОСТИ (ЗАПРОСЫ)

// Функция получает максимальное время выполнения запроса
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//
// Возвращаемое значение:
//  Число - максимальное время выполнения запроса
//
Функция ПолучитьМаксимальноеВремяВыполненияЗапроса(СоединенияИБ)
	
	МаксимальноеВремя = 0;
	
	// Найти максимальное время выполнения запроса
	Для Каждого Соединение Из СоединенияИБ Цикл
		Если Соединение.durationCurrentDBMS > МаксимальноеВремя Тогда
			МаксимальноеВремя = Соединение.durationCurrentDBMS;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальноеВремя / 1000;
	
КонецФункции // ПолучитьМаксимальноеВремяВыполненияЗапроса()

// Функция получает среднее время выполнения запроса
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//
// Возвращаемое значение:
//  Число - среднее время выполнения запроса
//
Функция ПолучитьСреднееВремяВыполненияЗапроса(СоединенияИБ)
	
	КоличествоСоединений = СоединенияИБ.Количество();
	СреднееВремя = 0;
	
	// Если есть соединения
	Если КоличествоСоединений > 0 Тогда
		
		КоличествоЗапросов = 0;
		
		// Найти общее время выполнения запросов
		Для Каждого Соединение Из СоединенияИБ Цикл
			Если Соединение.durationCurrentDBMS > 0 Тогда
				КоличествоЗапросов = КоличествоЗапросов + 1;
				СреднееВремя = СреднееВремя + Соединение.durationCurrentDBMS;
			КонецЕсли;
		КонецЦикла;
		
		// Определить среднее время выполнения запросов
		Если КоличествоЗапросов > 0 Тогда
			СреднееВремя = СреднееВремя / КоличествоЗапросов / 1000;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СреднееВремя;
	
КонецФункции // ПолучитьСреднееВремяВыполненияЗапроса()

// Функция получает суммарное время выполнения запросов
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//
// Возвращаемое значение:
//  Число - суммарное время выполнения запросов
//
Функция ПолучитьСуммарноеВремяВыполненияЗапросов(СоединенияИБ)
	
	СуммарноеВремя = 0;
	
	// Найти суммарное время выполнения запросов
	Для Каждого Соединение Из СоединенияИБ Цикл
		СуммарноеВремя = СуммарноеВремя + Соединение.durationCurrentDBMS;
	КонецЦикла;
	
	Возврат СуммарноеВремя / 1000;
	
КонецФункции // ПолучитьСуммарноеВремяВыполненияЗапросов()

// Функция получает количество выполняемых запросов
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//
// Возвращаемое значение:
//  Число - количество выполняемых запросов
//
Функция ПолучитьКоличествоВыполняемыхЗапросов(СоединенияИБ)
	
	КоличествоЗапросов = 0;
	
	// Найти количество выполняемых запросов
	Для Каждого Соединение Из СоединенияИБ Цикл
		
		Если Соединение.durationCurrentDBMS > 0 Тогда
			КоличествоЗапросов = КоличествоЗапросов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоЗапросов;
	
КонецФункции // ПолучитьКоличествоВыполняемыхЗапросов()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПОКАЗАТЕЛЯМИ ПРОИЗВОДИТЕЛЬНОСТИ (БЛОКИРОВКИ)

// Функция получает максимальное время ожидания на блокировке СУБД (сек)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - максимальное время ожидания на блокировке СУБД (сек)
//
Функция ПолучитьМаксимальноеВремяОжиданияНаБлокировкеСУБД(СоединенияИБ,
                                                          ИсторияБлокировок,
                                                          ИнтервалОбновления,
                                                          ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировок = ПолучитьТаблицуБлокировок(ИсторияБлокировок);
	ОбновитьТаблицуБлокировокСУБД(ТаблицаБлокировок, СоединенияИБ, ВремяНачалаТакта);
	
	// Найти максимальное время ожидания на блокировке
	МаксимальноеВремяОжидания = 
		ПолучитьМаксимальноеВремяОжиданияНаБлокировке(ТаблицаБлокировок, ИнтервалОбновления, ВремяНачалаТакта);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок);
	
	Возврат МаксимальноеВремяОжидания;
	
КонецФункции // ПолучитьМаксимальноеВремяОжиданияНаБлокировкеСУБД()

// Функция получает среднее время ожидания на блокировке СУБД (сек)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - среднее время ожидания на блокировке СУБД (сек)
//
Функция ПолучитьСреднееВремяОжиданияНаБлокировкахСУБД(СоединенияИБ,
                                                      ИсторияБлокировок,
                                                      ИнтервалОбновления,
                                                      ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировок = ПолучитьТаблицуБлокировок(ИсторияБлокировок);
	ОбновитьТаблицуБлокировокСУБД(ТаблицаБлокировок, СоединенияИБ, ВремяНачалаТакта);
	
	// Найти среднее время ожидания на блокировке
	СреднееВремяОжидания = 
		ПолучитьСреднееВремяОжиданияНаБлокировках(ТаблицаБлокировок, ИнтервалОбновления);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок);
	
	Возврат СреднееВремяОжидания;
	
КонецФункции // ПолучитьСреднееВремяОжиданияНаБлокировкахСУБД()

// Функция получает суммарное время ожидания на блокировке СУБД (сек)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - суммарное время ожидания на блокировках СУБД (сек)
//
Функция ПолучитьСуммарноеВремяОжиданияНаБлокировкахСУБД(СоединенияИБ,
                                                        ИсторияБлокировок,
                                                        ИнтервалОбновления,
                                                        ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировок = ПолучитьТаблицуБлокировок(ИсторияБлокировок);
	ОбновитьТаблицуБлокировокСУБД(ТаблицаБлокировок, СоединенияИБ, ВремяНачалаТакта);
	
	// Найти суммарное время ожидания на блокировке
	СуммарноеВремяОжидания = 
		ПолучитьСуммарноеВремяОжиданияНаБлокировках(ТаблицаБлокировок, ИнтервалОбновления);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок);
	
	Возврат СуммарноеВремяОжидания;
	
КонецФункции // ПолучитьСуммарноеВремяОжиданияНаБлокировкахСУБД()

// Функция получает текущее количество ожиданий на блокировках СУБД (шт)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - количество ожиданий на блокировках СУБД (шт)
//
Функция ПолучитьКоличествоОжиданийНаБлокировкахСУБД(СоединенияИБ,
                                                    ИсторияБлокировок,
                                                    ИнтервалОбновления,
                                                    ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировок = ПолучитьТаблицуБлокировок(ИсторияБлокировок);
	ОбновитьТаблицуБлокировокСУБД(ТаблицаБлокировок, СоединенияИБ, ВремяНачалаТакта);
	
	// Найти количество ожиданий на блокировках
	СуммарноеВремяОжидания = 
		ПолучитьКоличествоОжиданийНаБлокировках(ТаблицаБлокировок, ИнтервалОбновления);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок);
	
	Возврат СуммарноеВремяОжидания;
	
КонецФункции // ПолучитьКоличествоОжиданийНаБлокировкахСУБД()

// Функция получает максимальное время ожидания на блокировке 1С (сек)
//
// Параметры:
//  ОписанияСоединенийИБ - Массив, описаний соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - максимальное время ожидания на блокировке СУБД (сек)
//
Функция ПолучитьМаксимальноеВремяОжиданияНаБлокировке1С(ОписанияСоединенийИБ,
                                                        ИсторияБлокировок,
                                                        ИнтервалОбновления,
                                                        ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировок = ПолучитьТаблицуБлокировок(ИсторияБлокировок);
	ОбновитьТаблицуБлокировок1С(ТаблицаБлокировок, ОписанияСоединенийИБ, ВремяНачалаТакта);
	
	// Найти максимальное время ожидания на блокировке
	МаксимальноеВремяОжидания = 
		ПолучитьМаксимальноеВремяОжиданияНаБлокировке(ТаблицаБлокировок, ИнтервалОбновления, ВремяНачалаТакта);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок);
	
	Возврат МаксимальноеВремяОжидания;
	
КонецФункции // ПолучитьМаксимальноеВремяОжиданияНаБлокировке1С()

// Функция получает среднее время ожидания на блокировке 1С (сек)
//
// Параметры:
//  ОписанияСоединенийИБ - Массив, описаний соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - среднее время ожидания на блокировке СУБД (сек)
//
Функция ПолучитьСреднееВремяОжиданияНаБлокировках1С(ОписанияСоединенийИБ,
                                                    ИсторияБлокировок,
                                                    ИнтервалОбновления,
                                                    ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировок = ПолучитьТаблицуБлокировок(ИсторияБлокировок);
	ОбновитьТаблицуБлокировок1С(ТаблицаБлокировок, ОписанияСоединенийИБ, ВремяНачалаТакта);
	
	// Найти среднее время ожидания на блокировке
	СреднееВремяОжидания = 
		ПолучитьСреднееВремяОжиданияНаБлокировках(ТаблицаБлокировок, ИнтервалОбновления);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок);
	
	Возврат СреднееВремяОжидания;
	
КонецФункции // ПолучитьСреднееВремяОжиданияНаБлокировках1С()

// Функция получает суммарное время ожидания на блокировке 1С (сек)
//
// Параметры:
//  ОписанияСоединенийИБ - Массив, описаний соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - суммарное время ожидания на блокировках СУБД (сек)
//
Функция ПолучитьСуммарноеВремяОжиданияНаБлокировках1С(ОписанияСоединенийИБ,
                                                      ИсторияБлокировок,
                                                      ИнтервалОбновления,
                                                      ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировок = ПолучитьТаблицуБлокировок(ИсторияБлокировок);
	ОбновитьТаблицуБлокировок1С(ТаблицаБлокировок, ОписанияСоединенийИБ, ВремяНачалаТакта);
	
	// Найти суммарное время ожидания на блокировке
	СуммарноеВремяОжидания = 
		ПолучитьСуммарноеВремяОжиданияНаБлокировках(ТаблицаБлокировок, ИнтервалОбновления);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок);
	
	Возврат СуммарноеВремяОжидания;
	
КонецФункции // ПолучитьСуммарноеВремяОжиданияНаБлокировках1С()

// Функция получает текущее количество ожиданий на блокировках 1С (шт)
//
// Параметры:
//  ОписанияСоединенийИБ - Массив, описаний соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - количество ожиданий на блокировках СУБД (шт)
//
Функция ПолучитьКоличествоОжиданийНаБлокировках1С(ОписанияСоединенийИБ,
                                                  ИсторияБлокировок,
                                                  ИнтервалОбновления,
                                                  ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировок = ПолучитьТаблицуБлокировок(ИсторияБлокировок);
	ОбновитьТаблицуБлокировок1С(ТаблицаБлокировок, ОписанияСоединенийИБ, ВремяНачалаТакта);
	
	// Найти количество ожиданий на блокировках
	СуммарноеВремяОжидания = 
		ПолучитьКоличествоОжиданийНаБлокировках(ТаблицаБлокировок, ИнтервалОбновления);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок);
	
	Возврат СуммарноеВремяОжидания;
	
КонецФункции // ПолучитьКоличествоОжиданийНаБлокировках1С()

// Функция получает максимальное время ожидания на блокировке СУБД и 1С (сек)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - максимальное время ожидания на блокировке СУБД (сек)
//
Функция ПолучитьМаксимальноеВремяОжиданияНаБлокировкеСУБДи1С(СоединенияИБ,
                                                             ОписанияСоединенийИБ,
                                                             ИсторияБлокировок,
                                                             ИнтервалОбновления,
                                                             ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировокСУБД = ПолучитьТаблицуБлокировокСУБД(ИсторияБлокировок);
	ТаблицаБлокировок1С = ПолучитьТаблицуБлокировок1С(ИсторияБлокировок);
	ОбновитьТаблицуБлокировокСУБД(ТаблицаБлокировокСУБД, СоединенияИБ, ВремяНачалаТакта);
	ОбновитьТаблицуБлокировок1С(ТаблицаБлокировок1С, ОписанияСоединенийИБ, ВремяНачалаТакта);
	
	// Найти максимальное время ожидания на блокировке
	МаксимальноеВремяОжиданияСУБД = 
		ПолучитьМаксимальноеВремяОжиданияНаБлокировке(ТаблицаБлокировокСУБД, ИнтервалОбновления, ВремяНачалаТакта);
	МаксимальноеВремяОжидания1С = 
		ПолучитьМаксимальноеВремяОжиданияНаБлокировке(ТаблицаБлокировок1С, ИнтервалОбновления, ВремяНачалаТакта);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировокСУБД);
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок1С);
	
	Возврат ?(МаксимальноеВремяОжиданияСУБД > МаксимальноеВремяОжидания1С, МаксимальноеВремяОжиданияСУБД, МаксимальноеВремяОжидания1С);
	
КонецФункции // ПолучитьМаксимальноеВремяОжиданияНаБлокировкеСУБДи1С()

// Функция получает среднее время ожидания на блокировке СУБД и 1С (сек)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - среднее время ожидания на блокировке СУБД (сек)
//
Функция ПолучитьСреднееВремяОжиданияНаБлокировкахСУБДи1С(СоединенияИБ,
                                                         ОписанияСоединенийИБ,
                                                         ИсторияБлокировок,
                                                         ИнтервалОбновления,
                                                         ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировокСУБД = ПолучитьТаблицуБлокировокСУБД(ИсторияБлокировок);
	ТаблицаБлокировок1С = ПолучитьТаблицуБлокировок1С(ИсторияБлокировок);
	ОбновитьТаблицуБлокировокСУБД(ТаблицаБлокировокСУБД, СоединенияИБ, ВремяНачалаТакта);
	ОбновитьТаблицуБлокировок1С(ТаблицаБлокировок1С, ОписанияСоединенийИБ, ВремяНачалаТакта);
	
	// Найти среднее время ожидания на блокировке
	СуммарноеВремяОжиданияСУБД = 
		ПолучитьСуммарноеВремяОжиданияНаБлокировках(ТаблицаБлокировокСУБД, ИнтервалОбновления);
	СуммарноеВремяОжидания1С = 
		ПолучитьСуммарноеВремяОжиданияНаБлокировках(ТаблицаБлокировок1С, ИнтервалОбновления);
		
	// Найти количество ожиданий на блокировках
	КоличествоОжиданийСУБД = 
		ПолучитьКоличествоОжиданийНаБлокировках(ТаблицаБлокировокСУБД, ИнтервалОбновления);
	КоличествоОжиданий1С = 
		ПолучитьКоличествоОжиданийНаБлокировках(ТаблицаБлокировок1С, ИнтервалОбновления);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировокСУБД);
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок1С);
	
	СуммарноеОжидание = СуммарноеВремяОжиданияСУБД + СуммарноеВремяОжидания1С;
	ОбщееКоличество = КоличествоОжиданийСУБД + КоличествоОжиданий1С;
	
	Возврат ?(ОбщееКоличество = 0, 0, СуммарноеОжидание / ОбщееКоличество);
	
КонецФункции // ПолучитьСреднееВремяОжиданияНаБлокировкахСУБДи1С()

// Функция получает суммарное время ожидания на блокировке СУБД и 1С (сек)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - суммарное время ожидания на блокировках СУБД (сек)
//
Функция ПолучитьСуммарноеВремяОжиданияНаБлокировкахСУБДи1С(СоединенияИБ,
                                                           ОписанияСоединенийИБ,
                                                           ИсторияБлокировок,
                                                           ИнтервалОбновления,
                                                           ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировокСУБД = ПолучитьТаблицуБлокировокСУБД(ИсторияБлокировок);
	ТаблицаБлокировок1С = ПолучитьТаблицуБлокировок1С(ИсторияБлокировок);
	ОбновитьТаблицуБлокировокСУБД(ТаблицаБлокировокСУБД, СоединенияИБ, ВремяНачалаТакта);
	ОбновитьТаблицуБлокировок1С(ТаблицаБлокировок1С, ОписанияСоединенийИБ, ВремяНачалаТакта);
	
	// Найти суммарное время ожидания на блокировке
	СуммарноеВремяОжиданияСУБД = 
		ПолучитьСуммарноеВремяОжиданияНаБлокировках(ТаблицаБлокировокСУБД, ИнтервалОбновления);
	СуммарноеВремяОжидания1С = 
		ПолучитьСуммарноеВремяОжиданияНаБлокировках(ТаблицаБлокировок1С, ИнтервалОбновления);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировокСУБД);
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок1С);
	
	Возврат СуммарноеВремяОжиданияСУБД + СуммарноеВремяОжидания1С;
	
КонецФункции // ПолучитьСуммарноеВремяОжиданияНаБлокировкахСУБДи1С()

// Функция получает текущее количество ожиданий на блокировках СУБД и 1С (шт)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ОписанияСоединенийИБ - Массив, описаний соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - количество ожиданий на блокировках СУБД (шт)
//
Функция ПолучитьКоличествоОжиданийНаБлокировкахСУБДи1С(СоединенияИБ,
                                                       ОписанияСоединенийИБ,
                                                       ИсторияБлокировок,
                                                       ИнтервалОбновления,
                                                       ВремяНачалаТакта)
	
	// Получить последнее состояние блокировок
	ТаблицаБлокировокСУБД = ПолучитьТаблицуБлокировокСУБД(ИсторияБлокировок);
	ТаблицаБлокировок1С = ПолучитьТаблицуБлокировок1С(ИсторияБлокировок);
	ОбновитьТаблицуБлокировокСУБД(ТаблицаБлокировокСУБД, СоединенияИБ, ВремяНачалаТакта);
	ОбновитьТаблицуБлокировок1С(ТаблицаБлокировок1С, ОписанияСоединенийИБ, ВремяНачалаТакта);
	
	// Найти количество ожиданий на блокировках
	СуммарноеКоличествоОжиданийСУБД = 
		ПолучитьКоличествоОжиданийНаБлокировках(ТаблицаБлокировокСУБД, ИнтервалОбновления);
	СуммарноеКоличествоОжиданий1С = 
		ПолучитьКоличествоОжиданийНаБлокировках(ТаблицаБлокировок1С, ИнтервалОбновления);
		
	// Удалить устаревшие блокировки
	ОчиститьТаблицуБлокировок(ТаблицаБлокировокСУБД);
	ОчиститьТаблицуБлокировок(ТаблицаБлокировок1С);
	
	Возврат СуммарноеКоличествоОжиданийСУБД + СуммарноеКоличествоОжиданий1С;
	
КонецФункции // ПолучитьКоличествоОжиданийНаБлокировкахСУБДи1С()

// Функция получает максимальное время ожидания на блокировке
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - максимальное время ожидания на блокировке (сек)
//
Функция ПолучитьМаксимальноеВремяОжиданияНаБлокировке(ТаблицаБлокировок,
                                                      ИнтервалОбновления,
                                                      ВремяНачалаТакта)
	
	МинимальноеВремяНачала = ВремяНачалаТакта;
	
	// Найти максимальное время ожидания на блокировке
	Для Каждого Блокировка Из ТаблицаБлокировок Цикл
		Если Блокировка.ВремяНачала < МинимальноеВремяНачала Тогда
			МинимальноеВремяНачала = Блокировка.ВремяНачала;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВремяНачалаТакта - МинимальноеВремяНачала;
	
КонецФункции // ПолучитьМаксимальноеВремяОжиданияНаБлокировке()

// Функция получает среднее время ожидания на блокировке (сек)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - среднее время ожидания на блокировке (сек)
//
Функция ПолучитьСреднееВремяОжиданияНаБлокировках(ТаблицаБлокировок,
                                                  ИнтервалОбновления)
	
	СреднееВремяОжидания = 0;
	
	// Найти максимальное время ожидания на блокировке
	Для Каждого Блокировка Из ТаблицаБлокировок Цикл
		СреднееВремяОжидания = СреднееВремяОжидания + Блокировка.ДлительностьОжидания;
	КонецЦикла;
	
	КоличествоБлокировок = ТаблицаБлокировок.Количество();
	Возврат ?(КоличествоБлокировок = 0, 0, СреднееВремяОжидания / КоличествоБлокировок);
	
КонецФункции // ПолучитьСреднееВремяОжиданияНаБлокировках()

// Функция получает суммарное время ожидания на блокировке (сек)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - суммарное время ожидания на блокировках (сек)
//
Функция ПолучитьСуммарноеВремяОжиданияНаБлокировках(ТаблицаБлокировок,
                                                    ИнтервалОбновления)
	
	СуммарноеВремяОжидания = 0;
	
	// Найти суммарное время ожидания на блокировке
	Для Каждого Блокировка Из ТаблицаБлокировок Цикл
		Если Блокировка.Обработана Тогда
			СуммарноеВремяОжидания = СуммарноеВремяОжидания + Блокировка.ДлительностьОжидания;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуммарноеВремяОжидания;
	
КонецФункции // ПолучитьСреднееВремяОжиданияНаБлокировках()

// Функция получает текущее количество ожиданий на блокировках (шт)
//
// Параметры:
//  СоединенияИБ - Массив, соединений с информационной базой
//  ИсторияБлокировок - СписокЗначений
//  ИнтервалОбновления - Число, интервал времени, через который монитор
//                       производительности обновляет значения показателей
//                       производительности
//
// Возвращаемое значение:
//  Число - текущее количество ожиданий на блокировках (шт)
//
Функция ПолучитьКоличествоОжиданийНаБлокировках(ТаблицаБлокировок,
                                                ИнтервалОбновления)
	
	// Найти текущее количество ожиданий на блокировках (шт)
	КоличествоОжиданий = ТаблицаБлокировок.Количество();
	
	Возврат КоличествоОжиданий;
	
КонецФункции // ПолучитьКоличествоОжиданийНаБлокировках()

// Функция возвращает историю блокировок
//
// Параметры:
//  ИсторияБлокировок - СписокЗначений, истории блокировок
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание заблокированных и блокирующих процессов
//
Функция ПолучитьТаблицуБлокировок(ИсторияБлокировок)
	
	// Если история блокировок еще не создана
	Если ИсторияБлокировок = Неопределено Тогда
		ИсторияБлокировок = СоздатьИсториюБлокировок();
	КонецЕсли;
	
	Возврат ИсторияБлокировок[0].Значение;
	
КонецФункции // ПолучитьТаблицуБлокировок()

// Функция возвращает историю блокировок СУБД
// Используется когда хранится сразу как история СУБД, так и 1С
//
// Параметры:
//  ИсторияБлокировок - СписокЗначений, истории блокировок
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание заблокированных и блокирующих процессов
//
Функция ПолучитьТаблицуБлокировокСУБД(ИсторияБлокировок)
	
	// Если история блокировок еще не создана
	Если ИсторияБлокировок = Неопределено Тогда
		ИсторияБлокировок = СоздатьИсториюБлокировокСУБДи1С();
	КонецЕсли;
	
	Возврат ИсторияБлокировок[0].Значение;
	
КонецФункции // ПолучитьТаблицуБлокировокСУБД()

// Функция возвращает таблицу блокировок 1С
// Используется когда хранится сразу как история СУБД, так и 1С
//
// Параметры:
//  ИсторияБлокировок - СписокЗначений, истории блокировок
//
// Возвращаемое значение:
//  ТаблицаЗначений - описание заблокированных и блокирующих процессов
//
Функция ПолучитьТаблицуБлокировок1С(ИсторияБлокировок)
	
	// Если история блокировок еще не создана
	Если ИсторияБлокировок = Неопределено Тогда
		ИсторияБлокировок = СоздатьИсториюБлокировокСУБДи1С();
	КонецЕсли;
	
	Возврат ИсторияБлокировок[1].Значение;
	
КонецФункции // ПолучитьТаблицуБлокировок1С()

// Функция создает таблицу для хранения истории блокировок СУБД или 1С.
//
Функция СоздатьИсториюБлокировок()
	
	Возврат СоздатьИсторииБлокировок(1);
	
КонецФункции // СоздатьИсториюБлокировокСУБД()

// Функция создает пару таблиц для хранения истории блокировок СУБД и 1С.
//
Функция СоздатьИсториюБлокировокСУБДи1С()
	
	Возврат СоздатьИсторииБлокировок(2);
	
КонецФункции // СоздатьИсториюБлокировокСУБДи1С()

// Функция создает таблицу для хранения истории блокировок.
// Таблица содержит следующие колонки:
//       Блокируемый - Число, идентификатор блокируемого процесса
//       Блокирующий - Число, идентификатор блокирующего процесса
//       ВремяНачала - Дата, время начала обнаружения блокировки
//       Обработана - Булево, служебная колонка
//
// Параметры
//  КоличествоИсторий - Число, количество таблиц историй блокировок
//
// Возвращаемое значение:
//  СписокЗначений - содержит единственное значение - таблицу значений в
//                 которой хранится история блокировок. Такая "хитрость"
//                 используется потому, что в колонке таблицы значений
//                 нельзя указать тип ТаблицаЗначений, только список значений.
//
Функция СоздатьИсторииБлокировок(КоличествоИсторий)
	
	// Создать список для хранения таблицы значений
	ИсторияБлокировок = Новый СписокЗначений;
	
	Для Сч = 1 По КоличествоИсторий Цикл
		
		// Поместить таблицу блокировок в список значений
		ИсторияБлокировок.Добавить(СоздатьТаблицуБлокировок());
		
	КонецЦикла;
	
	Возврат ИсторияБлокировок;
	
КонецФункции // СоздатьИсторииБлокировок()

// Функция создает таблицу блокировок
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица описывающая блокируемые процессы
//
Функция СоздатьТаблицуБлокировок()
	
	ТаблицаБлокировок = Новый Массив;
	
	Возврат ТаблицаБлокировок;
	
КонецФункции // СоздатьТаблицуБлокировок()

// Функция создает шаблон описания ожидания на транзакционной блокировке
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//   Структура   - шаблон описания блокировки
//
Функция ПолучитьШаблонОписанияБлокировки()
	
	Шаблон = Новый Структура("Блокируемый,Блокирующий,ВремяНачала,ДлительностьОжидания,Обработана");
	
	Возврат Шаблон;
	
КонецФункции // ПолучитьШаблонОписанияБлокировки()

// Процедура обновляет информацию о блокировках СУБД в таблице блокировок
// в соответствии с текущим состоянием.
//
// Параметры:
//  ТаблицаБлокировок - ТаблицаЗначений, описывающая блокирующие и заблокированные процессы
//  СоединенияИБ - Массив, соединений с информационной базой
//
Процедура ОбновитьТаблицуБлокировокСУБД(ТаблицаБлокировок, СоединенияИБ, ВремяНачалаТакта)
	
	ОбновитьТаблицуБлокировок(ТаблицаБлокировок,
	                          СоединенияИБ,
	                          "BlockedByDBMS",
	                          ВремяНачалаТакта);

КонецПроцедуры // ОбновитьТаблицуБлокировокСУБД()

// Процедура обновляет информацию о блокировках 1С в таблице блокировок
// в соответствии с текущим состоянием.
//
// Параметры:
//  ТаблицаБлокировок - ТаблицаЗначений, описывающая блокирующие и заблокированные процессы
//  ОписанияСоединенийИБ - Массив, описаний соединений с информационной базой
//
Процедура ОбновитьТаблицуБлокировок1С(ТаблицаБлокировок, ОписанияСоединенийИБ, ВремяНачалаТакта)
	
	ОбновитьТаблицуБлокировок(ТаблицаБлокировок,
	                          ОписанияСоединенийИБ,
	                          "blockedByLM",
	                          ВремяНачалаТакта);
	
КонецПроцедуры // ОбновитьТаблицуБлокировок1С()

// Процедура обновляет информацию о блокировках в таблице блокировок
// в соответствии с текущим состоянием.
//
// Параметры:
//  ОписанияСоединенийИБ - Массив, описаний соединений с информационной базой
//  ТаблицаБлокировок - ТаблицаЗначений, описыавет историю блокировок
//  ИмяСвойстваБлокировки - Строка, имя свойства объекта по которому получается
//                 значение номера блокирующего соединения
//
Процедура ОбновитьТаблицуБлокировок(ТаблицаБлокировок,
                                    ОписанияСоединенийИБ,
                                    ИмяСвойстваБлокировки,
                                    ВремяНачалаТакта)
	
	// Найти блокировки
	Для Каждого Соединение Из ОписанияСоединенийИБ Цикл
		
		БлокируемоеСоединение = Соединение.ConnID;
		БлокирующееСоединение = Соединение[ИмяСвойстваБлокировки];
		
		// Если блокировка найдена
		Если БлокирующееСоединение > 0 Тогда
			
			БлокировкаНайдена = Ложь;
			
			// Найти такую блокировку в таблице истории блокировок
			Для Каждого Блокировка Из ТаблицаБлокировок Цикл
				
				// Если комбинация блокирующего и блокируемого процессов уже отслеживается
				Если БлокируемоеСоединение = Блокировка.Блокируемый И
				     БлокирующееСоединение = Блокировка.Блокирующий Тогда
					
					// Обновить информацию о блокировке
					Блокировка.ДлительностьОжидания = ВремяНачалаТакта - Блокировка.ВремяНачала;
					Блокировка.Обработана = Истина;
					БлокировкаНайдена = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
			// Если это новая блокировка
			Если Не БлокировкаНайдена Тогда
				
				// Добавить блокировку в таблицу истории блокировок
				Блокировка = ПолучитьШаблонОписанияБлокировки();
				Блокировка.Блокируемый = БлокируемоеСоединение;
				Блокировка.Блокирующий = БлокирующееСоединение;
				Блокировка.ВремяНачала = ВремяНачалаТакта;
				Блокировка.ДлительностьОжидания = 0;
				Блокировка.Обработана = Истина;
				
				ТаблицаБлокировок.Добавить(Блокировка);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ОбновитьТаблицуБлокировок()

// Процедура находит устаревшие блокировки (которые уже не существуют)
// и удаляет их
//
// Параметры:
//  ТаблицаБлокировок - ТаблицаЗначений, таблица блокировок
//
Процедура ОчиститьТаблицуБлокировок(ТаблицаБлокировок)
	
	КоличествоСтрокВТаблице = ТаблицаБлокировок.Количество();
	Для Сч = 1 По КоличествоСтрокВТаблице Цикл
		Индекс = КоличествоСтрокВТаблице - Сч;
		Если Не ТаблицаБлокировок[Индекс].Обработана Тогда
			ТаблицаБлокировок.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	// Пометить все блокировки, как устаревшие
	Для Каждого Блокировка Из ТаблицаБлокировок Цикл
		Блокировка.Обработана = Ложь;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТаблицуБлокировок()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАДАНИЙ СБОРА ПОКАЗАТЕЛЕЙ ПРОИЗВОДИТЕЛЬНОСТИ

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   УникальныйИдентификатор   - Идентификатор запущенного фонового задания
//
Функция ЗапуститьСборПоказателей(ИБ, Показатели) Экспорт
	
	Если Показатели.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерСеанса = НомерСеансаИнформационнойБазы();
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ИБ);
	ПараметрыЗадания.Добавить(Показатели);
	ПараметрыЗадания.Добавить(НомерСеанса);
	ПараметрыЗадания.Добавить(ПараметрыСеанса.ИдентификаторСеанса);
	
	НовоеЗадание = ФоновыеЗадания.Выполнить("ПоказателиПроизводительности.СобратьПоказатели", 
		ПараметрыЗадания, 
		"СборПоказателейПроизводительностиСеанс" + Формат(НомерСеанса, "ЧГ=0"),
		"Сбор показателей производительности (сеанс " + Строка(НомерСеанса) + ")"
	);
	
	Возврат НовоеЗадание.УникальныйИдентификатор;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьСостояниеЗадания(ИдентификаторЗадания) Экспорт
	
	Состояние = Неопределено;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФЗ = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ФЗ <> Неопределено Тогда
			Состояние = ФЗ.Состояние;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции // ПроверитьСостояниеЗадания()

// Выполняет сбор показателей производительности
//
// Параметры:
//  ИБ  - СправочникСсылка.ИнформационныеБазы - Информационная база, по которой необходимо
//                 выполнять сбор показателей
//  Показатели  - Таблица значений - Коллекция показателей, сбор которых необходимо выполнять
//  НомерРодительскогоСеанса  - Число - Номер сеанса, в котором был запущен процесс мониторинга
//  ИдентификаторРодительскогоСеанса  - Уникальный идентификатор - идентификатор родительского сеанса
//                 (см. ПараметрыСеанса.ИдентификаторСеанса)
//
Процедура СобратьПоказатели(ИБ, Показатели, НомерРодительскогоСеанса, ИдентификаторРодительскогоСеанса) Экспорт
	
	// ИНИЦИАЛИЗАЦИЯ
	
	ИдентификаторЗадания = Задание.ПолучитьИдентификаторЗадания("СборПоказателейПроизводительностиСеанс", НомерРодительскогоСеанса);
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	Если ЕстьСчетчикиОС(Показатели) Тогда
		СчетчикиОС = ПолучитьСчетчикиОС();
	Иначе
		СчетчикиОС = Неопределено;
	КонецЕсли;
	
	АгентыЦКК = Справочники.ИнформационныеБазы.ПолучитьСписокАгентов(ИБ);
	Если АгентыЦКК.Количество() > 0 Тогда
		РегистрыСведений.СостояниеСбораПоказателей.ВключитьСборСчетчиков(ИБ, Истина);
	КонецЕсли;
	
	
	// СБОР ПОКАЗАТЕЛЕЙ
	
	ПрерватьСбор = Ложь;
	ВремяНачалаТакта = ТекущаяДата();
	ВремяПоследнегоТакта = ВремяНачалаТакта;
	ВремяПоследнегоСообщения = '00010101';
	СоединенияИБ = Неопределено;
	СоединенияРП = Неопределено;
	НачалоСоединенияРП = '00010101';
	ПодключениеИБ = ИнформационнаяБаза.ПодключениеИБ(ИБ);
	ОписаниеОшибки = "";
	СчетчикиСУБД = Новый Структура("КоличествоТаймаутов,КоличествоВзаимоблокировок", 0, 0);
	НастройкиКорректны = ПроверитьНастройкиИБ(ИБ, ПодключениеИБ, ОписаниеОшибки);
	Если Не НастройкиКорректны Тогда
		ВызватьИсключение "Изменились свойства информационной базы:
		|" + ОписаниеОшибки + "
		|Для продолжения мониторинга необходимо обновить настройки с помощью мастера настройки подключения.";
	КонецЕсли;
	ПолучитьСоединенияИБ(ИБ, ПодключениеИБ, СоединенияИБ, СоединенияРП, НачалоСоединенияРП);
	
	// Первая итерация
	ПолучитьЗначенияВсехПоказателей(
		ИБ,
		ПодключениеИБ,
		СоединенияИБ,
		Неопределено,
		Показатели,
		ВремяНачалаТакта,
		ВремяПоследнегоТакта,
		Ложь,
		СчетчикиОС,
		СоединенияРП,
		НачалоСоединенияРП,
		АгентыЦКК);
	
	Пока Не ПрерватьСбор Цикл
		ВремяНачалаТакта = ТекущаяДата();
		СоединенияИБ = Неопределено;
		ПолучитьЗначенияВсехПоказателей(
			ИБ,
			ПодключениеИБ,
			СоединенияИБ,
			Неопределено,
			Показатели,
			ВремяНачалаТакта,
			ВремяПоследнегоТакта,
			Ложь,
			СчетчикиОС,
			СоединенияРП,
			НачалоСоединенияРП,
			АгентыЦКК);
			
		КомандаДобавитьВсеПП = Справочники.Команды.ДобавитьВсеПП;
		ОтправитьСообщение(ИдентификаторЗадания, Перечисления.НаправленияСообщенийОбмена.СерверКлиент, КомандаДобавитьВсеПП, Показатели);
		
		ОбработатьСообщенияКлиентскогоПриложения(ИдентификаторЗадания, ИБ, Показатели, СчетчикиОС, СчетчикиСУБД, АгентыЦКК, ПрерватьСбор, ВремяПоследнегоСообщения);
		
		Если Не ПрерватьСбор Тогда
			РодительскийСеансАктивен = Служебный.ПроверитьИдентификаторСеанса(НомерРодительскогоСеанса, ИдентификаторРодительскогоСеанса);
			ПрерватьСбор = Не РодительскийСеансАктивен;
			Если ПрерватьСбор Тогда
				ЗаписьЖурналаРегистрации("ПрерываниеСбораПоказателей", УровеньЖурналаРегистрации.Предупреждение,,, "Завершен родительский сеанс");
			КонецЕсли;
		КонецЕсли;
		
		ВремяПоследнегоТакта = ВремяНачалаТакта;
		КипВнешнийКомпонент.Пауза(Инструменты, 100);
	КонецЦикла;
	
	Если АгентыЦКК.Количество() > 0 Тогда
		РегистрыСведений.СостояниеСбораПоказателей.ВключитьСборСчетчиков(ИБ, Ложь);
	КонецЕсли;
	
КонецПроцедуры // СобратьПоказатели()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОтправитьСообщение(ИдентификаторЗадания, Направление, Команда, Параметры) Экспорт
	
	Сообщение = Новый Структура("Команда,Параметры", Команда, Параметры);
	НосительСообщений = ПолучитьНосительСообщений(ИдентификаторЗадания, Направление);
	ЗапакованноеСообщение = Новый ХранилищеЗначения(Сообщение);
	
	Попытка
		НосительСообщений.ИдентификаторЗадания = ИдентификаторЗадания;
		НосительСообщений.ДатаСообщения = ТекущаяДата();
		НосительСообщений.Направление = Направление;
		НосительСообщений.Сообщение = ЗапакованноеСообщение;
		НосительСообщений.Записать();
	Исключение
		ОтменитьТранзакцию();
		ОтладкаКлиентСервер.Ошибка(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры // ОтправитьСообщение()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСообщения(ИдентификаторЗадания, Направление) Экспорт
	
	Если Направление = Перечисления.НаправленияСообщенийОбмена.СерверКлиент Тогда
		ЗаданиеМониторинга = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если ЗаданиеМониторинга.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ВызватьИсключение ПодробноеПредставлениеОшибки(ЗаданиеМониторинга.ИнформацияОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Сообщения = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщенияОбмена.ИдентификаторЗадания КАК ИдентификаторЗадания,
	               |	СообщенияОбмена.Направление КАК Направление,
	               |	СообщенияОбмена.ДатаСообщения КАК ДатаСообщения,
	               |	СообщенияОбмена.ИдентификаторСообщения КАК ИдентификаторСообщения,
	               |	СообщенияОбмена.Сообщение КАК Сообщение
	               |ИЗ
	               |	РегистрСведений.СообщенияОбмена КАК СообщенияОбмена
	               |ГДЕ
	               |	СообщенияОбмена.ИдентификаторЗадания = &ИдентификаторЗадания
	               |	И СообщенияОбмена.Направление = &Направление
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСообщения";
	
	Запрос.УстановитьПараметр("ИдентификаторЗадания", ИдентификаторЗадания);
	Запрос.УстановитьПараметр("Направление", Направление);
	
	Попытка
		НачатьТранзакцию();
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОписаниеСообщения = Новый Структура("ТелоСообщения,ДатаСообщения");
			ОписаниеСообщения.ТелоСообщения = Выборка.Сообщение.Получить();
			ОписаниеСообщения.ДатаСообщения = Выборка.ДатаСообщения;
			Сообщения.Добавить(ОписаниеСообщения);
			
			СообщениеМенеджерЗаписи = РегистрыСведений.СообщенияОбмена.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(СообщениеМенеджерЗаписи, Выборка);
			СообщениеМенеджерЗаписи.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОтладкаКлиентСервер.Ошибка(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Сообщения;
	
КонецФункции // ПолучитьСообщения()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьНосительСообщений(ИдентификаторЗадания, Направление)
	
	НосительСообщений = РегистрыСведений.СообщенияОбмена.СоздатьМенеджерЗаписи();
	НосительСообщений.ИдентификаторЗадания = ИдентификаторЗадания;
	НосительСообщений.Направление = Направление;
	
	Возврат НосительСообщений;
	
КонецФункции // ПолучитьНосительСообщений()

// Обрабатывает сообщения от клиентского приложения, в котором запущен процесс мониторинга
//
// Параметры:
//  ИдентификаторЗадания  - УникальныйИдентификатор - Идентификатор задания
//  ИБ - СправочникСсылка.ИнформационныеБазы - Информационная база
//  Показатели - Таблица значений - Таблица показателей
//  СчетчикиОС - Объект внешней компоненты - Объект внешней компоненты ETP.Counters
//  СчетчикиСУБД - Структура - Коллекция, содержащая текущие значения счетчиков СУБД
//  АгентыЦКК - Массив - Коллекция, содержащая список элементов справочника АгентыЦКК,
//                       данные от которых необходимо получать
//  ПрерватьСбор - Булево - Признак необходимости прервать сбор показателей
//  ВремяПоследнегоСообщения - Дата - Дата и время отправки последнего полученного сообщения от клиентского приложения
//
Процедура ОбработатьСообщенияКлиентскогоПриложения(ИдентификаторЗадания, ИБ, Показатели, СчетчикиОС, СчетчикиСУБД, АгентыЦКК, ПрерватьСбор, ВремяПоследнегоСообщения)
	
	Сообщения = ПолучитьСообщения(ИдентификаторЗадания, Перечисления.НаправленияСообщенийОбмена.КлиентСервер);
	Для Каждого ТекСообщение Из Сообщения Цикл
		Если ТекСообщение.ТелоСообщения.Команда = Справочники.Команды.ВыключитьМониторинг Тогда
			ПрерватьСбор = Истина;
			ЗаписьЖурналаРегистрации("ПрерываниеСбораПоказателей", УровеньЖурналаРегистрации.Предупреждение,,, "Получена команда от клиентского приложения");
		ИначеЕсли ТекСообщение.ТелоСообщения.Команда = Справочники.Команды.ДобавитьПП Тогда
			ОписаниеПоказателя = ТекСообщение.ТелоСообщения.Параметры;
			Показатели.Добавить(ОписаниеПоказателя);
			
			Если ОписаниеПоказателя.Показатель.Тип = Перечисления.ТипыПоказателей.ПроизвольныеСчетчикиОС Тогда
				
				СпособСбора = ПолучитьСпособСбораПоказателя(ОписаниеПоказателя.Показатель);
				Если СпособСбора = Перечисления.СпособыСбораСчетчиков.PDH Тогда
					Если СчетчикиОС = Неопределено Тогда
						СчетчикиОС = ПолучитьСчетчикиОС();
					КонецЕсли;
				ИначеЕсли СпособСбора = Перечисления.СпособыСбораСчетчиков.АгентЦКК Тогда
					АгентыЦКК = Справочники.ИнформационныеБазы.ПолучитьСписокАгентов(ИБ);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОписаниеПоказателя.Показатель = Справочники.Показатели.КоличествоВзаимоблокировок Тогда
				ЗначениеСчетчика = MSSQL.ПолучитьЗначениеСчетчикаСУБД(ИБ, "Взаимоблокировки");
				ОписаниеПоказателя.Вставить("ПредыдущееЗначение", ЗначениеСчетчика);
				ОписаниеПоказателя.Вставить("ТаблицаИзменений", Новый Массив);
				ОписаниеПоказателя.Значение = 0;
				
			ИначеЕсли ОписаниеПоказателя.Показатель = Справочники.Показатели.КоличествоТаймаутов Тогда
				ЗначениеСчетчика = MSSQL.ПолучитьЗначениеСчетчикаСУБД(ИБ, "Таймауты");
				ОписаниеПоказателя.Вставить("ПредыдущееЗначение", ЗначениеСчетчика);
				ОписаниеПоказателя.Вставить("ТаблицаИзменений", Новый Массив);
				ОписаниеПоказателя.Значение = 0;
				
			ИначеЕсли ОписаниеПоказателя.Показатель.Тип = Перечисления.ТипыПоказателей.ПроизвольныеСчетчикиОС Тогда
				Если СпособСбора = Перечисления.СпособыСбораСчетчиков.PDH Тогда
					Сервер = ОписаниеПоказателя.Показатель.Параметр.Найти("Сервер", "Имя").Значение;
					Счетчик = ОписаниеПоказателя.Показатель.Параметр.Найти("Счетчик производительности", "Имя").Значение;
					ЯзыкОС = ОписаниеПоказателя.Показатель.Параметр.Найти("Язык ОС", "Имя").Значение;
					
					ВозможныеИменаСчетчиков = Новый Массив;
					ИменаСчетчиков = Справочники.СчетчикиПроизводительности.ПолучитьНаименованияСчетчиков(Счетчик, ЯзыкОС);
					Для Каждого ТекИмя Из ИменаСчетчиков Цикл
						ВозможныеИменаСчетчиков.Добавить(ТекИмя.Значение);
					КонецЦикла;
					ОписаниеПоказателя.ИндексПоказателя = 
						КипWindows.ВключитьСборСчетчикаПроизводительности(СчетчикиОС, Сервер, ВозможныеИменаСчетчиков, Строка(ОписаниеПоказателя.Показатель));
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекСообщение.ТелоСообщения.Команда = Справочники.Команды.УдалитьПП Тогда
			Показатель = ТекСообщение.ТелоСообщения.Параметры;
			Если Показатель.Тип = Перечисления.ТипыПоказателей.ПроизвольныеСчетчикиОС Тогда
				УдаляемыйПоказатель = ОбщегоНазначенияКлиентСервер.НайтиЭлементМассиваСтруктур(Показатели, "Показатель", Показатель);
				КипВнешнийКомпонент.УдалитьСчетчик(
					СчетчикиОС,
					УдаляемыйПоказатель.ИндексПоказателя);
				Показатели.Удалить(Показатели.Найти(УдаляемыйПоказатель));
				
				// Если не осталось ни одного показателя, для котрого требуется сбор счетчиков ОС,
				// то необходимо отключить сбор счетчиков ОС
				Если Не ЕстьСчетчикиОС(Показатели) Тогда
					СчетчикиОС = Неопределено;
				КонецЕсли;
				Если Не ЕстьСчетчикиАгентаЦКК(Показатели) Тогда
					АгентыЦКК.Очистить();
					РегистрыСведений.СостояниеСбораПоказателей.ВключитьСборСчетчиков(ИБ, Ложь);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		ВремяПоследнегоСообщения = ?(
			ВремяПоследнегоСообщения < ТекСообщение.ДатаСообщения,
			ТекСообщение.ДатаСообщения,
			ВремяПоследнегоСообщения
		);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьСообщенияКлиентскогоПриложения()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьСборПоказателя(ИдентификаторЗадания, ОписаниеПоказателя) Экспорт
	
	КомандаДобавитьПП = Справочники.Команды.ДобавитьПП;
	ОтправитьСообщение(ИдентификаторЗадания, Перечисления.НаправленияСообщенийОбмена.КлиентСервер, КомандаДобавитьПП, ОписаниеПоказателя);
	
КонецПроцедуры // ДобавитьСборПоказателя()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОтменитьСборПоказателя(ИдентификаторЗадания, Показатель) Экспорт
	
	КомандаУдалитьПП = Справочники.Команды.УдалитьПП;
	ОтправитьСообщение(ИдентификаторЗадания, Перечисления.НаправленияСообщенийОбмена.КлиентСервер, КомандаУдалитьПП, Показатель);
	
КонецПроцедуры // ОтменитьСборПоказателя()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УдалитьСтарыеСообщенияОбмена() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СообщенияОбмена.ДатаСообщения КАК ДатаСообщения
	               |ИЗ
	               |	РегистрСведений.СообщенияОбмена КАК СообщенияОбмена
	               |ГДЕ
	               |	СообщенияОбмена.ДатаСообщения <= &ДатаСреза";
	
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата() - 600);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	НаборЗаписей = РегистрыСведений.СообщенияОбмена.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.ДатаСообщения.Установить(Выборка.ДатаСообщения);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	
КонецПроцедуры // УдалитьСтарыеСообщения()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОбновитьТаблицуИзмененийПоказателя(ТаблицаИзменений, Дельта)
	
	ДлительностьОтображения = 3; // Секунды
	ТекущаяДата = ТекущаяДата();
	КоличествоСтрок = ТаблицаИзменений.Количество();
	Для Сч = 1 По КоличествоСтрок Цикл
		Индекс = КоличествоСтрок - Сч;
		ТекСтр = ТаблицаИзменений[Индекс];
		Если ТекСтр.Дата < ТекущаяДата - ДлительностьОтображения Тогда
			ТаблицаИзменений.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если Дельта > 0 Тогда
		НоваяСтрока = Новый Структура("Дата,Значение");
		НоваяСтрока.Дата = ТекущаяДата;
		НоваяСтрока.Значение = Дельта;
		ТаблицаИзменений.Добавить(НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

