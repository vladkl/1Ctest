///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА МАСШТАБА

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УстановитьИнтервалПросмотра(Знач НачалоИнтервала, Знач КонецИнтервала) Экспорт
	
	Если НачалоИнтервала < Контекст.НачалоГраницыПросмотра() Тогда
		НачалоИнтервала = Контекст.НачалоГраницыПросмотра();
	КонецЕсли;
	
	Если КонецИнтервала > Контекст.КонецГраницыПросмотра() Тогда
		КонецИнтервала = Контекст.КонецГраницыПросмотра();
	КонецЕсли;
	
	Если НачалоИнтервала > КонецИнтервала Тогда
		Если НачалоИнтервала = Контекст.НачалоИнтервала() Тогда
			// Изменен конец интервала, сдвигаем начало интервала
			НачалоИнтервала = КонецИнтервала;
		Иначе
			// Изменено начало интервала, сдвигаем конец интервала
			КонецИнтервала = НачалоИнтервала;
		КонецЕсли;
	КонецЕсли;
	
	Контекст.УстановитьНачалоИнтервала(НачалоИнтервала);
	Контекст.УстановитьКонецИнтервала(КонецИнтервала);
	
КонецПроцедуры // УстановитьИнтервалПросмотра()

// Получить начало интервала
//
// Параметры:
//  НачалоИнтервала - Дата, выходной
//  КонецИнтервала - Дата, выходной
//  Позиция - Дата, текущая позиция просмотра
//  Масштаб - Число, количество секунд на интервале просмотра
//
Процедура УстановитьИнтервал(Масштаб, Позиция) Экспорт
	
	КоличествоЗаписейНастранице =
		МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице();
		
	ШиринаГраницыПросмотра = Контекст.ШиринаГраницыПросмотра();
	
	Если Масштаб < КоличествоЗаписейНастранице Тогда
		Масштаб = КоличествоЗаписейНастранице;
	ИначеЕсли Масштаб > ШиринаГраницыПросмотра Тогда
		Масштаб = ШиринаГраницыПросмотра;
	КонецЕсли;
	
	ОтносительнаяПозиция = Позиция - Контекст.НачалоГраницыПросмотра() + Масштаб;
	Полумасштаб = (Масштаб-1) / 2;
	
	Контекст.УстановитьНачалоИнтервала(
		Контекст.НачалоГраницыПросмотра() +
		Цел(ОтносительнаяПозиция - Полумасштаб) - Масштаб);
		
	Контекст.УстановитьКонецИнтервала(
		Контекст.НачалоГраницыПросмотра() +
		Цел(ОтносительнаяПозиция + Полумасштаб) - Масштаб);
	
	Если Контекст.НачалоИнтервала() < Контекст.НачалоГраницыПросмотра() Тогда
		
		Контекст.УстановитьКонецИнтервала(
			Контекст.КонецИнтервала() +
			(Контекст.НачалоГраницыПросмотра() - Контекст.НачалоИнтервала()));
			
		Контекст.УстановитьНачалоИнтервала(
			Контекст.НачалоГраницыПросмотра());
			
	КонецЕсли;
	
	Если Контекст.КонецИнтервала() > Контекст.КонецГраницыПросмотра() Тогда
		
		Контекст.УстановитьНачалоИнтервала(
			Контекст.НачалоИнтервала() -
			(Контекст.КонецИнтервала() -
			Контекст.КонецГраницыПросмотра()));
			
		Контекст.УстановитьКонецИнтервала(Контекст.КонецГраницыПросмотра());
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьИнтервал()

// Обновить интервал в соответствии с масштабом
//
// Параметры:
//  Масштаб - Число, количество записей на странице
//
Функция УстановитьМасштаб(Масштаб) Экспорт
	
	УстановитьИнтервал(Масштаб, Контекст.ПозицияПросмотра());
	
КонецФункции // УстановитьМасштаб()

// Обновить позицию просмотра
//
// Параметры:
//  Позиция - Дата, устанавливаемая позиция просмотра
//
Процедура УстановитьПозицию(Позиция) Экспорт
	
	УстановитьИнтервал(Контекст.МасштабПросмотра(), Позиция);
	
КонецПроцедуры // УстановитьПозицию()

// Сместить текущую позицию в соответствии с операцией позициониторания
//
// Параметры:
//  ОперацияПозиционирования - Перечисление.ОперацияПозиционирования
//
Процедура СместитьПозицию(ОперацияПозиционирования) Экспорт
	
	Перем НоваяПозиция;
	
	ТекущаяПозиция = Контекст.ПозицияПросмотра();
	Масштаб = Контекст.МасштабПросмотра();
	
	Если ОперацияПозиционирования = ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.ВНачало") Тогда
		НоваяПозиция = Контекст.НачалоГраницыПросмотра();
	ИначеЕсли ОперацияПозиционирования = ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.ВКонец") Тогда
		НоваяПозиция = Контекст.КонецГраницыПросмотра();
	ИначеЕсли ОперацияПозиционирования = ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.НаСтраницуНазад") Тогда
		НоваяПозиция = ТекущаяПозиция - Масштаб;
	ИначеЕсли ОперацияПозиционирования = ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.НаСтраницуВперед") Тогда
		НоваяПозиция = ТекущаяПозиция + Масштаб;
	ИначеЕсли ОперацияПозиционирования = ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.НаШагНазад") Тогда
		НоваяПозиция = ТекущаяПозиция - Окр(Масштаб / МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице());
	ИначеЕсли ОперацияПозиционирования = ПредопределенноеЗначение("Перечисление.ОперацииПозиционирования.НаШагВперед") Тогда
		НоваяПозиция = ТекущаяПозиция + Окр(Масштаб / МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице());
	КонецЕсли;
	
	УстановитьПозицию(НоваяПозиция);
	
КонецПроцедуры // СместитьПозицию()

// Получить реальный масштаб из предопределенного
//
// Параметры:
//  ПредопределенныйМасштаб - Перечисление.ПредопределенныйМасштаб
//  НачалоГраницыПросмотра - Дата, начало границы просмотра
//  КонецГраницыПросмотра - Дата, конец границы просмотра
//
// ВозвращаемоеЗначение:
//  Число - количество секунд на просматриваемом интервале
//
Функция ПолучитьПредопределенныйМасштаб(ПредопределенныйМасштаб,
                                        НачалоИнтервала,
                                        КонецИнтервала,
                                        НачалоГраницыПросмотра,
                                        КонецГраницыПросмотра) Экспорт
	
	Перем Масштаб;
	
	Если КонецГраницыПросмотра = Неопределено
	 Или НачалоГраницыПросмотра = Неопределено
	 Или НачалоИнтервала = Неопределено
	 Или КонецИнтервала = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КоличествоЗаписейНаСтранице = МониторингКлиент.ПолучитьКоличествоЗаписейНаСтранице();
	
	// Минимальный либо не указан
	Если ПредопределенныйМасштаб = ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.Минимальный") 
		Или Не ЗначениеЗаполнено(ПредопределенныйМасштаб) Тогда
		Масштаб = КонецГраницыПросмотра - НачалоГраницыПросмотра + 1;
		
		Если Масштаб < КоличествоЗаписейНаСтранице Тогда
			Масштаб = КоличествоЗаписейНаСтранице;
		КонецЕсли;
		
		Возврат Масштаб;
	КонецЕсли;
	
	// Максимальный
	Если ПредопределенныйМасштаб = ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.Максимальный") Тогда
		Возврат КоличествоЗаписейНаСтранице;
	КонецЕсли;
	
	// Минута
	Если ПредопределенныйМасштаб = ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.Минута") Тогда
		Возврат 60;
	КонецЕсли;
	
	// Час
	Если ПредопределенныйМасштаб = ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.Час") Тогда
		Возврат 3600;
	КонецЕсли;
	
	// День
	Если ПредопределенныйМасштаб = ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.День") Тогда
		Возврат 86400;
	КонецЕсли;
	
	// Неделя
	Если ПредопределенныйМасштаб = ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.Неделя") Тогда
		Возврат 604800;
	КонецЕсли;
	
	// Месяц
	Если ПредопределенныйМасштаб = ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.Месяц") Тогда
		Возврат 2592000;
	КонецЕсли;
	
	// Год
	Если ПредопределенныйМасштаб = ПредопределенноеЗначение("Перечисление.ПредопределенныеМасштабы.Год") Тогда
		Возврат 217728000;
	КонецЕсли;
	
КонецФункции // ПолучитьПредопределенныйМасштаб()

// Получить масштаб в соответствии с операцией масштабирования
//
// Параметры:
//  Масштаб - Число, количество записей на странице
//  ОперацияМасштабирования - Перечисление.ОперацияМасштабирования
//
// Возвращаемое значение:
//  Число - измененный масштаб
//
Функция ПолучитьМасштабПоОперации(Знач Масштаб, ОперацияМасштабирования) Экспорт
	
	Если ОперацияМасштабирования = ПредопределенноеЗначение("Перечисление.ОперацииМасштабирования.Приблизить") Тогда
		Масштаб = Окр(Масштаб / 2);
	ИначеЕсли ОперацияМасштабирования = ПредопределенноеЗначение("Перечисление.ОперацииМасштабирования.Отдалить") Тогда
		Масштаб = Масштаб * 2;
	КонецЕсли;
	
	Возврат Масштаб;
	
КонецФункции // ПолучитьМасштабПоОперации()
