///////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Возвращает описания всех библиотек конфигурации, включая
// описание самой конфигурации.
//
Функция ОписанияПодсистем() Экспорт
	
	МодулиПодсистем = Новый Массив;
	МодулиПодсистем.Добавить("ОбновлениеИнформационнойБазыЦУП");
	
	//ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем(МодулиПодсистем);
	
	ОписаниеКонфигурацииНайдено = Ложь;
	ОписанияПодсистем = Новый Структура;
	ОписанияПодсистем.Вставить("Порядок",  Новый Массив);
	ОписанияПодсистем.Вставить("ПоИменам", Новый Соответствие);
	
	ВсеТребуемыеПодсистемы = Новый Соответствие;
	
	Для Каждого ИмяМодуля Из МодулиПодсистем Цикл
		
		Описание = НовоеОписаниеПодсистемы();
		Модуль = ОбщегоНазначения.ОбщийМодуль(ИмяМодуля);
		Модуль.ПриДобавленииПодсистемы(Описание);
		
		Если ОписанияПодсистем.ПоИменам.Получить(Описание.Имя) <> Неопределено Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при подготовке описаний подсистем:
				           |в описании подсистемы (см. процедуру %1.ПриДобавленииПодсистемы)
				           |указано имя подсистемы ""%2"", которое уже зарегистрировано ранее.'"),
				ИмяМодуля, Описание.Имя);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Если Описание.Имя = Метаданные.Имя Тогда
			ОписаниеКонфигурацииНайдено = Истина;
			Описание.Вставить("ЭтоКонфигурация", Истина);
		Иначе
			Описание.Вставить("ЭтоКонфигурация", Ложь);
		КонецЕсли;
		
		Описание.Вставить("ОсновнойСерверныйМодуль", ИмяМодуля);
		
		ОписанияПодсистем.ПоИменам.Вставить(Описание.Имя, Описание);
		// Настройка порядка подсистем с учетом порядка добавления основных модулей.
		ОписанияПодсистем.Порядок.Добавить(Описание.Имя);
		// Сборка всех требуемых подсистем.
		Для каждого ТребуемаяПодсистема Из Описание.ТребуемыеПодсистемы Цикл
			Если ВсеТребуемыеПодсистемы.Получить(ТребуемаяПодсистема) = Неопределено Тогда
				ВсеТребуемыеПодсистемы.Вставить(ТребуемаяПодсистема, Новый Массив);
			КонецЕсли;
			ВсеТребуемыеПодсистемы[ТребуемаяПодсистема].Добавить(Описание.Имя);
		КонецЦикла;
	КонецЦикла;
	
	// Проверка описания основной конфигурации.
	Если ОписаниеКонфигурацииНайдено Тогда
		Описание = ОписанияПодсистем.ПоИменам[Метаданные.Имя];
		
		Если Описание.Версия <> Метаданные.Версия Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при подготовке описаний подсистем:
				           |версия ""%2"" конфигурации ""%1"" (см. процедуру %3.ПриДобавленииПодсистемы)
				           |не совпадает с версией конфигурации в метаданных ""%4"".'"),
				Описание.Имя,
				Описание.Версия,
				Описание.ОсновнойСерверныйМодуль,
				Метаданные.Версия);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при подготовке описаний подсистем:
			           |в общих модулях, указанных в процедуре ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистемы
			           |не найдено описание подсистемы, совпадающей с именем конфигурации ""%1"".'"),
			Метаданные.Имя);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Проверка наличия всех требуемых подсистем.
	Для каждого КлючИЗначение Из ВсеТребуемыеПодсистемы Цикл
		Если ОписанияПодсистем.ПоИменам.Получить(КлючИЗначение.Ключ) = Неопределено Тогда
			ЗависимыеПодсистемы = "";
			Для Каждого ЗависимаяПодсистема Из КлючИЗначение.Значение Цикл
				ЗависимыеПодсистемы = Символы.ПС + ЗависимаяПодсистема;
			КонецЦикла;
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при подготовке описаний подсистем:
				           |не найдена подсистема ""%1"" требуемая для подсистем: %2.'"),
				КлючИЗначение.Ключ,
				ЗависимыеПодсистемы);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЦикла;
	
	// Настройка порядка подсистем с учетом зависимостей.
	Для Каждого КлючИЗначение Из ОписанияПодсистем.ПоИменам Цикл
		Имя = КлючИЗначение.Ключ;
		Порядок = ОписанияПодсистем.Порядок.Найти(Имя);
		Для каждого ТребуемаяПодсистема Из КлючИЗначение.Значение.ТребуемыеПодсистемы Цикл
			ПорядокТребуемойПодсистемы = ОписанияПодсистем.Порядок.Найти(ТребуемаяПодсистема);
			Если Порядок < ПорядокТребуемойПодсистемы Тогда
				Взаимозависимость = ОписанияПодсистем.ПоИменам[ТребуемаяПодсистема
					].ТребуемыеПодсистемы.Найти(Имя) <> Неопределено;
				Если Взаимозависимость Тогда
					НовыйПорядок = ПорядокТребуемойПодсистемы;
				Иначе
					НовыйПорядок = ПорядокТребуемойПодсистемы + 1;
				КонецЕсли;
				Если Порядок <> НовыйПорядок Тогда
					ОписанияПодсистем.Порядок.Вставить(НовыйПорядок, Имя);
					ОписанияПодсистем.Порядок.Удалить(Порядок);
					Порядок = НовыйПорядок - 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	// Смещение описания конфигурации в конец массива.
	Индекс = ОписанияПодсистем.Порядок.Найти(Метаданные.Имя);
	Если ОписанияПодсистем.Порядок.Количество() > Индекс + 1 Тогда
		ОписанияПодсистем.Порядок.Удалить(Индекс);
		ОписанияПодсистем.Порядок.Добавить(Метаданные.Имя);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ОписанияПодсистем.ПоИменам Цикл
		КлючИЗначение.Значение.ТребуемыеПодсистемы =
			Новый ФиксированныйМассив(КлючИЗначение.Значение.ТребуемыеПодсистемы);
		
		ОписанияПодсистем.ПоИменам[КлючИЗначение.Ключ] =
			Новый ФиксированнаяСтруктура(КлючИЗначение.Значение);
	КонецЦикла;
	
	ОписанияПодсистем.Порядок  = Новый ФиксированныйМассив(ОписанияПодсистем.Порядок);
	ОписанияПодсистем.ПоИменам = Новый ФиксированноеСоответствие(ОписанияПодсистем.ПоИменам);
	
	Возврат Новый ФиксированнаяСтруктура(ОписанияПодсистем);
	
КонецФункции

Функция НовоеОписаниеПодсистемы()
	
	Описание = Новый Структура;
	Описание.Вставить("Имя",    "");
	Описание.Вставить("Версия", "");
	Описание.Вставить("ТребуемыеПодсистемы", Новый Массив);
	
	// Свойство устанавливается автоматически.
	Описание.Вставить("ЭтоКонфигурация", Ложь);
	
	// Имя основного модуля библиотеки.
	// Может быть пустым для конфигурации.
	Описание.Вставить("ОсновнойСерверныйМодуль", "");
	
	// Режим выполнения отложенных обработчиков обновления.
	// По умолчанию Последовательно.
	Описание.Вставить("РежимВыполненияОтложенныхОбработчиков", "Последовательно");
	Описание.Вставить("ПараллельноеОтложенноеОбновлениеСВерсии", "");
	
	Возврат Описание;
	
КонецФункции

// Возвращает соответствие имен "функциональных" подсистем и значения Истина.
// У "функциональной" подсистемы снят флажок "Включать в командный интерфейс".
//
Функция ИменаПодсистем() Экспорт
	
	ОтключенныеПодсистемы = Новый Соответствие;
	//ОбщегоНазначенияПереопределяемый.ПриОпределенииОтключенныхПодсистем(ОтключенныеПодсистемы);
	
	Имена = Новый Соответствие;
	ВставитьИменаПодчиненныхПодсистем(Имена, Метаданные, ОтключенныеПодсистемы);
	
	Возврат Новый ФиксированноеСоответствие(Имена);
	
КонецФункции

Процедура ВставитьИменаПодчиненныхПодсистем(Имена, РодительскаяПодсистема, ОтключенныеПодсистемы, ИмяРодительскойПодсистемы = "")
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Если ТекущаяПодсистема.ВключатьВКомандныйИнтерфейс Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТекущейПодсистемы = ИмяРодительскойПодсистемы + ТекущаяПодсистема.Имя;
		Если ОтключенныеПодсистемы.Получить(ИмяТекущейПодсистемы) = Истина Тогда
			Продолжить;
		Иначе
			Имена.Вставить(ИмяТекущейПодсистемы, Истина);
		КонецЕсли;
		
		Если ТекущаяПодсистема.Подсистемы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВставитьИменаПодчиненныхПодсистем(Имена, ТекущаяПодсистема, ОтключенныеПодсистемы, ИмяТекущейПодсистемы + ".");
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода конфигурации
// при запуске, т.е. в обработчиках событий ПередНачаломРаботыСистемы, ПриНачалеРаботыСистемы.
//
// Только для вызова из СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске.
//
Функция ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ЗапомнитьВременныеПараметры(Параметры);
	
	Если НЕ ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Тогда
		Возврат ФиксированныеПараметрыКлиентаБезВременныхПараметров(Параметры);
	КонецЕсли;
	
	ИнтеграцияПодсистемБСП.ПриДобавленииПараметровРаботыКлиентаПриЗапуске(Параметры);
	
	Возврат ФиксированныеПараметрыКлиентаБезВременныхПараметров(Параметры);
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// данной подсистемы при запуске конфигурации, т.е. в обработчиках событий.
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы.
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ЭтоВызовПередНачаломРаботыСистемы = Параметры.ПолученныеПараметрыКлиента <> Неопределено;
	
	ЭтоРазделеннаяКонфигурация = Ложь;
	
	// Обязательные параметры для продолжения работы.
	Параметры.Вставить("РазделениеВключено", Ложь);
	Параметры.Вставить("ДоступноИспользованиеРазделенныхДанных", Истина);
	
	Параметры.Вставить("ЭтоРазделеннаяКонфигурация", ЭтоРазделеннаяКонфигурация);
	Параметры.Вставить("ЕстьДоступДляОбновленияВерсииПлатформы", Истина);
	
	Параметры.Вставить("ИменаПодсистем", Служебный.ИменаПодсистем());
	Параметры.Вставить("ЭтоБазоваяВерсияКонфигурации", Ложь);
	Параметры.Вставить("ЭтоУчебнаяПлатформа", Ложь);
	Параметры.Вставить("ИмяТекущегоПользователя", ТекущийПользователь().Имя);
	//Параметры.Вставить("ИмяCOMСоединителя", ОбщегоНазначенияКлиентСервер.ИмяCOMСоединителя());
	Параметры.Вставить("КодОсновногоЯзыка", Метаданные.ОсновнойЯзык.КодЯзыка);
	
	Параметры.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ОбщегоНазначения.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы());
	
	ОбщиеПараметры = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности();
	
	Параметры.Вставить("МинимальнаяВерсияПлатформы",   ОбщиеПараметры.МинимальнаяВерсияПлатформы);
	Параметры.Вставить("РекомендуемаяВерсияПлатформы", ОбщиеПараметры.РекомендуемаяВерсияПлатформы);
	// Устарели. Для обратной совместимости.
	Параметры.Вставить("МинимальноНеобходимаяВерсияПлатформы", ОбщиеПараметры.МинимальноНеобходимаяВерсияПлатформы);
	Параметры.Вставить("РаботаВПрограммеЗапрещена",            ОбщиеПараметры.РаботаВПрограммеЗапрещена);
	
	Параметры.Вставить("РекомендуемыйОбъемОперативнойПамяти", ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти);
	Параметры.Вставить("ТребуетсяПоказРекомендацииПоОбъемуОперативнойПамяти", Ложь);
	
	Параметры.Вставить("ЭтоСеансВнешнегоПользователя", Ложь);
	
	Если Не ОбновлениеИнформационнойБазыСлужебный.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры)
	   И ЭтоВызовПередНачаломРаботыСистемы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Параметры.РазделениеВключено
		И ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы()
		И ОбновлениеИнформационнойБазыСлужебный.СтатусНевыполненныхОбработчиков(Истина) = "СтатусНеВыполнено" Тогда
		Параметры.Вставить("НеобходимоВыполнитьОбработчикиОтложенногоОбновления");
	КонецЕсли;
	
	// Проверка необходимости предварительного обновления параметров работы программы.
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И НЕ Параметры.ПолученныеПараметрыКлиента.Свойство("НеобходимоОбновлениеПараметровРаботыПрограммы") Тогда
		
		Если РегистрыСведений.ПараметрыРаботыПрограммы.НеобходимоОбновление() Тогда
			// Будет выполнено предварительное обновление.
			Параметры.Вставить("НеобходимоОбновлениеПараметровРаботыПрограммы");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Обязательные параметры для всех режимов работы.
	Параметры.Вставить("ПодробнаяИнформация", Метаданные.ПодробнаяИнформация);
	
	Если ОбновлениеИнформационнойБазыСлужебный.НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеНеразделенныхДанныхИнформационнойБазы");
	КонецЕсли;
	
	Если Параметры.РазделениеВключено И Не Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Параметры для работы в локальном режиме или
	// в сеансе с установленными значениями разделителей в модели сервиса.
	
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Параметры.Вставить("НеобходимоОбновлениеИнформационнойБазы");
	КонецЕсли;
	
	ДобавитьОбщиеПараметрыРаботыКлиента(Параметры);
	
	Если ЭтоВызовПередНачаломРаботыСистемы
	   И Параметры.Свойство("НеобходимоОбновлениеИнформационнойБазы") Тогда
		// Не следует добавлять остальные параметры до окончания обновления ИБ,
		// так как они могут рассчитывать, что обновление ИБ уже выполнено.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации и в дальнейшем во время работы с ней. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьОбщиеПараметрыРаботыКлиента(Параметры)
	
	Если Не Параметры.РазделениеВключено Или Параметры.ДоступноИспользованиеРазделенныхДанных Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		//Параметры.Вставить("АвторизованныйПользователь", Пользователи.АвторизованныйПользователь());
		//Параметры.Вставить("ЗаголовокПриложения", СокрЛП(Константы.ЗаголовокСистемы.Получить()));
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	//Параметры.Вставить("ЭтоГлавныйУзел", НЕ ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ());
	//Параметры.Вставить("ТребуетсяОбновлениеКонфигурацииУзлаРИБ",
	//	ОбщегоНазначения.ТребуетсяОбновлениеКонфигурацииПодчиненногоУзлаРИБ());
	
КонецПроцедуры

Функция ФиксированныеПараметрыКлиентаБезВременныхПараметров(Параметры)
	
	ПараметрыКлиента = Параметры;
	Параметры = Новый Структура;
	
	Для каждого ИмяВременногоПараметра Из ПараметрыКлиента.ИменаВременныхПараметров Цикл
		Параметры.Вставить(ИмяВременногоПараметра, ПараметрыКлиента[ИмяВременногоПараметра]);
		ПараметрыКлиента.Удалить(ИмяВременногоПараметра);
	КонецЦикла;
	Параметры.Удалить("ИменаВременныхПараметров");
	
	УстановитьПривилегированныйРежим(Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(ПараметрыКлиента);
	
КонецФункции

Процедура ЗапомнитьВременныеПараметры(Параметры)
	
	Параметры.Вставить("ИменаВременныхПараметров", Новый Массив);
	
	Для каждого КлючИЗначение Из Параметры Цикл
		Параметры.ИменаВременныхПараметров.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текущего пользователя информационной базы.
//
Функция ТекущийПользователь() Экспорт
	
	// Вычисляем актуальное имя пользователя, даже если оно было ранее изменено в текущем сеансе;
	// Например, для подключения к текущей ИБ через внешнее соединение из этого сеанса;
	// Во всех остальных случаях достаточно получить ПользователиИнформационнойБазы.ТекущийПользователь().
	ТекущийПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор);
	
	Если ТекущийПользователь = Неопределено Тогда
		ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	Возврат ТекущийПользователь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с формами.

// Устанавливает жирное оформление шрифта заголовков групп формы для их корректного отображения в интерфейсе 8.2.
// В интерфейсе Такси заголовки групп с обычным выделением и без выделения выводится большим шрифтом.
// В интерфейсе 8.2 такие заголовки выводятся как обычные надписи и не ассоциируются с заголовками.
// Эта функция предназначена для визуального выделения (жирным шрифтом) заголовков групп в режиме интерфейса 8.2.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для изменения шрифта заголовков групп;
//  ИменаГрупп - Строка - список имен групп формы, разделенных запятыми. Если имена групп не указаны,
//                        то оформление будет применено ко всем группам на форме.
//
// Пример:
//  Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
//    СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
//
Процедура УстановитьОтображениеЗаголовковГрупп(Форма, ИменаГрупп = "") Экспорт
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ЖирныйШрифт = Новый Шрифт(,, Истина);
		Если НЕ ЗначениеЗаполнено(ИменаГрупп) Тогда 
			Для Каждого Элемент Из Форма.Элементы Цикл 
				Если Тип(Элемент) = Тип("ГруппаФормы")
					И Элемент.Вид = ВидГруппыФормы.ОбычнаяГруппа
					И Элемент.ОтображатьЗаголовок = Истина 
					И (Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение
					Или Элемент.Отображение = ОтображениеОбычнойГруппы.Нет) Тогда 
						Элемент.ШрифтЗаголовка = ЖирныйШрифт;
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивЗаголовков = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаГрупп,,, Истина);
			Для Каждого ИмяЗаголовка Из МассивЗаголовков Цикл
				Элемент = Форма.Элементы[ИмяЗаголовка];
				Если Элемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение ИЛИ Элемент.Отображение = ОтображениеОбычнойГруппы.Нет Тогда 
					Элемент.ШрифтЗаголовка = ЖирныйШрифт;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры для установки/обновления/получения параметров работы программы (кэшей).

// Вызывает исключение с требованием перезапустить сеанс из-за обновления версии программы.
Процедура ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы() Экспорт
	
	ТекстОшибки = НСтр("ru = 'Версия программы обновлена, требуется перезапустить сеанс.'");
	ВызватьИсключение ТекстОшибки;
	
КонецПроцедуры

// Проверяет, что в текущем сеансе доступна последняя версия программы,
// в противном случае, вызывает исключение с требованием перезапустить сеанс.
//
// В старых сеансах нельзя обновлять параметры работы программы, а также
// нельзя выполнять изменение некоторых данных, чтобы не перезаписать
// новую версию данных (полученную с помощью новой версии программы)
// старой версией данных (полученной с помощью старой версии программы).
//
Процедура ПроверитьДинамическоеОбновлениеВерсииПрограммы() Экспорт
	
	Если ВерсияПрограммыОбновленаДинамически() Тогда
		ПотребоватьПерезапускСеансаПоПричинеДинамическогоОбновленияВерсииПрограммы();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, что в текущем сеансе есть динамическое изменение конфигурации базы и
// при этом нет режима обновления информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если версия программы обновлена.
//
Функция ВерсияПрограммыОбновленаДинамически() Экспорт
	
	Если Не КонфигурацияБазыДанныхИзмененаДинамически() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если конфигурация базы данных изменена динамически после запуска
	// обновления информационной базы, но до его завершения, тогда нужно
	// продолжать обновление несмотря на изменение.
	
	Возврат Не ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы();
	
КонецФункции

// Только для внутреннего использования.
Функция ЗаписатьОшибкуВЖурналРегистрацииПриЗапускеИлиЗавершении(ПрекратитьРаботу, Знач Событие, Знач ТекстОшибки) Экспорт
	
	Если Событие = "Запуск" Тогда
		ИмяСобытия = НСтр("ru = 'Запуск программы'");
		Если ПрекратитьРаботу Тогда
			НачалоОписанияОшибки = НСтр("ru = 'Возникла исключительная ситуация при запуске программы. Запуск программы аварийно завершен.'");
		Иначе
			НачалоОписанияОшибки = НСтр("ru = 'Возникла исключительная ситуация при запуске программы.'");
		КонецЕсли;
	Иначе
		ИмяСобытия = НСтр("ru = 'Завершение программы'");
		НачалоОписанияОшибки = НСтр("ru = 'Возникла исключительная ситуация при завершении программы.'");
	КонецЕсли;
	
	ОписаниеОшибки = НачалоОписанияОшибки
		+ Символы.ПС + Символы.ПС
		+ ТекстОшибки;
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	Возврат НачалоОписанияОшибки;

КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция НеобходимоОбновлениеНастроек() Экспорт
	
	Возврат Константы.Версия.Получить() <> Метаданные.Версия;
	
КонецФункции // НеобходимоОбновлениеНастроек()

// Обновить настройки информационной базы, если изменилась версия
//
Процедура ОбновитьНастройки() Экспорт
	
	УстановитьНастройкиПоУмолчанию();
	
КонецПроцедуры // ОбновитьНастройки()

// Установить настройки по-умолчанию для информационной базы
//
Процедура УстановитьНастройкиПоУмолчанию() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	Исключение
		ОтладкаКлиентСервер.Ошибка(ИнформацияОбОшибке());
		ОтменитьТранзакцию();
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // УстановитьНастройкиПоУмолчанию()

// Заполнить таблицу совместимости блокировок - РегистрСведений.СовместимостьБлокировок
//
Процедура ЗаполнитьТаблицуСовместимостиБлокировок() Экспорт
	
	// Получить DOM представление таблицы совместимости блокировок
	МакетТаблицы = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.ТаблицаСовместимостиБлокировок);
	ТаблицаDOM = ОбщегоНазначенияКлиентСервер.ПолучитьDOMИзСтрокиXML(МакетТаблицы.ПолучитьТекст());
	НаборЗаписей = РегистрыСведений.СовместимостьБлокировок.СоздатьНаборЗаписей();
	
	Для Каждого ЭлементСУБД Из ТаблицаDOM.ЭлементДокумента.ДочерниеУзлы Цикл
		ТипСУБД = СУБД.ПолучитьТипСУБД(ЭлементСУБД.ПолучитьАтрибут("name"));
		
		Для Каждого ЭлементВладельца Из ЭлементСУБД.ДочерниеУзлы Цикл
			РежимБлокировкиВладельца = СУБД.ПолучитьРежимБлокировки(ТипСУБД, ЭлементВладельца.ПолучитьАтрибут("mode"));
			
			Для Каждого ЭлементВидаСовместимости Из ЭлементВладельца.ДочерниеУзлы Цикл
				СовместимостьБлокировки = СУБД.ПолучитьВидСовместимостиБлокировки(ЭлементВидаСовместимости.ПолучитьАтрибут("state"));
				
				Для Каждого ЭлементЗапрашивающего Из ЭлементВидаСовместимости.ДочерниеУзлы Цикл
					РежимБлокировкиЗапрашивающего = СУБД.ПолучитьРежимБлокировки(ТипСУБД, ЭлементЗапрашивающего.ПолучитьАтрибут("mode"));
					
					СтрокаНабораЗаписей = НаборЗаписей.Добавить();
					СтрокаНабораЗаписей.ТипСУБД = ТипСУБД;
					СтрокаНабораЗаписей.УстановленнаяБлокировка = РежимБлокировкиВладельца;
					СтрокаНабораЗаписей.Совместимость = СовместимостьБлокировки;
					СтрокаНабораЗаписей.УстанавливаемаяБлокировка = РежимБлокировкиЗапрашивающего;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Очистить регистр СовместимостьБлокировок
	НаборЗаписейУдаления = РегистрыСведений.СовместимостьБлокировок.СоздатьНаборЗаписей();
	НаборЗаписейУдаления.Записать(Истина);
	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры // ЗаполнитьТаблицуСовместимостиБлокировок()

// Заполнить значения параметров показателей производительности
//
Процедура ЗаполнитьПараметрыПоказателей(Параметры) Экспорт
	
	МакетТаблицы = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.ПараметрыПоказателейПроизводительности);
	
	Схема = "http://v8.1c.ru/v8/pmc-counter-options-instance";
	ТипОбъектаГруппы = ФабрикаXDTO.Тип(Схема, "Group");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(МакетТаблицы.ПолучитьТекст());
	ЧтениеXML.ПерейтиКСодержимому();
	ЧтениеXML.Прочитать();
	
	Пока Истина Цикл
		
		Если ЧтениеXML.ЛокальноеИмя = "counterOptions" Тогда
			Прервать;
		КонецЕсли;
		
		ОбъектГруппы = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаГруппы);
			
		Если ОбъектГруппы = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		НастроитьГруппуПоказателей(ОбъектГруппы);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПараметрыПоказателей()

// Настроить группу показателей
//
Процедура НастроитьГруппуПоказателей(Группа)
	
	Для Каждого ОбъектГруппы Из Группа.group Цикл
		НастроитьГруппуПоказателей(ОбъектГруппы);
	КонецЦикла;
	
	Для Каждого ОбъектПоказателя Из Группа.counter Цикл
		НастроитьПоказатель(ОбъектПоказателя, Группа);
	КонецЦикла;
	
КонецПроцедуры // НастроитьГруппуПоказателей()

// Получить тип показателя производительности из строкового представления
//
// Параметры:
//  Тип - Строка, тип показателя в строковом виде
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипПоказателя - тип показателя в виде перечисления
//
Функция ПолучитьТипПоказателя(Тип)
	
	ТипВрег = ВРег(Тип);
	
	Если ТипВрег = "1C" Тогда
		Возврат Перечисления.ТипыПоказателей.Предприятие1С;
	ИначеЕсли ТипВрег = "OS_DL" Тогда
		Возврат Перечисления.ТипыПоказателей.ОСВзаимоблокировки;
	ИначеЕсли ТипВрег = "OS_TO" Тогда
		Возврат Перечисления.ТипыПоказателей.ОСТаймауты;
	ИначеЕсли ТипВрег = "QUERY" Тогда
		Возврат Перечисления.ТипыПоказателей.АнализЗапросов;
	ИначеЕсли ТипВрег = "WAIT" Тогда
		Возврат Перечисления.ТипыПоказателей.АнализОжиданий;
	ИначеЕсли ТипВрег = "DEADLOCK" Тогда
		Возврат Перечисления.ТипыПоказателей.АнализВзаимоблокировок;
	ИначеЕсли ТипВрег = "CALL" Тогда
		Возврат Перечисления.ТипыПоказателей.АнализСерверныхВызовов;
	КонецЕсли;
	
КонецФункции // ПолучитьТипПоказателя()

// Настроить показатель производительности
//
Процедура НастроитьПоказатель(Показатель, Группа)
	
	ТипЛинии = ПолучитьТипЛинииПоИмени(Показатель.lineType);
	ТолщинаЛинии = Показатель.lineWeight;
	
	ПоказательОбъект = Справочники.Показатели.НайтиПоКоду(Показатель.code).ПолучитьОбъект();
	ПоказательОбъект.ЕдиницаИзмерения = ПоказателиПроизводительности.ПолучитьЕдиницуИзмеренияПоИмени(Показатель.unit);
	ПоказательОбъект.Интерактивный = Показатель.interactive;
	ПоказательОбъект.Линия = Новый ХранилищеЗначения(Новый Линия(ТипЛинии, ТолщинаЛинии));
	ПоказательОбъект.Масштаб = Показатель.scale;
	ПоказательОбъект.Цвет = Новый ХранилищеЗначения(Новый Цвет(Показатель.r, Показатель.g, Показатель.b));
	ПоказательОбъект.ГраницаЗЖ = Показатель.gy_bound;
	ПоказательОбъект.ГраницаЖК = Показатель.yr_bound;
	ПоказательОбъект.Параметр.Очистить();
	ПоказательОбъект.ПоддержкаСУБД.Очистить();
	ПоказательОбъект.Тип = ПолучитьТипПоказателя(Показатель.type);
	
	Если Показатель.Установлено("parameters") Тогда
		Для Каждого Параметр Из Показатель.parameters.parameter Цикл
			СтрокаПараметра = ПоказательОбъект.Параметр.Добавить();
			СтрокаПараметра.Имя = Параметр.name;
			СтрокаПараметра.Значение = Параметр.value;
			СтрокаПараметра.Тип = Параметр.type;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТипСУБД Из Показатель.support.dbms Цикл
		СтрокаСУБД = ПоказательОбъект.ПоддержкаСУБД.Добавить();
		СтрокаСУБД.ТипСУБД = СУБД.ПолучитьТипСУБД(ТипСУБД.type);
		СтрокаСУБД.ВерсияСУБД = ТипСУБД.version;
		СтрокаСУБД.АвтоматическийРежим = ТипСУБД.dlm_auto;
		СтрокаСУБД.СмешанныйРежим = ТипСУБД.dlm_mixed;
		СтрокаСУБД.УправляемыйРежим = ТипСУБД.dlm_managed;
		Если ТипСУБД.os <> Неопределено Тогда
			СтрокаСУБД.ТипОС = Перечисления.ТипыОС[ТипСУБД.os];
		КонецЕсли;
	КонецЦикла;
	
	ПоказательОбъект.Записать();
	
КонецПроцедуры // НастроитьПоказатель()

// Функция возвращает тип линии по указанному имени
//
// Праметры:
// Имя - Строка, имя типа линии
//
// Возвращаемое значение:
//  ТипЛинииДиаграммы - тип линии
//
Функция ПолучитьТипЛинииПоИмени(Имя)
	
	Если Имя = "Сплошная" Тогда
		Возврат ТипЛинииДиаграммы.Сплошная;
	ИначеЕсли Имя = "Пунктир" Тогда
		Возврат ТипЛинииДиаграммы.Пунктир;
	ИначеЕсли Имя = "Точечная" Тогда
		Возврат ТипЛинииДиаграммы.Точечная;
	ИначеЕсли Имя = "ПунктирТочка" Тогда
		Возврат ТипЛинииДиаграммы.ПунктирТочка;
	ИначеЕсли Имя = "ПунктирТочкаТочка" Тогда
		Возврат ТипЛинииДиаграммы.ПунктирТочкаТочка;
	Иначе
		Возврат ТипЛинииДиаграммы.НетЛинии;
	КонецЕсли;
	
КонецФункции // ПолучитьТипЛинииПоИмени()


///////////////////////////////////////////////////////////////////////////////
// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ

// Создать предопределенные элементы
//
Процедура СоздатьПредопределенныеЭлементы(Параметры) Экспорт
	
	Макет = ПолучитьОбщийМакет("ЗначенияПредопределенныхЭлементов");
	Для ТекСтрока = 2 По Макет.ВысотаТаблицы Цикл
		ИмяСправочника = Макет.Область(ТекСтрока, 1).Текст;
		УИД = Макет.Область(ТекСтрока, 2).Текст;
		ИмяПредопределенныхДанных = Макет.Область(ТекСтрока, 3).Текст;
		Код = Макет.Область(ТекСтрока, 4).Текст;
		Наименование = Макет.Область(ТекСтрока, 5).Текст;
		ЭтоГруппа = (Макет.Область(ТекСтрока, 6).Текст = "true");
		УИДРодителя = Макет.Область(ТекСтрока, 7).Текст;
		Удален = (Макет.Область(ТекСтрока, 8).Текст = "true");
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор(УИД);
		Менеджер = Справочники[ИмяСправочника];
		Элемент = Менеджер.ПолучитьСсылку(УникальныйИдентификатор);
		ЭлементОбъект = Элемент.ПолучитьОбъект();
		Если ЭлементОбъект = Неопределено Тогда
			Если Не Удален Тогда
				// Элемент не создан, создаем
				Если ЭтоГруппа Тогда
					НовыйЭлемент = Менеджер.СоздатьГруппу();
				Иначе
					НовыйЭлемент = Менеджер.СоздатьЭлемент();
				КонецЕсли;
				НовыйЭлемент.Код = Код;
				НовыйЭлемент.ИмяПредопределенныхДанных = ИмяПредопределенныхДанных;
				НовыйЭлемент.Наименование = Наименование;
				Если Не ПустаяСтрока(УИДРодителя) Тогда
					РодительСсылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДРодителя));
					НовыйЭлемент.Родитель = РодительСсылка;
				КонецЕсли;
				НовыйЭлемент.УстановитьСсылкуНового(Элемент);
				НовыйЭлемент.ДополнительныеСвойства.Вставить("НачальноеЗаполнение");
				НовыйЭлемент.Записать();
			КонецЕсли
		ИначеЕсли Удален Тогда
			ЭлементОбъект.Удалить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить константы
//
Процедура ЗаполнитьКонстанты() Экспорт
	
	Константы.МасштабПоУмолчанию.Установить(Перечисления.ПредопределенныеМасштабы.Минимальный);
	Константы.ИнтервалОбновленияПодключенийРП.Установить(60);
	Константы.ДлительностьХраненияФайловТЖ.Установить(4);
	Константы.НеУдалятьСлужебныеДанные.Установить(Ложь);
	Константы.ПодтверждениеЗакрытияЦУП.Установить(Истина);
	Константы.ПоказыватьОтладочныеСообщения.Установить(Ложь);
	Константы.ПоказыватьПредупреждения.Установить(Истина);
	Константы.РежимОтладки.Установить(Истина);
	Константы.Версия.Установить(Метаданные.Версия);
	
КонецПроцедуры // ЗаполнитьКонстанты()

// Загрузить предопределенные сценарии
//
Процедура ЗагрузитьСценарии() Экспорт
	
	ЗагрузитьСценарий(Справочники.Сценарии.Базовый, Метаданные.ОбщиеМакеты.СценарийБазовый);
	ЗагрузитьСценарий(Справочники.Сценарии.Мониторинг, Метаданные.ОбщиеМакеты.СценарийМониторинг);
	ЗагрузитьСценарий(Справочники.Сценарии.Просмотр, Метаданные.ОбщиеМакеты.СценарийПросмотр);
	
КонецПроцедуры // ЗагрузитьСценарии()

// Загрузить таблицу конечного автомата обработки замеров
//
Процедура ЗагрузитьКАОбработкиЗамеров() Экспорт
	
	// Подготовить структуру таблицы
	ТаблицаКАЗамера = Новый ТаблицаЗначений;
	Колонки = ТаблицаКАЗамера.Колонки;
	Колонки.Добавить("Состояние");
	Колонки.Добавить("Действие");
	Колонки.Добавить("ПриУспешномВыполнении");
	Колонки.Добавить("ПриВыполненииСОшибкой");
	
	// Подготовить чтение данных
	ТекстКАОбработкиЗамеров = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.ТаблицаКАОбработкиЗамеров).ПолучитьТекст();
	Схема = "http://v8.1c.ru/v8/pmc-metering-fem-instance";
	ТипОбъектаГруппы = ФабрикаXDTO.Тип(Схема, "Row");
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстКАОбработкиЗамеров);
	ЧтениеXML.ПерейтиКСодержимому();
	ЧтениеXML.Прочитать();
	
	Пока Истина Цикл
		Если ЧтениеXML.ЛокальноеИмя = "meteringFEM" Тогда
			Прервать;
		КонецЕсли;
		
		ОбъектГруппы = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаГруппы);
			
		Если ОбъектГруппы = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		// Заполнить строку таблицы
		СтрокаТаблицыКА = ТаблицаКАЗамера.Добавить();
		СтрокаТаблицыКА.Состояние = ОбъектГруппы.state;
		СтрокаТаблицыКА.Действие = ОбъектГруппы.action;
		СтрокаТаблицыКА.ПриУспешномВыполнении = ОбъектГруппы.onActionSuccess;
		СтрокаТаблицыКА.ПриВыполненииСОшибкой = ОбъектГруппы.onActionFail;
	КонецЦикла;
	
	// Сохранить таблицу в соответствующую константу
	Константы.КАОбработкиЗамеров.Установить(ЗначениеВСтрокуВнутр(ТаблицаКАЗамера));
	
КонецПроцедуры // ЗагрузитьКАОбработкиЗамеров()

// Обновить данные журнала показателей
// Если для записи журнала показателей не установлен год, или месяц, или день,
// или час, или минута, то эта процедура устанавливает эти значения
//
Процедура ОбновитьЖурналПоказателей(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Период,
		|	ИнформационнаяБаза,
		|	Год,
		|	Месяц,
		|	День,
		|	Час,
		|	Минута,
		|	Показатель,
		|	НомерЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналПоказателей
		|ГДЕ
		|	Год = 0 И Месяц = 0 И День = 0";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.ЖурналПоказателей.СоздатьМенеджерЗаписи();
		Запись.Период = Выборка.Период;
		Запись.ИнформационнаяБаза = Выборка.ИнформационнаяБаза;
		Запись.Показатель = Выборка.Показатель;
		Запись.НомерЗаписи = Выборка.НомерЗаписи;
		Запись.Прочитать();
		
		Запись.Год = Год(Выборка.Период);
		Запись.Месяц = Месяц(Выборка.Период);
		Запись.День = День(Выборка.Период);
		Запись.Час = Час(Выборка.Период);
		Запись.Минута = Минута(Выборка.Период);
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры // ОбновитьЖурналПоказателей()

// Обновить счетчики производительности
//
Процедура ОбновитьСчетчикиПроизводительности() Экспорт
	
	Справочники.СчетчикиПроизводительности.ИнициализироватьСчетчики();
	
КонецПроцедуры

// Обновить веса планов запросов
//
Процедура ОбновитьВесаПлановЗапросов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыЗапросов.Ссылка КАК Ссылка,
	|	ПланыЗапросов.Вес КАК Вес
	|ПОМЕСТИТЬ МодифицируемыеПланыЗапросов
	|ИЗ
	|	Справочник.ПланыЗапросов КАК ПланыЗапросов
	|ГДЕ
	|	ПланыЗапросов.Вес = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МодифицируемыеПланыЗапросов.Ссылка КАК Ссылка,
	|	МодифицируемыеПланыЗапросов.Ссылка.Текст КАК Текст,
	|	МодифицируемыеПланыЗапросов.Ссылка.ТипСУБД КАК ТипСУБД
	|ИЗ
	|	МодифицируемыеПланыЗапросов КАК МодифицируемыеПланыЗапросов";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПланЗапросаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПланЗапросаОбъект.Вес = СтруктураДанных.ВычислитьВесПланаЗапроса(Выборка.Текст, Выборка.ТипСУБД);
		ПланЗапросаОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеЗапроса.Ссылка КАК ДокументСсылка,
	|	МодифицируемыеПланыЗапросов.Вес КАК Вес
	|ИЗ
	|	МодифицируемыеПланыЗапросов КАК МодифицируемыеПланыЗапросов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыполнениеЗапроса КАК ВыполнениеЗапроса
	|		ПО МодифицируемыеПланыЗапросов.Ссылка = ВыполнениеЗапроса.План";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
		ДокОбъект.ВесПланаЗапроса = Выборка.Вес;
		ДокОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Обновить элементы справочника "Контексты"
//
Процедура ОбновитьСправочникКонтексты() Экспорт
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контексты.Ссылка КАК Ссылка,
	               |	Контексты.Владелец КАК ИБ
	               |ИЗ
	               |	Справочник.Контексты КАК Контексты
	               |ГДЕ
	               |	НЕ Контексты.Контекст ПОДОБНО """"
	               |	И Контексты.ПерваяСтрока = ЗНАЧЕНИЕ(Справочник.СтрокиКонтекста.ПустаяСсылка)
	               |	И Контексты.ПоследняяСтрока = ЗНАЧЕНИЕ(Справочник.СтрокиКонтекста.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КонтекстОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтрокаКонтекста = СтруктураДанных.ПолучитьСтрокуКонтекста(Инструменты, Выборка.ИБ, КонтекстОбъект.Контекст);
		КонтекстОбъект.ПерваяСтрока             = СтрокаКонтекста;
		КонтекстОбъект.ПоследняяСтрока          = СтрокаКонтекста;
		КонтекстОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Обновить элементы справочника "Информационные базы"
//
Процедура ОбновитьСправочникИнформационныеБазы_2_1_1_1() Экспорт
	
	// Включаем использование нового аналитического показателя "Анализ серверных вызовов",
	// если настроено использование всех других аналитических показателей
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИнформационныеБазы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	               |ГДЕ
	               |	ИнформационныеБазы.ИспользоватьППАнализЗапросов
	               |	И ИнформационныеБазы.ИспользоватьППАнализОжиданий
	               |	И ИнформационныеБазы.ИспользоватьППАнализВзаимоблокировок
	               |	И НЕ ИнформационныеБазы.ИспользоватьППАнализСерверныхВызовов";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИБОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ИБОбъект.ИспользоватьППАнализСерверныхВызовов = Истина;
		ИБОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЦЕНАРИИ

// Загрузить сценарий из шаблона
//
// Параметры:
//  СценарийСсылка - СправочникСсылка.Сценарий, ссылка на загружаемый сцеарий
//  МакетСценария - Шаблон, XML файл сценария
//
Процедура ЗагрузитьСценарий(СценарийСсылка, МакетСценария)
	
	ТекстСценария = ПолучитьОбщийМакет(МакетСценария).ПолучитьТекст();
	СценарийВызовСервера.ИмпортСценария(ТекстСценария, СценарийСсылка);
	
КонецПроцедуры // ЗагрузитьСценарий()

// Получить таблицу совместимости блокировок
//
// Возвращаемое значение:
//  ТаблицаЗначений (см. СУБД.СоздатьТаблицуСовместимостиБлокировок())
//
Функция ТаблицаСовместимостиБлокировок(глТаблицаСовместимостиБлокировок) Экспорт
	
	Если глТаблицаСовместимостиБлокировок = Неопределено Тогда
		глТаблицаСовместимостиБлокировок =
			СУБД.СоздатьТаблицуСовместимостиБлокировок();
	КонецЕсли;
	
	Возврат глТаблицаСовместимостиБлокировок;
	
КонецФункции // ТаблицаСовместимостиБлокировок()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнициализироватьНаСервере() Экспорт
	
	УстановитьИдентификаторСеанса();
	ФоновыеЗадания.Выполнить("ПоказателиПроизводительности.УдалитьСтарыеСообщенияОбмена");
	
КонецФункции // ИнициализироватьНаСервере()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УстановитьИдентификаторСеанса()
	
	МенеджерЗаписи = РегистрыСведений.ИдентификаторыАктивныхСеансов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НомерСеанса = НомерСеансаИнформационнойБазы();
	МенеджерЗаписи.ИдентификаторСеанса = ПараметрыСеанса.ИдентификаторСеанса;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры // УстановитьИдентификаторСеанса()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьИдентификаторСеанса(НомерСеанса, ИдентификаторСеанса) Экспорт
	
	СеансАктивен = Ложь;
	АктивныеСеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого Сеанс Из АктивныеСеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеанса Тогда
			СеансАктивен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СеансАктивен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИдентификаторыАктивныхСеансов.ИдентификаторСеанса КАК ИдентификаторСеанса
	|ИЗ
	|	РегистрСведений.ИдентификаторыАктивныхСеансов КАК ИдентификаторыАктивныхСеансов
	|ГДЕ
	|	ИдентификаторыАктивныхСеансов.ИдентификаторСеанса = &ИдентификаторСеанса
	|	И ИдентификаторыАктивныхСеансов.НомерСеанса = &НомерСеанса";
	
	Запрос.УстановитьПараметр("ИдентификаторСеанса", ИдентификаторСеанса);
	Запрос.УстановитьПараметр("НомерСеанса", НомерСеанса);
	
	РезультатЗапроса = Запрос.Выполнить();
	РезультатПроверки = Не РезультатЗапроса.Пустой();
	
	Возврат РезультатПроверки;
	
КонецФункции // ПроверитьИдентификаторСеанса()

