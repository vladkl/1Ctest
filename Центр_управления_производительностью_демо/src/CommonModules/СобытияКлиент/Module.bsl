
///////////////////////////////////////////////////////////////////////////////
// РЕГИСТРАЦИЯ СОБЫТИЙ

// Создать реестр зарегистрированных и обрабатываемых событий
//
// Возвращаемое значение:
//  ТаблицаЗначений - реестр со следующимим колонками:
//                  - Событие, зарегистрированные событие
//                  - Параметры, параметры зарегистрированного события
//                  - Контекст, данные, необходимые для генерирования события
//
Функция СоздатьРеестрСобытий() Экспорт
	
	Реестр = Новый Структура();
	
	Возврат Реестр;
	
КонецФункции // СоздатьРеестрСобытий()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСтруктуруСобытияРеестра()
	
	СобытиеРеестра = Новый Структура;
	
	СобытиеРеестра.Вставить("Событие");
	СобытиеРеестра.Вставить("Параметры");
	СобытиеРеестра.Вставить("Контекст");
	
	Возврат СобытиеРеестра;
	
КонецФункции // ПолучитьСтруктуруСобытияРеестра()


// Регистрация события для возможности его возникновения
//
// Параметры:
//  Событие - СправочникСсылка.Событие
//  Параметры - Произвольный, параметры регистрируемого события
//  РеестрСобытий - ТаблицаЗначений (см. СоздатьРеестрСобытий())
//
Процедура ЗарегистрироватьСобытие(Событие, Параметры, РеестрСобытий) Экспорт
	
	СтрокаРеестра = ПолучитьСтруктуруСобытияРеестра();
	СтрокаРеестра.Событие = Событие;
	СтрокаРеестра.Параметры = Параметры;
	СтрокаРеестра.Контекст = СоздатьКонтекстСобытия(Событие, Параметры);
	
	РеестрСобытий.Добавить(СтрокаРеестра);
	
КонецПроцедуры // ЗарегистрироватьСобытие()

// Удалить ранее зарегистрированные события
//
// Параметры:
//  РеестрСобытий - ТаблицаЗначений (см. СоздатьРеестрСобытий())
//
Процедура ОчиститьРеестрСобытий(РеестрСобытий) Экспорт
	
	Пока РеестрСобытий.Количество() > 0 Цикл
		СтрокаРеестра = РеестрСобытий[0];
		
		УдалитьКонтекстСобытия(
			СтрокаРеестра.Событие,
			СтрокаРеестра.Параметры,
			СтрокаРеестра.Контекст);
		
		РеестрСобытий.Удалить(СтрокаРеестра);
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРеестрСобытий()

// Создать данные, необходимые для работоспособности события
//
// Параметры:
//  Событие - СправочникСсылка.Событие
//  Параметры - Произвольный, параметры регистрируемого события
//
// Возвращаемое значение:
//  Произвольный - контекст события
//
Функция СоздатьКонтекстСобытия(Событие, Параметры)
	
	Перем Результат;
	
	Попытка
		КодСобытия = СобытияВызовСервера.ПолучитьКодСобытия(Событие);
		Выполнить "Результат = СоздатьКонтекстСобытия" + КодСобытия + "(Событие, Параметры.Получить());";
	Исключение
		Результат = Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // СоздатьКонтекстСобытия()

// Создать контекст события перехода показателя в зону
//
// Параметры:
//  Событие - СправочникСсылка.Событие
//  Параметры - Структура (см. СоздатьПараметрыСобытияПереходПоказателяВЗону())
//
// Возвращаемое значение:
//  Структура - контекст события
//
Функция СоздатьКонтекстСобытияПереходПоказателяВЗону(Событие, Параметры)
	
	КоличествоПоказателей = Параметры.Показатели.Количество();
	ОписанияПоказателей = Новый Массив(КоличествоПоказателей);
	
	Для Сч = 1 По КоличествоПоказателей Цикл
		ОписаниеПоказателя = Новый Структура;
		ОписаниеПоказателя.Вставить("Сумма", 0);
		ОписаниеПоказателя.Вставить("История", Новый СписокЗначений());
		ОписанияПоказателей[Сч-1] = ОписаниеПоказателя;
	КонецЦикла;
	
	КонтекстСобытия = Новый Структура;
	КонтекстСобытия.Вставить("ОписанияПоказателей", ОписанияПоказателей);
	КонтекстСобытия.Вставить("Длительность", 0);
	КонтекстСобытия.Вставить("ПредыдущаяЗона");
	КонтекстСобытия.Вставить("ПредыдущееВремя");
	КонтекстСобытия.Вставить("Сгенерировано", Ложь);
	КонтекстСобытия.Вставить("Повтор", Параметры.Повтор);
	
	Возврат КонтекстСобытия;
	
КонецФункции // СоздатьКонтекстСобытияПереходПоказателяВЗону()

// Удалить данные, необходимые для работоспособности события
//
// Параметры:
//  Событие - СправочникСсылка.Событие
//  Параметры - Произвольный, параметры регистрируемого события
//  Контекст - Произвольный, данные события
//
Процедура УдалитьКонтекстСобытия(Событие, Параметры, Контекст)
	
	Попытка
		КодСобытия = СобытияВызовСервера.ПолучитьКодСобытия(Событие);
		Выполнить "УдалитьКонтекстСобытия" + КодСобытия + "(Событие, Параметры, Контекст);";
	Исключение
	КонецПопытки;
	
КонецПроцедуры // СоздатьКонтекстСобытия()

// Создать контекст события завершения записи показателя
//
// Параметры:
//  Событие - СправочникСсылка.Событие
//  Параметры - Структура (см. СоздатьПараметрыСобытияПереходПоказателяВЗону())
//
// Возвращаемое значение:
//  Структура - контекст события
//
Функция СоздатьКонтекстСобытияЗаписьПоказателяВыключена(Событие, Параметры)
	
	КоличествоПоказателей = Параметры.Показатели.Количество();
	ОписанияПоказателей = Новый Массив(КоличествоПоказателей);
	
	Для Сч = 1 По КоличествоПоказателей Цикл
		ОписаниеПоказателя = Новый Структура;
		ОписаниеПоказателя.Вставить("Включен", Ложь);
		ОписаниеПоказателя.Вставить("Выключен", Ложь);
		ОписанияПоказателей[Сч-1] = ОписаниеПоказателя;
	КонецЦикла;
	
	КонтекстСобытия = Новый Структура;
	КонтекстСобытия.Вставить("ОписанияПоказателей", ОписанияПоказателей);
	
	Возврат КонтекстСобытия;
	
КонецФункции // СоздатьКонтекстСобытияЗаписьПоказателяВыключена()


///////////////////////////////////////////////////////////////////////////////
// ГЕНЕРИРОВАНИЕ СОБЫТИЙ

// Обработать все зарегистрированные события и при необходимости сгенерировать
// соответствующие события
//
// Параметры:
//  РеестрСобытий - ТаблицаЗначений (см. СоздатьРеестрСобытий())
//
Процедура СгенерироватьСобытия(РеестрСобытий) Экспорт
	
	Для Каждого СтрокаРеестра Из РеестрСобытий Цикл
		Попытка
			КодСобытия = СобытияВызовСервера.ПолучитьКодСобытия(СтрокаРеестра.Событие);
			Выполнить "СгенерироватьСобытие" + КодСобытия + "(СтрокаРеестра.Параметры.Получить(), СтрокаРеестра.Контекст);";
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // СгенерироватьСобытия()

// Сгенерировать при необходимости событие перехода показателя в зону
//
// Параметры:
//  Параметры - Структура (см. СоздатьПараметрыСобытияПереходПоказателяВЗону())
//  КонтекстСобытия - Структура (см. СоздатьКонтекстСобытияПереходПоказателяВЗону())
//
Процедура СгенерироватьСобытиеПереходПоказателяВЗону(Параметры, КонтекстСобытия)
	
	КоличествоПоказателей = Параметры.Показатели.Количество();
	ОписанияПоказателей = КонтекстСобытия.ОписанияПоказателей;
	ЗначенияПоказателей = Контекст.ЗначенияПоказателей();
	ТекущиеЗначенияПоказателей = ЗначенияПоказателей[ЗначенияПоказателей.Количество()-1];
	ТекущееВремя = ТекущиеЗначенияПоказателей.Время;
	ПредыдущееВремя = ?(КонтекстСобытия.ПредыдущееВремя = Неопределено, ТекущееВремя, КонтекстСобытия.ПредыдущееВремя);
	Интервал = ТекущееВремя - ПредыдущееВремя;
	КонтекстСобытия.Длительность = КонтекстСобытия.Длительность + Интервал;
	ПоказателейВЗоне = 0;
	
	// Обработка отслеживаемых показателей
	Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
		
		Показатель = Параметры.Показатели[Индекс];
		НовоеЗначение = ТекущиеЗначенияПоказателей[Показатель.Код];
		
		Если НовоеЗначение = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеПоказателя = ОписанияПоказателей[Индекс];
		История = ОписаниеПоказателя.История;
		РазмерИстории = История.Количество();
		ПолнаяИстория = РазмерИстории >= Параметры.Длительность;
		
		// Если история полностью заполнена
		Если ПолнаяИстория И РазмерИстории > 0 Тогда
			// Удалить старое значение
			ПервыйЭлемент = История[0];
			ПервоеЗначение = ПервыйЭлемент.Значение;
			ОписаниеПоказателя.Сумма = ОписаниеПоказателя.Сумма - ПервоеЗначение;
			История.Удалить(ПервыйЭлемент);
		КонецЕсли;
		
		// Добавить новое значение
		История.Добавить(НовоеЗначение);
		РазмерИстории = История.Количество();
		ОписаниеПоказателя.Сумма = ОписаниеПоказателя.Сумма + НовоеЗначение;
		Среднее = ОписаниеПоказателя.Сумма / РазмерИстории;
		
		// Определить зону
		ГраницаЗЖ = Показатель.ГраницаЗЖ;
		ГраницаЖК = Показатель.ГраницаЖК;
		Если Среднее <= ГраницаЗЖ Тогда
			Зона = ПредопределенноеЗначение("Перечисление.ЗоныЗначенийПоказателей.Зеленая");
		ИначеЕсли Среднее > ГраницаЖК Тогда
			Зона = ПредопределенноеЗначение("Перечисление.ЗоныЗначенийПоказателей.Красная");
		Иначе
			Зона = ПредопределенноеЗначение("Перечисление.ЗоныЗначенийПоказателей.Желтая");
		КонецЕсли;
		
		// Если показатель в отслеживаемой зоне
		Если Зона = Параметры.Зона Тогда
			ПоказателейВЗоне = ПоказателейВЗоне + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обновить счетчик повторений
	Если Параметры.Повтор >= 0 Тогда
		Если КонтекстСобытия.Повтор > 0 Тогда
			КонтекстСобытия.Повтор = КонтекстСобытия.Повтор - Интервал;
		Иначе
			КонтекстСобытия.Повтор = Параметры.Повтор;
		КонецЕсли;
	КонецЕсли;
	
	// Если необходимо сгенерировать событие
	Если КонтекстСобытия.Длительность >= Параметры.Длительность Тогда
		Если (Не КонтекстСобытия.Сгенерировано Или (Параметры.Повтор >= 0 И КонтекстСобытия.Повтор <= 0)) И ((Не Параметры.Все И ПоказателейВЗоне > 0) Или (Параметры.Все И ПоказателейВЗоне = КоличествоПоказателей)) Тогда
			ВыполнениеСценарияКлиент.СгенерироватьСобытие(ПредопределенноеЗначение("Справочник.События.ПереходПоказателяВЗону"), Параметры, Ложь);
			КонтекстСобытия.Сгенерировано = Истина;
		ИначеЕсли КонтекстСобытия.Сгенерировано И ((Не Параметры.Все И ПоказателейВЗоне = 0) Или (Параметры.Все И ПоказателейВЗоне <> КоличествоПоказателей)) Тогда
			КонтекстСобытия.Сгенерировано = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КонтекстСобытия.ПредыдущееВремя = ТекущееВремя;
	
КонецПроцедуры // СгенерироватьСобытиеПереходПоказателяВЗону()

// Сгенерировать при необходимости событие выключения записи показателей
//
// Параметры:
//  Параметры - Структура (см. СоздатьПараметрыСобытияПереходПоказателяВЗону())
//  КонтекстСобытия - Структура (см. СоздатьКонтекстСобытияПереходПоказателяВЗону())
//
Процедура СгенерироватьСобытиеЗаписьПоказателяВыключена(Параметры, КонтекстСобытия)
	
	КоличествоПоказателей = Параметры.Показатели.Количество();
	ОписанияПоказателей = КонтекстСобытия.ОписанияПоказателей;
	
	ТаблицаПоказателей = Контекст.Показатели();
	Все = Параметры.Все;
	КоличествоВыключенных = 0;
	
	Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
		СтрокаПоказателя = Параметры.Показатели[Индекс];
		Описание = ОписанияПоказателей[Индекс];
		СостояниеПоказателя = ТаблицаПоказателей.Найти(СтрокаПоказателя.Ссылка, "Показатель");
		
		Если СостояниеПоказателя.Запись Тогда
			Если Не Описание.Включен Тогда
				Описание.Включен = Истина;
			КонецЕсли;
		Иначе
			Если Описание.Включен Тогда
				Описание.Выключен = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Описание.Включен И Описание.Выключен Тогда
			КоличествоВыключенных = КоличествоВыключенных + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Все И КоличествоВыключенных = КоличествоПоказателей
	 Или Не Все И КоличествоВыключенных > 0 Тогда
		Для Индекс = 0 По КоличествоПоказателей - 1 Цикл
			Если Описание.Включен И Описание.Выключен Тогда
				Описание.Включен = Ложь;
				Описание.Выключен = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ВыполнениеСценарияКлиент.СгенерироватьСобытие(ПредопределенноеЗначение("Справочник.События.ЗаписьПоказателяВыключена"), Параметры, Ложь);
	КонецЕсли;
	
КонецПроцедуры // СгенерироватьСобытиеЗаписьПоказателяВыключена()


///////////////////////////////////////////////////////////////////////////////
// ФАБРИКИ ОБЪЕКТОВ

// Создать параметры по-умолчанию для указанного события
//
// Параметры:
//  Событие - СправочникСсылка.Событие
//
// Возвращаемое значение:
//  Произвольный - параметры по-умолчанию для указанного события
//
Функция СоздатьПараметрыСобытия(Событие) Экспорт
	
	Перем Результат;
	
	КодСобытия = СобытияВызовСервера.ПолучитьКодСобытия(Событие);
	
	Выполнить "Результат = СоздатьПараметрыСобытия" + КодСобытия + "();";
	
	Возврат Результат;
	
КонецФункции // СоздатьПараметрыСобытия()

// Получение представления события начала работы
//
//  Событие - СправочникСсылка.Событие, событие, параметры которого сравниваются
//  ПараметрСобытия - Произвольный, аналогично ПараметрСценария
//
// Возвращаемое значение:
//  Строка - представление события
//
Функция СоздатьПараметрыСобытияНачалоРаботы()
	
	Возврат Неопределено;
	
КонецФункции // СоздатьПараметрыСобытияНачалоРаботы()

// Получение представления события перехода показателя в зону
//
//  Событие - СправочникСсылка.Событие, событие, параметры которого сравниваются
//  ПараметрСобытия - Произвольный, аналогично ПараметрСценария
//
// Возвращаемое значение:
//  Строка - представление события
//
Функция СоздатьПараметрыСобытияПереходПоказателяВЗону()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Зона");
	Параметры.Вставить("Показатели", Новый Массив);
	Параметры.Вставить("Все", Ложь);
	Параметры.Вставить("Длительность", 0);
	Параметры.Вставить("Повтор", -1);
	
	Возврат Параметры;
	
КонецФункции // СоздатьПараметрыСобытияПереходПоказателяВЗону()

// Получение представления события ошибки
//
//  Событие - СправочникСсылка.Событие, событие, параметры которого сравниваются
//  ПараметрСобытия - Произвольный, аналогично ПараметрСценария
//
// Возвращаемое значение:
//  Строка - представление события
//
Функция СоздатьПараметрыСобытияОшибка()
	
	Возврат ПредопределенноеЗначение("Справочник.Команды.ПустаяСсылка");
	
КонецФункции // СоздатьПараметрыСобытияОшибка()

// Получение представления события возобновления работы
//
//  Событие - СправочникСсылка.Событие, событие, параметры которого сравниваются
//  ПараметрСобытия - Произвольный, аналогично ПараметрСценария
//
// Возвращаемое значение:
//  Строка - представление события
//
Функция СоздатьПараметрыСобытияЗаписьПоказателяВыключена()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Показатели", Новый Массив);
	Параметры.Вставить("Все", Ложь);
	
	Возврат Параметры;
	
КонецФункции // СоздатьПараметрыСобытияЗаписьПоказателяВыключена()


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ

// Служебная процедура, необходимая для корректного прохождения
// проверки "Поиск неиспользуемых процедур и функций"
//
// Параметры:
//  Нет
//
Процедура ВызовыНеявноИспользуемыхПроцедурИФункций()
	
	Если Ложь Тогда
		
		СоздатьПараметрыСобытияНачалоРаботы();
		СоздатьПараметрыСобытияПереходПоказателяВЗону();
		СоздатьПараметрыСобытияОшибка();
		СоздатьПараметрыСобытияЗаписьПоказателяВыключена();
		
		СгенерироватьСобытиеПереходПоказателяВЗону(Неопределено, Неопределено);
		СгенерироватьСобытиеЗаписьПоказателяВыключена(Неопределено, Неопределено);
		
		СоздатьКонтекстСобытияПереходПоказателяВЗону(Неопределено, Неопределено);
		СоздатьКонтекстСобытияЗаписьПоказателяВыключена(Неопределено, Неопределено);
		
		ВызовыНеявноИспользуемыхПроцедурИФункций();
		
	КонецЕсли;
	
КонецПроцедуры // ВызовыНеявноИспользуемыхПроцедурИФункций()
