///////////////////////////////////////////////////////////////////////////////
// КОНТЕКСТ

// Получить ссылку на справочник контекста с указанным текстом и ИБ
// Если такого контекста в базе еще нет, он будет создан и помещен в базу
//
// Параметры:
//  ТекстКонтекста - Строка, полный текст контекста
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//
// Возвращаемое значение:
//  СправочникСсылка.Контекст - полученный контекст
//
Функция ПолучитьКонтекст(ТекстКонтекста, ИБ)
	
	// Подготовить исходные данные
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	Хеш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, ТекстКонтекста);
	
	// Найти контекст
	КонтекстСсылка = НайтиКонтекст(ТекстКонтекста, ИБ, Хеш);
	
	Если КонтекстСсылка = Неопределено Тогда
		КонтекстСсылка = СоздатьКонтекст(Инструменты, ТекстКонтекста, ИБ, Хеш);
	КонецЕсли;
	
	Возврат КонтекстСсылка;
	
КонецФункции // ПолучитьКонтекст()

// Найти ссылку на справочник контекста с указанным текстом и ИБ
//
// Параметры:
//  ПоследняяСтрока - Строка, последняя строка контекста
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//  Хеш - Число, хеш последней строки контекста
//
// Возвращаемое значение:
//  СправочникСсылка.Контекст - найденый контекст и Неопределено,
//                 если такой контекст в базе не найден
//
Функция НайтиКонтекст(ТекстКонтекста, ИБ, Хеш)
	
	// Найти контекст
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Хеш", Хеш);
	Запрос.УстановитьПараметр("ИБ", ИБ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Контексты.Ссылка КАК Ссылка,
	               |	Контексты.Контекст КАК Контекст
	               |ИЗ
	               |	Справочник.Контексты КАК Контексты
	               |ГДЕ
	               |	НЕ Контексты.ПометкаУдаления
	               |	И Контексты.Владелец = &ИБ
	               |	И Контексты.Хеш = &Хеш";
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Проверить правильность поиска
	ТекстКонтекстаВрег = ВРег(ТекстКонтекста);
	Пока Выборка.Следующий() Цикл
		Если ВРег(Выборка.Контекст) = ТекстКонтекстаВрег Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиКонтекст()

// Создать справочник контекста с указанным текстом и ИБ
//
// Параметры:
//  ПоследняяСтрока - Строка, последняя строка контекста
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//  Хеш - Число, хеш последней строки контекста
//
// Возвращаемое значение:
//  СправочникСсылка.Контекст - найденый контекст и Неопределено,
//                 если такой контекст в базе не найден
//
Функция СоздатьКонтекст(Инструменты, ТекстКонтекста, ИБ, Хеш)
	
	ПерваяСтрока    = ПолучитьТекстПервойСтрокиКонтекста(ТекстКонтекста);
	ПоследняяСтрока = ПолучитьТекстПоследнейСтрокиКонтекста(ТекстКонтекста);
	
	КонтекстОбъект = Справочники.Контексты.СоздатьЭлемент();
	КонтекстОбъект.Владелец                 = ИБ;
	КонтекстОбъект.Хеш                      = Хеш;
	КонтекстОбъект.Наименование             = Строка(ПоследняяСтрока);
	КонтекстОбъект.Контекст                 = ТекстКонтекста;
	КонтекстОбъект.ПерваяСтрока             = ПолучитьСтрокуКонтекста(Инструменты, ИБ, ПерваяСтрока);
	КонтекстОбъект.ПоследняяСтрока          = ПолучитьСтрокуКонтекста(Инструменты, ИБ, ПоследняяСтрока);
	КонтекстОбъект.ТипКонтекста             = ПолучитьТипКонтекста(ПоследняяСтрока);
	КонтекстОбъект.Записать();
	
	Возврат КонтекстОбъект.Ссылка;
	
КонецФункции // СоздатьКонтекст()

// Получить тип контекста по его содержимому
//
// Параметры:
//  ТекстКонтекста - Строка, последняя строка контекста
//
// Возвращаемое значение:
//  Перечисления.ТипКонтекста - тип обрабатываемого контекста
//
Функция ПолучитьТипКонтекста(ТекстКонтекста)
	
	Если СтрНайти(ТекстКонтекста, "{") = 1
	   И СтрНайти(ТекстКонтекста, "}") = СтрДлина(ТекстКонтекста) Тогда
		Возврат Перечисления.ТипыКонтекстов.КонтекстИнтерфейса;
	Иначе
		Возврат Перечисления.ТипыКонтекстов.КонтекстКода;
	КонецЕсли;
	
КонецФункции // ОбработатьКонтекст()

// Получить текст первой строки контекста
//
// Параметры:
//  ТекстКонтекста - Строка, полный текст контекста
//
// Возвращаемое значение:
//  Строка - текст первой строки контекста
//
Функция ПолучитьТекстПервойСтрокиКонтекста(ТекстКонтекста)
	
	Результат = СокрЛП(СтрПолучитьСтроку(ТекстКонтекста, 1));
	Если ПустаяСтрока(Результат) И Не ПустаяСтрока(ТекстКонтекста) Тогда
		Результат = СокрЛП(СтрПолучитьСтроку(ТекстКонтекста, 2));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьТекстПервойСтрокиКонтекста()

// Получить текст последней строки контекста
//
// Параметры:
//  ТекстКонтекста - Строка, полный текст контекста
//
// Возвращаемое значение:
//  Строка - текст последней строки контекста
//
Функция ПолучитьТекстПоследнейСтрокиКонтекста(ТекстКонтекста)
	
	Возврат СокрЛП(СтрПолучитьСтроку(ТекстКонтекста, СтрЧислоСтрок(ТекстКонтекста)));
	
КонецФункции // ПолучитьТекстПоследнейСтрокиКонтекста()

// Получить ссылку на строку контекста
//
// Параметры:
//  Инструменты - Инструменты КИП (см. КипВнешнийКомпонент.ПолучитьИнструменты())
//  ИБ          - СправочникСсылка.ИнформационныеБазы - Ссылка на ИБ, к которой относится переданный контекст
//  ТекстСтроки - Строка, текст строки контекста
//
// Возвращаемое значение:
//  СправочникСсылка.СтрокиКонтекста - Элемент справочника, соответствующий переданной строке
//
Функция ПолучитьСтрокуКонтекста(Инструменты, ИБ, ТекстСтроки) Экспорт
	
	ХешСтроки = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, ТекстСтроки);
	
	// Поиск существующего элемента
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Хеш", ХешСтроки);
	Запрос.УстановитьПараметр("ИБ", ИБ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиКонтекста.Ссылка КАК Ссылка,
	               |	СтрокиКонтекста.ТекстСтроки КАК ТекстСтроки
	               |ИЗ
	               |	Справочник.СтрокиКонтекста КАК СтрокиКонтекста
	               |ГДЕ
	               |	НЕ СтрокиКонтекста.ПометкаУдаления
	               |	И СтрокиКонтекста.Владелец = &ИБ
	               |	И СтрокиКонтекста.Хеш = &Хеш";
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Проверить правильность поиска
	ТекстСтрокиВрег = ВРег(ТекстСтроки);
	Пока Выборка.Следующий() Цикл
		Если ВРег(Выборка.ТекстСтроки) = ТекстСтрокиВрег Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	// Создание нового элемента, если существующий не найден
	НовыйЭлемент = Справочники.СтрокиКонтекста.СоздатьЭлемент();
	НовыйЭлемент.Владелец = ИБ;
	НовыйЭлемент.Наименование = СокрЛП(Лев(ТекстСтроки, 150));
	НовыйЭлемент.Хеш = ХешСтроки;
	НовыйЭлемент.ТекстСтроки = ТекстСтроки;
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции //ПолучитьСтрокуКонтекста()


///////////////////////////////////////////////////////////////////////////////
// РЕСУРС

// Получить ссылку на справочник Ресурс с указанными параметрами
// Если такого ресурса в базе еще нет, он будет создан и помещен в базу
//
// Параметры:
//  Объект - Строка, имя таблицы в терминах 1С
//  Таблица - Строка, имя таблицы хранения
//  Индекс - Строка, имя индекса таблицы хранения
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//
// Возвращаемое значение:
//  СправочникСсылка.Ресурс - полученный ресурс
//
Функция ПолучитьРесурс(Объект, Таблица, Индекс, Измерения, ИБ, КонтекстАнализа, Инструменты)
	
	// Получить имя объекта метаданных
	Если Объект = Неопределено Тогда
		СтруктураХранения = КонтекстАнализа.СтруктураБазы.СУБД;
		Объект = СтруктураМетаданных.ПолучитьИмяТаблицы1С(СтруктураХранения, Таблица);
	КонецЕсли;
	
	Объект = ПолучитьИмяОбъектаРесурса(Объект);
	Ресурс = НайтиРесурс(Объект, Таблица, Индекс, Измерения, ИБ, Инструменты);
	
	Если Ресурс = Неопределено Тогда
		Ресурс = СоздатьРесурс(Объект, Таблица, Индекс, Измерения, ИБ, КонтекстАнализа, Инструменты);
	КонецЕсли;
	
	Возврат Ресурс;
	
КонецФункции // ПолучитьРесурс()

// Найти справочник Ресурс с указанными параметрами
//
// Параметры:
//  Объект - Строка, имя таблицы в терминах 1С
//  Таблица - Строка, имя таблицы хранения
//  Индекс - Строка, имя индекса таблицы хранения
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//
// Возвращаемое значение:
//  СправочникСсылка.Ресурс - найденый ресурс
//
Функция НайтиРесурс(Объект, Таблица, Индекс, Измерения, ИБ, Инструменты)
	
	ХешСтрока = Строка(Объект);
	ХешСтрока = ?(Таблица = Неопределено, ХешСтрока, ХешСтрока + "." + Строка(Таблица));
	ХешСтрока = ?(Индекс = Неопределено, ХешСтрока, ХешСтрока + "." + Строка(Индекс));
	ХешСтрока = ?(Измерения = Неопределено, ХешСтрока, ХешСтрока + " " + ИзмеренияВСтроку(Измерения));
	
	Хеш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, ХешСтрока);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИБ",  ИБ);
	Запрос.УстановитьПараметр("Хеш", Хеш);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ресурс.Ссылка КАК Ссылка,
	|	Ресурс.ХешСтрока КАК ХешСтрока
	|ИЗ
	|	Справочник.Ресурсы КАК Ресурс
	|ГДЕ
	|	(НЕ Ресурс.ПометкаУдаления)
	|	И Ресурс.Владелец = &ИБ
	|	И Ресурс.Хеш = &Хеш";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ХешСтрока = ХешСтрока Тогда
			Результат = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // НайтиРесурс()

// Создать справочник Ресурс с указанными параметрами
//
// Параметры:
//  Объект - Строка, имя таблицы в терминах 1С
//  Таблица - Строка, имя таблицы хранения
//  Индекс - Строка, имя индекса таблицы хранения
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//
// Возвращаемое значение:
//  СправочникСсылка.Ресурс - созданый ресурс
//
Функция СоздатьРесурс(Объект, Таблица, Индекс, Измерения, ИБ, КонтекстАнализа, Инструменты)
	
	Если ЗначениеЗаполнено(Индекс) Тогда
		
		Родитель = ПолучитьРесурс(Объект, Таблица, Неопределено, Неопределено, ИБ, КонтекстАнализа, Инструменты);
		
		Если Родитель = Неопределено Тогда
			Возврат Родитель;
		КонецЕсли;
		
		Наименование = Индекс;
		Тип = Перечисления.ТипыРесурсов.Индекс;
		
	ИначеЕсли ЗначениеЗаполнено(Таблица) Тогда
		
		Родитель = ПолучитьРесурс(Объект, Неопределено, Индекс, Неопределено, ИБ, КонтекстАнализа, Инструменты);
		
		Если Родитель = Неопределено Тогда
			Возврат Родитель;
		КонецЕсли;
		
		Наименование = Таблица;
		Тип = Перечисления.ТипыРесурсов.Таблица;
		
	Иначе
		
		Родитель = Справочники.Ресурсы.ПустаяСсылка();
		Наименование = Объект;
		Тип = Перечисления.ТипыРесурсов.ОбъектМетаданных;
		
	КонецЕсли;
	
	ХешСтрока = ?(ЗначениеЗаполнено(Родитель), Родитель.ХешСтрока + ".", "") + Наименование;
	
	Ресурс = Справочники.Ресурсы.СоздатьЭлемент();
	Ресурс.Владелец     = ИБ;
	Ресурс.Родитель     = Родитель;
	Ресурс.Наименование = Наименование;
	Ресурс.ХешСтрока    = ХешСтрока;
	Ресурс.Тип          = Тип;
	Если Не Измерения = Неопределено Тогда
		Ресурс.ХешСтрока = Ресурс.ХешСтрока + " " + ИзмеренияВСтроку(Измерения);
		Для Каждого Измерение Из Измерения Цикл
			СтрокаТЧ = Ресурс.Измерения.Добавить();
			СтрокаТЧ.Измерение = Измерение.Ключ;
			СтрокаТЧ.Значение = Измерение.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	Ресурс.Хеш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, Ресурс.ХешСтрока);
	
	Ресурс.Записать();
	
	Возврат Ресурс.Ссылка;
	
КонецФункции // СоздатьРесурс()

// Получить имя объекта по полному имени таблицы
//
// Параметры:
//  ИмяТаблицы - Строка, полное имя
//
// Возвращаемое значение:
//  Строка - Имя объекта
//
Функция ПолучитьИмяОбъектаРесурса(ИмяТаблицы)
	
	КоличествоТочек = СтрЧислоВхождений(ИмяТаблицы, ".");
	
	Если КоличествоТочек = 0 Или КоличествоТочек = 1 Тогда
		Возврат ИмяТаблицы;
	Иначе
		Поз = СтрНайти(ИмяТаблицы, ".");
		ИмяОбъекта = Лев(ИмяТаблицы, Поз);
		ИмяТаблицы = Прав(ИмяТаблицы, СтрДлина(ИмяТаблицы) - Поз);
		Поз = СтрНайти(ИмяТаблицы, ".");
		Возврат ИмяОбъекта + Лев(ИмяТаблицы, Поз - 1);
	КонецЕсли;
	
КонецФункции // ПолучитьИмяОбъектаРесурса()

Функция ИзмеренияВСтроку(Измерения)
	
	Строка = "";
	Для Каждого КлючЗначение Из Измерения Цикл
		Строка = Строка + ?(Строка = "", "", " ") + КлючЗначение.Ключ + "=" + КлючЗначение.Значение;
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

// Создает структуру, которая описывает ресурс блокировки
//
// Параметры:
//  ОбъектМетаданных - Неопределено, Строка, имя таблицы в терминах метаданных
//  Таблица - Неопределено, Строка, имя таблицы в терминах СУБД
//  Индекс - Неопределено, Строка, имя нидекса
//  Измерения - Неопределено, Соответствие, где ключ: имя реквизита, а занчение: значение реквизита
//
// Возвращаемое значение:
//  Структура - опсание ресурса блокировки
//
Функция ПолучитьСтруктуруРесурса(
	ОбъектМетаданных = Неопределено, 
	Таблица = Неопределено, 
	Индекс = Неопределено, 
	Измерения = Неопределено) Экспорт
	
	Возврат Новый Структура("ОбъектМетаданных, Таблица, Индекс, Измерения", ОбъектМетаданных, Таблица, Индекс, Измерения);
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ТЕКСТ ЗАПРОСА

// Получить ссылку на справочник ТекстЗапроса с указанными параметрами
// Если такого теста запроса в базе еще нет, он будет создан и помещен в базу
//
// Параметры:
//  Текст - Строка, текст запроса
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//
// Возвращаемое значение:
//  СправочникСсылка.ТекстЗапроса - полученный текст запроса
//
Функция ПолучитьТекстЗапроса(Знач Текст, ИБ, КонтекстАнализа)
	
	// Заменить имена временных таблиц
	ТипСУБД = СтруктураДанныхПовтИсп.ПолучитьТипСУБД(ИБ);
	Если ТипСУБД = Перечисления.ТипыСУБД.MSSQLServer Тогда
		ПозНач = СтрНайти(Текст, "#tt");
		Пока ПозНач > 0 Цикл
			ПозКон = ОбщегоНазначенияКлиентСервер.НайтиСледующуюНеЦифру(Текст, ПозНач+3);
			Если ПозКон <> Неопределено Тогда
				Текст = Лев(Текст, ПозНач-1) + "#tt" + Сред(Текст, ПозКон);
				ПозНач = СтрНайти(Текст, "#tt",, ПозНач + 4);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПозНач = СтрНайти(Текст, "pg_temp.tt");
		Пока ПозНач > 0 Цикл
			ПозКон = ОбщегоНазначенияКлиентСервер.НайтиСледующуюНеЦифру(Текст, ПозНач+10);
			Если ПозКон <> Неопределено Тогда
				Текст = Лев(Текст, ПозНач-1) + "pg_temp.tt" + Сред(Текст, ПозКон);
				ПозНач = СтрНайти(Текст, "pg_temp.tt",, ПозНач + 11);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Подготовить исходные данные
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	Хеш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, Текст);
	
	ТекстЗапроса = НайтиТекстЗапроса(Текст, ИБ, Хеш);
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = СоздатьТекстЗапроса(Текст, ИБ, Хеш, КонтекстАнализа);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапроса()

// Найти справочник ТекстЗапроса с указанными параметрами
//
// Параметры:
//  Текст - Строка, текст запроса
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//  Хеш - Число, хеш текста запроса
//
// Возвращаемое значение:
//  СправочникСсылка.ТекстЗапроса - найденый текст запроса
//
Функция НайтиТекстЗапроса(Текст, ИБ, Хеш)
	
	// Найти текст запроса
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.УстановитьПараметр("Хеш", Хеш);
	ЗапросПоиска.УстановитьПараметр("ИБ", ИБ);
	ЗапросПоиска.Текст = "ВЫБРАТЬ
	                     |	ТекстыЗапросов.Ссылка КАК Ссылка,
	                     |	ТекстыЗапросов.Текст КАК Текст,
	                     |	ТекстыЗапросов.Владелец КАК Владелец
	                     |ИЗ
	                     |	Справочник.ТекстыЗапросов КАК ТекстыЗапросов
	                     |ГДЕ
	                     |	НЕ ТекстыЗапросов.ПометкаУдаления
	                     |	И ТекстыЗапросов.Владелец = &ИБ
	                     |	И ТекстыЗапросов.Хеш = &Хеш";
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	// Проверить правильность поиска
	ТекстВРег = ВРег(Текст);
	Пока Выборка.Следующий() Цикл
		Если ВРег(Выборка.Текст) = ТекстВРег И Выборка.Владелец = ИБ Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиТекстЗапроса()

// Создать справочник ТекстЗапроса с указанными параметрами
//
// Параметры:
//  Текст - Строка, текст запроса
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//  Хеш - Число, хеш текста запроса
//
// Возвращаемое значение:
//  СправочникСсылка.ТекстЗапроса - созданый текст запроса
//
Функция СоздатьТекстЗапроса(Текст, ИБ, Хеш, КонтекстАнализа)
	
	ЗапросОбъект = Справочники.ТекстыЗапросов.СоздатьЭлемент();
	ЗапросОбъект.Наименование = Лев(Текст, 150);
	ЗапросОбъект.Хеш          = Хеш;
	ЗапросОбъект.Текст        = Текст;
	ЗапросОбъект.Владелец     = ИБ;
	ЗапросОбъект.МетаТекст    = СтруктураМетаданных.ПолучитьЗапросВТерминахМетаданных(
		Текст,
		КонтекстАнализа.СтруктураБазы.СУБД,
		КонтекстАнализа.СловарьШаблонов,
		КонтекстАнализа.Замер.ТипСУБД);
	ЗапросОбъект.Записать();
	
	Возврат ЗапросОбъект.Ссылка;
	
КонецФункции // СоздатьТекстЗапроса()


///////////////////////////////////////////////////////////////////////////////
// ЗАПРОС

// Получить ссылку на справочник Запрос с указанными параметрами
// Если такого теста запроса в базе еще нет, он будет создан и помещен в базу
//
// Параметры:
//  Текст - Строка, текст запроса
//  Sdbl - Строка, текст Sdbl запроса
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//
// Возвращаемое значение:
//  СправочникСсылка.ТекстЗапроса - полученный текст запроса
//
Функция ПолучитьЗапрос(Текст, Sdbl, ИБ)
	
	СтрокаХешаSql = "";
	СтрокаХешаSdbl = "";
	
	// Подготовить исходные данные
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	ХешSdbl = КипВнешнийКомпонент.ПолучитьПолныйХешSdbl(Инструменты, Sdbl, СтрокаХешаSdbl);
	ХешSql = КипВнешнийКомпонент.ПолучитьПолныйХешSql(Инструменты, Текст, СтрокаХешаSql);
	Хеш = КипВнешнийКомпонент.ОбъединитьХеш(Инструменты, ХешSdbl, ХешSql);
	СтрокаХеша = СтрокаХешаSdbl + СтрокаХешаSql;
	
	ТекстЗапроса = НайтиЗапрос(Текст, Sdbl, ИБ, Хеш, СтрокаХеша);
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = СоздатьЗапрос(Текст, Sdbl, ИБ, Хеш, СтрокаХеша);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьЗапрос()

// Найти справочник ТекстЗапроса с указанными параметрами
//
// Параметры:
//  Текст - Строка, текст запроса
//  Sdbl - Строка, текст Sdbl запроса
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//  Хеш - Число, хеш текста запроса
//  СтрокаХеша - Строка, по которой был пощитан хеш
//
// Возвращаемое значение:
//  СправочникСсылка.Запрос - найденый запрос
//
Функция НайтиЗапрос(Текст, Sdbl, ИБ, Хеш, СтрокаХеша)
	
	// Найти текст запроса
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.УстановитьПараметр("Хеш", Хеш);
	ЗапросПоиска.УстановитьПараметр("ИБ", ИБ);
	ЗапросПоиска.Текст = "
		|ВЫБРАТЬ
		|	Ссылка,
		|	СтрокаХеша,
		|	Владелец
		|ИЗ
		|	Справочник.Запросы
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И Владелец = &ИБ
		|	И Хеш = &Хеш";
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	// Проверить правильность поиска
	Пока Выборка.Следующий() Цикл
		Если Выборка.СтрокаХеша = СтрокаХеша И Выборка.Владелец = ИБ Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиЗапрос()

// Создать справочник ТекстЗапроса с указанными параметрами
//
// Параметры:
//  Текст - Строка, текст запроса
//  Sdbl - Строка, текст Sdbl запроса
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//  Хеш - Число, хеш текста запроса
//  СтрокаХеша - Строка, по которой был пощитан хеш
//
// Возвращаемое значение:
//  СправочникСсылка.Запрос - созданый запрос
//
Функция СоздатьЗапрос(Текст, Sdbl, ИБ, Хеш, СтрокаХеша)
	
	ЗапросОбъект = Справочники.Запросы.СоздатьЭлемент();
	ЗапросОбъект.Наименование = Строка(Хеш);
	ЗапросОбъект.Хеш          = Хеш;
	ЗапросОбъект.СтрокаХеша   = СтрокаХеша;
	ЗапросОбъект.Владелец     = ИБ;
	ЗапросОбъект.Записать();
	
	Возврат ЗапросОбъект.Ссылка;
	
КонецФункции // СоздатьЗапрос()


///////////////////////////////////////////////////////////////////////////////
// ПЛАН

// Получить ссылку на справочник План с указанными параметрами
// Если такого теста запроса в базе еще нет, он будет создан и помещен в базу
//
// Параметры:
//  Текст - Строка, текст плана запроса
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//  ТипСУБД - ПеречислениеСсылка.ТипСУБД, тип СУБД в которой получен план
//
// Возвращаемое значение:
//  СправочникСсылка.План - полученный план запроса
//
Функция ПолучитьПлан(Текст, ИБ, ТипСУБД, КонтекстАнализа)
	
	// Подготовить исходные данные
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	Хеш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, Текст);
	План = НайтиПлан(Текст, ИБ, Хеш);
	
	Если План = Неопределено Тогда
		План = СоздатьПлан(Текст, ИБ, Хеш, ТипСУБД, КонтекстАнализа);
	КонецЕсли;
	
	Возврат План;
	
КонецФункции // ПолучитьПлан()

// Найти справочник План с указанными параметрами
//
// Параметры:
//  Текст - Строка, текст запроса
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//  Хеш - Число, хеш текста запроса
//
// Возвращаемое значение:
//  СправочникСсылка.План - найденый запрос
//
Функция НайтиПлан(Текст, ИБ, Хеш)
	
	// Найти план запроса
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.УстановитьПараметр("Хеш", Хеш);
	ЗапросПоиска.УстановитьПараметр("ИБ", ИБ);
	ЗапросПоиска.Текст = "
		|ВЫБРАТЬ
		|	Ссылка,
		|	Владелец
		|ИЗ
		|	Справочник.ПланыЗапросов
		|ГДЕ
		|	НЕ ПометкаУдаления
		|	И Владелец = &ИБ
		|	И Хеш = &Хеш";
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	// Проверить правильность поиска
	Пока Выборка.Следующий() Цикл
		Если Выборка.Владелец = ИБ Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиПлан()

// Создать справочник План с указанными параметрами
//
// Параметры:
//  Текст - Строка, текст запроса
//  ИБ - СправочникСсылка.ИнформационнаяБаза, владелец контекста
//  Хеш - Число, хеш текста запроса
//  ТипСУБД - ПеречислениеСсылка.ТипСУБД, тип СУБД в которой получен план
//
// Возвращаемое значение:
//  СправочникСсылка.Запрос - созданый запрос
//
Функция СоздатьПлан(Текст, ИБ, Хеш, ТипСУБД, КонтекстАнализа)
	
	ЗапросОбъект = Справочники.ПланыЗапросов.СоздатьЭлемент();
	ЗапросОбъект.Наименование = Строка(Хеш);
	ЗапросОбъект.Хеш          = Хеш;
	ЗапросОбъект.Владелец     = ИБ;
	ЗапросОбъект.Текст        = Текст;
	ЗапросОбъект.ТипСУБД      = ТипСУБД;
	ЗапросОбъект.Вес          = ВычислитьВесПланаЗапроса(Текст, ТипСУБД);
	ЗапросОбъект.Записать();
	
	Возврат ЗапросОбъект.Ссылка;
	
КонецФункции // СоздатьПлан()

// Вычисляет вес плана запроса MSSQL.
// Вес определяется как соотношение числа прочитанных записей к числу возвращенных
// записей для запросов SELECT, и как 1 для всех остальных запросов.
//
// Параметры:
//  ПланЗапроса  - Строка - Текст плана запроса
//  ТипСУБД      - Перечисление.ТипыСУБД - Тип СУБД
//
// Возвращаемое значение:
//   Число   - Вес плана запроса
//
Функция ВычислитьВесПланаЗапроса(Знач ПланЗапроса, ТипСУБД) Экспорт
	
	Вес = 1;
	Если ТипСУБД = Перечисления.ТипыСУБД.MSSQLServer Тогда
		// Вычислить вес плана MSSQL
		ПланЗапроса = СокрЛП(ПланЗапроса);
		ЧислоСтрок = СтрЧислоСтрок(ПланЗапроса);
		СчитаноЗаписейПоПервойСтроке = 0;
		СчитаноЗаписейСоВторойСтроки = 0;
		Если ЧислоСтрок > 1 Тогда
			ПерваяСтрока = СтрПолучитьСтроку(ПланЗапроса, 1);
			ПозицияЗапятой = СтрНайти(ПерваяСтрока, ",");
			Если ПозицияЗапятой > 0 Тогда
				СчитаноЗаписейПоПервойСтроке = Число(Лев(ПерваяСтрока, ПозицияЗапятой));
				Для НомерСтроки = 2 По ЧислоСтрок Цикл
					ТекСтр = СтрПолучитьСтроку(ПланЗапроса, НомерСтроки);
					Если СтрНайти(ТекСтр, "Index Seek")
					Или СтрНайти(ТекСтр, "Index Scan")
					Или СтрНайти(ТекСтр, "Table Scan")
					Или СтрНайти(ТекСтр, "Constant Scan") Тогда
						ПозицияЗапятой = СтрНайти(ТекСтр, ",");
						СчитаноЗаписейПоСтроке = Число(Лев(ТекСтр, ПозицияЗапятой));
						СчитаноЗаписейСоВторойСтроки = СчитаноЗаписейСоВторойСтроки + СчитаноЗаписейПоСтроке;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СчитаноЗаписейСоВторойСтроки > 0 Тогда
				Вес = СчитаноЗаписейСоВторойСтроки / ?(СчитаноЗаписейПоПервойСтроке = 0, 1, СчитаноЗаписейПоПервойСтроке);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипСУБД = Перечисления.ТипыСУБД.PostgreSQL Тогда
		// Вычислить вес плана PostgreSQL
		ПланЗапроса = СокрЛП(ПланЗапроса);
		ЧислоСтрок = СтрЧислоСтрок(ПланЗапроса);
		СчитаноЗаписейПоПервойСтроке = 0;
		СчитаноЗаписейСоВторойСтроки = 0;
		Если ЧислоСтрок > 1 Тогда
			ПерваяСтрока = СтрПолучитьСтроку(ПланЗапроса, 1);
			ПозицияРазделителя1 = СтрНайти(ПерваяСтрока, "rows=", НаправлениеПоиска.СКонца);
			ПозицияРазделителя2 = СтрНайти(ПерваяСтрока, " ",, ПозицияРазделителя1);
			Если ПозицияРазделителя1 > 0 И ПозицияРазделителя2 > 0 Тогда
				СчитаноЗаписейПоПервойСтроке = Число(Сред(ПерваяСтрока, ПозицияРазделителя1+5, (ПозицияРазделителя2 - ПозицияРазделителя1-4)));
				Для НомерСтроки = 2 По ЧислоСтрок Цикл
					ТекСтр = СтрПолучитьСтроку(ПланЗапроса, НомерСтроки);
					Если СтрНайти(ТекСтр, "Seq Scan")
					Или СтрНайти(ТекСтр, "Index Scan")
					Или СтрНайти(ТекСтр, "Index scan backward")
					Или СтрНайти(ТекСтр, "Full index scan")
					Или СтрНайти(ТекСтр, "Index Only Scan")
					Или СтрНайти(ТекСтр, "Bitmap index scan") Тогда
						ПозицияРазделителя1 = СтрНайти(ТекСтр, "rows=", НаправлениеПоиска.СКонца);
						ПозицияРазделителя2 = СтрНайти(ТекСтр, " ",, ПозицияРазделителя1);
						СчитаноЗаписейПоСтроке = Число(Сред(ТекСтр, ПозицияРазделителя1+5, (ПозицияРазделителя2 - ПозицияРазделителя1-4)));
						СчитаноЗаписейСоВторойСтроки = СчитаноЗаписейСоВторойСтроки + СчитаноЗаписейПоСтроке;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если СчитаноЗаписейСоВторойСтроки > 0 Тогда
				Вес = СчитаноЗаписейСоВторойСтроки / ?(СчитаноЗаписейПоПервойСтроке = 0, 1, СчитаноЗаписейПоПервойСтроке);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Вес;
	
КонецФункции // ПолучитьВесПланаЗапроса()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОКУМЕНТАМИ БЛОКИРОВОК

// Функция регистрирует факт выполнения запроса.
// Перед созданием документа ВыполнениеЗапроса, создает все цепочку необходимых данных (элементы справочников).
//
// Параметры:
//  ДанныеЗапроса     - Структура, данные заблокированного и блокирующего запроса. Ключи:
//                      Запрос                 - Строка, SQL запрос.
//                      ВремяВыполненияМс      - Число, время выполнения запроса в миллисекундах.
//                      МоментВремениОкончания - Число, точное время события
//                      ДатаВремяСобытия       - ДатаВремя.
//                      Пользователь           - Строка, имя пользователя, который выполнил запрос.
//                      Компьютер              - Строка, имя комьютера, с которого выполнили запрос.
//                      НомерСоединения        - Число, номер соединения клиента с сервером 1С.
//                      Ресурс                 - Структура, данные заблокированного ресурса. Ключи:
//                                               ОбъектМетаданных - (необезательный) Строка, имя таблицы в терминах 1С.
//                                               Таблица          - (необезательный) Строка, имя таблицы хранения.
//                                               Индекс           - (необезательный) Строка, имя индекса таблицы хранения.
//
// Возвращаемое значение:
//  ДокументСсылка.ВыполнениеЗапроса
//
Функция ЗафиксироватьВыполнениеЗапроса(Знач ДанныеЗапроса, КонтекстАнализа) Экспорт
	
	ОтладкаКлиентСервер.Действие("ЗафиксироватьВыполнениеЗапроса");
	
	// Получить Хеш запроса
	СтрокаХеша = Строка(ДанныеЗапроса.МоментВремениОкончания) + Строка(ДанныеЗапроса.НомерСоединения);
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	Хеш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, СтрокаХеша);
	
	Выполнение = НайтиВыполнение(ДанныеЗапроса.МоментВремениОкончания, ДанныеЗапроса.НомерСоединения, "ВыполнениеЗапроса", Хеш);
	Если Выполнение <> Неопределено Тогда
		Возврат Выполнение;
	КонецЕсли;
	
	// Получить параметры запроса и отсечь их от текста запроса
	ТекстЗапроса = СтрЗаменить(ДанныеЗапроса.Запрос, "''", """");
	Поз = СтрНайти(ТекстЗапроса, "exec sp_executesql");
	ПараметрыЗапроса = "";
	
	Если Поз > 0 Тогда
		Поз = СтрНайти(ТекстЗапроса, "'");
		Если Поз > 0 Тогда
			ТекстЗапроса = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - Поз);
			Поз = СтрНайти(ТекстЗапроса, "'");
			
			Если Поз > 0 Тогда
				ПараметрыЗапроса = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - Поз);
				ТекстЗапроса = Лев(ТекстЗапроса, Поз);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Поз = СтрНайти(ТекстЗапроса, "p_0");
		Если Поз > 0 Тогда
			ПараметрыЗапроса = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - Поз + 1);
			ТекстЗапроса     = Лев(ТекстЗапроса, Поз - 1);
		КонецЕсли;
	КонецЕсли;
	
	// Создать документ выполнения запроса
	ВыполнениеЗапросаОбъект = Документы.ВыполнениеЗапроса.СоздатьДокумент();
	ВыполнениеЗапросаОбъект.Дата                   = ДанныеЗапроса.ДатаВремяСобытия;
	ВыполнениеЗапросаОбъект.Хеш                    = Хеш;
	ВыполнениеЗапросаОбъект.ПользовательИБ         = СтруктураДанныхПовтИсп.ПолучитьПользователяИБ(ДанныеЗапроса.Пользователь, ДанныеЗапроса.Компьютер, КонтекстАнализа.Замер.ИнформационнаяБаза);
	ВыполнениеЗапросаОбъект.ПараметрыЗапроса       = ПараметрыЗапроса;
	ВыполнениеЗапросаОбъект.ИнформационнаяБаза     = КонтекстАнализа.Замер.ИнформационнаяБаза;
	ВыполнениеЗапросаОбъект.Контекст               = СокрЛП(ДанныеЗапроса.КонтекстЗапроса);
	ВыполнениеЗапросаОбъект.ВремяВыполненияМс      = ДанныеЗапроса.ВремяВыполненияМс;
	ВыполнениеЗапросаОбъект.Соединение             = ДанныеЗапроса.НомерСоединения;
	ВыполнениеЗапросаОбъект.МоментВремениОкончания = ДанныеЗапроса.МоментВремениОкончания;
	ВыполнениеЗапросаОбъект.КонтекстСсылка         = ПолучитьКонтекст(ДанныеЗапроса.КонтекстЗапроса, КонтекстАнализа.Замер.ИнформационнаяБаза);
	ВыполнениеЗапросаОбъект.ТекстЗапроса           = ПолучитьТекстЗапроса(ТекстЗапроса, КонтекстАнализа.Замер.ИнформационнаяБаза, КонтекстАнализа);
	ВыполнениеЗапросаОбъект.Запрос                 = ПолучитьЗапрос(ТекстЗапроса, ДанныеЗапроса.ТекстSdbl, КонтекстАнализа.Замер.ИнформационнаяБаза);
	ВыполнениеЗапросаОбъект.План                   = ПолучитьПлан(ДанныеЗапроса.План, КонтекстАнализа.Замер.ИнформационнаяБаза, КонтекстАнализа.Замер.ТипСУБД, КонтекстАнализа);
	ВыполнениеЗапросаОбъект.ВесПланаЗапроса        = ВыполнениеЗапросаОбъект.План.Вес;
	ВыполнениеЗапросаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ОтладкаКлиентСервер.Результат("ЗафиксироватьВыполнениеЗапроса", ВыполнениеЗапросаОбъект.Ссылка);
	
	Возврат ВыполнениеЗапросаОбъект.Ссылка;
	
КонецФункции // ЗафиксироватьВыполнениеЗапроса()

// Функция регистрирует факт выполнения строки кода.
// Перед созданием документа ВыполнениеКода, создает все цепочку необходимых данных (элементы справочников).
//
// Параметры:
//  ДанныеВыполнения  - Структура, данные заблокированного и блокирующего контекста. Ключи:
//                      ВремяВыполненияМс      - Число, время выполнения кода в миллисекундах.
//                      МоментВремениОкончания - Число, точное время события
//                      ДатаВремяСобытия       - ДатаВремя.
//                      Пользователь           - Строка, имя пользователя, который выполнил код.
//                      Компьютер              - Строка, имя комьютера, с которого выполнили код.
//                      НомерСоединения        - Число, номер соединения клиента с сервером 1С.
//
// Возвращаемое значение:
//  ДокументСсылка.ВыполнениеЗапроса
//
Функция ЗафиксироватьВыполнениеКода(Знач ДанныеВыполнения, КонтекстАнализа) Экспорт
	
	ОтладкаКлиентСервер.Действие("ЗафиксироватьВыполнение");
	
	// Получить Хеш запроса
	СтрокаХеша = Строка(ДанныеВыполнения.МоментВремениОкончания) + Строка(ДанныеВыполнения.НомерСоединения);
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	Хеш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, СтрокаХеша);
	ИБ = КонтекстАнализа.Замер.ИнформационнаяБаза;
	
	Выполнение = НайтиВыполнение(ДанныеВыполнения.МоментВремениОкончания, ДанныеВыполнения.НомерСоединения, "ВыполнениеКода", Хеш);
	Если Выполнение <> Неопределено Тогда
		Возврат Выполнение;
	КонецЕсли;
	
	// Создать документ выполнения запроса
	ВыполнениеОбъект = Документы.ВыполнениеКода.СоздатьДокумент();
	ВыполнениеОбъект.Дата                       = ДанныеВыполнения.ДатаВремяСобытия;
	ВыполнениеОбъект.Хеш                        = Хеш;
	ВыполнениеОбъект.ПользовательИБ             = СтруктураДанныхПовтИсп.ПолучитьПользователяИБ(ДанныеВыполнения.Пользователь, ДанныеВыполнения.Компьютер, ИБ);
	ВыполнениеОбъект.ИнформационнаяБаза         = ИБ;
	ВыполнениеОбъект.Контекст                   = СокрЛП(ДанныеВыполнения.КонтекстВыполнения);
	ВыполнениеОбъект.ХешКонтекста               = Инструменты.ПолучитьХеш(ВыполнениеОбъект.Контекст);
	ВыполнениеОбъект.ВремяВыполненияМс          = ДанныеВыполнения.ВремяВыполненияМс;
	ВыполнениеОбъект.Соединение                 = ДанныеВыполнения.НомерСоединения;
	ВыполнениеОбъект.МоментВремениОкончания     = ДанныеВыполнения.МоментВремениОкончания;
	ВыполнениеОбъект.КонтекстСсылка             = ПолучитьКонтекст(ДанныеВыполнения.КонтекстВыполнения, ИБ);
	ВыполнениеОбъект.ТипВыполнения              = ДанныеВыполнения.ТипВыполнения;
	Если ДанныеВыполнения.ТипВыполнения = Перечисления.ТипыВыполненийКода.СерверныйВызов Тогда
		ВыполнениеОбъект.ОбъемНеосвобожденнойПамяти = ДанныеВыполнения.ОбъемНеосвобожденнойПамяти;
		ВыполнениеОбъект.МаксимальныйРасходПамяти   = ДанныеВыполнения.МаксимальныйРасходПамяти;
		ВыполнениеОбъект.СчитаноДанных              = ДанныеВыполнения.СчитаноДанных;
		ВыполнениеОбъект.ЗаписаноДанных             = ДанныеВыполнения.ЗаписаноДанных;
	КонецЕсли;
	ВыполнениеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ОтладкаКлиентСервер.Результат("ЗафиксироватьВыполнение", ВыполнениеОбъект.Ссылка);
	
	Возврат ВыполнениеОбъект.Ссылка;
	
КонецФункции // ЗафиксироватьВыполнение()

// Функция регистрирует факт блокировки ресурса.
// Перед созданием документа Блокировка, создает все цепочку необходимых данных (элементы справочников и документов).
//
// Параметры:
//  ДанныеБлокировки - Структура, данные заблокированного и блокирующего запроса. Ключи:
//                     Запрос                 - Строка, SQL запрос.
//                     КонтекстЗапроса        - Строка, полный текст контекста запроса.
//                     ВремяВыполненияМс      - Число, время выполнения запроса в миллисекундах.
//                     МоментВремениОкончания - Число, точное время события
//                     ДатаВремяСобытия       - ДатаВремя.
//                     Пользователь           - Строка, имя пользователя, который выполнил запрос.
//                     Компьютер              - Строка, имя комьютера, с которого выполнили запрос.
//                     НомерСоединения        - Число, номер соединения клиента с сервером 1С.
//                     Ресурс                 - Структура, данные заблокированного ресурса. Ключи:
//                                              ОбъектМетаданных - (необезательный) Строка, имя таблицы в терминах 1С.
//                                              Таблица          - (необезательный) Строка, имя таблицы хранения.
//                                              Индекс           - (необезательный) Строка, имя индекса таблицы хранения.
//                     ИдентификаторРесурса   - Строка
//                     Состояние              - ПеречислениеСсылка.СостояниеБлокировки.
//                     Режим                  - ПеречислениеСсылка.РежимБлокировки.
//                     Гранулярность          - ПеречислениеСсылка.ГранулярностьБлокировки.
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//
// Возвращаемое значение:
//  ДокументСсылка.Блокировка
//
Функция ЗафиксироватьБлокировкуРесурса(Знач ДанныеБлокировки, КонтекстАнализа, Инструменты) Экспорт
	
	Перем ВыполнениеЗапроса;
	Перем ДанныеРесурса;
	Перем Ресурс;
	Перем ИдентификаторРесурса;
	Перем Режим;
	Перем Состояние;
	Перем МоментВремени;
	Перем ДатаВремяСобытия;
	Перем Гранулярность;
	
	ОтладкаКлиентСервер.Действие("ЗафиксироватьБлокировкуРесурса");
	
	// Получить ссылку на документ ВыполнениеЗапроса
	Если ДанныеБлокировки.Запрос = Неопределено Тогда
		ВыполнениеЗапроса = ЗафиксироватьВыполнениеКода(ДанныеБлокировки, КонтекстАнализа);
	Иначе
		ВыполнениеЗапроса = ЗафиксироватьВыполнениеЗапроса(ДанныеБлокировки, КонтекстАнализа);
	КонецЕсли;
	
	// Получить структуру данных ресурса
	ДанныеБлокировки.Свойство("Ресурс", ДанныеРесурса);
	ДанныеБлокировки.Свойство("ИдентификаторРесурса", ИдентификаторРесурса);
	
	// Получить элемент справочника Ресурс
	Ресурс = ПолучитьРесурс(
		ДанныеРесурса.ОбъектМетаданных,
		ДанныеРесурса.Таблица,
		ДанныеРесурса.Индекс,
		ДанныеРесурса.Измерения,
		КонтекстАнализа.Замер.ИнформационнаяБаза,
		КонтекстАнализа,
		Инструменты);
	
	Если Ресурс = Неопределено Тогда
		ВызватьИсключение СловарьКлиентСервер.Получить("ОшибкаНеНайденРесурс");
	КонецЕсли;
	
	// Получить значения для реквизитов документа
	ДанныеБлокировки.Свойство("ДатаВремяСобытия",       ДатаВремяСобытия);
	ДанныеБлокировки.Свойство("Режим",                  Режим);
	ДанныеБлокировки.Свойство("Состояние",              Состояние);
	ДанныеБлокировки.Свойство("МоментВремениОкончания", МоментВремени);
	ДанныеБлокировки.Свойство("Гранулярность",          Гранулярность);
	
	Если Гранулярность = Неопределено Тогда
		Гранулярность = Перечисления.ВидыГранулярностиБлокировок.ПустаяСсылка();
	КонецЕсли;
	Если ИдентификаторРесурса = Неопределено Тогда
		ИдентификаторРесурса = "";
	КонецЕсли;
	Если Режим = Неопределено Тогда
		Режим = Перечисления.РежимыБлокировок.ПустаяСсылка();
	КонецЕсли;
	Если Состояние = Неопределено Тогда
		Состояние = Перечисления.СостоянияБлокировок.ПустаяСсылка();
	КонецЕсли;
	
	// Получить Хеш блокировки
	СтрокаХеша = Строка(ВыполнениеЗапроса)
	           + Строка(Гранулярность)
	           + Строка(ИдентификаторРесурса)
	           + Строка(КонтекстАнализа.Замер.ИнформационнаяБаза)
	           + Строка(МоментВремени)
	           + Строка(Режим)
	           + Строка(Ресурс)
	           + Строка(Состояние);
	
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ХешБлокировки = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, СтрокаХеша);
	
	// Выполнить поиск выполнения запроса в информационной базе
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Блокировка.Ссылка
		|ИЗ
		|	Документ.Блокировка КАК Блокировка
		|ГДЕ
		|	(НЕ Блокировка.ПометкаУдаления)
		|	И Блокировка.Хеш = &Хеш";
	Запрос.УстановитьПараметр("Хеш", ХешБлокировки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НайденаяБлокировка = Выборка.Ссылка.ПолучитьОбъект();
		Если НайденаяБлокировка.ВыполнениеЗапроса = ВыполнениеЗапроса
		   И НайденаяБлокировка.Гранулярность = Гранулярность
		   И НайденаяБлокировка.ИдентификаторРесурса = Строка(ИдентификаторРесурса)
		   И НайденаяБлокировка.ИнформационнаяБаза = КонтекстАнализа.Замер.ИнформационнаяБаза
		   И НайденаяБлокировка.МоментВремени = МоментВремени
		   И НайденаяБлокировка.Режим = Режим
		   И НайденаяБлокировка.Ресурс = Ресурс Тогда
			Если НайденаяБлокировка.Состояние <> Перечисления.СостоянияБлокировок.ПустаяСсылка() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Создать документ блокировки
	БлокировкаОбъект = Документы.Блокировка.СоздатьДокумент();
	
	БлокировкаОбъект.Дата                 = ДатаВремяСобытия;
	БлокировкаОбъект.Хеш                  = ХешБлокировки;
	БлокировкаОбъект.ИнформационнаяБаза   = КонтекстАнализа.Замер.ИнформационнаяБаза;
	БлокировкаОбъект.ВыполнениеЗапроса    = ВыполнениеЗапроса;
	БлокировкаОбъект.Ресурс               = Ресурс;
	БлокировкаОбъект.ИдентификаторРесурса = ИдентификаторРесурса;
	БлокировкаОбъект.Состояние            = Состояние;
	БлокировкаОбъект.Режим                = Режим;
	БлокировкаОбъект.МоментВремени        = МоментВремени;
	БлокировкаОбъект.Гранулярность        = Гранулярность;
	
	// Записать, вернуть ссылку
	БлокировкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ОтладкаКлиентСервер.Результат("ЗафиксироватьБлокировкуРесурса",
	                  БлокировкаОбъект.Ссылка);
	
	Возврат БлокировкаОбъект.Ссылка;
	
КонецФункции // ЗафиксироватьБлокировкуРесурса()

// Функция регистрирует факт ожидания на блокировке.
// Перед созданием документа ОжиданиеНаБлокировке, создает все цепочку необходимых данных (элементы справочников и документов).
//
// Параметры:
//  ЗаблокированныйЗапрос, БлокирующийЗапрос - Структура, данные заблокированного и блокирующего запроса. Ключи:
//                 Запрос                 - Строка, SQL запрос.
//                 ВремяВыполненияМс      - Число, время выполнения запроса в миллисекундах.
//                 МоментВремениОкончания - Число, точное время события
//                 ДатаВремяСобытия       - ДатаВремя.
//                 Пользователь           - Строка, имя пользователя, который выполнил запрос.
//                 Компьютер              - Строка, имя комьютера, с которого выполнили запрос.
//                 НомерСоединения        - Число, номер соединения клиента с сервером 1С.
//                 Ресурс                 - Структура, данные заблокированного ресурса. Ключи:
//                 ОбъектМетаданных - (необезательный) Строка, имя таблицы в терминах 1С.
//                 Таблица          - (необезательный) Строка, имя таблицы хранения.
//                 Индекс           - (необезательный) Строка, имя индекса таблицы хранения.
//                 Состояние              - ПеречислениеСсылка.СостояниеБлокировки.
//                 Режим                  - ПеречислениеСсылка.РежимБлокировки.
//                 Гранулярность          - ПеречислениеСсылка.ГранулярностьБлокировки.
//                 СтатусИнформации       - ПеречислениеСсылка.СтатусИнформации.
//                 КонтекстЗапроса        - Строка.
//  ТипБлокировки - Перечисление.ТипБлокировки
//  СчетчикОжиданий - СправочникСсылка.СчетчикОжиданий
//
Процедура ЗафиксироватьОжиданиеНаБлокировке(ЗаблокированныйЗапрос,
                                            БлокирующийЗапрос,
                                            ТипБлокировки,
                                            СчетчикОжиданий,
                                            КонтекстАнализа,
                                            Инструменты) Экспорт
	
	Перем БлокировкаЗаблокированного;
	Перем БлокировкаБлокирующего;
	Перем ВремяОжидания;
	Перем ОкончаниеОжидания;
	Перем СтатусИнформации;
	Перем ИБ;
	Перем ДатаВремяСобытия;
	
	ОтладкаКлиентСервер.Действие("ЗафиксироватьОжиданиеНаБлокировке");
	
	// Получить документ Блокировка для заблокированного запроса
	БлокировкаЗаблокированного = ЗафиксироватьБлокировкуРесурса(ЗаблокированныйЗапрос, КонтекстАнализа, Инструменты);
	
	// Получить документ Блокировка для блокирующего запроса
	БлокировкаБлокирующего = ЗафиксироватьБлокировкуРесурса(БлокирующийЗапрос, КонтекстАнализа, Инструменты);
	
	// Получить значения для реквизитов документа
	ЗаблокированныйЗапрос.Свойство("ДатаВремяСобытия",       ДатаВремяСобытия);
	ЗаблокированныйЗапрос.Свойство("ВремяВыполненияМс",      ВремяОжидания);
	ЗаблокированныйЗапрос.Свойство("МоментВремениОкончания", ОкончаниеОжидания);
	ЗаблокированныйЗапрос.Свойство("СтатусИнформации",       СтатусИнформации);
	
	ИБ = КонтекстАнализа.Замер.ИнформационнаяБаза;
	
	// Создать, заполнить документ
	ОжиданиеНаБлокировкеОбъект = Документы.ОжиданиеНаБлокировке.СоздатьДокумент();
	
	ОжиданиеНаБлокировкеОбъект.Дата               = ДатаВремяСобытия;
	ОжиданиеНаБлокировкеОбъект.ИнформационнаяБаза = ИБ;
	ОжиданиеНаБлокировкеОбъект.Блокирует          = БлокировкаБлокирующего;
	ОжиданиеНаБлокировкеОбъект.Заблокирована      = БлокировкаЗаблокированного;
	ОжиданиеНаБлокировкеОбъект.ВремяОжидания      = ВремяОжидания;
	ОжиданиеНаБлокировкеОбъект.ОкончаниеОжидания  = ОкончаниеОжидания;
	ОжиданиеНаБлокировкеОбъект.СтатусИнформации   = СтатусИнформации;
	ОжиданиеНаБлокировкеОбъект.ТипБлокировки      = ТипБлокировки;
	ОжиданиеНаБлокировкеОбъект.СчетчикОжиданий    = СчетчикОжиданий;
	
	// Записать, вернуть ссылку
	ОжиданиеНаБлокировкеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ОтладкаКлиентСервер.Результат("ЗафиксироватьОжиданиеНаБлокировке",
	                  ОжиданиеНаБлокировкеОбъект.Ссылка);
	
КонецПроцедуры // ЗафиксироватьОжиданиеНаБлокировке()

// Создать документ взаимоблокировки и все связанные с ним объекты
//
// Параметры:
//  СтруктураВзаимоблокировки - ТаблицаЗначений, данные документа
//
// Возвращаемое значение:
//  ДокументСсылка.Взаимоблокировка
//  ИБ - СправочникСсылка.ИнформационнаяБаза
//
Функция ЗафиксироватьВзаимоблокировку(СтруктураВзаимоблокировки, КонтекстАнализа, Инструменты) Экспорт
	
	ОтладкаКлиентСервер.Действие("ЗафиксироватьВзаимоблокировку");
	
	ВзаимоблокировкаОбъект = Документы.Взаимоблокировка.СоздатьДокумент();
	ВзаимоблокировкаОбъект.Дата = СтруктураВзаимоблокировки.Дата;
	ВзаимоблокировкаОбъект.ИнформационнаяБаза = СтруктураВзаимоблокировки.ИнформационнаяБаза;
	ВзаимоблокировкаОбъект.Граф = СтруктураВзаимоблокировки.Граф;
	ВзаимоблокировкаОбъект.МоментВремени = СтруктураВзаимоблокировки.МоментВремени;
	ВзаимоблокировкаОбъект.НомерВзаимоблокировки = СтруктураВзаимоблокировки.НомерВзаимоблокировки;
	ВзаимоблокировкаОбъект.СвойствоПроцесса.Загрузить(СтруктураВзаимоблокировки.СвойствоПроцесса);
	ВзаимоблокировкаОбъект.ТипБлокировки = СтруктураВзаимоблокировки.ТипБлокировки;
	
	// Создать таблицу значений для вычисления Хеша
	ТаблицаБлокировок = Новый ТаблицаЗначений;
	ТаблицаБлокировок.Колонки.Добавить("Контекст");
	ТаблицаБлокировок.Колонки.Добавить("Ресурс");
	ТаблицаБлокировок.Колонки.Добавить("Режим");
	ТаблицаБлокировок.Колонки.Добавить("Состояние");
	
	Для Каждого СтрокаБлокировки Из СтруктураВзаимоблокировки.Блокировки Цикл
		
		СтрокаТЧБлокировки = ВзаимоблокировкаОбъект.Блокировки.Добавить();
		СтрокаТЧБлокировки.Процесс = СтрокаБлокировки.Процесс;
		
		Блокировка = ЗафиксироватьБлокировкуРесурса(СтрокаБлокировки.Блокировка, КонтекстАнализа, Инструменты);
		
		СтрокаТЧБлокировки.Блокировка = Блокировка;
		
		// Добавить строку идентификаторов для вычисления Хеша
		Если СтрокаТЧБлокировки.Блокировка.Состояние = Перечисления.СостоянияБлокировок.Ожидание
		 Или СтрокаТЧБлокировки.Блокировка.Состояние = Перечисления.СостоянияБлокировок.Преобразование Тогда
			СтрокаХеша = ТаблицаБлокировок.Добавить();
			СтрокаХеша.Контекст  = Блокировка.ВыполнениеЗапроса.КонтекстСсылка.УникальныйИдентификатор();
			СтрокаХеша.Ресурс    = Блокировка.Ресурс.УникальныйИдентификатор();
			СтрокаХеша.Режим     = Блокировка.Режим;
			СтрокаХеша.Состояние = Блокировка.Состояние;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаБлокировок.Сортировать("Контекст, Ресурс, Режим, Состояние");
	
	СтрокаСвойствБлокировок = "";
	
	// Получить строку для вычисления Хеша
	Для Каждого СтрокаБлокировки Из ТаблицаБлокировок Цикл
		СтрокаСвойствБлокировок = СтрокаСвойствБлокировок
		                        + СтрокаБлокировки.Контекст
		                        + СтрокаБлокировки.Ресурс
		                        + СтрокаБлокировки.Режим
		                        + СтрокаБлокировки.Состояние;
	КонецЦикла;
	
	// Получить Хеш взаимоблокировки
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	ВзаимоблокировкаОбъект.Хеш = КипВнешнийКомпонент.ПолучитьХеш(Инструменты, СтрокаСвойствБлокировок);
	
	ВзаимоблокировкаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ОтладкаКлиентСервер.Результат("ЗафиксироватьВзаимоблокировку", ВзаимоблокировкаОбъект.Ссылка);
	
	Возврат ВзаимоблокировкаОбъект.Ссылка;
	
КонецФункции // ЗафиксироватьВзаимоблокировку()

// Найти выполнение строки кода или запроса
//
// Параметры:
//  МоментВремениОкончания - Число, время окончания выполнения
//  НомерСоединения - Число, номер соединения во время выполнения
//  Таблица - Строка, Наименование типа документа в котором искать
//  Хеш - Число, хеш выполнения
//
// Возвращаемое значение:
//  ДокументСсылка.Выполнение/ВыполнениеЗапроса - найденое выполнение
//
Функция НайтиВыполнение(МоментВремениОкончания, НомерСоединения, Таблица, Хеш)
	
	// Выполнить поиск выполнения запроса в информационной базе
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Хеш", Хеш);
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Выполнение.Ссылка,
		|	Выполнение.МоментВремениОкончания,
		|	Выполнение.Соединение
		|ИЗ
		|	Документ." + Таблица + " КАК Выполнение
		|ГДЕ
		|	(НЕ Выполнение.ПометкаУдаления)
		|	И Выполнение.Хеш = &Хеш";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.МоментВремениОкончания = МоментВремениОкончания
		   И Выборка.Соединение = НомерСоединения Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиВыполнение()
