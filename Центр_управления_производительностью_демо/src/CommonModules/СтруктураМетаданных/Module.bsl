///////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРУКТУРОЙ МЕТАДАННЫХ

// Получить короткое имя таблицы (после последней точки)
//
// Параметры:
//  Имя - Строка, полное имя таблицы
//
// Возвращаемое значение:
//  Строка - короткое имя таблицы
//
Функция ПолучитьКороткоеИмяТаблицы(Знач Имя) Экспорт
	
	Пока Истина Цикл
		ПозицияТочки = СтрНайти(Имя, ".");
		
		Если ПозицияТочки = 0 Тогда
			Возврат Имя;
		КонецЕсли;
		
		Имя = Прав(Имя, СтрДлина(Имя) - ПозицияТочки);
	КонецЦикла;
	
КонецФункции // ПолучитьКороткоеИмяТаблицы()

// Получить структуру хранения удаленной базы данных
//
// Параметры:
//  СоединениеИБ - Соединение с ИБ (см. Контекст.СоединениеИБ())
//  ТерминыСУБД - Булево, Истина - термины СУБД, Ложь - термины SDBL
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция ПолучитьСтруктуруХранения(СоединениеИБ, ТерминыСУБД = Истина) Экспорт
	
	ОтладкаКлиентСервер.Действие("ПолучитьСтруктуруХранения");
	СтруктураХранения = СоединениеИБ.ПолучитьСтруктуруХраненияБазыДанных(, ТерминыСУБД);
	ОтладкаКлиентСервер.Результат("ПолучитьСтруктуруХранения");
	Возврат СтруктураХранения;
	
КонецФункции // ПолучитьСтруктуруХранения()

// Преобразовать таблицу структуры базы из Com представления в таблицу значений
//
// Параметры:
//  СтруктураБазыCom - ComОбъект - структура базы
//
// Возвращаемое значение:
//  ТаблицаЗначений - структура базы
//
Функция СтруктураБазыИзComВТаблицуЗначений(СтруктураБазыCom) Экспорт
	
	ОтладкаКлиентСервер.Действие("СтруктураБазыИзComВТаблицуЗначений");
	
	// Создать таблицу для структуры базы
	СтруктураБазы = Новый ТаблицаЗначений;
	СтруктураБазы.Колонки.Добавить("ИмяТаблицыХранения");
	СтруктураБазы.Колонки.Добавить("ИмяТаблицы");
	СтруктураБазы.Колонки.Добавить("Индексы");
	СтруктураБазы.Колонки.Добавить("Поля");
	
	// Если структура базы не пуста
	Если СтруктураБазыCom.Количество() > 0 Тогда
		
		// Создать шаблонную таблицу для описания индексов
		ШаблонИндексов = Новый ТаблицаЗначений;
		ШаблонИндексов.Колонки.Добавить("ИмяИндексаХранения");
		ШаблонИндексов.Колонки.Добавить("Поля");
		
		// Создать шаблонную таблицу для описания полей
		ШаблонПолей = Новый ТаблицаЗначений;
		ШаблонПолей.Колонки.Добавить("ИмяПоляХранения");
		ШаблонПолей.Колонки.Добавить("ИмяПоля");
		
		// Конвертирование каждой строки структуры базы в Com представлении
		Для Каждого СтрокаСтруктурыБазыCom Из СтруктураБазыCom Цикл
			
			// Сохранить имя таблицы
			СтрокаСтруктурыБазы = СтруктураБазы.Добавить();
			СтрокаСтруктурыБазы.ИмяТаблицыХранения = СтрокаСтруктурыБазыCom.ИмяТаблицыХранения;
			ИмяТаблицы = СтрокаСтруктурыБазыCom.ИмяТаблицы;
			Если ПустаяСтрока(ИмяТаблицы) Тогда
				СтрокаМетаданных = СтрокаСтруктурыБазыCom.Метаданные;
				СтрокаСтруктурыБазы.ИмяТаблицы = ?(ПустаяСтрока(СтрокаМетаданных),
					СтрокаСтруктурыБазы.ИмяТаблицыХранения,
					СтрокаМетаданных);
				
				СтрокаНазначения = СтрокаСтруктурыБазыCom.Назначение;
				Если Не ПустаяСтрока(СтрокаНазначения) Тогда
					СтрокаСтруктурыБазы.ИмяТаблицы = СтрокаСтруктурыБазы.ИмяТаблицы + "." + СтрокаНазначения;
				КонецЕсли;
			Иначе
				СтрокаСтруктурыБазы.ИмяТаблицы = СтрокаСтруктурыБазыCom.ИмяТаблицы;
			КонецЕсли;
			
			// Если у таблицы есть индексы
			Если СтрокаСтруктурыБазыCom.Индексы.Количество() > 0 Тогда
				
				// Создать таблицу для хранения информации об индексах
				Индексы = ШаблонИндексов.Скопировать();
				СтрокаСтруктурыБазы.Индексы = Индексы;
				
				// Перебрать все индексы таблицы в Com представлении
				Для Каждого СтрокаИндексовCom Из СтрокаСтруктурыБазыCom.Индексы Цикл
					
					// Сохранить описание индекса
					СтрокаИндекса = Индексы.Добавить();
					СтрокаИндекса.ИмяИндексаХранения = СтрокаИндексовCom.ИмяИндексаХранения;
					Поля = ШаблонПолей.Скопировать();
					СтрокаИндекса.Поля = Поля;
					
					// Перебрать все поля индекса в Com представлении
					Для Каждого СтрокаПоляCom Из СтрокаИндексовCom.Поля Цикл
						
						// Сохранить описание поля
						СтрокаПоля = Поля.Добавить();
						СтрокаПоля.ИмяПоляХранения = СтрокаПоляCom.ИмяПоляХранения;
						СтрокаПоля.ИмяПоля = СтрокаПоляCom.ИмяПоля;
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			// Создать таблицу для хранения информации о полях
			Поля = ШаблонПолей.Скопировать();
			СтрокаСтруктурыБазы.Поля = Поля;
			
			// Перебрать все поля таблицы в Com представлении
			Для Каждого СтрокаПолейCom Из СтрокаСтруктурыБазыCom.Поля Цикл
				
				// Сохранить описание поля
				СтрокаПоля = Поля.Добавить();
				СтрокаПоля.ИмяПоляХранения = СтрокаПолейCom.ИмяПоляХранения;
				СтрокаПоля.ИмяПоля = СтрокаПолейCom.ИмяПоля;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОтладкаКлиентСервер.Результат("СтруктураБазыИзComВТаблицуЗначений");
	
	// Вернуть структуру базы в виде таблицы значений
	Возврат СтруктураБазы;
	
КонецФункции // СтруктураБазыИзComВТаблицуЗначений()

// Получить имя таблицы в терминах метаданных
//
// Параметры:
//  СтруктураХраненияБазыДанных - ТаблицаЗначений
//  Имя - Строка, имя таблицы в терминах СУБД
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - описание таблицы в терминах метаданных
//
Функция ПолучитьОписаниеТаблицыМетаданных(СтруктураХраненияБазыДанных, Имя) Экспорт
	
	Возврат СтруктураХраненияБазыДанных.Найти(Имя, "ИмяТаблицыХранения");
	
КонецФункции // ПолучитьОписаниеТаблицыМетаданных()

// Функция возвращает имя таблицы хранения по имени таблицы 1С.
//
// Параметры:
//  СтруктураХраненияБазы - ТаблицаЗначений, структура хранения базы данных.
//  ИмяТаблицы1С          - Строка, имя таблицы в терминах 1С.
//
// Возвращаемое значение:
//  Строка - имя таблицы
//
Функция ПолучитьИмяТаблицыХранения(СтруктураХраненияБазы, ИмяТаблицы1С) Экспорт
	
	// Найти строку таблицы
	СтрокаТаблицы = СтруктураХраненияБазы.Найти(ИмяТаблицы1С, "ИмяТаблицы");
	
	// Вернуть имя таблицы
	Если СтрокаТаблицы <> Неопределено Тогда
		Возврат СтрокаТаблицы.ИмяТаблицыХранения;
	Иначе
		ТекстСообщения = СловарьКлиентСервер.Получить("ОшибкаНеНайденоИмяТаблицыХранения",
		                                  ИмяТаблицы1С);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецФункции // ПолучитьИмяТаблицыХранения()

// Функция возвращает имя таблицы в терминах 1С по имени таблицы хранения.
//
// Параметры:
//  СтруктураХраненияБазы - ТаблицаЗначений, структура хранения базы данных.
//  ИмяТаблицыХранения    - Строка, имя таблицы хранения.
//
// Возвращаемое значение:
//  Строка, имя таблицы в терминах 1С
//
Функция ПолучитьИмяТаблицы1С(СтруктураХраненияБазы, ИмяТаблицыХранения) Экспорт
	
	// Найти строку таблицы
	СтрокаТаблицы = СтруктураХраненияБазы.Найти(ИмяТаблицыХранения, "ИмяТаблицыХранения");
	
	// Вернуть имя таблицы
	Если СтрокаТаблицы <> Неопределено Тогда
		Возврат СтрокаТаблицы.ИмяТаблицы;
	Иначе
		ТекстСообщения = СловарьКлиентСервер.Получить("ОшибкаНеНайденоИмяТаблицы1С",
		                                  ИмяТаблицыХранения);
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецФункции // ПолучитьИмяТаблицы1С()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьИндексКартинки(Ресурс) Экспорт
	
	Наименование = Строка(Ресурс);
	Если СтрНачинаетсяС(Ресурс, "Константа.") Тогда
		ИндексКартинки = 1;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "Справочник.") Тогда
		ИндексКартинки = 3;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "Документ.") Тогда
		ИндексКартинки = 7;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "ПланВидовХарактеристик.") Тогда
		ИндексКартинки = 9;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "ПланСчетов.") Тогда
		ИндексКартинки = 11;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "ПланВидовРасчета.") Тогда
		ИндексКартинки = 13;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "РегистрСведений.") Тогда
		ИндексКартинки = 15;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "РегистрНакопления.") Тогда
		ИндексКартинки = 17;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "РегистрБухгалтерии.") Тогда
		ИндексКартинки = 19;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "РегистрРасчета.") Тогда
		ИндексКартинки = 21;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "БизнесПроцесс.") Тогда
		ИндексКартинки = 23;
		
	ИначеЕсли СтрНачинаетсяС(Ресурс, "Задача.") Тогда
		ИндексКартинки = 25;
		
	Иначе
		ИндексКартинки = 0;
		
	КонецЕсли;
	
	Возврат ИндексКартинки;
КонецФункции // ПолучитьИндексКартинки()

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕВОД ТЕКСТА ЗАПРОСА В ТЕРМИНЫ МЕТАДАННЫХ

// Перевести часть запроса из терминов СУБД в термины метаданных
//
// Параметры:
//  Запрос - Строка, сапрос в терминах СУБД
//  СтруктураХраненияБазыДанных - ТаблицаЗначений
//  СловарьШаблоновМетаданных - Соответствие, подробности в функции
//                 ПолучитьСловарьШаблоновМетаданных()
//  ТипСУБД - Перечисление.ТипСУБД
//
// Возвращаемое значение:
//  Строка, запрос в терминах метаданных
//
Функция ПолучитьЗапросВТерминахМетаданных(Знач Запрос,
                                          СтруктураХраненияБазыДанных,
                                          СловарьШаблоновМетаданных,
                                          ТипСУБД) Экспорт
	
	ЗавершающиеСимволы = " ,'""_)]" + Символы.ПС + Символы.ВК;
	КоличествоЗавершающихСимволов = СтрДлина(ЗавершающиеСимволы);
	
	Запрос = Запрос + Символы.ПС;
	СловарьЗапроса = ПолучитьСловарьЗапроса(Запрос, СловарьШаблоновМетаданных, ТипСУБД, "СписокЗначений");
	
	Если ТипСУБД = Перечисления.ТипыСУБД.IBMDB2 Тогда
		Запрос = ВРег(Запрос);
	КонецЕсли;
	
	// Поиск имен таблиц в строке запроса
	Для Каждого СтрокаСловаряЗапроса Из СловарьЗапроса Цикл
		
		// Получить имя таблицы
		СтрокаСтруктуры = СтруктураХраненияБазыДанных.Найти(СтрокаСловаряЗапроса.Значение, "ИмяТаблицыХранения");
		ИмяТаблицы = СтрокаСтруктуры.ИмяТаблицыХранения;
		МетаИмяТаблицы = СтрокаСтруктуры.ИмяТаблицы;
		Синонимы = ПолучитьСинонимы(Запрос, ИмяТаблицы, МетаИмяТаблицы, ТипСУБД);
		Синонимы.Вставить(ИмяТаблицы, МетаИмяТаблицы);
		
		Для Каждого Синоним Из Синонимы Цикл
			
			// Если таблица с полем есть
			Если СтрНайти(Запрос, Синоним.Ключ + ".") > 0 Тогда
				Для Каждого СтрокаПоля Из СтрокаСтруктуры.Поля Цикл
					
					// Заменить имя поля
					Если ПустаяСтрока(СтрокаПоля.ИмяПоля) Тогда
						МетаИмяПоля = ИмяПоля(СтрокаПоля.ИмяПоляХранения);
					Иначе
						МетаИмяПоля = СтрокаПоля.ИмяПоля;
					КонецЕсли;
					
					Для Сч = 1 По КоличествоЗавершающихСимволов Цикл
						ЗавершающийСимвол = Сред(ЗавершающиеСимволы, Сч, 1);
						Запрос = СтрЗаменить(Запрос, Синоним.Ключ + "." + СтрокаПоля.ИмяПоляХранения + ЗавершающийСимвол, Синоним.Значение + "." + МетаИмяПоля + ЗавершающийСимвол);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Заменить имя таблицы
		Для Сч = 1 По КоличествоЗавершающихСимволов Цикл
			ЗавершающийСимвол = Сред(ЗавершающиеСимволы, Сч, 1);
			Запрос = СтрЗаменить(Запрос, ИмяТаблицы + ЗавершающийСимвол, МетаИмяТаблицы + ЗавершающийСимвол);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции // ПолучитьЗапросВТерминахМетаданных()

// Получить имя поля по имени поля хранения для тех случаев, когда
// имя поля пустое (ошибка платформы). Имена подставляются для некоторых
// известных имен полей хранения.
//
// Параметры:
//  ИмяПоляХранения - Строка, имя поля хранения.
//
// Возвращаемое значение:
//  Строка - имя поля.
//
Функция ИмяПоля(ИмяПоляХранения)
	
	ИмяПоля = ИмяПоляХранения;
	
	Если Прав(ИмяПоляХранения, 7) = "_IDRRef" Тогда
		ИмяПоля = НСтр("ru = 'Ссылка'");
	КонецЕсли;
	
	Возврат ИмяПоля;
	
КонецФункции

// Получить словарь метаданных состоящий из шаблонов имен таблиц
//
// Параметры:
//  СтруктураБазы - ТаблицаЗначений, структура метаданных информационной базы
//
// Возвращаемое значение:
//  Соответствие - словарь шаблонов имен метаданных. Ключ - наименование объекта
//                 метаданных, где его номер заменен на номер позиции этого
//                 числа в строке; Значение - количество чисел в строке
//
Функция ПолучитьСловарьШаблоновМетаданных(СтруктураБазы) Экспорт
	
	Перем ПозицияЧисла;
	Перем КоличествоСимволов;
	
	// Создать словарь метаданных
	СловарьМетаданных = Новый Соответствие;
	
	// Обработать структуру базы
	Для Каждого СтрокаСтруктурыБазы Из СтруктураБазы Цикл
		
		// Скопировать имя таблицы
		ИмяТаблицыХранения = Лев(СтрокаСтруктурыБазы.ИмяТаблицыХранения, СтрДлина(СтрокаСтруктурыБазы.ИмяТаблицыХранения));
		ШаблонИмениТаблицыХранения = "";
		КоличествоЧисел = 0;
		
		// Получить шаблон имени
		Пока ОбщегоНазначенияКлиентСервер.НайтиЧислоВСтроке(ИмяТаблицыХранения, ПозицияЧисла, КоличествоСимволов) Цикл
			
			КоличествоЧисел = КоличествоЧисел + 1;
			ШаблонИмениТаблицыХранения = ШаблонИмениТаблицыХранения + Лев(ИмяТаблицыХранения, ПозицияЧисла - 1) + КоличествоЧисел;
			ИмяТаблицыХранения = Прав(ИмяТаблицыХранения, СтрДлина(ИмяТаблицыХранения) - ПозицияЧисла - КоличествоСимволов + 1);
			
		КонецЦикла;
		
		// Сохранить шаблон имени
		ШаблонИмениТаблицыХранения = ШаблонИмениТаблицыХранения + ИмяТаблицыХранения;
		СловарьМетаданных.Вставить(ШаблонИмениТаблицыХранения, КоличествоЧисел);
		
	КонецЦикла;
	
	// Предобразовать соответствие в ТЗ и отсортировать ее по ключу в обратном порядке
	СловарьТаблица = Новый ТаблицаЗначений;
	СловарьТаблица.Колонки.Добавить("Ключ");
	СловарьТаблица.Колонки.Добавить("Значение");
	Для Каждого СтрокаСловаря Из СловарьМетаданных Цикл
		СтрокаТаблицыСловаря = СловарьТаблица.Добавить();
		СтрокаТаблицыСловаря.Ключ = СтрокаСловаря.Ключ;
		СтрокаТаблицыСловаря.Значение = СтрокаСловаря.Значение;
	КонецЦикла;
	СловарьТаблица.Сортировать("Ключ Убыв");
	
	Возврат СловарьТаблица;
	
КонецФункции // ПолучитьСловарьШаблоновМетаданных()

// Получить синонимы имени таблицы в запросе
//
// Параметры:
//  Запрос - Строка, текст запроса
//  ИмяТаблицы - Строка, имя таблицы для которой ищутся синонимы
//  МетаИмяТаблицы - Строка, имя таблицы в терминах метаданных
//
// Возвращаемое занчение:
//  Соответствие, имена синонимов и их мета имена
//
Функция ПолучитьСинонимы(Запрос, ИмяТаблицы, МетаИмяТаблицы, ТипСУБД) Экспорт
	
	// Построить список синонимом ими таблицы
	Синонимы = Новый Соответствие;
	ТекстЗапроса = Лев(Запрос, СтрДлина(Запрос));
	ДлинаИмениТаблицы = СтрДлина(ИмяТаблицы);
	ВерсияПлатформы = ОбщегоНазначенияКлиентСервер.ВерсияПлатформы();
	
	Пока Истина Цикл
		
		ПозицияИмени = СтрНайти(ТекстЗапроса, ИмяТаблицы + " ");
		
		Если ПозицияИмени = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ТекстЗапроса = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - ПозицияИмени - ДлинаИмениТаблицы);
		
		ПозицияКонцаСинонима = НайтиБлижайшийСимвол(ТекстЗапроса, " " + Символы.ВК + Символы.ПС);
		
		Если ПозицияКонцаСинонима = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Синоним = Лев(ТекстЗапроса, ПозицияКонцаСинонима - 1);
		ДобавлятьСиноним = Истина;
		
		Если ТипСУБД = Перечисления.ТипыСУБД.MSSQLServer Тогда
			Если Лев(Синоним, 4) = "WITH" Тогда
				ДобавлятьСиноним = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавлятьСиноним Тогда
			Если ВерсияПлатформы < 0008000200000000 Тогда
				Синонимы.Вставить(Синоним, МетаИмяТаблицы + Сред(ТекстЗапроса, ДлинаИмениТаблицы + 1, ПозицияКонцаСинонима - ДлинаИмениТаблицы - 1));
			Иначе
				Синонимы.Вставить(Синоним, МетаИмяТаблицы + "_" + Синоним);
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - ПозицияКонцаСинонима);
		
	КонецЦикла;
	
	Возврат Синонимы;
	
КонецФункции // ПолучитьСинонимы()

// Найти ближайший символ в строке
//
// Параметры:
//  Строка - в которой ищутся символы из строки ИскомыеСимволы
//  ИскомыеСимволы - Строка
//
// Возвращаемое значение:
//  Число - позиция ближайщего символа, 0, если ничего не найдено
//
Функция НайтиБлижайшийСимвол(Текст, ИскомыеСимволы)
	
	ДлинаСтрокиСимволов = СтрДлина(ИскомыеСимволы);
	МаксимальнаяПозиция = 100000000;
	Результат = МаксимальнаяПозиция;
	
	Для Сч = 1 По ДлинаСтрокиСимволов Цикл
		Позиция = СтрНайти(Текст, Сред(ИскомыеСимволы, Сч, 1));
		
		Если Позиция <> 0 И Позиция < Результат Тогда
			Результат = Позиция;
		КонецЕсли;
	КонецЦикла;
	
	Если Результат = МаксимальнаяПозиция Тогда
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НайтиБлижайшийСимвол()

// Получить словарь имен таблиц входящих в запрос и соответствующих
// шаблонам словаря метаданных
//
// Параметры:
//  ТекстЗапроса - Строка, текст запроса для которого строится словарь
//  СловарьШаблоновМетаданных - Соответствие, словарь шаблонов метаданных
//  ТипСУБД - Перечисление.ТипСУБД
//  ТипРезультата - Строка, наименование типа возвращаемого результата.
//
// Возвращаемое значение:
//  Соответствие или СписокЗначений - Словарь имент таблиц запроса.
//
Функция ПолучитьСловарьЗапроса(Знач ТекстЗапроса, СловарьШаблоновМетаданных, ТипСУБД, ТипРезультата = "Соответствие") Экспорт
	
	Перем КоличествоСимволов;
	
	ДлинаТекстаЗапроса = СтрДлина(ТекстЗапроса);
	СловарьЗапроса = Новый(Тип(ТипРезультата));
	СловарьСоответствие = ТипЗнч(СловарьЗапроса) = Тип("Соответствие");
	СловарьСписокЗначений = ТипЗнч(СловарьЗапроса) = Тип("СписокЗначений");
	
	Если ТипСУБД = Перечисления.ТипыСУБД.IBMDB2 Тогда
		ТекстЗапроса = ВРег(ТекстЗапроса);
	КонецЕсли;
	
	Для Каждого СтрокаСловаряМетаданных Из СловарьШаблоновМетаданных Цикл
		
		// Скопировать текст запроса для обработки
		Текст = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса));
		
		// Искать имя таблицы по шаблону
		Пока Истина Цикл
			
			// Получить начало шаблона
			Если СтрокаСловаряМетаданных.Значение = 0 Тогда
				Шаблон = СтрокаСловаряМетаданных.Ключ;
			Иначе
				Шаблон = Лев(СтрокаСловаряМетаданных.Ключ, СтрНайти(СтрокаСловаряМетаданных.Ключ, "1") - 1);
			КонецЕсли;
			
			ЭлементСловаря = Неопределено;
			ДлинаШаблона = СтрДлина(Шаблон);
			ДлинаТекста = СтрДлина(Текст);
			
			// Найти позицию вхождения шаблона в тексте запроса
			ПозицияШаблона = СтрНайти(Текст, Шаблон);
			
			// Если шаблона в тексте запроса нет, прекратить поиск этого шаблона
			Если ПозицияШаблона = 0 Или ДлинаТекста < ПозицияШаблона + ДлинаШаблона - 1 Тогда
				Прервать;
			КонецЕсли;
			
			// Удалить из текста запроса обработанный фрагмент
			Текст = Прав(Текст, ДлинаТекста - ПозицияШаблона - ДлинаШаблона + 1);
			ЭлементСловаря = Шаблон;
			
			// Если шаблон содержит счетчик
			Если СтрокаСловаряМетаданных.Значение <> 0 Тогда
				
				// Получить значение счетчика
				ЗначениеЧисла = ПолучитьЧислоСтрокой(Текст, КоличествоСимволов);
				
				Если ЗначениеЧисла = Неопределено Тогда
					ЭлементСловаря = Неопределено;
					Продолжить;
				КонецЕсли;
				
				// Удалить из текста запроса текстовое представление счетчика имени
				ЭлементСловаря = ЭлементСловаря + ЗначениеЧисла;
				Текст = Прав(Текст, СтрДлина(Текст) - КоличествоСимволов);
				
				// Если счетчиков больше одного
				Для Сч = 1 По СтрокаСловаряМетаданных.Значение - 1 Цикл
					
					// Получить следующий фрагмент шаблона
					ПозицияПервогоСлота = СтрНайти(СтрокаСловаряМетаданных.Ключ, Строка(Сч));
					ПозицияВторогоСлота = СтрНайти(СтрокаСловаряМетаданных.Ключ, Строка(Сч + 1));
					ФрагментШаблона = Сред(СтрокаСловаряМетаданных.Ключ, ПозицияПервогоСлота + 1, ПозицияВторогоСлота - ПозицияПервогоСлота - 1);
					ДлинаФрагментаШаблона = СтрДлина(ФрагментШаблона);
					ДлинаТекста = СтрДлина(Текст);
					
					Если ДлинаФрагментаШаблона > ДлинаТекста Или Лев(Текст, ДлинаФрагментаШаблона) <> ФрагментШаблона Тогда
						ЭлементСловаря = Неопределено;
						Прервать;
					КонецЕсли;
					
					// Получить значение счетчика для фрагмента шаблона
					Текст = Прав(Текст, ДлинаТекста - ДлинаФрагментаШаблона);
					ЗначениеЧисла = ПолучитьЧислоСтрокой(Текст, КоличествоСимволов);
					Текст = Прав(Текст, СтрДлина(Текст) - КоличествоСимволов);
					
					Если ЗначениеЧисла = Неопределено Тогда
						ЭлементСловаря = Неопределено;
						Прервать;
					КонецЕсли;
					
					// Дополнить имя таблицы найденым значением шаблона
					ЭлементСловаря = ЭлементСловаря + ФрагментШаблона + ЗначениеЧисла;
					
				КонецЦикла;
				
				Если ЭлементСловаря = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Если найдено имя таблицы по шаблону
			Если ЭлементСловаря <> Неопределено Тогда
				
				ДлинаТекста = СтрДлина(Текст);
				
				// Проверить окончание имени для полного соответствия шаблону
				Если ДлинаТекста > 0 Тогда
					
					ЗавершающийСимвол = Лев(Текст, 1);
					Текст = Прав(Текст, ДлинаТекста - 1);
					
					Если Не (ЗавершающийСимвол = " " Или ЗавершающийСимвол = "." Или ЗавершающийСимвол = Символы.ПС Или ЗавершающийСимвол = Символы.ВК) Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
				// Сохранить найденное имя таблицы
				Если СловарьСоответствие Тогда
					СловарьЗапроса.Вставить(ЭлементСловаря);
				ИначеЕсли СловарьСписокЗначений Тогда
					СловарьЗапроса.Добавить(ЭлементСловаря);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если СловарьСписокЗначений Тогда
		СловарьЗапроса.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	КонецЕсли;
	
	Возврат СловарьЗапроса;
	
КонецФункции // ПолучитьСловарьЗапроса()

// Получить число из строки в которой число находится в начале строки
//
// Праметры:
//  ИсходнаяСтрока - Строка, строка в которой находится число
//
// Возвращаемое значение:
//  Число - если оно есть, неопределено, если числа нет
//
Функция ПолучитьЧислоСтрокой(ИсходнаяСтрока, КоличествоСимволов)
	
	КоличествоСимволов = 0;
	ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
	
	Для Сч = 1 По ДлинаСтроки Цикл
		
		ТекущийСимвол = КодСимвола(Сред(ИсходнаяСтрока, Сч, 1));
		
		Если 48 <= ТекущийСимвол И ТекущийСимвол <= 57 Тогда
			КоличествоСимволов = КоличествоСимволов + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоСимволов > 0 Тогда
		Возврат Лев(ИсходнаяСтрока, КоличествоСимволов);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьЧислоСтрокой()
