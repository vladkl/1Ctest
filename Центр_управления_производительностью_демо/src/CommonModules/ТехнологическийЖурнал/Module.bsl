///////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ

// Включить технологический журнал
//
// Параметры:
//  Конфигурация - XML документ описывающий конифигурацию технологического журнала
//  КаталогиТЖ - Справочник.ИнформационныеБазы.ИменаКаталоговТЖ
//
// Возвращаемое значение:
//  Структура - Контекст работы с технологическим журналом
//
Функция ВключитьТехнологическийЖурнал(Конфигурация, НастройкиТЖ) Экспорт
	
	КаталогиТЖ = Новый Массив;
	Описатель = Новый Структура;
	Описатель.Вставить("Подкаталог", Новый Соответствие);
	Описатель.Вставить("КаталогиТЖ", КаталогиТЖ);
	
	Для Каждого СтрокаРасположения Из НастройкиТЖ Цикл
		
		// Создать Dom представление настроек журнала
		КонфигурацияDom = ОбщегоНазначенияКлиентСервер.ПолучитьDOMИзСтрокиXML(Конфигурация);
		КоличествоНастроек = ПолучитьКоличествоНастроекЖурнала(КонфигурацияDom);
		
		// Количество настроек должно равняться единице
		Если КоличествоНастроек <> 1 Тогда
			ВызватьИсключение СловарьКлиентСервер.Получить("ОшибкаНеверноеКоличествоЖурналов");
		КонецЕсли;
		
		// Установить каталог журнала
		Описатель.Подкаталог.Вставить(
			СтрокаРасположения.НомерСтроки, Строка(Новый УникальныйИдентификатор));
			
		Подкаталог = "\" + Описатель.Подкаталог[СтрокаРасположения.НомерСтроки];
		КаталогиТЖ.Добавить(СтрокаРасположения.Сетевой + Подкаталог);
		КаталогЖурнала = СтрокаРасположения.Локальный + Подкаталог;
		КаталогЖурнала = УстановитьКаталогЖурнала(КонфигурацияDom, КаталогЖурнала);
		ИмяФайлаКонфигурации = ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайлаНастройкиТЖ(СтрокаРасположения.Конфигурация);
		ОтладкаКлиентСервер.Действие("ВключитьТехнологическийЖурнал", ИмяФайлаКонфигурации, КаталогЖурнала);
		
		// Если журнал уже включен
		Если НайтиФайлы(ИмяФайлаКонфигурации).Количество() = 1 Тогда
			
			// Получить текстовое представление включенного журнала
			Чтение = Новый ЧтениеТекста(ИмяФайлаКонфигурации);
			СтараяКонфигурация = Чтение.Прочитать();
			Чтение.Закрыть();
			
			// Получить Dom представление включенного журнала
			Попытка
				СтараяКонфигурацияDom = ОбщегоНазначенияКлиентСервер.ПолучитьDOMИзСтрокиXML(СтараяКонфигурация);
			Исключение
				ВызватьИсключение "Не удается прочитать файл logcfg.xml. Возможно он поврежден. Исправьте файл logcfg.xml или удалите его.";
			КонецПопытки;
			
			// Объединить настройки подключенного и подключаемого журналов
			КонфигурацияDom = ОбъединитьНастройки(
				СтараяКонфигурацияDom,
				КонфигурацияDom);
			
		КонецЕсли;
		
		// Сохранить настройки журнала
		ТекстКонфигурации = ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуXMLИзDOM(КонфигурацияDom);
		Попытка
			Запись = Новый ЗаписьТекста(ИмяФайлаКонфигурации, КодировкаТекста.UTF8);
			Запись.Записать(ТекстКонфигурации);
			Запись.Закрыть();
		Исключение
			ОписаниеОшибки = "Ошибка включения технологического журнала" + Символы.ПС
			+ "Возможные причины:"  + Символы.ПС
			+ "1. Физически отсутсвует каталог для сохранения файла logcfg.xml"  + Символы.ПС
			+ "2. У учетной записи, под которой работает сервер 1С:Предприятие отсутствуют права на запись в каталог для сохранения файла  logcfg.xml";
			ВызватьИсключение ОписаниеОшибки;
		КонецПопытки;

		
		ОтладкаКлиентСервер.Результат("ВключитьТехнологическийЖурнал",
		                  ИмяФайлаКонфигурации,
		                  КаталогЖурнала);
		
	КонецЦикла;
	
	Возврат Описатель;
	
КонецФункции // ВключитьТехнологическийЖурнал()

// Загрузить технологический журнал в соответствующий регистр сведений
//
// Параметры:
//  Пути - Массив, пути расположения файлов технологического журнала
//  РазмерПорции - Число, число строк получаемых за одно обращение к журналу.
//
// Возвращаемое значение:
//  Число - количество загруженных событий
//
Функция ЗагрузитьТехнологическийЖурнал(Пути, ДокументЗамер, РазмерПорции = 3000) Экспорт
	
	ДатаЗамера = ДокументЗамер.Дата;
	ТЖ = КипВнешнийКомпонент.ПолучитьТЖ();
	
	// Открыть технологический журнал
	КипВнешнийКомпонент.ОткрытьТЖ(ТЖ, Пути, 8);
	
	ЧтениеXML = Новый ЧтениеXML;
	ПараметрыЧтенияXML = Новый ПараметрыЧтенияXML(,,,,,,,,,Истина);
	
	ТипОбъектаСобытия = ФабрикаXDTO.Тип(
		СловарьКлиентСервер.Получить("ПространствоИменТЖ"),
		"Event");
	
	// Подготовить регистр технологического журнала
	КоличествоСобытий = 0;
	
	// Получить события технологического журнала
	Пока Не КипВнешнийКомпонент.КонецТЖ(ТЖ) Цикл
		
		Результат = КипВнешнийКомпонент.ПрочитатьТЖ(ТЖ, РазмерПорции);
		
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Набор = РегистрыСведений.ТехнологическийЖурнал.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ДокументЗамер);
		
		//Блокировка = Новый БлокировкаДанных;
		//СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ТехнологическийЖурнал");
		//СтрокаБлокировки.УстановитьЗначение("Владелец", ДокументЗамер);
		//СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		//Блокировка.Заблокировать();
		
		ЧтениеXML.УстановитьСтроку(Результат, ПараметрыЧтенияXML);
		ЧтениеXML.ПерейтиКСодержимому(); // Прейти к <log...>
		ЧтениеXML.Прочитать();           // Пропустить <log...>
		
		// Чтение событий
		Пока Истина Цикл
			
			Если ЧтениеXML.ЛокальноеИмя = "log" Тогда
				Прервать;
			КонецЕсли;
			
			Попытка
				Событие = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипОбъектаСобытия);
			Исключение
				Событие = Неопределено;	
			КонецПопытки;
				
			Если Событие = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрДлина(Событие.ms) = 6 Тогда
				//Это 8.3
				ЧислоМикросекунд = Число(Событие.ms);
				ПродолжительностьВМикросекундах = Событие.len;
			Иначе
				//Это 8.2
				ЧислоМикросекунд = Число(Событие.ms) * 100;
				ПродолжительностьВМикросекундах = Событие.len * 100;
			КонецЕсли;
			
			СтрокаНабора = Набор.Добавить();
			СтрокаНабора.Период = ДатаЗамера;
			СтрокаНабора.МоментВремени = ОбщегоНазначенияКлиентСервер.ПреобразоватьДатуВСекунды(Событие.date) * 10000000 + ЧислоМикросекунд * 10;
			СтрокаНабора.ДатаВремяСобытия = Событие.date;
			СтрокаНабора.Продолжительность = ПродолжительностьВМикросекундах;
			СтрокаНабора.Событие = Событие.name;
			СтрокаНабора.Владелец = ДокументЗамер;
			
			Для Каждого Свойство Из Событие.prop Цикл
				Ключ = ВРег(Свойство.name);
				
				Если Ключ = "LKP" Тогда
					СтрокаНабора.lkp = Свойство.content;
				ИначеЕсли Ключ = "LKSRC" Тогда
					СтрокаНабора.lksrc = Свойство.content;
				ИначеЕсли Ключ = "T:CONNECTID" Тогда
					СтрокаНабора.connectID = Свойство.content;
				ИначеЕсли Ключ = "CONTEXT" Тогда
					СтрокаНабора.Context = Свойство.content;
				ИначеЕсли Ключ = "MODULE" Тогда
					СтрокаНабора.Module = Свойство.content;
				ИначеЕсли Ключ = "METHOD" Тогда
					СтрокаНабора.Method = Свойство.content;
				ИначеЕсли Ключ = "INAME" Тогда
					СтрокаНабора.IName = Свойство.content;
				ИначеЕсли Ключ = "MNAME" Тогда
					СтрокаНабора.MName = Свойство.content;
				ИначеЕсли Ключ = "SQL" Тогда
					СтрокаНабора.Sql = Свойство.content;
				ИначеЕсли Ключ = "SDBL" Тогда
					СтрокаНабора.Sdbl = Свойство.content;
				ИначеЕсли Ключ = "FUNC" Тогда
					СтрокаНабора.Func = Свойство.content;
				ИначеЕсли Ключ = "TXT" Тогда
					СтрокаНабора.Txt = Свойство.content;
				ИначеЕсли Ключ = "TABLENAME" Тогда
					СтрокаНабора.TableName = Свойство.content;
				ИначеЕсли Ключ = "T:COMPUTERNAME" Тогда
					СтрокаНабора.computerName = Свойство.content;
				ИначеЕсли Ключ = "DBPID" Тогда
					СтрокаНабора.dbpid = Свойство.content;
				ИначеЕсли Ключ = "LKPID" Тогда
					СтрокаНабора.lkpid = Свойство.content;
				ИначеЕсли Ключ = "LKAID" Тогда
					СтрокаНабора.lkaid = Свойство.content;
				ИначеЕсли Ключ = "USR" Тогда
					СтрокаНабора.Usr = Свойство.content;
				ИначеЕсли Ключ = "PLANSQLTEXT" Тогда
					СтрокаНабора.planSQLText = Свойство.content;
				ИначеЕсли Ключ = "WAITCONNECTIONS" Тогда
					СтрокаНабора.WaitConnections = Свойство.content;
				ИначеЕсли Ключ = "LOCKS" Тогда
					СтрокаНабора.Locks = Свойство.content;
				ИначеЕсли Ключ = "DEADLOCKCONNECTIONINTERSECTIONS" Тогда
					СтрокаНабора.DeadlockConnectionIntersections = Свойство.content;
				ИначеЕсли Ключ = "MEMORY" Тогда
					СтрокаНабора.Memory = Свойство.content;
				ИначеЕсли Ключ = "MEMORYPEAK" Тогда
					СтрокаНабора.MemoryPeak = Свойство.content;
				ИначеЕсли Ключ = "INBYTES" Тогда
					СтрокаНабора.InBytes = Свойство.content;
				ИначеЕсли Ключ = "OUTBYTES" Тогда
					СтрокаНабора.OutBytes = Свойство.content;
				КонецЕсли;
			КонецЦикла;
			
			Если ПустаяСтрока(СтрокаНабора.Context) Тогда
				Если Не ПустаяСтрока(СтрокаНабора.Module) Тогда
					СтрокаНабора.Context = "Module = " + СтрокаНабора.Module + "; Method = " + СтрокаНабора.Method;
				ИначеЕсли ЗначениеЗаполнено(СтрокаНабора.IName) Или ЗначениеЗаполнено(СтрокаНабора.MName) Тогда
					СтрокаНабора.Context = "IName = " + СтрокаНабора.IName + "; MName = " + СтрокаНабора.MName;
				Иначе
					СтрокаНабора.Context = "<Без контекста>";
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаНабора.Событие = "DBPOSTGRS" Тогда
				Если Лев(СтрокаНабора.Sql, 15) = "explain analyse" Тогда
					СтрокаНабора.Sql = Сред(СтрокаНабора.Sql, 17);
				ИначеЕсли Лев(СтрокаНабора.Sql, 7) = "explain" Тогда
					СтрокаНабора.Sql = Сред(СтрокаНабора.Sql, 9);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаНабора.connectID = 0 Тогда
				Набор.Удалить(СтрокаНабора);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоСобытий = КоличествоСобытий + Набор.Количество();
		Набор.Записать(Ложь);
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	КипВнешнийКомпонент.ЗакрытьТЖ(ТЖ);
	
	Возврат КоличествоСобытий;
	
КонецФункции // ЗагрузитьТехнологическийЖурнал()

// Отключить технологический журнал или привести его к тому виду,
// в котором он был до его включения
//
// Параметры:
//  Описатель - Произвольный, значение этой переменной нужно передавать при
//              отключении технологического журнала
//  КаталогиТЖ - Справочник.ИнформационныеБазы.ИменаКаталоговТЖ
//
// Возвращаемые параметры:
//  Булево - Истина, журнал успешно включен, Ложь, журнал включить не удалось
//
Процедура ОтключитьТехнологическийЖурнал(Описатель, КаталогиТЖ) Экспорт
	
	Для Каждого СтрокаРасположения Из КаталогиТЖ Цикл
		
		// Получение текущей конфигурации технологического журнала
		ИмяФайлаКонфигурации = ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайлаНастройкиТЖ(СтрокаРасположения.Конфигурация);
		ОтладкаКлиентСервер.Действие("ОтключитьТехнологическийЖурнал", ИмяФайлаКонфигурации);
		Чтение = Новый ЧтениеТекста(ИмяФайлаКонфигурации);
		Конфигурация = Чтение.Прочитать();
		Чтение.Закрыть();
		КонфигурацияDom = ОбщегоНазначенияКлиентСервер.ПолучитьDOMИзСтрокиXML(Конфигурация);
		
		// Удалить узел настройки технологического журнала
		ПИ = ПолучитьРазименовательПространствИменТЖ();
		
		УзлыЖурнала = КонфигурацияDom.ВычислитьВыражениеXPath(
			"/ns:config/ns:*[name()='ns:log' or name()='ns:plansql' or name()='ns:dbmslocks'][@location=""" +
			СтрокаРасположения.Локальный + "\" + 
			Описатель.Подкаталог[СтрокаРасположения.НомерСтроки] + """]",
			КонфигурацияDom, ПИ);
			
		Пока Истина Цикл
			УзелЖурнала = УзлыЖурнала.ПолучитьСледующий();
			Если УзелЖурнала = Неопределено Тогда
				Прервать;
			КонецЕсли;
			УзелЖурнала.РодительскийУзел.УдалитьДочерний(УзелЖурнала);
		КонецЦикла;
		
		Если ПолучитьКоличествоНастроекЖурнала(КонфигурацияDom) = 0 Тогда
			УдалитьФайлы(ИмяФайлаКонфигурации);
		Иначе
			Попытка
				Запись = Новый ЗаписьТекста(ИмяФайлаКонфигурации, КодировкаТекста.UTF8);
				Запись.Записать(ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуXMLИзDOM(КонфигурацияDom));
				Запись.Закрыть();
			Исключение
				ОписаниеОшибки = "Ошибка отключения технологического журнала" + Символы.ПС
				+ "Возможные причины:"  + Символы.ПС
				+ "1. Физически отсутсвует каталог для сохранения файла logcfg.xml"  + Символы.ПС
				+ "2. У учетной записи, под которой работает сервер 1С:Предприятие отсутствуют права на запись в каталог для сохранения файла  logcfg.xml";
				ВызватьИсключение ОписаниеОшибки;
			КонецПопытки;
		КонецЕсли;
		
		ОтладкаКлиентСервер.Результат("ОтключитьТехнологическийЖурнал", ИмяФайлаКонфигурации);
		
	КонецЦикла;
	
КонецПроцедуры // ОтключитьТехнологическийЖурнал()

// Получить количество настроек журнала (количество элементов <log />)
//
// Параметры:
//  КонфигурацияDom - ДокументDom, конфигурация журнала в виде Dom
//
// Возвращаемое значение:
//  Число - количество настроек технологического журнала
//
Функция ПолучитьКоличествоНастроекЖурнала(КонфигурацияDom)
	
	ПИ = ПолучитьРазименовательПространствИменТЖ();
	УзлыЖурнала = КонфигурацияDom.ВычислитьВыражениеXPath("/ns:config/ns:log", КонфигурацияDom, ПИ);
	Количество = 0;
	
	Пока УзлыЖурнала.ПолучитьСледующий() <> Неопределено Цикл
		Количество = Количество + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции // ПолучитьКоличествоНастроекЖурнала()

// Объединить настройки технологических журналов
//
// Параметры:
//  ОсновныеНастройки - ДокументDom, документ который будет взят за основу
//  ДополнительныеНастройки - ДокументDom, документ, настройки которого будут
//                 объеденины с основным документом
//
// Возвращаемое значение:
// ДокументDom - результат объединения
//
Функция ОбъединитьНастройки(ОсновныеНастройки, ДополнительныеНастройки)
	
	Результат = ОсновныеНастройки.КлонироватьУзел(Истина);
	
	Для каждого Узел Из ДополнительныеНастройки.ПервыйДочерний.ДочерниеУзлы Цикл
		УзелЖурнала = Результат.ИмпортироватьУзел(Узел, Истина);
		Результат.ЭлементДокумента.ДобавитьДочерний(УзелЖурнала);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ОбъединитьНастройки()

// Подождать завершения выключения технологического журнала
// Если журнал не выключится в течении 90 сек, то ожидание прекращается
// и передается сообщение об ошибке
//
// Параметры:
//  КаталогЖурнала - Строка, каталог в котором должен располагатся журнал
//
// Возвращаемое значение:
//  Булево - Истина, ТЖ успешно выключен, иначе Ложь
//
Функция ПодождатьЗавершенияВыключенияЖурнала(КаталогЖурнала) Экспорт
	
	Перем Инструменты;
	
	ОтладкаКлиентСервер.Действие("ПодождатьЗавершенияВыключенияЖурнала", КаталогЖурнала);
	
	ВремяНачала = ТекущаяДата();
	ФайлыДоступны = Ложь;
	
	// Получить имена файлов на которые могут быть наложены блокировки
	Файлы = ПолучитьИменаФайловТехнологическогоЖурнала(КаталогЖурнала);
	Инструменты = КипВнешнийКомпонент.ПолучитьИнструменты();
	
	// Дождаться освобождения заблокированных файлов
	Пока ТекущаяДата() - ВремяНачала < 90 И ФайлыДоступны = Ложь Цикл
		
		ФайлыДоступны = Истина;
		
		Для Каждого Файл Из Файлы Цикл
			Попытка
				Чтение = Новый ЧтениеТекста(Файл);
				Чтение.Закрыть();
			Исключение
				ФайлыДоступны = Ложь;
				Прервать;
			КонецПопытки;
		КонецЦикла;
		
		Если ФайлыДоступны Тогда
			Прервать;
		Иначе
			КипВнешнийКомпонент.Пауза(Инструменты, 1000);
		КонецЕсли;
	КонецЦикла;
	
	Если ФайлыДоступны Тогда
		ОтладкаКлиентСервер.Результат("ПодождатьЗавершенияВыключенияЖурнала", КаталогЖурнала);
	Иначе
		ОтладкаКлиентСервер.Результат("ПодождатьЗавершенияВыключенияЖурналаТаймаут", КаталогЖурнала);
	КонецЕсли;
	
	Возврат ФайлыДоступны;
	
КонецФункции // ПодождатьЗавершенияВыключенияЖурнала(()

// Получить массив имен файлов технологического журнала
//
// Параметры:
//  КаталогЖурнала - Строка, каталог в котором хранятся файлы журнала
//
// Возвращаемое значение:
//  Массив - имена файлов технологического журнала
//
Функция ПолучитьИменаФайловТехнологическогоЖурнала(КаталогЖурнала)
	
	Каталоги = НайтиФайлы(КаталогЖурнала, "*");
	Файлы = Новый Массив;
	
	Для Каждого Каталог Из Каталоги Цикл
		НовыеФайлы = НайтиФайлы(Каталог.ПолноеИмя, "*.log");
		
		Для Каждого НовыйФайл Из НовыеФайлы Цикл
			Файлы.Добавить(НовыйФайл.ПолноеИмя);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Файлы;
	
КонецФункции // ПолучитьИменаФайловТехнологическогоЖурнала()

// Установить каталог в который будут помещены файлы технологического журнала
// Если каталог уже указан, то установки каталога не произойдет
//
// Параметры:
//  КонфигурацияDom - ДокументDom, конфигурация технологического журанала
//  Каталог Строка, каталог в который будут помещены файлы журнала
//
// Возвращаемое значение:
//  Строка - Имя каталога, который будет использоваться для хранения журнала
//
Функция УстановитьКаталогЖурнала(КонфигурацияDom, Каталог)
	
	ПИ = ПолучитьРазименовательПространствИменТЖ();
	УзлыЖурнала = КонфигурацияDom.ВычислитьВыражениеXPath("/ns:config/ns:*[name()='ns:log' or name()='ns:plansql' or name()='ns:dbmslocks']", КонфигурацияDom, ПИ);
	Расположение = "";
	
	Пока Истина Цикл
		УзелЖурнала = УзлыЖурнала.ПолучитьСледующий();
		Если УзелЖурнала = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Если УзелЖурнала.ЕстьАтрибут("location") Тогда
			Расположение = УзелЖурнала.ПолучитьАтрибут("location");
			Продолжить;
		КонецЕсли;
		
		УзелЖурнала.УстановитьАтрибут("location", Каталог);
	КонецЦикла;
	
	Если Не ПустаяСтрока(Расположение) Тогда
		Возврат Расположение;
	Иначе
		Возврат Каталог;
	КонецЕсли;
	
КонецФункции // УстановитьКаталогЖурнала()

// Получить конфигурацию технологического журнала для анализа ожиданий на блокировках
//
// Параметры:
//  ИмяИБ - Строка, имя исследуемой информационной базы
//  ТипСУБД - Перечисление.ТипСУБД
//  Планы - Булево, Истина - собирать планы запросов, иначе не собирать
//
// Возвращаемое значение:
//  Строка - XML настройка технологического журнала
//
Функция КонфигурацияАнализаБлокировокСУБД(ИмяИБ, ТипСУБД, Планы) Экспорт
	
	Конфигурация = СоздатьКонфигурациюТехнологическогоЖурнала();
	Журнал = ДобавитьРазделЖурнала(
		Конфигурация,
		"",
		Формат(Константы.ДлительностьХраненияФайловТЖ.Получить(), "ЧГ=0"));
	
	Если Планы Тогда
		ДобавитьРазделПланов(Конфигурация);
    КонецЕсли;
    ДобавитьРазделБлокировок(Конфигурация);
	
	Событие = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(Событие, "Name", ПолучитьИмяСобытияСУБД(ТипСУБД));
	ДобавитьУсловиеРавно(Событие, "p:processName", ИмяИБ);
	
	СобытиеSdbl = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(СобытиеSdbl, "Name", "SDBL");
	ДобавитьУсловиеРавно(СобытиеSdbl, "p:processName", ИмяИБ);
	
	ДобавитьСвойство(Журнал, "p:processName");
	ДобавитьСвойство(Журнал, "t:computerName");
	ДобавитьСвойство(Журнал, "t:connectID");
	ДобавитьСвойство(Журнал, "Context");
	ДобавитьСвойство(Журнал, "Sql");
	ДобавитьСвойство(Журнал, "Sdbl");
	ДобавитьСвойство(Журнал, "lkaid");
	ДобавитьСвойство(Журнал, "lkp");
	ДобавитьСвойство(Журнал, "lkpid");
	ДобавитьСвойство(Журнал, "lksrc");
	ДобавитьСвойство(Журнал, "Func");
	ДобавитьСвойство(Журнал, "tableName");
	ДобавитьСвойство(Журнал, "Usr");
	ДобавитьСвойство(Журнал, "dbpid");
	
	Если Планы Тогда
		ДобавитьСвойство(Журнал, "planSQLText");
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	
КонецФункции // КонфигурацияАнализаБлокировокСУБД()

// Получить конфигурацию технологического журнала для анализа ожиданий на блокировках
//
// Параметры:
//  ИмяИБ - Строка, имя исследуемой информационной базы
//  ТипСУБД - Перечисление.ТипСУБД
//
// Возвращаемое значение:
//  Строка - XML настройка технологического журнала
//
Функция КонфигурацияАнализаБлокировок1С(ИмяИБ) Экспорт
	
	Конфигурация = СоздатьКонфигурациюТехнологическогоЖурнала();
	Журнал = ДобавитьРазделЖурнала(
		Конфигурация,
		"",
		Формат(Константы.ДлительностьХраненияФайловТЖ.Получить(), "ЧГ=0"));
	
	СобытиеTLock = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(СобытиеTLock, "Name", "TLOCK");
	ДобавитьУсловиеРавно(СобытиеTLock, "p:processName", ИмяИБ);
	
	СобытиеSdbl = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(СобытиеSdbl, "Name", "SDBL");
	ДобавитьУсловиеРавно(СобытиеSdbl, "p:processName", ИмяИБ);
	ДобавитьУсловиеРавно(СобытиеSdbl, "Func", "BeginTransaction");
	
	ДобавитьСвойство(Журнал, "p:processName");
	ДобавитьСвойство(Журнал, "t:computerName");
	ДобавитьСвойство(Журнал, "t:connectID");
	ДобавитьСвойство(Журнал, "Func");
	ДобавитьСвойство(Журнал, "Context");
	ДобавитьСвойство(Журнал, "Usr");
	ДобавитьСвойство(Журнал, "WaitConnections");
	ДобавитьСвойство(Журнал, "Locks");
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	
КонецФункции // КонфигурацияАнализаБлокировок1С()

// Получить конфигурацию технологического журнала для анализа взаимоблокировок
//
// Параметры:
//  ИмяИБ - Строка, имя исследуемой информационной базы
//  ТипСУБД - Перечисление.ТипСУБД
//  Планы - Булево, Истина - собирать планы запросов, иначе не собирать
//
// Возвращаемое значение:
//  Строка - XML настройка технологического журнала
//
Функция КонфигурацияАнализаВзаимоблокировок(ИмяИБ, ТипСУБД, Планы) Экспорт
	
	Конфигурация = СоздатьКонфигурациюТехнологическогоЖурнала();
	Журнал = ДобавитьРазделЖурнала(
		Конфигурация,
		"",
		Формат(Константы.ДлительностьХраненияФайловТЖ.Получить(), "ЧГ=0"));
	
	Если Планы Тогда
		ДобавитьРазделПланов(Конфигурация);
	КонецЕсли;
        
	Событие = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(Событие, "Name", ПолучитьИмяСобытияСУБД(ТипСУБД));
	ДобавитьУсловиеРавно(Событие, "p:processName", ИмяИБ);
	
	СобытиеSdbl = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(СобытиеSdbl, "Name", "SDBL");
	ДобавитьУсловиеРавно(СобытиеSdbl, "p:processName", ИмяИБ);
	
	ДобавитьСвойство(Журнал, "p:processName");
	ДобавитьСвойство(Журнал, "t:computerName");
	ДобавитьСвойство(Журнал, "t:connectID");
	ДобавитьСвойство(Журнал, "Context");
	ДобавитьСвойство(Журнал, "Sql");
	ДобавитьСвойство(Журнал, "Sdbl");
	ДобавитьСвойство(Журнал, "dbpid");
	ДобавитьСвойство(Журнал, "Func");
	ДобавитьСвойство(Журнал, "tableTame");
	ДобавитьСвойство(Журнал, "Usr");
	
	Если Планы Тогда
		ДобавитьСвойство(Журнал, "planSQLText");
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	
КонецФункции // КонфигурацияАнализаВзаимоблокировок()

// Получить конфигурацию технологического журнала для анализа взаимоблокировок 1С
//
// Параметры:
//  ИмяИБ - Строка, имя исследуемой информационной базы
//
// Возвращаемое значение:
//  Строка - XML настройка технологического журнала
//
Функция КонфигурацияАнализаВзаимоблокировок1С(ИмяИБ) Экспорт
	
	Конфигурация = СоздатьКонфигурациюТехнологическогоЖурнала();
	Журнал = ДобавитьРазделЖурнала(
		Конфигурация,
		"",
		Формат(Константы.ДлительностьХраненияФайловТЖ.Получить(), "ЧГ=0"));
	
	Событие = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(Событие, "Name", "TLOCK");
	ДобавитьУсловиеРавно(Событие, "p:processName", ИмяИБ);
	
	СобытиеSdbl = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(СобытиеSdbl, "Name", "TDEADLOCK");
	ДобавитьУсловиеРавно(СобытиеSdbl, "p:processName", ИмяИБ);
	
	СобытиеSdbl = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(СобытиеSdbl, "Name", "SDBL");
	ДобавитьУсловиеРавно(СобытиеSdbl, "p:processName", ИмяИБ);
	ДобавитьУсловиеРавно(СобытиеSdbl, "Func", "BeginTransaction");
	
	ДобавитьСвойство(Журнал, "p:processName");
	ДобавитьСвойство(Журнал, "t:computerName");
	ДобавитьСвойство(Журнал, "t:connectID");
	ДобавитьСвойство(Журнал, "Func");
	ДобавитьСвойство(Журнал, "Context");
	ДобавитьСвойство(Журнал, "Usr");
	ДобавитьСвойство(Журнал, "WaitConnections");
	ДобавитьСвойство(Журнал, "Locks");
	ДобавитьСвойство(Журнал, "DeadlockConnectionIntersections");
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	
КонецФункции // КонфигурацияАнализаВзаимоблокировок()

// Получить конфигурацию технологического журнала для анализа запросов
//
// Праметры:
//  ИмяИБ - Строка, имя исследуемой информационной базы
//  МинимальнаяДлительностьЗапроса - Число, запросы с такой и более длительностью
//                 попадут в технологический журнал
//  Планы - Булево, Истина - собирать планы запросов, иначе не собирать
//
// Возвращаемое значение:
//  Строка - XML настройка технологического журнала
//
Функция КонфигурацияАнализаЗапросов(ИмяИБ, ТипСУБД, МинимальнаяДлительностьЗапроса, Планы) Экспорт
	
	Конфигурация = СоздатьКонфигурациюТехнологическогоЖурнала();
	Журнал = ДобавитьРазделЖурнала(
		Конфигурация,
		"",
		Формат(Константы.ДлительностьХраненияФайловТЖ.Получить(), "ЧГ=0"));
	
	Если Планы Тогда
		ДобавитьРазделПланов(Конфигурация);
	КонецЕсли;
	
	Длительность = Формат(МинимальнаяДлительностьЗапроса * 10000, "ЧН=; ЧГ=0");
	
	Событие = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(Событие, "Name", ПолучитьИмяСобытияСУБД(ТипСУБД));
	ДобавитьУсловиеРавно(Событие, "p:processName", ИмяИБ);
	ДобавитьУсловиеБольшеИлиРавно(Событие, "Duration", Длительность);
	
	СобытиеSdbl = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(СобытиеSdbl, "Name", "SDBL");
	ДобавитьУсловиеРавно(СобытиеSdbl, "p:processName", ИмяИБ);
	ДобавитьУсловиеБольшеИлиРавно(СобытиеSdbl, "Duration", Длительность);
	
	ДобавитьСвойство(Журнал, "p:processName");
	ДобавитьСвойство(Журнал, "t:computerName");
	ДобавитьСвойство(Журнал, "t:connectID");
	ДобавитьСвойство(Журнал, "Context");
	ДобавитьСвойство(Журнал, "Sql");
	ДобавитьСвойство(Журнал, "Sdbl");
	ДобавитьСвойство(Журнал, "Func");
	ДобавитьСвойство(Журнал, "tableName");
	ДобавитьСвойство(Журнал, "Usr");
	
	Если Планы Тогда
		ДобавитьСвойство(Журнал, "planSQLText");
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	
КонецФункции // КонфигурацияАнализаЗапросов()

// Получить конфигурацию технологического журнала для анализа серверных вызовов
//
// Праметры:
//  ИмяИБ - Строка, имя исследуемой информационной базы
//  МинимальнаяДлительностьВызова - Число, вызовы с такой и более длительностью
//                 попадут в технологический журнал
//
// Возвращаемое значение:
//  Строка - XML настройка технологического журнала
//
Функция КонфигурацияАнализаСерверныхВызовов(ИмяИБ, МинимальнаяДлительностьВызова) Экспорт
	
	Конфигурация = СоздатьКонфигурациюТехнологическогоЖурнала();
	Журнал = ДобавитьРазделЖурнала(
		Конфигурация,
		"",
		Формат(Константы.ДлительностьХраненияФайловТЖ.Получить(), "ЧГ=0"));
	
	Длительность = Формат(МинимальнаяДлительностьВызова * 10000, "ЧН=; ЧГ=0");
	
	Событие = ДобавитьСобытие(Журнал);
	ДобавитьУсловиеРавно(Событие, "Name", "CALL");
	ДобавитьУсловиеРавно(Событие, "p:processName", ИмяИБ);
	ДобавитьУсловиеБольшеИлиРавно(Событие, "Duration", Длительность);
	
	ДобавитьСвойство(Журнал, "p:processName");
	ДобавитьСвойство(Журнал, "t:computerName");
	ДобавитьСвойство(Журнал, "t:connectID");
	ДобавитьСвойство(Журнал, "Context");
	ДобавитьСвойство(Журнал, "IName");
	ДобавитьСвойство(Журнал, "MName");
	ДобавитьСвойство(Журнал, "Module");
	ДобавитьСвойство(Журнал, "Method");
	ДобавитьСвойство(Журнал, "Usr");
	ДобавитьСвойство(Журнал, "Memory");
	ДобавитьСвойство(Журнал, "MemoryPeak");
	ДобавитьСвойство(Журнал, "InBytes");
	ДобавитьСвойство(Журнал, "OutBytes");
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьСтрокуXMLИзDOM(Конфигурация);
	
КонецФункции // КонфигурацияАнализаСерверныхВызовов()

// Получить имена каталогов технологического журнала
//
// Параметры:
//  ИБ - СправочникСсылка, информационная база
//  Описатель - Структура, параметры создания технологического журнала
//
// Возвращаемое значение:
//  Массив - имена каталогов технологического журнала
//
Функция ПолучитьКаталогиТЖ(ИБ, Описатель) Экспорт
	
	Каталоги = Новый Массив;
	Расположения = ИБ.ИменаКаталоговТЖ;
	
	Для Каждого СтрокаРасположения Из Расположения Цикл
		Каталог =
			СтрокаРасположения.Локальный + "/" +
			Описатель.Подкаталог[СтрокаРасположения.НомерСтроки];
		Каталоги.Добавить(Каталог);
	КонецЦикла;
	
	Возврат Каталоги;
	
КонецФункции // ПолучитьКаталогиТЖ()

// Получить разименователь пространств имен, необходимый для запросов XPath
//
// Возвращаемое значение:
//  РазыменовательПространствИменDOM
//
Функция ПолучитьРазименовательПространствИменТЖ()
	
	Пространства = Новый Соответствие;
	Пространства.Вставить("ns", "http://v8.1c.ru/v8/tech-log");
	
	Возврат Новый РазыменовательПространствИменDOM(Пространства);
	
КонецФункции // ПолучитьРазименовательПространствИменТЖ()


///////////////////////////////////////////////////////////////////////////////
// АНАЛИЗ

// Получить информацию по выполняемым запросам
// с блокировками установленными запросами (жертвами) перечисленными в
// регистре сведений ИсточникАнализаТЖ. Перед использованием этой функции
// нужно заполнить регистр сведений ИсточникАнализаТЖ, указав момент времени
// и соединение жертвы, и регистр сведений РесурсыАнализаТЖ, указав те же
// моменты времени и ресурсы, что и в ИсточникАнализаТЖ, плюс имена таблиц
// входящих в запрос жертв.
//
// Параметры:
//  ТипСУБД - Перечисление.ТипСУБД - тип анализируемой СУБД
//
// Возвращаемое значение:
//  РезультатЗапроса - содержащий запросы жертв и виновников, включая их описания
//
Функция ПроанализироватьЗапросы(ТипСУБД, ДокументЗамер) Экспорт
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьЗапросы");
	
	Запрос = СоздатьЗапросДляАнализа(ТипСУБД, ДокументЗамер);
	
	ПолучитьВременаЗапросов(Запрос);
	ПолучитьВременаКонтекстов(Запрос);
	ПолучитьВременаSdbl(Запрос);
	РезультатЗапроса = ОбъединитьРезультатыАнализаЗапросов(Запрос);
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьЗапросы");
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПроанализироватьЗапросы()

// Найти запросы (виновники), которые установили блокировки конфликтующие
// с блокировками установленными запросами (жертвами) перечисленными в
// регистре сведений ИсточникАнализаТЖ. Перед использованием этой функции
// нужно заполнить регистр сведений ИсточникАнализаТЖ, указав момент времени
// и соединение жертвы, и регистр сведений РесурсыАнализаТЖ, указав теже
// моменты времени и ресурсы, что и в ИсточникАнализаТЖ, плюс имена таблиц
// входящих в запрос жертв.
//
// Параметры:
//  ТипСУБД - Перечисление.ТипСУБД - тип анализируемой СУБД
//
// Возвращаемое значение:
//  РезультатЗапроса - содержащий запросы жертв и виновников, включая их описания
//
Функция ПроанализироватьОжидания(Запрос, ТипСУБД, ДокументЗамер, АнализироватьГранулярностьБлокировок) Экспорт
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьОжидания");
	
	СоздатьШаблоныРесурсов(Запрос, ТипСУБД);
	НайтиИспользуемыеСобытия(Запрос);
	ДополнитьОписаниеИспользуемыхСобытий(Запрос);
	НайтиВиновниковБлокировок(Запрос, ДокументЗамер);
	СоздатьИсточникАнализаСПолнымОписанием(Запрос);
	ПолучитьОписаниеБлокирующейТранзакцииДляОжиданий(Запрос);
	ПолучитьНачалоГраницыБлокировки(Запрос);
	ПолучитьКонецГраницыБлокировкиДляОжиданий(Запрос);
	ОпределитьБлокирующиеЗапросы(Запрос, ТипСУБД);
	ПолучитьВременаЗапросовЖертвИВиновников(Запрос);
	ПолучитьВременаКонтекстов(Запрос);
	ПолучитьВременаSdbl(Запрос);
	ДополнитьЗапросыОписаниями(Запрос);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	РезультатАнализаОжиданий
		|ИТОГИ ПО
		|	МоментВремениЖертвы,
		|	СоединениеЖертвы";
		
	РезультатЗапроса = Запрос.Выполнить();
		
	ОтладкаКлиентСервер.Действие("ПроанализироватьОжидания");
		
	Возврат РезультатЗапроса;
	
КонецФункции // ПроанализироватьОжидания()

// Найти запросы (виновники), которые установили блокировки конфликтующие
// с блокировками установленными запросами (жертвами) перечисленными в
// регистре сведений ИсточникАнализаТЖ. Перед использованием этой функции
// нужно заполнить регистр сведений ИсточникАнализаТЖ, указав момент времени
// и соединение жертвы, и регистр сведений РесурсыАнализаТЖ, указав теже
// моменты времени и ресурсы, что и в ИсточникАнализаТЖ, плюс имена таблиц
// входящих в запрос жертв.
//
// Параметры:
//  ТипСУБД - Перечисление.ТипСУБД - тип анализируемой СУБД
//
// Возвращаемое значение:
//  РезультатЗапроса - содержащий запросы жертв и виновников, включая их описания
//
Функция ПроанализироватьОжиданияДляВзаимоблокировок(ТипСУБД, ДокументЗамер) Экспорт
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьОжиданияДляВзаимоблокировок");
	
	Запрос = СоздатьЗапросДляАнализа(ТипСУБД, ДокументЗамер);
	
	СоздатьШаблоныРесурсов(Запрос, ТипСУБД);
	НайтиИспользуемыеСобытия(Запрос);
	ДополнитьОписаниеИспользуемыхСобытий(Запрос);
	СоздатьИсточникАнализаСПолнымОписанием(Запрос);
	ПолучитьОписаниеБлокирующейТранзакцииДляВзаимоблокировок(Запрос);
	ПолучитьНачалоГраницыБлокировки(Запрос);
	ПолучитьКонецГраницыБлокировкиДляВзаимоблокировок(Запрос);
	ОпределитьБлокирующиеЗапросы(Запрос, ТипСУБД);
	ПолучитьВременаЗапросовЖертвИВиновников(Запрос);
	ПолучитьВременаКонтекстов(Запрос);
	ПолучитьВременаSdbl(Запрос);
	ДополнитьЗапросыОписаниями(Запрос);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	РезультатАнализаОжиданий
		|ИТОГИ ПО
		|	НомерВзаимоблокировки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтладкаКлиентСервер.Результат("ПроанализироватьОжиданияДляВзаимоблокировок");
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПроанализироватьОжиданияДляВзаимоблокировок()

// Получить информацию по выполненным серверным вызовам
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер
//
// Возвращаемое значение:
//  РезультатЗапроса - содержащий запросы жертв и виновников, включая их описания
//
Функция ПроанализироватьСерверныеВызовы(ДокументЗамер) Экспорт
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьЗапросы");
	
	Запрос = СоздатьЗапросДляАнализа(Неопределено, ДокументЗамер);
	ПолучитьВременаСерверныхВызовов(Запрос);
	ПолучитьВременаКонтекстов(Запрос);
	РезультатЗапроса = ОбъединитьРезультатыАнализаСерверныхВызовов(Запрос);
	
	ОтладкаКлиентСервер.Действие("ПроанализироватьЗапросы");
	
	Возврат РезультатЗапроса;
	
КонецФункции // ПроанализироватьЗапросы()

// Создать запрос для анализа ожиданий на блокировках или взаимоблокировок
//
// Параметры:
//  ТипСУБД - Перечисление.ТипСУБД
//
// Возвращаемое значение:
// Запрос - Запрос для анализа с установленными необходимыми параметрами
//
Функция СоздатьЗапросДляАнализа(ТипСУБД, ДокументЗамер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//Запрос.УстановитьПараметр("НачалоТранзакции", ТехнологическийЖурнал.ПолучитьЗапросНачалаТранзакции(ТипСУБД));
	Запрос.УстановитьПараметр("НачалоТранзакции", ТехнологическийЖурнал.ПолучитьФункциюНачалаТранзакции());
	Запрос.УстановитьПараметр("СобытиеСУБД", ТехнологическийЖурнал.ПолучитьИмяСобытияСУБД(ТипСУБД));
	Запрос.УстановитьПараметр("СобытиеКонтекст", ТехнологическийЖурнал.ПолучитьИмяСобытияКонтекст(ТипСУБД));
	Запрос.УстановитьПараметр("СобытиеSdbl", ТехнологическийЖурнал.ПолучитьИмяСобытияSdbl(ТипСУБД));
	Запрос.УстановитьПараметр("СобытиеCALL", "CALL");
	Запрос.УстановитьПараметр("ДокументЗамер", ДокументЗамер);
	Запрос.УстановитьПараметр("Период", ДокументЗамер.Дата);
	
	Возврат Запрос;
	
КонецФункции // СоздатьЗапросДляАнализа()

// Поместить во временную таблицу РесурсыАнализаТЖ шаблоны поиска используемых
// ресурсов
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура СоздатьШаблоныРесурсов(Запрос, ТипСУБД)
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	""%"" + РесурсыАнализаТЖ.ИмяРесурса + ""[ ," + СУБД.ПолучитьПереводСтроки(ТипСУБД) + "]%"" КАК ИмяРесурса
		|	
		|ПОМЕСТИТЬ РесурсыАнализаТЖ
		|
		|ИЗ
		|	РегистрСведений.РесурсыАнализаТЖ КАК РесурсыАнализаТЖ
		|ГДЕ
		|	РесурсыАнализаТЖ.Регистратор = &ДокументЗамер И
		|	РесурсыАнализаТЖ.Период = &Период
		|ИНДЕКСИРОВАТЬ ПО
		|	ИмяРесурса";
	Запрос.Выполнить();
	
КонецПроцедуры // СоздатьШаблоныРесурсов()

// Поместить во временную таблицу НеобходимыеСобытияТЖ только те события
// технологического журнала, которые будут использоваться при анализе
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура НайтиИспользуемыеСобытия(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТехнологическийЖурнал.connectID КАК connectID,
	               |	ТехнологическийЖурнал.МоментВремени КАК МоментВремени,
	               |	ВЫБОР
	               |		КОГДА ТехнологическийЖурнал.Событие = &СобытиеSdbl
	               |				И ТехнологическийЖурнал.Func ПОДОБНО &НачалоТранзакции
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК НачалоТранзакции
	               |ПОМЕСТИТЬ НеобходимыеСобытияТЖ
	               |ИЗ
	               |	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РесурсыАнализаТЖ КАК РесурсыАнализаТЖ
	               |		ПО (ТехнологическийЖурнал.Событие = &СобытиеСУБД
	               |					И (НЕ ТехнологическийЖурнал.lkaid ПОДОБНО """"
	               |						ИЛИ ТехнологическийЖурнал.lkp = 1
	               |						ИЛИ ТехнологическийЖурнал.Sql ПОДОБНО РесурсыАнализаТЖ.ИмяРесурса)
	               |				ИЛИ ТехнологическийЖурнал.Событие = &СобытиеSdbl
	               |					И ТехнологическийЖурнал.Func ПОДОБНО &НачалоТранзакции)
	               |			И (ТехнологическийЖурнал.Регистратор = &ДокументЗамер)
	               |			И (ТехнологическийЖурнал.Период = &Период)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТехнологическийЖурнал.connectID,
	               |	ТехнологическийЖурнал.МоментВремени";
	Запрос.Выполнить();
	
КонецПроцедуры // НайтиИспользуемыеСобытия()

// Заполнить регистр сведений ВиновникиБлокировок записями о соответствии запросов
// и свойств lkaid
//
Процедура НайтиВиновниковБлокировок(Запрос, ДокументЗамер)
	
	// Удалить старые записи
	Набор = РегистрыСведений.ВиновникиБлокировок.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ДокументЗамер);
	Набор.Записать();
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТехнологическийЖурнал.connectID КАК НомерСоединения,
		|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени,
		|	ТехнологическийЖурнал.lkaid КАК lkaid
		|ИЗ
		|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|ГДЕ
		|	ТехнологическийЖурнал.Регистратор = &ДокументЗамер
		|	И ТехнологическийЖурнал.Период = &Период
		|	И ТехнологическийЖурнал.Событие = &СобытиеСУБД
		|	И НЕ lkaid ПОДОБНО """"";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		lkaids = ОбщегоНазначенияКлиентСервер.РазделитьСтроку(Выборка.lkaid, ",");
		Всего = lkaids.Количество() - 1;
		
		Для Сч = 0 По Всего Цикл
			СтрокаНабора = Набор.Добавить();
			СтрокаНабора.Период = ДокументЗамер.Дата;
			СтрокаНабора.Владелец = ДокументЗамер;
			СтрокаНабора.НомерСоединения = Выборка.НомерСоединения;
			СтрокаНабора.МоментВремени = Выборка.МоментВремени;
			СтрокаНабора.НомерВСписке = Сч;
			СтрокаНабора.lkaid = Число(lkaids[Сч]);
			
			Если Набор.Количество() = 1000 Тогда
				Набор.Записать(Ложь);
				Набор.Очистить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Набор.Записать(Ложь);
	
КонецПроцедуры // НайтиВиновниковБлокировок()

// Поместить во временную таблицу УпрощенныйТехнологическийЖурнал содержимое
// таблицы НеобходимыеСобытияТЖ и добавить к ней все свойства событий
// из полного технологического журнала
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ДополнитьОписаниеИспользуемыхСобытий(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТехнологическийЖурнал.*,
		|	НеобходимыеСобытияТЖ.НачалоТранзакции КАК НачалоТранзакции
		|
		|ПОМЕСТИТЬ УпрощенныйТехнологическийЖурнал
		|
		|ИЗ
		|	НеобходимыеСобытияТЖ КАК НеобходимыеСобытияТЖ
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	ПО (ТехнологическийЖурнал.connectID = НеобходимыеСобытияТЖ.connectID)
		|		И (ТехнологическийЖурнал.МоментВремени = НеобходимыеСобытияТЖ.МоментВремени)
		|		И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
		|		И ТехнологическийЖурнал.Период = &Период
		|		
		|ИНДЕКСИРОВАТЬ ПО
		|	ТехнологическийЖурнал.connectID,
		|	ТехнологическийЖурнал.МоментВремени";
	Запрос.Выполнить();
	
КонецПроцедуры // ДополнитьОписаниеИспользуемыхСобытий()

// Поместить во временную таблицу ПолныйИсточникАнализаТЖ источник анализа
// дополненный свойствами событий технологического журнала
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура СоздатьИсточникАнализаСПолнымОписанием(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ИсточникАнализаТЖ.*,
		|	ТехнологическийЖурнал.*
		|
		|ПОМЕСТИТЬ ПолныйИсточникАнализаТЖ
		|
		|ИЗ
		|	РегистрСведений.ИсточникиАнализаТЖ КАК ИсточникАнализаТЖ
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ УпрощенныйТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	ПО ТехнологическийЖурнал.connectID = ИсточникАнализаТЖ.СоединениеЖертвы
		|		И ТехнологическийЖурнал.МоментВремени = ИсточникАнализаТЖ.МоментВремениЖертвы
		|ГДЕ
		|	ИсточникАнализаТЖ.Период = &Период И
		|	ИсточникАнализаТЖ.Регистратор = &ДокументЗамер
		|		
		|ИНДЕКСИРОВАТЬ ПО
		|	ТехнологическийЖурнал.connectID,
		|	ТехнологическийЖурнал.МоментВремени,
		|	ИсточникАнализаТЖ.НомерВзаимоблокировки,
		|	ИсточникАнализаТЖ.НомерБлокировки";
	Запрос.Выполнить();
	
КонецПроцедуры // СоздатьИсточникАнализаСПолнымОписанием()

// Поместить во временную таблицу БлокирующаяТранзакция моменты времени и
// соединения в которых выполняется блокирующая транзакция для анализа
// ожиданий на блокировках
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьОписаниеБлокирующейТранзакцииДляОжиданий(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ИсточникАнализаТЖ.СоединениеЖертвы КАК СоединениеЖертвы,
		|	ИсточникАнализаТЖ.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|	ИсточникАнализаТЖ.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
		|	ИсточникАнализаТЖ.НомерБлокировки КАК НомерБлокировки,
		|	ИсточникАнализаТЖ.МоментВремениЖертвы - ИсточникАнализаТЖ.Продолжительность * 10 КАК МоментВремениНачалаЖертвы,
		|	ВиновникиБлокировок.НомерСоединения КАК БлокирующееСоединение,
		|	ВиновникиБлокировок.МоментВремени КАК МоментВремени
		|	
		|ПОМЕСТИТЬ БлокирующаяТранзакция
		|	
		|ИЗ
		|	ПолныйИсточникАнализаТЖ КАК ИсточникАнализаТЖ
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВиновникиБлокировок КАК ВиновникиБлокировок
		|		ПО ИсточникАнализаТЖ.lksrc = ВиновникиБлокировок.НомерСоединения
		|		 И ИсточникАнализаТЖ.lkpid = ВиновникиБлокировок.lkaid
		|		 И ВиновникиБлокировок.Регистратор = &ДокументЗамер
		|		 И ВиновникиБлокировок.Период = &Период
		|		 И ВиновникиБлокировок.МоментВремени В (
		|
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				Виновники.МоментВремени КАК МоментВремени
		|			ИЗ
		|				РегистрСведений.ВиновникиБлокировок КАК Виновники
		|			ГДЕ
		|				Виновники.НомерСоединения = ИсточникАнализаТЖ.lksrc И
		|				Виновники.Период = &Период И
		|				Виновники.Регистратор = &ДокументЗамер И
		|				Виновники.lkaid = ИсточникАнализаТЖ.lkpid
		|			УПОРЯДОЧИТЬ ПО
		|				Виновники.МоментВремени УБЫВ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИсточникАнализаТЖ.СоединениеЖертвы,
		|	ИсточникАнализаТЖ.МоментВремениЖертвы,
		|	ИсточникАнализаТЖ.НомерВзаимоблокировки,
		|	ИсточникАнализаТЖ.НомерБлокировки";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьОписаниеБлокирующейТранзакцииДляОжиданий()

// Поместить во временную таблицу БлокирующаяТранзакция моменты времени и
// соединения в которых выполняется блокирующая транзакция для анализа
// взаимоблокировок
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьОписаниеБлокирующейТранзакцииДляВзаимоблокировок(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ИсточникАнализаТЖ.СоединениеЖертвы КАК СоединениеЖертвы,
		|	ИсточникАнализаТЖ.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|	ИсточникАнализаТЖ.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
		|	ИсточникАнализаТЖ.НомерБлокировки КАК НомерБлокировки,
		|	ИсточникАнализаТЖ.МоментВремениЖертвы - ИсточникАнализаТЖ.Продолжительность * 10 КАК МоментВремениНачалаЖертвы,
		|	ТехнологическийЖурнал.connectID КАК БлокирующееСоединение,
		|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени
		|
		|ПОМЕСТИТЬ БлокирующаяТранзакция
		|	
		|ИЗ
		|	ПолныйИсточникАнализаТЖ КАК ИсточникАнализаТЖ
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ УпрощенныйТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	ПО ИсточникАнализаТЖ.БлокирующийПроцесс = ТехнологическийЖурнал.connectID
		|		И ТехнологическийЖурнал.МоментВремени В (
		|		
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				ТехнологическийЖурнал.МоментВремени
		|			ИЗ
		|				УпрощенныйТехнологическийЖурнал КАК ТехнологическийЖурнал
		|			ГДЕ
		|				ИсточникАнализаТЖ.БлокирующийПроцесс = ТехнологическийЖурнал.connectID
		|				И ТехнологическийЖурнал.МоментВремени - ТехнологическийЖурнал.Продолжительность * 10 <= ИсточникАнализаТЖ.МоментВремениЖертвы
		|			УПОРЯДОЧИТЬ ПО
		|				ТехнологическийЖурнал.МоментВремени УБЫВ
		|		)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СоединениеЖертвы,
		|	МоментВремениЖертвы,
		|	НомерВзаимоблокировки,
		|	НомерБлокировки";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьОписаниеБлокирующейТранзакцииДляВзаимоблокировок()

// Поместить во временную таблицу НачалоГраницыБлокировки верхнюю границу
// блокирующих запросов
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьНачалоГраницыБлокировки(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	БлокирующаяТранзакция.СоединениеЖертвы КАК СоединениеЖертвы,
		|	БлокирующаяТранзакция.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|	БлокирующаяТранзакция.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
		|	БлокирующаяТранзакция.НомерБлокировки КАК НомерБлокировки,
		|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени
		|	
		|ПОМЕСТИТЬ НачалоГраницыБлокировки
		|	
		|ИЗ
		|	БлокирующаяТранзакция
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ УпрощенныйТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	ПО 	ТехнологическийЖурнал.connectID = БлокирующаяТранзакция.БлокирующееСоединение
		|		И ТехнологическийЖурнал.МоментВремени В (
		|		
		|			ВЫБРАТЬ ПЕРВЫЕ 1
		|				УпрощенныйТЖ.МоментВремени
		|			ИЗ
		|				УпрощенныйТехнологическийЖурнал КАК УпрощенныйТЖ
		|			ГДЕ
		|				УпрощенныйТЖ.connectID = БлокирующаяТранзакция.БлокирующееСоединение
		|				И УпрощенныйТЖ.НачалоТранзакции = ИСТИНА
		|				И УпрощенныйТЖ.МоментВремени < БлокирующаяТранзакция.МоментВремени
		|				И УпрощенныйТЖ.МоментВремени < БлокирующаяТранзакция.МоментВремениНачалаЖертвы
		|			УПОРЯДОЧИТЬ ПО
		|				УпрощенныйТЖ.МоментВремени УБЫВ
		|		)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БлокирующаяТранзакция.СоединениеЖертвы,
		|	БлокирующаяТранзакция.МоментВремениЖертвы,
		|	БлокирующаяТранзакция.НомерВзаимоблокировки,
		|	БлокирующаяТранзакция.НомерБлокировки";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьНачалоГраницыБлокировки()

// Поместить во временную таблицу КонецГраницыБлокировки нижнюю границу
// блокирующих запросов для анализа ожиданий на блокировках
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьКонецГраницыБлокировкиДляОжиданий(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПоследнийБлокирующий.СоединениеЖертвы КАК СоединениеЖертвы,
		|	ПоследнийБлокирующий.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|	ПоследнийБлокирующий.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
		|	ПоследнийБлокирующий.НомерБлокировки КАК НомерБлокировки,
		|	ПоследнийБлокирующий.БлокирующееСоединение КАК БлокирующееСоединение,
		|	ВЫБОР
		|		КОГДА ПоследнийБлокирующий.МоментВремени > БлокирующаяТранзакция.МоментВремени ТОГДА БлокирующаяТранзакция.МоментВремени
		|		ИНАЧЕ ПоследнийБлокирующий.МоментВремени
		|	КОНЕЦ КАК МоментВремени
		|
		|ПОМЕСТИТЬ КонецГраницыБлокировки
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоследнийВиновный.СоединениеЖертвы КАК СоединениеЖертвы,
		|		ПоследнийВиновный.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|		ПоследнийВиновный.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
		|		ПоследнийВиновный.НомерБлокировки КАК НомерБлокировки,
		|		ПоследнийВиновный.БлокирующееСоединение КАК БлокирующееСоединение,
		|		ВЫБОР
		|			КОГДА ПоследнийВиновный.МоментВремениПоследнегоВиновного - ТехнологическийЖурнал.Продолжительность * 10 < ПоследнийВиновный.МоментВремениЖертвы
		|				ТОГДА ПоследнийВиновный.МоментВремениПоследнегоВиновного
		|			ИНАЧЕ ПоследнийВиновный.МоментВремениЖертвы
		|		КОНЕЦ КАК МоментВремени
		|	ИЗ
		|		(ВЫБРАТЬ
		|			БлокирующаяТранзакция.СоединениеЖертвы КАК СоединениеЖертвы,
		|			БлокирующаяТранзакция.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|			БлокирующаяТранзакция.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
		|			БлокирующаяТранзакция.НомерБлокировки КАК НомерБлокировки,
		|			БлокирующаяТранзакция.БлокирующееСоединение КАК БлокирующееСоединение,
		|			ТехнологическийЖурнал.МоментВремени КАК МоментВремениПоследнегоВиновного
		|		ИЗ
		|			БлокирующаяТранзакция КАК БлокирующаяТранзакция
		|			
		|				ЛЕВОЕ СОЕДИНЕНИЕ УпрощенныйТехнологическийЖурнал КАК ТехнологическийЖурнал
		|				ПО ТехнологическийЖурнал.connectID = БлокирующаяТранзакция.БлокирующееСоединение
		|					И ТехнологическийЖурнал.МоментВремени В (
		|					
		|						ВЫБРАТЬ ПЕРВЫЕ 1
		|							ТехнологическийЖурнал.МоментВремени
		|						ИЗ
		|							УпрощенныйТехнологическийЖурнал КАК ТехнологическийЖурнал
		|						ГДЕ
		|							ТехнологическийЖурнал.connectID = БлокирующаяТранзакция.БлокирующееСоединение
		|							И ТехнологическийЖурнал.МоментВремени >= БлокирующаяТранзакция.МоментВремениЖертвы
		|						УПОРЯДОЧИТЬ ПО
		|							МоментВремени
		|					)) КАК ПоследнийВиновный
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ УпрощенныйТехнологическийЖурнал КАК ТехнологическийЖурнал
		|			ПО (ТехнологическийЖурнал.connectID = ПоследнийВиновный.БлокирующееСоединение)
		|				И (ТехнологическийЖурнал.МоментВремени = ПоследнийВиновный.МоментВремениПоследнегоВиновного)) КАК ПоследнийБлокирующий
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ БлокирующаяТранзакция КАК БлокирующаяТранзакция
		|		ПО (БлокирующаяТранзакция.СоединениеЖертвы = ПоследнийБлокирующий.СоединениеЖертвы)
		|			И (БлокирующаяТранзакция.МоментВремениЖертвы = ПоследнийБлокирующий.МоментВремениЖертвы)
		|			И (БлокирующаяТранзакция.НомерБлокировки = ПоследнийБлокирующий.НомерБлокировки)
		|			И (БлокирующаяТранзакция.НомерВзаимоблокировки = ПоследнийБлокирующий.НомерВзаимоблокировки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПоследнийБлокирующий.СоединениеЖертвы,
		|	ПоследнийБлокирующий.МоментВремениЖертвы";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьКонецГраницыБлокировкиДляОжиданий()

// Поместить во временную таблицу КонецГраницыБлокировки нижнюю границу
// блокирующих запросов для анализа взаимоблокировок
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьКонецГраницыБлокировкиДляВзаимоблокировок(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	БлокирующаяТранзакция.СоединениеЖертвы КАК СоединениеЖертвы,
		|	БлокирующаяТранзакция.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|	БлокирующаяТранзакция.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
		|	БлокирующаяТранзакция.НомерБлокировки КАК НомерБлокировки,
		|	БлокирующаяТранзакция.БлокирующееСоединение КАК БлокирующееСоединение,
		|	БлокирующаяТранзакция.МоментВремени КАК МоментВремени
		|	
		|ПОМЕСТИТЬ КонецГраницыБлокировки
		|	
		|ИЗ
		|	БлокирующаяТранзакция КАК БлокирующаяТранзакция
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БлокирующаяТранзакция.СоединениеЖертвы,
		|	БлокирующаяТранзакция.МоментВремениЖертвы";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьКонецГраницыБлокировкиДляВзаимоблокировок()

// Поместить во временную таблицу РезультатПоискаЗапросов все блокирующие
// запросы
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ОпределитьБлокирующиеЗапросы(Запрос, ТипСУБД)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	КонецГраницыБлокировки.СоединениеЖертвы КАК СоединениеЖертвы,
		|	КонецГраницыБлокировки.МоментВремениЖертвы КАК МоментВремениЖертвы,
		|	КонецГраницыБлокировки.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
		|	КонецГраницыБлокировки.НомерБлокировки КАК НомерБлокировки,
		|	ТехнологическийЖурнал.МоментВремени КАК МоментВремениВиновника,
		|	ТехнологическийЖурнал.connectID КАК СоединениеВиновника,
		|	РесурсыАнализаТЖ.ИмяРесурса КАК ИмяРесурса
		|	
		|ПОМЕСТИТЬ РезультатПоискаЗапросов
		|	
		|ИЗ
		|	НачалоГраницыБлокировки КАК НачалоГраницыБлокировки
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонецГраницыБлокировки КАК КонецГраницыБлокировки
		|	ПО (НачалоГраницыБлокировки.СоединениеЖертвы = КонецГраницыБлокировки.СоединениеЖертвы)
		|		И (НачалоГраницыБлокировки.МоментВремениЖертвы = КонецГраницыБлокировки.МоментВремениЖертвы)
		|		И (НачалоГраницыБлокировки.НомерВзаимоблокировки = КонецГраницыБлокировки.НомерВзаимоблокировки)
		|		И (НачалоГраницыБлокировки.НомерБлокировки = КонецГраницыБлокировки.НомерБлокировки)
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ УпрощенныйТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	ПО (ТехнологическийЖурнал.connectID = КонецГраницыБлокировки.БлокирующееСоединение)
		|		И (ТехнологическийЖурнал.МоментВремени <= КонецГраницыБлокировки.МоментВремени)
		|		И (ТехнологическийЖурнал.МоментВремени >= НачалоГраницыБлокировки.МоментВремени)
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РесурсыАнализаТЖ КАК РесурсыАнализаТЖ
		|	ПО РесурсыАнализаТЖ.СоединениеЖертвы = КонецГраницыБлокировки.СоединениеЖертвы
		|		И РесурсыАнализаТЖ.Регистратор = &ДокументЗамер
		|		И РесурсыАнализаТЖ.Период = &Период
		|		И РесурсыАнализаТЖ.МоментВремениЖертвы = КонецГраницыБлокировки.МоментВремениЖертвы
		|		И РесурсыАнализаТЖ.НомерВзаимоблокировки = КонецГраницыБлокировки.НомерВзаимоблокировки 
		|		И РесурсыАнализаТЖ.НомерБлокировки = КонецГраницыБлокировки.НомерБлокировки 
		|		И (ТехнологическийЖурнал.Sql ПОДОБНО ""%"" + РесурсыАнализаТЖ.ИмяРесурса + ""[ ," + Символы.ПС + "," + Символы.ВК + "]%"")
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	СоединениеЖертвы,
		|	МоментВремениЖертвы,
		|	МоментВремениВиновника,
		|	СоединениеВиновника";
	Запрос.Выполнить();
	
КонецПроцедуры // ОпределитьБлокирующиеЗапросы()

// Получить времена запросов жертв и виновников
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьВременаЗапросовЖертвИВиновников(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ИсточникАнализаТЖ.СоединениеЖертвы КАК НомерСоединения,
		|	ИсточникАнализаТЖ.МоментВремениЖертвы КАК МоментВремени
		|
		|ПОМЕСТИТЬ
		|	ВременаЗапросов
		|
		|ИЗ
		|	РегистрСведений.ИсточникиАнализаТЖ КАК ИсточникАнализаТЖ
		|ГДЕ
		|	ИсточникАнализаТЖ.Период = &Период И
		|	ИсточникАнализаТЖ.Регистратор = &ДокументЗамер
		|	
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РезультатАнализаТЖ.СоединениеВиновника КАК НомерСоединения,
		|	РезультатАнализаТЖ.МоментВремениВиновника КАК МоментВремени
		|
		|ИЗ
		|	РезультатПоискаЗапросов КАК РезультатАнализаТЖ
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСоединения,
		|	МоментВремени";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьВременаЗапросовЖертвИВиновников()

// Получить времена контекстов для дополнения описания запросов
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьВременаВсехКонтекстов(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТехнологическийЖурнал.connectID КАК НомерСоединения,
		|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени
		|	
		|ПОМЕСТИТЬ
		|	ВременаВсехКонтекстов
		|	
		|ИЗ
		|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	
		|ГДЕ
		|	ТехнологическийЖурнал.Событие = &СобытиеКонтекст И
		|	ТехнологическийЖурнал.Период = &Период И
		|	ТехнологическийЖурнал.Регистратор = &ДокументЗамер
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСоединения,
		|	МоментВремени";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьВременаВсехКонтекстов()

// Получить времена контекстов соответствующих запросам
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьВременаКонтекстов(Запрос)
	
	ПолучитьВременаВсехКонтекстов(Запрос);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВременаЗапросов.НомерСоединения КАК НомерСоединения,
		|	ВременаЗапросов.МоментВремени КАК МоментВремени,
		|	МИНИМУМ(КонтекстыЗапросов.МоментВремени) КАК ВремяКонтекста
		|	
		|ПОМЕСТИТЬ
		|	ВременаКонтекстов
		|	
		|ИЗ
		|	ВременаЗапросов
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременаВсехКонтекстов КАК КонтекстыЗапросов
		|	ПО КонтекстыЗапросов.НомерСоединения = ВременаЗапросов.НомерСоединения
		|		И КонтекстыЗапросов.МоментВремени >= ВременаЗапросов.МоментВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременаЗапросов.НомерСоединения,
		|	ВременаЗапросов.МоментВремени
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСоединения,
		|	МоментВремени";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьВременаКонтекстов()

// Получить времена Sdbl для дополнения описания запросов
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьВременаВсехSdbl(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТехнологическийЖурнал.connectID КАК НомерСоединения,
		|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени,
		|	ТехнологическийЖурнал.МоментВремени - ТехнологическийЖурнал.Продолжительность * 10 КАК МоментВремениНачала
		|	
		|ПОМЕСТИТЬ
		|	ВременаВсехSDBL
		|	
		|ИЗ
		|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	
		|ГДЕ
		|	ТехнологическийЖурнал.Событие = &СобытиеSdbl
		|	И ТехнологическийЖурнал.Период = &Период
		|	И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
		|	И (НЕ ТехнологическийЖурнал.Sdbl ПОДОБНО """"
		|		Или ТехнологическийЖурнал.Func ПОДОБНО ""InsertRecords"")
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСоединения,
		|	МоментВремени,
		|	МоментВремениНачала";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьВременаВсехSdbl()

// Получить времена Sdbl соответствующих запросов
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьВременаSdbl(Запрос)
	
	ПолучитьВременаВсехSdbl(Запрос);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВременаЗапросов.НомерСоединения КАК НомерСоединения,
		|	ВременаЗапросов.МоментВремени КАК МоментВремени,
		|	МИНИМУМ(ВременаВсехSDBL.МоментВремени) КАК ВремяSdbl
		|	
		|ПОМЕСТИТЬ
		|	ВременаSdbl
		|	
		|ИЗ
		|	ВременаЗапросов
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременаВсехSDBL
		|	ПО ВременаВсехSDBL.НомерСоединения = ВременаЗапросов.НомерСоединения
		|		И ВременаВсехSDBL.МоментВремени >= ВременаЗапросов.МоментВремени
		|		И ВременаВсехSDBL.МоментВремениНачала <= ВременаЗапросов.МоментВремени
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременаЗапросов.НомерСоединения,
		|	ВременаЗапросов.МоментВремени
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСоединения,
		|	МоментВремени";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьВременаSdbl()

// Поместить во временную таблицу РезультатАнализаОжиданий таблицу 
// РезультатПоискаЗапросов дополненную текстами запросов и контекстами
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ДополнитьЗапросыОписаниями(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПараметрыЖертвы.connectID КАК СоединениеЖертвы,
		|	ПараметрыЖертвы.МоментВремени КАК МоментВремениЖертвы,
		|	ПараметрыЖертвы.Продолжительность КАК ПродолжительностьЖертвы,
		|	ПараметрыЖертвы.ДатаВремяСобытия КАК ДатаВремяСобытияЖертвы,
		|	ПараметрыЖертвы.Sql КАК ЗапросЖертвы,
		|	ПараметрыЖертвы.planSQLText КАК ПланЖертвы,
		|	ПараметрыЖертвы.computerName КАК КомпьютерЖертвы,
		|	ПараметрыЖертвы.Usr КАК ИмяПользователяЖертвы,
		|	ПараметрыЖертвы.НомерСтроки КАК НомерСтрокиЖертвы,
		|	ПараметрыВиновника.МоментВремени КАК МоментВремениВиновника,
		|	ПараметрыВиновника.connectID КАК СоединениеВиновника,
		|	ПараметрыВиновника.Продолжительность КАК ПродолжительностьВиновника,
		|	ПараметрыВиновника.ДатаВремяСобытия КАК ДатаВремяСобытияВиновника,
		|	ПараметрыВиновника.Sql КАК ЗапросВиновника,
		|	ПараметрыВиновника.planSQLText КАК ПланВиновника,
		|	ПараметрыВиновника.computerName КАК КомпьютерВиновника,
		|	ПараметрыВиновника.Usr КАК ИмяПользователяВиновника,
		|	ПараметрыВиновника.НомерСтроки КАК НомерСтрокиВиновника,
		|	РезультатАнализаТЖ.ИмяРесурса КАК ИмяРесурса,
		|	РезультатАнализаТЖ.НомерВзаимоблокировки КАК НомерВзаимоблокировки,
		|	РезультатАнализаТЖ.НомерБлокировки КАК НомерБлокировки,
		|	ТехнологическийЖурналSdblЖертв.Sdbl КАК SdblЗапросЖертвы,
		|	ТехнологическийЖурналSdblЖертв.Func КАК SdblФункцияЖертвы,
		|	ТехнологическийЖурналSdblЖертв.tableName КАК SdblИмяТаблицыЖертвы,
		|	ТехнологическийЖурналКонтекстовЖертв.Context КАК КонтекстКлиентаЖертвы,
		|	ПараметрыЖертвы.Context КАК КонтекстСервераЖертвы,
		|	ТехнологическийЖурналSdblВиновников.Sdbl КАК SdblЗапросВиновника,
		|	ТехнологическийЖурналSdblВиновников.Func КАК SdblФункцияВиновника,
		|	ТехнологическийЖурналSdblВиновников.tableName КАК SdblИмяТаблицыВиновника,
		|	ТехнологическийЖурналКонтекстовВиновников.Context КАК КонтекстКлиентаВиновника,
		|	ПараметрыВиновника.Context КАК КонтекстСервераВиновника
		|	
		|ПОМЕСТИТЬ РезультатАнализаОжиданий
		|	
		|ИЗ
		|	РезультатПоискаЗапросов КАК РезультатАнализаТЖ
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ УпрощенныйТехнологическийЖурнал КАК ПараметрыЖертвы
		|		ПО РезультатАнализаТЖ.СоединениеЖертвы = ПараметрыЖертвы.connectID
		|			И РезультатАнализаТЖ.МоментВремениЖертвы = ПараметрыЖертвы.МоментВремени
		|			И (ПараметрыЖертвы.Событие = &СобытиеСУБД)
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременаSdbl КАК ВременаSdblЖертв
		|		ПО ВременаSdblЖертв.НомерСоединения = ПараметрыЖертвы.connectID
		|			И ВременаSdblЖертв.МоментВремени = ПараметрыЖертвы.МоментВремени
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурналSdblЖертв
		|		ПО ВременаSdblЖертв.НомерСоединения = ТехнологическийЖурналSdblЖертв.connectID
		|			И ВременаSdblЖертв.ВремяSdbl = ТехнологическийЖурналSdblЖертв.МоментВремени
		|			И ТехнологическийЖурналSdblЖертв.Период = &Период
		|			И ТехнологическийЖурналSdblЖертв.Регистратор = &ДокументЗамер
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременаКонтекстов КАК ВременаКонтекстовЖертв
		|		ПО ВременаКонтекстовЖертв.НомерСоединения = ПараметрыЖертвы.connectID
		|			И ВременаКонтекстовЖертв.МоментВремени = ПараметрыЖертвы.МоментВремени
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурналКонтекстовЖертв
		|		ПО ВременаКонтекстовЖертв.НомерСоединения = ТехнологическийЖурналКонтекстовЖертв.connectID
		|			И ВременаКонтекстовЖертв.ВремяКонтекста = ТехнологическийЖурналКонтекстовЖертв.МоментВремени
		|			И ТехнологическийЖурналКонтекстовЖертв.Период = &Период
		|			И ТехнологическийЖурналКонтекстовЖертв.Регистратор = &ДокументЗамер
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ УпрощенныйТехнологическийЖурнал КАК ПараметрыВиновника
		|		ПО РезультатАнализаТЖ.СоединениеВиновника = ПараметрыВиновника.connectID
		|			И РезультатАнализаТЖ.МоментВремениВиновника = ПараметрыВиновника.МоментВремени
		|			И (ПараметрыВиновника.Событие = &СобытиеСУБД)
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременаSdbl КАК ВременаSdblВиновников
		|		ПО ВременаSdblВиновников.НомерСоединения = ПараметрыВиновника.connectID
		|			И ВременаSdblВиновников.МоментВремени = ПараметрыВиновника.МоментВремени
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурналSdblВиновников
		|		ПО ВременаSdblВиновников.НомерСоединения = ТехнологическийЖурналSdblВиновников.connectID
		|			И ВременаSdblВиновников.ВремяSdbl = ТехнологическийЖурналSdblВиновников.МоментВремени
		|			И ТехнологическийЖурналSdblВиновников.Период = &Период
		|			И ТехнологическийЖурналSdblВиновников.Регистратор = &ДокументЗамер
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременаКонтекстов КАК ВременаКонтекстовВиновников
		|		ПО ВременаКонтекстовВиновников.НомерСоединения = ПараметрыВиновника.connectID
		|			И ВременаКонтекстовВиновников.МоментВремени = ПараметрыВиновника.МоментВремени
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурналКонтекстовВиновников
		|		ПО ВременаКонтекстовВиновников.НомерСоединения = ТехнологическийЖурналКонтекстовВиновников.connectID
		|			И ТехнологическийЖурналКонтекстовВиновников.Период = &Период
		|			И ТехнологическийЖурналКонтекстовВиновников.Регистратор = &ДокументЗамер
		|			И ВременаКонтекстовВиновников.ВремяКонтекста = ТехнологическийЖурналКонтекстовВиновников.МоментВремени";
	Запрос.Выполнить();
	
КонецПроцедуры // ДополнитьЗапросыОписаниями()

// Получить времена запросов для анализа запросов
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьВременаЗапросов(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТехнологическийЖурнал.connectID КАК НомерСоединения,
		|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени
		|
		|ПОМЕСТИТЬ
		|	ВременаЗапросов
		|
		|ИЗ
		|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	
		|ГДЕ
		|	ТехнологическийЖурнал.Событие = &СобытиеСУБД И
		|	ТехнологическийЖурнал.Период = &Период И
		|	ТехнологическийЖурнал.Регистратор = &ДокументЗамер
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСоединения,
		|	МоментВремени";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьВременаЗапросов()

// Получить времена вызовов для анализа выполнений серверных вызовов
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Процедура ПолучитьВременаСерверныхВызовов(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТехнологическийЖурнал.connectID КАК НомерСоединения,
		|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени
		|
		|ПОМЕСТИТЬ
		|	ВременаЗапросов
		|
		|ИЗ
		|	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	
		|ГДЕ
		|	ТехнологическийЖурнал.Событие = &СобытиеCALL И
		|	ТехнологическийЖурнал.Период = &Период И
		|	ТехнологическийЖурнал.Регистратор = &ДокументЗамер
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСоединения,
		|	МоментВремени";
	Запрос.Выполнить();
	
КонецПроцедуры // ПолучитьВременаСерверныхВызовов()

// Объединить результаты анализа запросов
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Функция ОбъединитьРезультатыАнализаЗапросов(Запрос)
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТехнологическийЖурнал.connectID КАК НомерСоединения,
		|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени,
		|	ТехнологическийЖурнал.ДатаВремяСобытия КАК ДатаВремяСобытия,
		|	ТехнологическийЖурнал.Продолжительность / 1000 КАК ВремяВыполненияМс,
		|	ТехнологическийЖурнал.computerName КАК Компьютер,
		|	ТехнологическийЖурнал.Usr КАК Пользователь,
		|	ТехнологическийЖурнал.Sql КАК Запрос,
		|	ТехнологическийЖурнал.planSQLText КАК План,
		|	ТехнологическийЖурнал.Context КАК КонтекстСервера,
		|	Контексты.Контекст КАК КонтекстКлиента,
		|	SdblЗапросы.SdblЗапрос КАК SdblЗапрос,
		|	SdblЗапросы.SdblФункция КАК SdblФункция,
		|	SdblЗапросы.SdblИмяТаблицы КАК SdblИмяТаблицы
		|	
		|ИЗ
		|	ВременаЗапросов
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ВременаSdbl.НомерСоединения КАК НомерСоединения,
		|			ВременаSdbl.МоментВремени КАК МоментВремени,
		|			ВременаSdbl.ВремяSdbl,
		|			ТехнологическийЖурнал.Sdbl КАК SdblЗапрос,
		|			ТехнологическийЖурнал.Func КАК SdblФункция,
		|			ТехнологическийЖурнал.TableName КАК SdblИмяТаблицы
		|		
		|		ИЗ
		|			ВременаSdbl
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|			ПО ВременаSdbl.НомерСоединения = ТехнологическийЖурнал.connectID
		|				И ТехнологическийЖурнал.Период = &Период
		|				И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
		|				И ВременаSdbl.ВремяSdbl = ТехнологическийЖурнал.МоментВремени
		|	) КАК SdblЗапросы
		|	ПО ВременаЗапросов.НомерСоединения = SdblЗапросы.НомерСоединения
		|		И ВременаЗапросов.МоментВремени = SdblЗапросы.МоментВремени
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			ВременаКонтекстов.НомерСоединения КАК НомерСоединения,
		|			ВременаКонтекстов.МоментВремени КАК МоментВремени,
		|			ТехнологическийЖурнал.Context КАК Контекст
		|		
		|		ИЗ
		|			ВременаКонтекстов
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|			ПО ВременаКонтекстов.НомерСоединения = ТехнологическийЖурнал.connectID
		|				И ТехнологическийЖурнал.Период = &Период
		|				И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
		|				И ВременаКонтекстов.ВремяКонтекста = ТехнологическийЖурнал.МоментВремени
		|	) КАК Контексты
		|	ПО ВременаЗапросов.НомерСоединения = Контексты.НомерСоединения
		|		И ВременаЗапросов.МоментВремени = Контексты.МоментВремени
		|		
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
		|	ПО ВременаЗапросов.НомерСоединения = ТехнологическийЖурнал.connectID
		|		И ТехнологическийЖурнал.Период = &Период
		|		И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
		|		И ВременаЗапросов.МоментВремени = ТехнологическийЖурнал.МоментВремени";
	Возврат Запрос.Выполнить();
	
КонецФункции // ОбъединитьРезультатыАнализаЗапросов()

// Объединить результаты анализа серверных вызовов
//
// Параметры:
//  Запрос - Запрос в котором установленны все необходимые параметры и
//           присутствует менеджер временных таблиц для возможности
//           выполнения запросов этой процедуры
//
Функция ОбъединитьРезультатыАнализаСерверныхВызовов(Запрос)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехнологическийЖурнал.connectID КАК НомерСоединения,
	|	ТехнологическийЖурнал.МоментВремени КАК МоментВремени,
	|	ТехнологическийЖурнал.ДатаВремяСобытия КАК ДатаВремяСобытия,
	|	ТехнологическийЖурнал.Продолжительность / 1000 КАК ВремяВыполненияМс,
	|	ТехнологическийЖурнал.computerName КАК Компьютер,
	|	ТехнологическийЖурнал.Usr КАК Пользователь,
	|	ТехнологическийЖурнал.Memory КАК ОбъемНеосвобожденнойПамяти,
	|	ТехнологическийЖурнал.MemoryPeak КАК МаксимальныйРасходПамяти,
	|	ТехнологическийЖурнал.InBytes КАК СчитаноДанных,
	|	ТехнологическийЖурнал.OutBytes КАК ЗаписаноДанных,
	|	ТехнологическийЖурнал.Context КАК КонтекстСервера,
	|	Контексты.Контекст КАК КонтекстКлиента
	|ИЗ
	|	ВременаЗапросов КАК ВременаСерверныхВызовов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВременаКонтекстов.НомерСоединения КАК НомерСоединения,
	|			ВременаКонтекстов.МоментВремени КАК МоментВремени,
	|			ТехнологическийЖурнал.Context КАК Контекст
	|		ИЗ
	|			ВременаКонтекстов КАК ВременаКонтекстов
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|				ПО ВременаКонтекстов.НомерСоединения = ТехнологическийЖурнал.connectID
	|					И (ТехнологическийЖурнал.Период = &Период)
	|					И (ТехнологическийЖурнал.Регистратор = &ДокументЗамер)
	|					И ВременаКонтекстов.ВремяКонтекста = ТехнологическийЖурнал.МоментВремени) КАК Контексты
	|		ПО ВременаСерверныхВызовов.НомерСоединения = Контексты.НомерСоединения
	|			И ВременаСерверныхВызовов.МоментВремени = Контексты.МоментВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	|		ПО ВременаСерверныхВызовов.НомерСоединения = ТехнологическийЖурнал.connectID
	|			И (ТехнологическийЖурнал.Период = &Период)
	|			И (ТехнологическийЖурнал.Регистратор = &ДокументЗамер)
	|			И ВременаСерверныхВызовов.МоментВремени = ТехнологическийЖурнал.МоментВремени";
	Возврат Запрос.Выполнить();
	
КонецФункции // ОбъединитьРезультатыАнализаСерверныхВызовов()

// Очистить регистры исходных данных анализа технологического журнала
//
Функция ОчиститьИсходныеДанныеДляАнализа(ДокументЗамер) Экспорт
	
	ОтладкаКлиентСервер.Действие("ОчиститьИсходныеДанныеДляАнализа");
	
	ОчиститьРегистрИсточникАнализаТЖ(ДокументЗамер);
	ОчиститьРегистрРесурсыАнализаТЖ(ДокументЗамер);
	
	ОтладкаКлиентСервер.Результат("ОчиститьИсходныеДанныеДляАнализа");
	
КонецФункции // ОчиститьИсходныеДанныеДляАнализа()

// Очистить регистр исходных данных для анализа
//
Функция ОчиститьРегистрИсточникАнализаТЖ(ДокументЗамер)
	
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ИсточникиАнализаТЖ");
	СтрокаБлокировки.УстановитьЗначение("Владелец", ДокументЗамер);
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//Блокировка.Заблокировать();
	
	Набор = РегистрыСведений.ИсточникиАнализаТЖ.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ДокументЗамер);
	Набор.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
КонецФункции // ОчиститьРегистрИсточникАнализаТЖ()

// Очистить регистр исходных данных для анализа
//
Функция ОчиститьРегистрРесурсыАнализаТЖ(ДокументЗамер)
	
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.РесурсыАнализаТЖ");
	СтрокаБлокировки.УстановитьЗначение("Владелец", ДокументЗамер);
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//Блокировка.Заблокировать();
	
	Набор = РегистрыСведений.РесурсыАнализаТЖ.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ДокументЗамер);
	Набор.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
КонецФункции // ОчиститьРегистрРесурсыАнализаТЖ()


///////////////////////////////////////////////////////////////////////////////
// РЕГИСТР ТЕХНОЛОГИЧЕСКОГО ЖУРНАЛА

// Функция получает контекст по моменту времени и соединению.
// Вополняет поиск в регистре сведений ТехнологическийЖурнал, возвращает первый
// найденный контекст, до указанного момента времени.
//
// Параметры:
//  МоментВремени - Число, точный момент времени события в журнале.
//  ИДСоединения  - Число, идентификатор соединения с ИБ.
//
// Возвращаемое значение:
//  Строка - контекст события
//
Функция ПолучитьКонтекстЗапроса(МоментВремени, ИДСоединения, ДокументЗамер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТехнологическийЖурнал.Context КАК Контекст
	               |ИЗ
	               |	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	               |ГДЕ
	               |	ТехнологическийЖурнал.Событие = &Context
	               |	И ТехнологическийЖурнал.МоментВремени > &МоментВремени
	               |	И ТехнологическийЖурнал.connectID = &connectID
	               |	И ТехнологическийЖурнал.Период = &Период
	               |	И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ТехнологическийЖурнал.МоментВремени";
	
	Запрос.УстановитьПараметр("Context",       "Context");
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("connectID",     ИДСоединения);
	Запрос.УстановитьПараметр("ДокументЗамер", ДокументЗамер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контекст;
	Иначе
		Возврат "Контекст не найден";
	КонецЕсли;
	
КонецФункции // ПолучитьКонтекстЗапроса()

// Функция получает прикладной контекст по моменту времени и соединению.
// Вополняет поиск в регистре сведений ТехнологическийЖурнал, возвращает первый
// найденный контекст перед событием DBMSQL BEGIN TRANSACTION, до указанного момента времени.
//
// Параметры:
//  МоментВремени - Число, точный момент времени события в журнале.
//  ИДСоединения  - Число, идентификатор соединения с ИБ.
//
// Возвращаемое значение:
//  Строка - контекст события
//
Функция ПолучитьПрикладнойКонтекст(МоментВремени, ИДСоединения, ДокументЗамер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТехнологическийЖурнал.МоментВремени КАК МоментВремени
	               |ИЗ
	               |	РегистрСведений.ТехнологическийЖурнал КАК ТехнологическийЖурнал
	               |ГДЕ
	               |	ТехнологическийЖурнал.Событие = &DBMSSQL
	               |	И ТехнологическийЖурнал.МоментВремени < &МоментВремени
	               |	И ТехнологическийЖурнал.connectID = &connectID
	               |	И ТехнологическийЖурнал.Sql ПОДОБНО &BEGIN
	               |	И ТехнологическийЖурнал.Период = &Период
	               |	И ТехнологическийЖурнал.Регистратор = &ДокументЗамер
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("DBMSSQL",       "DBMSSQL");
	Запрос.УстановитьПараметр("BEGIN",         "BEGIN%");
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("connectID",     ИДСоединения);
	Запрос.УстановитьПараметр("ДокументЗамер", ДокументЗамер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат  ПолучитьКонтекстЗапроса(Выборка.МоментВремени, ИДСоединения, ДокументЗамер);
	Иначе
		Возврат "Не найден запрос прикладного контекста";
	КонецЕсли;
	
КонецФункции // ПолучитьПрикладнойКонтекст()

// Функция удаляет записи информационной базы из регистра сведений ТехнологическийЖурнал.
//
// Параметры:
//  ДокументЗамер - ДокументСсылка.Замер, владелец данных ТЖ
//
Процедура ОчиститьРегистрТехнологическийЖурнал(ДокументЗамер, НеУдалятьСлужебныеДанные) Экспорт
	
	Если НеУдалятьСлужебныеДанные Тогда
		Возврат;
	КонецЕсли;
	
	ОтладкаКлиентСервер.Действие("ОчиститьРегистрТехнологическийЖурнал");
	
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	СтрокаБлокировки = Блокировка.Добавить("РегистрСведений.ТехнологическийЖурнал");
	СтрокаБлокировки.УстановитьЗначение("Владелец", ДокументЗамер);
	СтрокаБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//Блокировка.Заблокировать();
	
	Набор = РегистрыСведений.ТехнологическийЖурнал.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ДокументЗамер);
	Набор.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
	ОтладкаКлиентСервер.Результат("ОчиститьРегистрТехнологическийЖурнал");
	
КонецПроцедуры // ОчиститьРегистрТехнологическийЖурнал()


///////////////////////////////////////////////////////////////////////////////
// ЗАВИСИМЫЕ ОТ ТИПА СУБД СВОЙСТВА

// Получить имя события СУБД для указанного типа СУБД
//
// Параметры:
//  ТипСУБД - Перечисление.ТипСУБД
//
// Возвращаемое значение:
//  Строка - строковок представление собятия СУБД
//
Функция ПолучитьИмяСобытияСУБД(ТипСУБД) Экспорт
	
	Если ТипСУБД = Перечисления.ТипыСУБД.MSSQLServer Тогда
		Возврат "DBMSSQL";
	ИначеЕсли ТипСУБД = Перечисления.ТипыСУБД.IBMDB2 Тогда
		Возврат "DB2";
	ИначеЕсли ТипСУБД = Перечисления.ТипыСУБД.PostgreSQL Тогда
		Возврат "DBPOSTGRS";
	ИначеЕсли ТипСУБД = Перечисления.ТипыСУБД.Oracle Тогда
		Возврат "DBORACLE";
	КонецЕсли;
	
КонецФункции // ПолучитьИмяСобытияСУБД()

// Получить имя события Контекст для указанного типа СУБД
//
// Параметры:
//  ТипСУБД - Перечисление.ТипСУБД
//
// Возвращаемое значение:
//  Строка - строковок представление собятия Контекст
//
Функция ПолучитьИмяСобытияКонтекст(ТипСУБД) Экспорт
	
	Возврат "Context";
	
КонецФункции // ПолучитьИмяСобытияКонтекст()

// Получить имя события Sdbl для указанного типа СУБД
//
// Параметры:
//  ТипСУБД - Перечисление.ТипСУБД
//
// Возвращаемое значение:
//  Строка - строковок представление собятия Контекст
//
Функция ПолучитьИмяСобытияSdbl(ТипСУБД) Экспорт
	
	Возврат "Sdbl";
	
КонецФункции // ПолучитьИмяСобытияSdbl()

// Получить текст запроса начала транзакции для указанного типа СУБД
//
// Параметры:
//  ТипСУБД - Перечисление.ТипСУБД
//
// Возвращаемое значение:
//  Строка - текст запроса начала транзакции
//
Функция ПолучитьЗапросНачалаТранзакции(ТипСУБД) Экспорт
	
	Если ТипСУБД = Перечисления.ТипыСУБД.MSSQLServer Тогда
		Возврат "BEGIN TRANSACTION";
	ИначеЕсли ТипСУБД = Перечисления.ТипыСУБД.IBMDB2 Тогда
		Возврат "BEGIN TRANSACTION";
	ИначеЕсли ТипСУБД = Перечисления.ТипыСУБД.PostgreSQL Тогда
		Возврат "";
	ИначеЕсли ТипСУБД = Перечисления.ТипыСУБД.Oracle Тогда
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьЗапросНачалаТранзакции()

// Получить функцию начала транзакции
//
// Возвращаемое значение:
//  Строка - имя функции
//
Функция ПолучитьФункциюНачалаТранзакции() Экспорт
	
	Возврат "beginTransaction";
	
КонецФункции // ПолучитьЗапросНачалаТранзакции()


///////////////////////////////////////////////////////////////////////////////
// КОНФИГУРАЦИЯ

// Создать шаблон конфигурации технологического журнала
//
// Возвращаемое значение:
//  ДокументDOM - конфигурация технологического журнала
//
Функция СоздатьКонфигурациюТехнологическогоЖурнала() Экспорт
	
	Конфигурация = Новый ДокументDOM("http://v8.1c.ru/v8/tech-log", "config");
	Конфигурация.ЭлементДокумента.Префикс = "ns";
	
	Возврат Конфигурация;
	
КонецФункции // СоздатьКонфигурациюТехнологическогоЖурнала()

// Добавить раздел для настройки журнала
//
// Параметры:
//  Конфигурация - ДокументDOM, настройка технологического журанала
//
Функция ДобавитьРазделЖурнала(Конфигурация, Размещение, ДлительностьХранения) Экспорт
	
	Журнал = Конфигурация.СоздатьЭлемент("ns:log");
	
	Если Не ПустаяСтрока(Размещение) Тогда
		Журнал.УстановитьАтрибут("location", Размещение);
	КонецЕсли;
	
	Журнал.УстановитьАтрибут("history", Строка(ДлительностьХранения));
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(Журнал);
	
	Возврат Журнал;
	
КонецФункции // ДобавитьРазделЖурнала()

// Добавить раздел для настройки планов запросов
//
// Параметры:
//  Конфигурация - ДокументDOM, настройка технологического журанала
//
Функция ДобавитьРазделПланов(Конфигурация)
	
	План = Конфигурация.СоздатьЭлемент("ns:plansql");
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(План);
	
	Возврат План;
	
КонецФункции // ДобавитьРазделЖурнала()

// Добавить раздел для настройки блокировок СУБД.
// Используется для платформы 8.3.8 и старше, иначе игнорируется.
//
// Параметры:
//  Конфигурация - ДокументDOM, настройка технологического журанала
//
Процедура ДобавитьРазделБлокировок(Конфигурация)
	
	ЭлементБлокировки = Конфигурация.СоздатьЭлемент("ns:dbmslocks");
	Конфигурация.ЭлементДокумента.ДобавитьДочерний(ЭлементБлокировки);
	
КонецПроцедуры

// Добавить событие в журнал
//
// Параметры:
//  Родитель - ЭлементDOM, раздел журнала или свойство
//
// Возвращаемое значение:
//  ЭлементDOM - событие
//
Функция ДобавитьСобытие(Родитель) Экспорт
	
	Если Не (Родитель.ИмяУзла = "ns:log" Или Родитель.ИмяУзла = "ns:property") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Конфигурация = Родитель.ДокументВладелец;
	Событие = Конфигурация.СоздатьЭлемент("ns:event");
	Родитель.ДобавитьДочерний(Событие);
	
	Возврат Событие;
	
КонецФункции // ДобавитьСобытие()

// Добавить свойство в журнал
//
// Параметры:
//  Журнал - ЭлементDOM, место для размещения свойства
//  Имя - Строка, имя свойства
//
// Возвращаемое значение:
//  ЭлементDOM - свойство
//
Функция ДобавитьСвойство(Журнал, Имя) Экспорт
	
	Конфигурация = Журнал.ДокументВладелец;
	Свойство = Конфигурация.СоздатьЭлемент("ns:property");
	Свойство.УстановитьАтрибут("name", Имя);
	Журнал.ДобавитьДочерний(Свойство);
	
	Возврат Свойство;
	
КонецФункции // ДобавитьСвойство()

// Добавить условие фильтрации события
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Тип - Строка, тип условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловие(Событие, Тип, Свойство, Значение) Экспорт
	
	Конфигурация = Событие.ДокументВладелец;
	Условие = Конфигурация.СоздатьЭлемент("ns:"+Тип);
	Условие.УстановитьАтрибут("property", Свойство);
	Условие.УстановитьАтрибут("value", Значение);
	Событие.ДобавитьДочерний(Условие);
	
КонецПроцедуры // ДобавитьУсловие()

// Добавить условие равенства
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеРавно(Событие, Свойство, Значение) Экспорт
	
	ДобавитьУсловие(Событие, "eq", Свойство, Значение);
	
КонецПроцедуры // ДобавитьУсловиеРавно()

// Добавить условие не равенства
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеНеРавно(Событие, Свойство, Значение) Экспорт
	
	ДобавитьУсловие(Событие, "ne", Свойство, Значение);
	
КонецПроцедуры // ДобавитьУсловиеНеРавно()

// Добавить условие больше
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеБольше(Событие, Свойство, Значение) Экспорт
	
	ДобавитьУсловие(Событие, "gt", Свойство, Значение);
	
КонецПроцедуры // ДобавитьУсловиеБольше()

// Добавить условие больше или равно
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеБольшеИлиРавно(Событие, Свойство, Значение) Экспорт
	
	ДобавитьУсловие(Событие, "ge", Свойство, Значение);
	
КонецПроцедуры // ДобавитьУсловиеБольшеИлиРавно()

// Добавить условие меньше
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеМеньше(Событие, Свойство, Значение) Экспорт
	
	ДобавитьУсловие(Событие, "lt", Свойство, Значение);
	
КонецПроцедуры // ДобавитьУсловиеМеньше()

// Добавить условие меньше или равно
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеМеньшеИлиРавно(Событие, Свойство, Значение) Экспорт
	
	ДобавитьУсловие(Событие, "le", Свойство, Значение);
	
КонецПроцедуры // ДобавитьУсловиеМеньшеИлиРавно()

// Добавить условие меньше или равно
//
// Параметры:
//  Событие - ЭлементDOM, событие для которого добавляются условия
//  Свойство - Строка, по которому производится фильтрация
//  Значение - Строка, значение свойства по которому производится фильтрация
//
Процедура ДобавитьУсловиеПодобно(Событие, Свойство, Значение) Экспорт
	
	ДобавитьУсловие(Событие, "like", Свойство, Значение);
	
КонецПроцедуры // ДобавитьУсловиеПодобно()
