#Область ОписаниеПеременных

// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
Перем ПараметрыПриложения Экспорт;

Перем глКонтекст Экспорт;
Перем глСловарь;
Перем глТаблицаСовместимостиБлокировок;
Перем глФормаМонитора;
Перем глФормаМонитораАнализа;
Перем глИменаМетаданных Экспорт;
Перем глПеременные;

Перем гкИнтервалОбновленияПодключенийРП;
Перем гкНеУдалятьСлужебныеДанные;
Перем гкРежимОтладки Экспорт;
Перем гкРежимРаботы;
Перем гкПоказыватьОтладочныеСообщения Экспорт;
Перем глКоманды Экспорт;
Перем глПоказатели Экспорт;
Перем глЖурнал Экспорт;
Перем глКонстанты Экспорт;

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// СТАНДАРТНЫЕ ОБРАБОТЧИКИ СОБЫТИЙ

// Инициализация системы перед началом работы
//
Процедура ПередНачаломРаботыСистемы(Отказ)
	
	СлужебныйКлиент.ПередНачаломРаботыСистемы();
	
КонецПроцедуры

// Инициализация системы при начале работы
//
Процедура ПриНачалеРаботыСистемы()
	
	Попытка
		ВерсияПлатформы = ОбщегоНазначенияКлиентСервер.ВерсияПлатформы();
		
		Если ВерсияПлатформы < 0008000300102252 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПриНачалеРаботыСистемыЗавершение", СлужебныйКлиент);
			ПоказатьПредупреждение(ОписаниеОповещения, "Для работы ЦУП необходима версия платформы не ниже 8.3.10.2299");
		Иначе
			СлужебныйКлиент.ПриНачалеРаботыСистемы();
		КонецЕсли;
		
	Исключение
		ОтладкаКлиентСервер.Ошибка(ИнформацияОбОшибке());
		ЗавершитьРаботуСистемы(Ложь);
	КонецПопытки;
	
КонецПроцедуры // ПриНачалеРаботыСистемы()

// Перехват завершения работы системы для корректного завершения текущих
// операций
//
Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	СлужебныйКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ

// Обработчик выполенения сценария, который каждую секунду выполняет такт
// сценария
//
Процедура ПриВыполненииСценария() Экспорт
	
	ВыполнениеСценарияКлиент.Приостановить();
	
	Попытка
		Результат = ВыполнениеСценарияКлиент.ВыполнитьТакт(глКонтекст);
		
	Исключение
		ОтладкаКлиентСервер.Ошибка(ИнформацияОбОшибке(), Истина);
		КомандыКлиент.ВыполнитьКоманду(ПредопределенноеЗначение("Справочник.Команды.Стоп"), Истина);
		КомандыКлиент.ВыполнитьКоманду(
			ПредопределенноеЗначение("Справочник.Команды.ВыполнитьСценарий"),
			ПредопределенноеЗначение("Справочник.Сценарии.Базовый"));
	КонецПопытки;
	
	Если Результат <> Неопределено Тогда
		ВыполнениеСценарияКлиент.Возобновить();
	КонецЕсли;
	
КонецПроцедуры // ПриВыполненииСценария()

// Обработчик обработки замеров
//
Процедура ПриОбработкеЗамеров() Экспорт
	
	ВызватьИсключение "1. Выпилить этот код по стеку
					  |2. Перетащить код на сервер в фоновое задание
					  |3. Очистить код функции Задания.ОбработкаЗамеров от клиентского кода";
	
КонецПроцедуры // ПриОбработкеЗамеров()

// Продолжает запуск в режиме интерактивного взаимодействия с пользователем.
Процедура ОбработчикОжиданияПриНачалеРаботыСистемы() Экспорт
	
	СлужебныйКлиент.ПриНачалеРаботыСистемы(, Ложь);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ДОСТУП К ПЕРЕМЕННЫМ

// Признак не удаления служебных данных после завершения анализа
//
// Возвращаемое значение:
//  Булево - Истина, не удалять служебные данные
//
Функция глИнтервалОбновленияПодключенийРП() Экспорт
	
	Если гкИнтервалОбновленияПодключенийРП = Неопределено Тогда
		гкИнтервалОбновленияПодключенийРП = ПараметрыПриложения.ИнтервалОбновленияПодключенийРП;
	КонецЕсли;
	
	Возврат гкИнтервалОбновленияПодключенийРП;
	
КонецФункции // ИнтервалПереподключенияРП()

// Признак не удаления служебных данных после завершения анализа
//
// Возвращаемое значение:
//  Булево - Истина, не удалять служебные данные
//
Функция НеУдалятьСлужебныеДанные() Экспорт
	
	Если гкНеУдалятьСлужебныеДанные = Неопределено Тогда
		гкНеУдалятьСлужебныеДанные = 
			ПараметрыПриложения["НеУдалятьСлужебныеДанные"];
	КонецЕсли;
	
	Возврат РежимОтладкиЦУП() И гкНеУдалятьСлужебныеДанные;
	
КонецФункции // НеУдалятьСлужебныеДанные()

// Получить признак обработки замеров
//
// Возвращаемое значение:
//  Булево - Истина, если замеры обрабатываются, Ложь, если не обрабатываются
//
Функция ОбрабатыватьЗамеры() Экспорт
	
	Возврат Задание.ЗаданиеАнализаЗамеровАктивно();
	
КонецФункции // ОбрабатыватьЗамеры()

// Получить режим показа отладочных сообщений в окне "Служебные сообщения"
//
// Возвращаемое значение:
//  Булево - Истина, показывать отладочные сообщения
//
Функция глПоказыватьОтладочныеСообщения() Экспорт
	
	Если гкПоказыватьОтладочныеСообщения = Неопределено Тогда
		гкПоказыватьОтладочныеСообщения = 
			ПараметрыПриложения["ПоказыватьОтладочныеСообщения"];
	КонецЕсли;
	
	Возврат РежимОтладкиЦУП() И гкПоказыватьОтладочныеСообщения;
	
КонецФункции // ПоказыватьОтладочныеСообщения()

// Получить режим отладки
//
// Возвращаемое значение:
//  Булево - Истина, режим отладки активен
//
Функция РежимОтладкиЦУП() Экспорт
	
	Если гкРежимОтладки = Неопределено Тогда
		гкРежимОтладки = ПараметрыПриложения["РежимОтладки"];
	КонецЕсли;
	
	Возврат гкРежимОтладки;
	
КонецФункции // РежимОтладки()

// Получить словарь сообщений
// При первой попытке получения, словарь инициализируется и кешируется
//
// Возвращаемое значение:
//  Соответствие - ключ содержит идентификатор, а значение содержит фразу
//
Функция Словарь() Экспорт
	
	Если глСловарь = Неопределено Тогда
		глСловарь = ПараметрыПриложения["Словарь"];
	КонецЕсли;
	
	Возврат глСловарь;
	
КонецФункции // Словарь()

// Получить форму монитора (главная форма ЦУП)
//
// Возвращаемое значение:
//  ОбщаяФорма - Монитор
//
Функция ФормаМонитора(Открыть = Ложь) Экспорт
	
	Если глФормаМонитора = Неопределено Тогда
		Для Каждого ТекОкно Из ПолучитьОкна() Цикл
			Для Каждого ТекФорма Из ТекОкно.Содержимое Цикл
				Если ТекФорма.ИмяФормы = "ОбщаяФорма.Монитор" Тогда
					глФормаМонитора = ТекФорма;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если глФормаМонитора = Неопределено Тогда
			глФормаМонитора = ПолучитьФорму("ОбщаяФорма.Монитор");
		КонецЕсли;
	КонецЕсли;
	
	Если Не глФормаМонитора.Открыта() Тогда
		Если Открыть Тогда
			глФормаМонитора.Открыть();
			глФормаМонитора.ПереключитьВРежимОжидания();
		КонецЕсли;
	Иначе
		глФормаМонитора.Активизировать();
	КонецЕсли;
	
	Возврат глФормаМонитора;
	
КонецФункции // ФормаМонитора()

// Установить форму монитора (главная форма ЦУП)
//
//
Процедура УстановитьФормуМонитора(ФормаМонитора) Экспорт
	
	Если глФормаМонитора <> Неопределено И глФормаМонитора <> ФормаМонитора Тогда
		Если глФормаМонитора.Открыта() Тогда
			глФормаМонитора.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	глФормаМонитора = ФормаМонитора;
	
КонецПроцедуры

// Получить форму монитора анализа
//
// Возвращаемое значение:
//  ОбщаяФорма - Монитор
//
Функция ФормаМонитораАнализа() Экспорт
	
	Если глФормаМонитораАнализа = Неопределено Тогда
		Для Каждого ТекОкно Из ПолучитьОкна() Цикл
			Для Каждого ТекФорма Из ТекОкно.Содержимое Цикл
				Если ТекФорма.ИмяФормы = "ОбщаяФорма.МониторАнализа" Тогда
					глФормаМонитораАнализа = ТекФорма;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если глФормаМонитораАнализа = Неопределено Тогда
			глФормаМонитораАнализа = ПолучитьФорму("ОбщаяФорма.МониторАнализа");
		КонецЕсли;
	КонецЕсли;
	
	Если Не глФормаМонитораАнализа.Открыта() Тогда
		глФормаМонитораАнализа.Открыть();
	Иначе
		глФормаМонитораАнализа.Активизировать();
	КонецЕсли;
	
	Возврат глФормаМонитораАнализа;
	
КонецФункции // ФормаМонитораАнализа()

// Установить форму монитора анализа
//
//
Процедура УстановитьФормуМонитораАнализа(ФормаМонитора) Экспорт
	
	Если глФормаМонитораАнализа <> Неопределено И глФормаМонитораАнализа <> ФормаМонитора Тогда
		Если глФормаМонитораАнализа.Открыта() Тогда
			глФормаМонитораАнализа.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	глФормаМонитораАнализа = ФормаМонитора;
	
КонецПроцедуры

// Обновить параметр приложения ПоказыватьПредупреждения в соответствии со значением
// константы ПоказыватьПредупреждения
//
Процедура ОбновитьПоказыватьПредупреждения() Экспорт
	
	ПараметрыПриложения["ПоказыватьПредупреждения"] = ОбщегоНазначения.ПоказыватьПредупреждения();
	
КонецПроцедуры // ОбновитьПоказыватьПредупреждения()

// Обновить параметр приложения ЗапрашиватьПодтверждениеПриЗавершенииПрограммы
// в соответствии со значением константы ПоказыватьПредупреждения
//
Процедура ОбновитьЗапрашиватьПодтверждениеПриЗавершении() Экспорт
	
	СлужебныйКлиент.УстановитьПараметрКлиента(
		"ЗапрашиватьПодтверждениеПриЗавершенииПрограммы",
		ОбщегоНазначения.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы()
	);
	
КонецПроцедуры // ОбновитьПоказыватьПредупреждения()

// Обновить гкПоказыватьОтладочныеСообщения в соответствии со значением
// константы ПоказыватьОтладочныеСообщения
//
Процедура ОбновитьПоказыватьОтладочныеСообщения() Экспорт
	
	гкПоказыватьОтладочныеСообщения = Неопределено;
	
КонецПроцедуры // ОбновитьПоказыватьОтладочныеСообщения()

// Обновить гкНеУдалятьСлужебныеДанные в соответствии со значением
// константы ПоказыватьОтладочныеСообщения
//
Процедура ОбновитьНеУдалятьСлужебныеДанные() Экспорт
	
	гкНеУдалятьСлужебныеДанные = Неопределено;
	
КонецПроцедуры // ОбновитьНеУдалятьСлужебныеДанные()

// Обновить гкРежимОтладки в соответствии со значением константы РежимОтладки
//
Процедура ОбновитьРежимОтладки() Экспорт
	
	гкРежимОтладки = Неопределено;
	
КонецПроцедуры // ОбновитьРежимОтладки()

// Обновить гкРежимОтладки в соответствии со значением константы РежимОтладки
//
Процедура ОбновитьИнтервалОбновленияПодключенийРП() Экспорт
	
	гкИнтервалОбновленияПодключенийРП = Неопределено;
	
КонецПроцедуры // ОбновитьИнтервалОбновленияПодключенийРП()

// Установить список обрабатываемых замеров
//
Процедура НеОбрабатыватьВсеЗамеры() Экспорт
	
	ПараметрыМонитора = ЗаданиеКлиент.ПолучитьПараметрыМонитораАнализа();
	Задание.ВключитьОбработкуЗамеров(ПараметрыМонитора, Истина);
	
КонецПроцедуры // НеОбрабатыватьВсеЗамеры()

// Установить признак того, чтобы обрабатывались все замеры
//
Процедура ОбрабатыватьВсеЗамеры() Экспорт
	
	Задание.ВключитьОбработкуЗамеров(Неопределено, Ложь);
	
КонецПроцедуры // ОбрабатыватьВсеЗамеры()

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполнить обновление данных информационной базы при смене версии
//
Процедура глВыполнитьОбновление() Экспорт
	
	Служебный.ОбновитьНастройки();
	
КонецПроцедуры // глВыполнитьОбновление()


///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

// Создать новую глобальную переменную
//
// Возвращаемое значение:
//  ЭлементСпискаЗначений - новая переменная
//
Функция НоваяПеременная() Экспорт
	
	Если глПеременные = Неопределено Тогда
		глПеременные = Новый СписокЗначений;
	КонецЕсли;
	
	Возврат глПеременные.Добавить();
	
КонецФункции // НоваяПеременная()

// Удалить ранее созданную функцией НоваяПеременная() глобальную переменную
//
// Параметры:
//  Переменная - ЭлементСпискаЗначений
//
Процедура УдалитьПеременную(Переменная) Экспорт
	
	глПеременные.Удалить(Переменная);
	
КонецПроцедуры // УдалитьПеременную()

// Получить адрес ранее созданной глобальной переменной
//
// Параметры:
//  Переменная - ЭлементСпискаЗначений
//
// Возвращаемое значение:
//  Число - адрес переменной (индекс в списке)
//
Функция АдресПеременной(Переменная) Экспорт
	
	Возврат глПеременные.Индекс(Переменная);
	
КонецФункции // АдресПеременной()

// Получить переменную по ее адресу
//
// Параметры:
//  Адрес - Число, адрес переменной (индекс в списке)
//
// Возвращаемое значение:
//  ЭлементСпискаЗначений - переменная
//
Функция Переменная(Адрес) Экспорт
	
	Возврат глПеременные[Адрес];
	
КонецФункции // Переменная()



