
///////////////////////////////////////////////////////////////////////////////
// Инициализации параметров сеанса.

Процедура УстановкаПараметровСеанса(ИменаПараметровСеанса)
	
	// Параметры сеанса, инициализация которых требует обращения к одним и тем же данным
	// следует инициализировать сразу группой. Для того, чтобы избежать их повторной инициализации,
	// имена уже установленных параметров сеанса сохраняются в массиве УстановленныеПараметры.
	УстановленныеПараметры = Новый Массив;
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		
		ПараметрыСеанса.ПараметрыКлиентаНаСервере = Новый ФиксированноеСоответствие(Новый Соответствие);
		
		// Установка параметра сеанса подсистемы "Оценка производительности" при использовании отдельно от БСП.
		ОценкаПроизводительностиСлужебный.УстановкаПараметровСеанса("КомментарийЗамераВремени", Новый Массив);
		
		МакетСловаря = ПолучитьОбщийМакет(Метаданные.ОбщиеМакеты.Словарь);
		ТаблицаСловаря = СловарьКлиентСервер.Загрузить(МакетСловаря.ПолучитьТекст());
		ПараметрыСеанса.ТаблицаСловаря = Новый ХранилищеЗначения(ТаблицаСловаря);
		
		ПараметрыСеанса.ИдентификаторСеанса = Новый УникальныйИдентификатор;
		ИдентификаторЗаданияАнализаЗамеров = Задание.ПолучитьИдентификаторЗадания("АнализПоказателейПроизводительности");
		Если ИдентификаторЗаданияАнализаЗамеров <> Неопределено Тогда
			ПараметрыСеанса.ИдентификаторЗаданияАнализаЗамеров = ИдентификаторЗаданияАнализаЗамеров;
		Иначе
			ПараметрыСеанса.ИдентификаторЗаданияАнализаЗамеров = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Обработчики = Новый Соответствие;
	ИнтеграцияПодсистемБСП.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВыполнитьОбработчикиУстановкиПараметровСеанса(ИменаПараметровСеанса, Обработчики, УстановленныеПараметры)
	
	// Массив с ключами параметров сеанса
	// задаются начальным словом в имени параметра сеанса и символом "*".
	ПараметрыСеансаКлючи = Новый Массив;
	
	Для Каждого Запись Из Обработчики Цикл
		Если СтрНайти(Запись.Ключ, "*") > 0 Тогда
			КлючПараметра = СокрЛП(Запись.Ключ);
			ПараметрыСеансаКлючи.Добавить(Лев(КлючПараметра, СтрДлина(КлючПараметра)-1));
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ИменаПараметровСеанса Цикл
		Если УстановленныеПараметры.Найти(ИмяПараметра) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Обработчик = Обработчики.Получить(ИмяПараметра);
		Если Обработчик <> Неопределено Тогда
			ПараметрыОбработчика = Новый Массив();
			ПараметрыОбработчика.Добавить(ИмяПараметра);
			ПараметрыОбработчика.Добавить(УстановленныеПараметры);
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяКлючаПараметра Из ПараметрыСеансаКлючи Цикл
			Если СтрНачинаетсяС(ИмяПараметра, ИмяКлючаПараметра) Тогда
				Обработчик = Обработчики.Получить(ИмяКлючаПараметра + "*");
				ПараметрыОбработчика = Новый Массив();
				ПараметрыОбработчика.Добавить(ИмяПараметра);
				ПараметрыОбработчика.Добавить(УстановленныеПараметры);
				ОбщегоНазначения.ВыполнитьМетодКонфигурации(Обработчик, ПараметрыОбработчика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры