Перем мЭтоНовый; // Флаг, записан ли документ в базу данных.


// Процедура обработки события ПередЗаписью документа.
// Определяет записан ли документ в базу данных.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мЭтоНовый = ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Процедура обработки события ПриЗаписи документа.
// Записать движение в регистры.
//
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Счетчик = СчетчикОжиданий.ПолучитьОбъект();
	Счетчик.Количество = Счетчик.Количество + 1;
	Счетчик.Записать();
	
	Если Счетчик.Количество > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Получить ссылку на показатель производительности
	Показатель = Справочники.Показатели.АнализОжиданийНаБлокировках;
	Значение = ВремяОжидания/1000;
	
	ЖурналПоказателей.ЗаписатьЗначениеПоказателяАнализа(ЭтотОбъект, мЭтоНовый, Показатель, Значение);
	
КонецПроцедуры // ПриЗаписи()

// Процедура обработки события ПередУдалением документа.
// Удаляет движения документа.
//
Процедура ПередУдалением(Отказ)
	
	Если СчетчикОжиданий <> Справочники.СчетчикиОжиданий.ПустаяСсылка() Тогда
		Счетчик = СчетчикОжиданий.ПолучитьОбъект();
		
		Если Счетчик <> Неопределено Тогда
			Если Счетчик.Количество > 1 Тогда
				Счетчик.Количество = Счетчик.Количество - 1;
				Счетчик.Записать();
			Иначе
				Счетчик.Удалить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Получить ссылку на показатель производительности
	Показатель = Справочники.Показатели.АнализОжиданийНаБлокировках;
	Значение = ВремяОжидания/1000;
	
	ЖурналПоказателей.УдалитьЗначениеПоказателяАнализа(ЭтотОбъект, мЭтоНовый, Показатель, Значение);
	
КонецПроцедуры // ПередУдалением()
